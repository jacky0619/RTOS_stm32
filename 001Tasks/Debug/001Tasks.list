
001Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ee8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  08008078  08008078  00018078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008214  08008214  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08008214  08008214  00018214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800821c  0800821c  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800821c  0800821c  0001821c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008220  08008220  00018220  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08008224  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001a8f0  20000080  080082a4  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2001a970  080082a4  0002a970  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bf6e  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000374f  00000000  00000000  0003c01e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001550  00000000  00000000  0003f770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013e8  00000000  00000000  00040cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024211  00000000  00000000  000420a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001712f  00000000  00000000  000662b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d9ef6  00000000  00000000  0007d3e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001572de  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d90  00000000  00000000  00157334  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008060 	.word	0x08008060

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	08008060 	.word	0x08008060

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	2001a8b8 	.word	0x2001a8b8
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b96e 	b.w	8000604 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468c      	mov	ip, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	f040 8083 	bne.w	8000456 <__udivmoddi4+0x116>
 8000350:	428a      	cmp	r2, r1
 8000352:	4617      	mov	r7, r2
 8000354:	d947      	bls.n	80003e6 <__udivmoddi4+0xa6>
 8000356:	fab2 f282 	clz	r2, r2
 800035a:	b142      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035c:	f1c2 0020 	rsb	r0, r2, #32
 8000360:	fa24 f000 	lsr.w	r0, r4, r0
 8000364:	4091      	lsls	r1, r2
 8000366:	4097      	lsls	r7, r2
 8000368:	ea40 0c01 	orr.w	ip, r0, r1
 800036c:	4094      	lsls	r4, r2
 800036e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fbbc f6f8 	udiv	r6, ip, r8
 8000378:	fa1f fe87 	uxth.w	lr, r7
 800037c:	fb08 c116 	mls	r1, r8, r6, ip
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f10e 	mul.w	r1, r6, lr
 8000388:	4299      	cmp	r1, r3
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x60>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000392:	f080 8119 	bcs.w	80005c8 <__udivmoddi4+0x288>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 8116 	bls.w	80005c8 <__udivmoddi4+0x288>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003a8:	fb08 3310 	mls	r3, r8, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003b4:	45a6      	cmp	lr, r4
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x8c>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80003be:	f080 8105 	bcs.w	80005cc <__udivmoddi4+0x28c>
 80003c2:	45a6      	cmp	lr, r4
 80003c4:	f240 8102 	bls.w	80005cc <__udivmoddi4+0x28c>
 80003c8:	3802      	subs	r0, #2
 80003ca:	443c      	add	r4, r7
 80003cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d0:	eba4 040e 	sub.w	r4, r4, lr
 80003d4:	2600      	movs	r6, #0
 80003d6:	b11d      	cbz	r5, 80003e0 <__udivmoddi4+0xa0>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c5 4300 	strd	r4, r3, [r5]
 80003e0:	4631      	mov	r1, r6
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	b902      	cbnz	r2, 80003ea <__udivmoddi4+0xaa>
 80003e8:	deff      	udf	#255	; 0xff
 80003ea:	fab2 f282 	clz	r2, r2
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	d150      	bne.n	8000494 <__udivmoddi4+0x154>
 80003f2:	1bcb      	subs	r3, r1, r7
 80003f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f8:	fa1f f887 	uxth.w	r8, r7
 80003fc:	2601      	movs	r6, #1
 80003fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000402:	0c21      	lsrs	r1, r4, #16
 8000404:	fb0e 331c 	mls	r3, lr, ip, r3
 8000408:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800040c:	fb08 f30c 	mul.w	r3, r8, ip
 8000410:	428b      	cmp	r3, r1
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0xe4>
 8000414:	1879      	adds	r1, r7, r1
 8000416:	f10c 30ff 	add.w	r0, ip, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0xe2>
 800041c:	428b      	cmp	r3, r1
 800041e:	f200 80e9 	bhi.w	80005f4 <__udivmoddi4+0x2b4>
 8000422:	4684      	mov	ip, r0
 8000424:	1ac9      	subs	r1, r1, r3
 8000426:	b2a3      	uxth	r3, r4
 8000428:	fbb1 f0fe 	udiv	r0, r1, lr
 800042c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000430:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000434:	fb08 f800 	mul.w	r8, r8, r0
 8000438:	45a0      	cmp	r8, r4
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x10c>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x10a>
 8000444:	45a0      	cmp	r8, r4
 8000446:	f200 80d9 	bhi.w	80005fc <__udivmoddi4+0x2bc>
 800044a:	4618      	mov	r0, r3
 800044c:	eba4 0408 	sub.w	r4, r4, r8
 8000450:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000454:	e7bf      	b.n	80003d6 <__udivmoddi4+0x96>
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0x12e>
 800045a:	2d00      	cmp	r5, #0
 800045c:	f000 80b1 	beq.w	80005c2 <__udivmoddi4+0x282>
 8000460:	2600      	movs	r6, #0
 8000462:	e9c5 0100 	strd	r0, r1, [r5]
 8000466:	4630      	mov	r0, r6
 8000468:	4631      	mov	r1, r6
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f683 	clz	r6, r3
 8000472:	2e00      	cmp	r6, #0
 8000474:	d14a      	bne.n	800050c <__udivmoddi4+0x1cc>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0x140>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80b8 	bhi.w	80005f0 <__udivmoddi4+0x2b0>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0103 	sbc.w	r1, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	468c      	mov	ip, r1
 800048a:	2d00      	cmp	r5, #0
 800048c:	d0a8      	beq.n	80003e0 <__udivmoddi4+0xa0>
 800048e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000492:	e7a5      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000494:	f1c2 0320 	rsb	r3, r2, #32
 8000498:	fa20 f603 	lsr.w	r6, r0, r3
 800049c:	4097      	lsls	r7, r2
 800049e:	fa01 f002 	lsl.w	r0, r1, r2
 80004a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a6:	40d9      	lsrs	r1, r3
 80004a8:	4330      	orrs	r0, r6
 80004aa:	0c03      	lsrs	r3, r0, #16
 80004ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80004b0:	fa1f f887 	uxth.w	r8, r7
 80004b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb06 f108 	mul.w	r1, r6, r8
 80004c0:	4299      	cmp	r1, r3
 80004c2:	fa04 f402 	lsl.w	r4, r4, r2
 80004c6:	d909      	bls.n	80004dc <__udivmoddi4+0x19c>
 80004c8:	18fb      	adds	r3, r7, r3
 80004ca:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ce:	f080 808d 	bcs.w	80005ec <__udivmoddi4+0x2ac>
 80004d2:	4299      	cmp	r1, r3
 80004d4:	f240 808a 	bls.w	80005ec <__udivmoddi4+0x2ac>
 80004d8:	3e02      	subs	r6, #2
 80004da:	443b      	add	r3, r7
 80004dc:	1a5b      	subs	r3, r3, r1
 80004de:	b281      	uxth	r1, r0
 80004e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ec:	fb00 f308 	mul.w	r3, r0, r8
 80004f0:	428b      	cmp	r3, r1
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x1c4>
 80004f4:	1879      	adds	r1, r7, r1
 80004f6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004fa:	d273      	bcs.n	80005e4 <__udivmoddi4+0x2a4>
 80004fc:	428b      	cmp	r3, r1
 80004fe:	d971      	bls.n	80005e4 <__udivmoddi4+0x2a4>
 8000500:	3802      	subs	r0, #2
 8000502:	4439      	add	r1, r7
 8000504:	1acb      	subs	r3, r1, r3
 8000506:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800050a:	e778      	b.n	80003fe <__udivmoddi4+0xbe>
 800050c:	f1c6 0c20 	rsb	ip, r6, #32
 8000510:	fa03 f406 	lsl.w	r4, r3, r6
 8000514:	fa22 f30c 	lsr.w	r3, r2, ip
 8000518:	431c      	orrs	r4, r3
 800051a:	fa20 f70c 	lsr.w	r7, r0, ip
 800051e:	fa01 f306 	lsl.w	r3, r1, r6
 8000522:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000526:	fa21 f10c 	lsr.w	r1, r1, ip
 800052a:	431f      	orrs	r7, r3
 800052c:	0c3b      	lsrs	r3, r7, #16
 800052e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000532:	fa1f f884 	uxth.w	r8, r4
 8000536:	fb0e 1119 	mls	r1, lr, r9, r1
 800053a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800053e:	fb09 fa08 	mul.w	sl, r9, r8
 8000542:	458a      	cmp	sl, r1
 8000544:	fa02 f206 	lsl.w	r2, r2, r6
 8000548:	fa00 f306 	lsl.w	r3, r0, r6
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x220>
 800054e:	1861      	adds	r1, r4, r1
 8000550:	f109 30ff 	add.w	r0, r9, #4294967295
 8000554:	d248      	bcs.n	80005e8 <__udivmoddi4+0x2a8>
 8000556:	458a      	cmp	sl, r1
 8000558:	d946      	bls.n	80005e8 <__udivmoddi4+0x2a8>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4421      	add	r1, r4
 8000560:	eba1 010a 	sub.w	r1, r1, sl
 8000564:	b2bf      	uxth	r7, r7
 8000566:	fbb1 f0fe 	udiv	r0, r1, lr
 800056a:	fb0e 1110 	mls	r1, lr, r0, r1
 800056e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000572:	fb00 f808 	mul.w	r8, r0, r8
 8000576:	45b8      	cmp	r8, r7
 8000578:	d907      	bls.n	800058a <__udivmoddi4+0x24a>
 800057a:	19e7      	adds	r7, r4, r7
 800057c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000580:	d22e      	bcs.n	80005e0 <__udivmoddi4+0x2a0>
 8000582:	45b8      	cmp	r8, r7
 8000584:	d92c      	bls.n	80005e0 <__udivmoddi4+0x2a0>
 8000586:	3802      	subs	r0, #2
 8000588:	4427      	add	r7, r4
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	eba7 0708 	sub.w	r7, r7, r8
 8000592:	fba0 8902 	umull	r8, r9, r0, r2
 8000596:	454f      	cmp	r7, r9
 8000598:	46c6      	mov	lr, r8
 800059a:	4649      	mov	r1, r9
 800059c:	d31a      	bcc.n	80005d4 <__udivmoddi4+0x294>
 800059e:	d017      	beq.n	80005d0 <__udivmoddi4+0x290>
 80005a0:	b15d      	cbz	r5, 80005ba <__udivmoddi4+0x27a>
 80005a2:	ebb3 020e 	subs.w	r2, r3, lr
 80005a6:	eb67 0701 	sbc.w	r7, r7, r1
 80005aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005ae:	40f2      	lsrs	r2, r6
 80005b0:	ea4c 0202 	orr.w	r2, ip, r2
 80005b4:	40f7      	lsrs	r7, r6
 80005b6:	e9c5 2700 	strd	r2, r7, [r5]
 80005ba:	2600      	movs	r6, #0
 80005bc:	4631      	mov	r1, r6
 80005be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c2:	462e      	mov	r6, r5
 80005c4:	4628      	mov	r0, r5
 80005c6:	e70b      	b.n	80003e0 <__udivmoddi4+0xa0>
 80005c8:	4606      	mov	r6, r0
 80005ca:	e6e9      	b.n	80003a0 <__udivmoddi4+0x60>
 80005cc:	4618      	mov	r0, r3
 80005ce:	e6fd      	b.n	80003cc <__udivmoddi4+0x8c>
 80005d0:	4543      	cmp	r3, r8
 80005d2:	d2e5      	bcs.n	80005a0 <__udivmoddi4+0x260>
 80005d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005d8:	eb69 0104 	sbc.w	r1, r9, r4
 80005dc:	3801      	subs	r0, #1
 80005de:	e7df      	b.n	80005a0 <__udivmoddi4+0x260>
 80005e0:	4608      	mov	r0, r1
 80005e2:	e7d2      	b.n	800058a <__udivmoddi4+0x24a>
 80005e4:	4660      	mov	r0, ip
 80005e6:	e78d      	b.n	8000504 <__udivmoddi4+0x1c4>
 80005e8:	4681      	mov	r9, r0
 80005ea:	e7b9      	b.n	8000560 <__udivmoddi4+0x220>
 80005ec:	4666      	mov	r6, ip
 80005ee:	e775      	b.n	80004dc <__udivmoddi4+0x19c>
 80005f0:	4630      	mov	r0, r6
 80005f2:	e74a      	b.n	800048a <__udivmoddi4+0x14a>
 80005f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f8:	4439      	add	r1, r7
 80005fa:	e713      	b.n	8000424 <__udivmoddi4+0xe4>
 80005fc:	3802      	subs	r0, #2
 80005fe:	443c      	add	r4, r7
 8000600:	e724      	b.n	800044c <__udivmoddi4+0x10c>
 8000602:	bf00      	nop

08000604 <__aeabi_idiv0>:
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop

08000608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b088      	sub	sp, #32
 800060c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060e:	f000 fbcf 	bl	8000db0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000612:	f000 f855 	bl	80006c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000616:	f000 f8e7 	bl	80007e8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800061a:	f000 f8bb 	bl	8000794 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */


  //Enable the CYCCNT counter.
  DWT_CTRL |= ( 1 << 0);
 800061e:	4b20      	ldr	r3, [pc, #128]	; (80006a0 <main+0x98>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4a1f      	ldr	r2, [pc, #124]	; (80006a0 <main+0x98>)
 8000624:	f043 0301 	orr.w	r3, r3, #1
 8000628:	6013      	str	r3, [r2, #0]

  SEGGER_UART_init(250000);//500000
 800062a:	481e      	ldr	r0, [pc, #120]	; (80006a4 <main+0x9c>)
 800062c:	f004 fe30 	bl	8005290 <SEGGER_UART_init>

  SEGGER_SYSVIEW_Conf();
 8000630:	f004 fc60 	bl	8004ef4 <SEGGER_SYSVIEW_Conf>

 // SEGGER_SYSVIEW_Start();

  status = xTaskCreate(task1_handler, "Task-1", 200, "Hello world from Task-1", 2, &task1_handle);
 8000634:	f107 0308 	add.w	r3, r7, #8
 8000638:	9301      	str	r3, [sp, #4]
 800063a:	2302      	movs	r3, #2
 800063c:	9300      	str	r3, [sp, #0]
 800063e:	4b1a      	ldr	r3, [pc, #104]	; (80006a8 <main+0xa0>)
 8000640:	22c8      	movs	r2, #200	; 0xc8
 8000642:	491a      	ldr	r1, [pc, #104]	; (80006ac <main+0xa4>)
 8000644:	481a      	ldr	r0, [pc, #104]	; (80006b0 <main+0xa8>)
 8000646:	f002 fdd7 	bl	80031f8 <xTaskCreate>
 800064a:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 800064c:	697b      	ldr	r3, [r7, #20]
 800064e:	2b01      	cmp	r3, #1
 8000650:	d00a      	beq.n	8000668 <main+0x60>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000656:	f383 8811 	msr	BASEPRI, r3
 800065a:	f3bf 8f6f 	isb	sy
 800065e:	f3bf 8f4f 	dsb	sy
 8000662:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000664:	bf00      	nop
 8000666:	e7fe      	b.n	8000666 <main+0x5e>

  status = xTaskCreate(task2_handler, "Task-2", 200, "Hello world from Task-2", 2, &task2_handle);
 8000668:	1d3b      	adds	r3, r7, #4
 800066a:	9301      	str	r3, [sp, #4]
 800066c:	2302      	movs	r3, #2
 800066e:	9300      	str	r3, [sp, #0]
 8000670:	4b10      	ldr	r3, [pc, #64]	; (80006b4 <main+0xac>)
 8000672:	22c8      	movs	r2, #200	; 0xc8
 8000674:	4910      	ldr	r1, [pc, #64]	; (80006b8 <main+0xb0>)
 8000676:	4811      	ldr	r0, [pc, #68]	; (80006bc <main+0xb4>)
 8000678:	f002 fdbe 	bl	80031f8 <xTaskCreate>
 800067c:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 800067e:	697b      	ldr	r3, [r7, #20]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d00a      	beq.n	800069a <main+0x92>
        __asm volatile
 8000684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000688:	f383 8811 	msr	BASEPRI, r3
 800068c:	f3bf 8f6f 	isb	sy
 8000690:	f3bf 8f4f 	dsb	sy
 8000694:	60fb      	str	r3, [r7, #12]
    }
 8000696:	bf00      	nop
 8000698:	e7fe      	b.n	8000698 <main+0x90>

  //start the freeRTOS scheduler
  vTaskStartScheduler();
 800069a:	f002 ff03 	bl	80034a4 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800069e:	e7fe      	b.n	800069e <main+0x96>
 80006a0:	e0001000 	.word	0xe0001000
 80006a4:	0003d090 	.word	0x0003d090
 80006a8:	08008078 	.word	0x08008078
 80006ac:	08008090 	.word	0x08008090
 80006b0:	08000aa9 	.word	0x08000aa9
 80006b4:	08008098 	.word	0x08008098
 80006b8:	080080b0 	.word	0x080080b0
 80006bc:	08000ae5 	.word	0x08000ae5

080006c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b094      	sub	sp, #80	; 0x50
 80006c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c6:	f107 0320 	add.w	r3, r7, #32
 80006ca:	2230      	movs	r2, #48	; 0x30
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f007 f87c 	bl	80077cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d4:	f107 030c 	add.w	r3, r7, #12
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
 80006e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e4:	2300      	movs	r3, #0
 80006e6:	60bb      	str	r3, [r7, #8]
 80006e8:	4b28      	ldr	r3, [pc, #160]	; (800078c <SystemClock_Config+0xcc>)
 80006ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ec:	4a27      	ldr	r2, [pc, #156]	; (800078c <SystemClock_Config+0xcc>)
 80006ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f2:	6413      	str	r3, [r2, #64]	; 0x40
 80006f4:	4b25      	ldr	r3, [pc, #148]	; (800078c <SystemClock_Config+0xcc>)
 80006f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006fc:	60bb      	str	r3, [r7, #8]
 80006fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000700:	2300      	movs	r3, #0
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	4b22      	ldr	r3, [pc, #136]	; (8000790 <SystemClock_Config+0xd0>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a21      	ldr	r2, [pc, #132]	; (8000790 <SystemClock_Config+0xd0>)
 800070a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800070e:	6013      	str	r3, [r2, #0]
 8000710:	4b1f      	ldr	r3, [pc, #124]	; (8000790 <SystemClock_Config+0xd0>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000718:	607b      	str	r3, [r7, #4]
 800071a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800071c:	2302      	movs	r3, #2
 800071e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000720:	2301      	movs	r3, #1
 8000722:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000724:	2310      	movs	r3, #16
 8000726:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000728:	2302      	movs	r3, #2
 800072a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800072c:	2300      	movs	r3, #0
 800072e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000730:	2308      	movs	r3, #8
 8000732:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000734:	23a8      	movs	r3, #168	; 0xa8
 8000736:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000738:	2302      	movs	r3, #2
 800073a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800073c:	2307      	movs	r3, #7
 800073e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000740:	f107 0320 	add.w	r3, r7, #32
 8000744:	4618      	mov	r0, r3
 8000746:	f000 fe0d 	bl	8001364 <HAL_RCC_OscConfig>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000750:	f000 f9f8 	bl	8000b44 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000754:	230f      	movs	r3, #15
 8000756:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000758:	2302      	movs	r3, #2
 800075a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800075c:	2300      	movs	r3, #0
 800075e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000760:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000764:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000766:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800076a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800076c:	f107 030c 	add.w	r3, r7, #12
 8000770:	2105      	movs	r1, #5
 8000772:	4618      	mov	r0, r3
 8000774:	f001 f86e 	bl	8001854 <HAL_RCC_ClockConfig>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800077e:	f000 f9e1 	bl	8000b44 <Error_Handler>
  }
}
 8000782:	bf00      	nop
 8000784:	3750      	adds	r7, #80	; 0x50
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40023800 	.word	0x40023800
 8000790:	40007000 	.word	0x40007000

08000794 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000798:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <MX_USART2_UART_Init+0x4c>)
 800079a:	4a12      	ldr	r2, [pc, #72]	; (80007e4 <MX_USART2_UART_Init+0x50>)
 800079c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800079e:	4b10      	ldr	r3, [pc, #64]	; (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007a6:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007ac:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007b2:	4b0b      	ldr	r3, [pc, #44]	; (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007b8:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007ba:	220c      	movs	r2, #12
 80007bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007be:	4b08      	ldr	r3, [pc, #32]	; (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c4:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ca:	4805      	ldr	r0, [pc, #20]	; (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007cc:	f001 fd1e 	bl	800220c <HAL_UART_Init>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007d6:	f000 f9b5 	bl	8000b44 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	2001a7e8 	.word	0x2001a7e8
 80007e4:	40004400 	.word	0x40004400

080007e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b08c      	sub	sp, #48	; 0x30
 80007ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ee:	f107 031c 	add.w	r3, r7, #28
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]
 80007f8:	609a      	str	r2, [r3, #8]
 80007fa:	60da      	str	r2, [r3, #12]
 80007fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	61bb      	str	r3, [r7, #24]
 8000802:	4ba1      	ldr	r3, [pc, #644]	; (8000a88 <MX_GPIO_Init+0x2a0>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4aa0      	ldr	r2, [pc, #640]	; (8000a88 <MX_GPIO_Init+0x2a0>)
 8000808:	f043 0310 	orr.w	r3, r3, #16
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b9e      	ldr	r3, [pc, #632]	; (8000a88 <MX_GPIO_Init+0x2a0>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0310 	and.w	r3, r3, #16
 8000816:	61bb      	str	r3, [r7, #24]
 8000818:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	617b      	str	r3, [r7, #20]
 800081e:	4b9a      	ldr	r3, [pc, #616]	; (8000a88 <MX_GPIO_Init+0x2a0>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a99      	ldr	r2, [pc, #612]	; (8000a88 <MX_GPIO_Init+0x2a0>)
 8000824:	f043 0304 	orr.w	r3, r3, #4
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b97      	ldr	r3, [pc, #604]	; (8000a88 <MX_GPIO_Init+0x2a0>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0304 	and.w	r3, r3, #4
 8000832:	617b      	str	r3, [r7, #20]
 8000834:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	613b      	str	r3, [r7, #16]
 800083a:	4b93      	ldr	r3, [pc, #588]	; (8000a88 <MX_GPIO_Init+0x2a0>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a92      	ldr	r2, [pc, #584]	; (8000a88 <MX_GPIO_Init+0x2a0>)
 8000840:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b90      	ldr	r3, [pc, #576]	; (8000a88 <MX_GPIO_Init+0x2a0>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800084e:	613b      	str	r3, [r7, #16]
 8000850:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	60fb      	str	r3, [r7, #12]
 8000856:	4b8c      	ldr	r3, [pc, #560]	; (8000a88 <MX_GPIO_Init+0x2a0>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a8b      	ldr	r2, [pc, #556]	; (8000a88 <MX_GPIO_Init+0x2a0>)
 800085c:	f043 0301 	orr.w	r3, r3, #1
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b89      	ldr	r3, [pc, #548]	; (8000a88 <MX_GPIO_Init+0x2a0>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	60bb      	str	r3, [r7, #8]
 8000872:	4b85      	ldr	r3, [pc, #532]	; (8000a88 <MX_GPIO_Init+0x2a0>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a84      	ldr	r2, [pc, #528]	; (8000a88 <MX_GPIO_Init+0x2a0>)
 8000878:	f043 0302 	orr.w	r3, r3, #2
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b82      	ldr	r3, [pc, #520]	; (8000a88 <MX_GPIO_Init+0x2a0>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f003 0302 	and.w	r3, r3, #2
 8000886:	60bb      	str	r3, [r7, #8]
 8000888:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	607b      	str	r3, [r7, #4]
 800088e:	4b7e      	ldr	r3, [pc, #504]	; (8000a88 <MX_GPIO_Init+0x2a0>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a7d      	ldr	r2, [pc, #500]	; (8000a88 <MX_GPIO_Init+0x2a0>)
 8000894:	f043 0308 	orr.w	r3, r3, #8
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b7b      	ldr	r3, [pc, #492]	; (8000a88 <MX_GPIO_Init+0x2a0>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f003 0308 	and.w	r3, r3, #8
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008a6:	2200      	movs	r2, #0
 80008a8:	2108      	movs	r1, #8
 80008aa:	4878      	ldr	r0, [pc, #480]	; (8000a8c <MX_GPIO_Init+0x2a4>)
 80008ac:	f000 fd40 	bl	8001330 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008b0:	2201      	movs	r2, #1
 80008b2:	2101      	movs	r1, #1
 80008b4:	4876      	ldr	r0, [pc, #472]	; (8000a90 <MX_GPIO_Init+0x2a8>)
 80008b6:	f000 fd3b 	bl	8001330 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008ba:	2200      	movs	r2, #0
 80008bc:	f24f 0110 	movw	r1, #61456	; 0xf010
 80008c0:	4874      	ldr	r0, [pc, #464]	; (8000a94 <MX_GPIO_Init+0x2ac>)
 80008c2:	f000 fd35 	bl	8001330 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008c6:	2308      	movs	r3, #8
 80008c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ca:	2301      	movs	r3, #1
 80008cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d2:	2300      	movs	r3, #0
 80008d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008d6:	f107 031c 	add.w	r3, r7, #28
 80008da:	4619      	mov	r1, r3
 80008dc:	486b      	ldr	r0, [pc, #428]	; (8000a8c <MX_GPIO_Init+0x2a4>)
 80008de:	f000 fb8b 	bl	8000ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008e2:	2301      	movs	r3, #1
 80008e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e6:	2301      	movs	r3, #1
 80008e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ee:	2300      	movs	r3, #0
 80008f0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008f2:	f107 031c 	add.w	r3, r7, #28
 80008f6:	4619      	mov	r1, r3
 80008f8:	4865      	ldr	r0, [pc, #404]	; (8000a90 <MX_GPIO_Init+0x2a8>)
 80008fa:	f000 fb7d 	bl	8000ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008fe:	2308      	movs	r3, #8
 8000900:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000902:	2302      	movs	r3, #2
 8000904:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090a:	2300      	movs	r3, #0
 800090c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800090e:	2305      	movs	r3, #5
 8000910:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	4619      	mov	r1, r3
 8000918:	485d      	ldr	r0, [pc, #372]	; (8000a90 <MX_GPIO_Init+0x2a8>)
 800091a:	f000 fb6d 	bl	8000ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800091e:	2301      	movs	r3, #1
 8000920:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000922:	4b5d      	ldr	r3, [pc, #372]	; (8000a98 <MX_GPIO_Init+0x2b0>)
 8000924:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800092a:	f107 031c 	add.w	r3, r7, #28
 800092e:	4619      	mov	r1, r3
 8000930:	485a      	ldr	r0, [pc, #360]	; (8000a9c <MX_GPIO_Init+0x2b4>)
 8000932:	f000 fb61 	bl	8000ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000936:	2310      	movs	r3, #16
 8000938:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093a:	2302      	movs	r3, #2
 800093c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000942:	2300      	movs	r3, #0
 8000944:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000946:	2306      	movs	r3, #6
 8000948:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800094a:	f107 031c 	add.w	r3, r7, #28
 800094e:	4619      	mov	r1, r3
 8000950:	4852      	ldr	r0, [pc, #328]	; (8000a9c <MX_GPIO_Init+0x2b4>)
 8000952:	f000 fb51 	bl	8000ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000956:	23e0      	movs	r3, #224	; 0xe0
 8000958:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095a:	2302      	movs	r3, #2
 800095c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000962:	2300      	movs	r3, #0
 8000964:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000966:	2305      	movs	r3, #5
 8000968:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096a:	f107 031c 	add.w	r3, r7, #28
 800096e:	4619      	mov	r1, r3
 8000970:	484a      	ldr	r0, [pc, #296]	; (8000a9c <MX_GPIO_Init+0x2b4>)
 8000972:	f000 fb41 	bl	8000ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000976:	2304      	movs	r3, #4
 8000978:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800097a:	2300      	movs	r3, #0
 800097c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000982:	f107 031c 	add.w	r3, r7, #28
 8000986:	4619      	mov	r1, r3
 8000988:	4845      	ldr	r0, [pc, #276]	; (8000aa0 <MX_GPIO_Init+0x2b8>)
 800098a:	f000 fb35 	bl	8000ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800098e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000992:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000994:	2302      	movs	r3, #2
 8000996:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099c:	2300      	movs	r3, #0
 800099e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009a0:	2305      	movs	r3, #5
 80009a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80009a4:	f107 031c 	add.w	r3, r7, #28
 80009a8:	4619      	mov	r1, r3
 80009aa:	483d      	ldr	r0, [pc, #244]	; (8000aa0 <MX_GPIO_Init+0x2b8>)
 80009ac:	f000 fb24 	bl	8000ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009b0:	f24f 0310 	movw	r3, #61456	; 0xf010
 80009b4:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b6:	2301      	movs	r3, #1
 80009b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009be:	2300      	movs	r3, #0
 80009c0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009c2:	f107 031c 	add.w	r3, r7, #28
 80009c6:	4619      	mov	r1, r3
 80009c8:	4832      	ldr	r0, [pc, #200]	; (8000a94 <MX_GPIO_Init+0x2ac>)
 80009ca:	f000 fb15 	bl	8000ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80009ce:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80009d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d4:	2302      	movs	r3, #2
 80009d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009dc:	2300      	movs	r3, #0
 80009de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009e0:	2306      	movs	r3, #6
 80009e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009e4:	f107 031c 	add.w	r3, r7, #28
 80009e8:	4619      	mov	r1, r3
 80009ea:	4829      	ldr	r0, [pc, #164]	; (8000a90 <MX_GPIO_Init+0x2a8>)
 80009ec:	f000 fb04 	bl	8000ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80009f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f6:	2300      	movs	r3, #0
 80009f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80009fe:	f107 031c 	add.w	r3, r7, #28
 8000a02:	4619      	mov	r1, r3
 8000a04:	4825      	ldr	r0, [pc, #148]	; (8000a9c <MX_GPIO_Init+0x2b4>)
 8000a06:	f000 faf7 	bl	8000ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000a0a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000a0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a10:	2302      	movs	r3, #2
 8000a12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a1c:	230a      	movs	r3, #10
 8000a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a20:	f107 031c 	add.w	r3, r7, #28
 8000a24:	4619      	mov	r1, r3
 8000a26:	481d      	ldr	r0, [pc, #116]	; (8000a9c <MX_GPIO_Init+0x2b4>)
 8000a28:	f000 fae6 	bl	8000ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a2c:	2320      	movs	r3, #32
 8000a2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a30:	2300      	movs	r3, #0
 8000a32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a38:	f107 031c 	add.w	r3, r7, #28
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4815      	ldr	r0, [pc, #84]	; (8000a94 <MX_GPIO_Init+0x2ac>)
 8000a40:	f000 fada 	bl	8000ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a44:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a4a:	2312      	movs	r3, #18
 8000a4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a52:	2300      	movs	r3, #0
 8000a54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a56:	2304      	movs	r3, #4
 8000a58:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a5a:	f107 031c 	add.w	r3, r7, #28
 8000a5e:	4619      	mov	r1, r3
 8000a60:	480f      	ldr	r0, [pc, #60]	; (8000aa0 <MX_GPIO_Init+0x2b8>)
 8000a62:	f000 fac9 	bl	8000ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a66:	2302      	movs	r3, #2
 8000a68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a6a:	4b0e      	ldr	r3, [pc, #56]	; (8000aa4 <MX_GPIO_Init+0x2bc>)
 8000a6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a72:	f107 031c 	add.w	r3, r7, #28
 8000a76:	4619      	mov	r1, r3
 8000a78:	4804      	ldr	r0, [pc, #16]	; (8000a8c <MX_GPIO_Init+0x2a4>)
 8000a7a:	f000 fabd 	bl	8000ff8 <HAL_GPIO_Init>

}
 8000a7e:	bf00      	nop
 8000a80:	3730      	adds	r7, #48	; 0x30
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40023800 	.word	0x40023800
 8000a8c:	40021000 	.word	0x40021000
 8000a90:	40020800 	.word	0x40020800
 8000a94:	40020c00 	.word	0x40020c00
 8000a98:	10110000 	.word	0x10110000
 8000a9c:	40020000 	.word	0x40020000
 8000aa0:	40020400 	.word	0x40020400
 8000aa4:	10120000 	.word	0x10120000

08000aa8 <task1_handler>:

/* USER CODE BEGIN 4 */

static void task1_handler(void* parameters)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b09c      	sub	sp, #112	; 0x70
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]

	char msg[100];

	while(1)
	{
		snprintf(msg,100,"%s\n", (char*)parameters);
 8000ab0:	f107 000c 	add.w	r0, r7, #12
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	4a09      	ldr	r2, [pc, #36]	; (8000adc <task1_handler+0x34>)
 8000ab8:	2164      	movs	r1, #100	; 0x64
 8000aba:	f006 fe8f 	bl	80077dc <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 8000abe:	f107 030c 	add.w	r3, r7, #12
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f006 fda4 	bl	8007610 <SEGGER_SYSVIEW_PrintfTarget>
		taskYIELD();
 8000ac8:	4b05      	ldr	r3, [pc, #20]	; (8000ae0 <task1_handler+0x38>)
 8000aca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	f3bf 8f4f 	dsb	sy
 8000ad4:	f3bf 8f6f 	isb	sy
		snprintf(msg,100,"%s\n", (char*)parameters);
 8000ad8:	e7ea      	b.n	8000ab0 <task1_handler+0x8>
 8000ada:	bf00      	nop
 8000adc:	080080b8 	.word	0x080080b8
 8000ae0:	e000ed04 	.word	0xe000ed04

08000ae4 <task2_handler>:

}


static void task2_handler(void* parameters)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b09c      	sub	sp, #112	; 0x70
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
	char msg[100];
	while(1)
	{
		snprintf(msg,100,"%s\n", (char*)parameters);
 8000aec:	f107 000c 	add.w	r0, r7, #12
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	4a09      	ldr	r2, [pc, #36]	; (8000b18 <task2_handler+0x34>)
 8000af4:	2164      	movs	r1, #100	; 0x64
 8000af6:	f006 fe71 	bl	80077dc <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 8000afa:	f107 030c 	add.w	r3, r7, #12
 8000afe:	4618      	mov	r0, r3
 8000b00:	f006 fd86 	bl	8007610 <SEGGER_SYSVIEW_PrintfTarget>
		taskYIELD();
 8000b04:	4b05      	ldr	r3, [pc, #20]	; (8000b1c <task2_handler+0x38>)
 8000b06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	f3bf 8f4f 	dsb	sy
 8000b10:	f3bf 8f6f 	isb	sy
		snprintf(msg,100,"%s\n", (char*)parameters);
 8000b14:	e7ea      	b.n	8000aec <task2_handler+0x8>
 8000b16:	bf00      	nop
 8000b18:	080080b8 	.word	0x080080b8
 8000b1c:	e000ed04 	.word	0xe000ed04

08000b20 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a04      	ldr	r2, [pc, #16]	; (8000b40 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d101      	bne.n	8000b36 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b32:	f000 f95f 	bl	8000df4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b36:	bf00      	nop
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40001000 	.word	0x40001000

08000b44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b48:	bf00      	nop
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
	...

08000b54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	607b      	str	r3, [r7, #4]
 8000b5e:	4b10      	ldr	r3, [pc, #64]	; (8000ba0 <HAL_MspInit+0x4c>)
 8000b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b62:	4a0f      	ldr	r2, [pc, #60]	; (8000ba0 <HAL_MspInit+0x4c>)
 8000b64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b68:	6453      	str	r3, [r2, #68]	; 0x44
 8000b6a:	4b0d      	ldr	r3, [pc, #52]	; (8000ba0 <HAL_MspInit+0x4c>)
 8000b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b72:	607b      	str	r3, [r7, #4]
 8000b74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	603b      	str	r3, [r7, #0]
 8000b7a:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <HAL_MspInit+0x4c>)
 8000b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7e:	4a08      	ldr	r2, [pc, #32]	; (8000ba0 <HAL_MspInit+0x4c>)
 8000b80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b84:	6413      	str	r3, [r2, #64]	; 0x40
 8000b86:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <HAL_MspInit+0x4c>)
 8000b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b8e:	603b      	str	r3, [r7, #0]
 8000b90:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 8000b92:	f003 fdf9 	bl	8004788 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000b96:	bf00      	nop
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40023800 	.word	0x40023800

08000ba4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08a      	sub	sp, #40	; 0x28
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bac:	f107 0314 	add.w	r3, r7, #20
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	60da      	str	r2, [r3, #12]
 8000bba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a1d      	ldr	r2, [pc, #116]	; (8000c38 <HAL_UART_MspInit+0x94>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d133      	bne.n	8000c2e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	613b      	str	r3, [r7, #16]
 8000bca:	4b1c      	ldr	r3, [pc, #112]	; (8000c3c <HAL_UART_MspInit+0x98>)
 8000bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bce:	4a1b      	ldr	r2, [pc, #108]	; (8000c3c <HAL_UART_MspInit+0x98>)
 8000bd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bd4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bd6:	4b19      	ldr	r3, [pc, #100]	; (8000c3c <HAL_UART_MspInit+0x98>)
 8000bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bde:	613b      	str	r3, [r7, #16]
 8000be0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	60fb      	str	r3, [r7, #12]
 8000be6:	4b15      	ldr	r3, [pc, #84]	; (8000c3c <HAL_UART_MspInit+0x98>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	4a14      	ldr	r2, [pc, #80]	; (8000c3c <HAL_UART_MspInit+0x98>)
 8000bec:	f043 0301 	orr.w	r3, r3, #1
 8000bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf2:	4b12      	ldr	r3, [pc, #72]	; (8000c3c <HAL_UART_MspInit+0x98>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	f003 0301 	and.w	r3, r3, #1
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000bfe:	230c      	movs	r3, #12
 8000c00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c02:	2302      	movs	r3, #2
 8000c04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c0a:	2303      	movs	r3, #3
 8000c0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c0e:	2307      	movs	r3, #7
 8000c10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c12:	f107 0314 	add.w	r3, r7, #20
 8000c16:	4619      	mov	r1, r3
 8000c18:	4809      	ldr	r0, [pc, #36]	; (8000c40 <HAL_UART_MspInit+0x9c>)
 8000c1a:	f000 f9ed 	bl	8000ff8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2100      	movs	r1, #0
 8000c22:	2026      	movs	r0, #38	; 0x26
 8000c24:	f000 f9be 	bl	8000fa4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c28:	2026      	movs	r0, #38	; 0x26
 8000c2a:	f000 f9d7 	bl	8000fdc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c2e:	bf00      	nop
 8000c30:	3728      	adds	r7, #40	; 0x28
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40004400 	.word	0x40004400
 8000c3c:	40023800 	.word	0x40023800
 8000c40:	40020000 	.word	0x40020000

08000c44 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b08c      	sub	sp, #48	; 0x30
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000c54:	2200      	movs	r2, #0
 8000c56:	6879      	ldr	r1, [r7, #4]
 8000c58:	2036      	movs	r0, #54	; 0x36
 8000c5a:	f000 f9a3 	bl	8000fa4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c5e:	2036      	movs	r0, #54	; 0x36
 8000c60:	f000 f9bc 	bl	8000fdc <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c64:	2300      	movs	r3, #0
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	4b1f      	ldr	r3, [pc, #124]	; (8000ce8 <HAL_InitTick+0xa4>)
 8000c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6c:	4a1e      	ldr	r2, [pc, #120]	; (8000ce8 <HAL_InitTick+0xa4>)
 8000c6e:	f043 0310 	orr.w	r3, r3, #16
 8000c72:	6413      	str	r3, [r2, #64]	; 0x40
 8000c74:	4b1c      	ldr	r3, [pc, #112]	; (8000ce8 <HAL_InitTick+0xa4>)
 8000c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c78:	f003 0310 	and.w	r3, r3, #16
 8000c7c:	60fb      	str	r3, [r7, #12]
 8000c7e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c80:	f107 0210 	add.w	r2, r7, #16
 8000c84:	f107 0314 	add.w	r3, r7, #20
 8000c88:	4611      	mov	r1, r2
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f000 ffde 	bl	8001c4c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000c90:	f000 ffb4 	bl	8001bfc <HAL_RCC_GetPCLK1Freq>
 8000c94:	4603      	mov	r3, r0
 8000c96:	005b      	lsls	r3, r3, #1
 8000c98:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c9c:	4a13      	ldr	r2, [pc, #76]	; (8000cec <HAL_InitTick+0xa8>)
 8000c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8000ca2:	0c9b      	lsrs	r3, r3, #18
 8000ca4:	3b01      	subs	r3, #1
 8000ca6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000ca8:	4b11      	ldr	r3, [pc, #68]	; (8000cf0 <HAL_InitTick+0xac>)
 8000caa:	4a12      	ldr	r2, [pc, #72]	; (8000cf4 <HAL_InitTick+0xb0>)
 8000cac:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000cae:	4b10      	ldr	r3, [pc, #64]	; (8000cf0 <HAL_InitTick+0xac>)
 8000cb0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cb4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000cb6:	4a0e      	ldr	r2, [pc, #56]	; (8000cf0 <HAL_InitTick+0xac>)
 8000cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cba:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000cbc:	4b0c      	ldr	r3, [pc, #48]	; (8000cf0 <HAL_InitTick+0xac>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cc2:	4b0b      	ldr	r3, [pc, #44]	; (8000cf0 <HAL_InitTick+0xac>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000cc8:	4809      	ldr	r0, [pc, #36]	; (8000cf0 <HAL_InitTick+0xac>)
 8000cca:	f000 fff1 	bl	8001cb0 <HAL_TIM_Base_Init>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d104      	bne.n	8000cde <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000cd4:	4806      	ldr	r0, [pc, #24]	; (8000cf0 <HAL_InitTick+0xac>)
 8000cd6:	f001 f845 	bl	8001d64 <HAL_TIM_Base_Start_IT>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	e000      	b.n	8000ce0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000cde:	2301      	movs	r3, #1
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	3730      	adds	r7, #48	; 0x30
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	40023800 	.word	0x40023800
 8000cec:	431bde83 	.word	0x431bde83
 8000cf0:	2001a82c 	.word	0x2001a82c
 8000cf4:	40001000 	.word	0x40001000

08000cf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cfc:	e7fe      	b.n	8000cfc <NMI_Handler+0x4>

08000cfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d02:	e7fe      	b.n	8000d02 <HardFault_Handler+0x4>

08000d04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d08:	e7fe      	b.n	8000d08 <MemManage_Handler+0x4>

08000d0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d0e:	e7fe      	b.n	8000d0e <BusFault_Handler+0x4>

08000d10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d14:	e7fe      	b.n	8000d14 <UsageFault_Handler+0x4>

08000d16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d16:	b480      	push	{r7}
 8000d18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr

08000d24 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d28:	4802      	ldr	r0, [pc, #8]	; (8000d34 <TIM6_DAC_IRQHandler+0x10>)
 8000d2a:	f001 f88b 	bl	8001e44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	2001a82c 	.word	0x2001a82c

08000d38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d3c:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <SystemInit+0x20>)
 8000d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d42:	4a05      	ldr	r2, [pc, #20]	; (8000d58 <SystemInit+0x20>)
 8000d44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d4c:	bf00      	nop
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d94 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d60:	480d      	ldr	r0, [pc, #52]	; (8000d98 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d62:	490e      	ldr	r1, [pc, #56]	; (8000d9c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d64:	4a0e      	ldr	r2, [pc, #56]	; (8000da0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d68:	e002      	b.n	8000d70 <LoopCopyDataInit>

08000d6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d6e:	3304      	adds	r3, #4

08000d70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d74:	d3f9      	bcc.n	8000d6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d76:	4a0b      	ldr	r2, [pc, #44]	; (8000da4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d78:	4c0b      	ldr	r4, [pc, #44]	; (8000da8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d7c:	e001      	b.n	8000d82 <LoopFillZerobss>

08000d7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d80:	3204      	adds	r2, #4

08000d82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d84:	d3fb      	bcc.n	8000d7e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d86:	f7ff ffd7 	bl	8000d38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d8a:	f006 fcdf 	bl	800774c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d8e:	f7ff fc3b 	bl	8000608 <main>
  bx  lr    
 8000d92:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d94:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d9c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000da0:	08008224 	.word	0x08008224
  ldr r2, =_sbss
 8000da4:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000da8:	2001a970 	.word	0x2001a970

08000dac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dac:	e7fe      	b.n	8000dac <ADC_IRQHandler>
	...

08000db0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000db4:	4b0e      	ldr	r3, [pc, #56]	; (8000df0 <HAL_Init+0x40>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a0d      	ldr	r2, [pc, #52]	; (8000df0 <HAL_Init+0x40>)
 8000dba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dbe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dc0:	4b0b      	ldr	r3, [pc, #44]	; (8000df0 <HAL_Init+0x40>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a0a      	ldr	r2, [pc, #40]	; (8000df0 <HAL_Init+0x40>)
 8000dc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dcc:	4b08      	ldr	r3, [pc, #32]	; (8000df0 <HAL_Init+0x40>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a07      	ldr	r2, [pc, #28]	; (8000df0 <HAL_Init+0x40>)
 8000dd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dd8:	2003      	movs	r0, #3
 8000dda:	f000 f8d8 	bl	8000f8e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dde:	2000      	movs	r0, #0
 8000de0:	f7ff ff30 	bl	8000c44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000de4:	f7ff feb6 	bl	8000b54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000de8:	2300      	movs	r3, #0
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	40023c00 	.word	0x40023c00

08000df4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000df8:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <HAL_IncTick+0x20>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <HAL_IncTick+0x24>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4413      	add	r3, r2
 8000e04:	4a04      	ldr	r2, [pc, #16]	; (8000e18 <HAL_IncTick+0x24>)
 8000e06:	6013      	str	r3, [r2, #0]
}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	20000008 	.word	0x20000008
 8000e18:	2001a874 	.word	0x2001a874

08000e1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e20:	4b03      	ldr	r3, [pc, #12]	; (8000e30 <HAL_GetTick+0x14>)
 8000e22:	681b      	ldr	r3, [r3, #0]
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	2001a874 	.word	0x2001a874

08000e34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b085      	sub	sp, #20
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	f003 0307 	and.w	r3, r3, #7
 8000e42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e44:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <__NVIC_SetPriorityGrouping+0x44>)
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e4a:	68ba      	ldr	r2, [r7, #8]
 8000e4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e50:	4013      	ands	r3, r2
 8000e52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e66:	4a04      	ldr	r2, [pc, #16]	; (8000e78 <__NVIC_SetPriorityGrouping+0x44>)
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	60d3      	str	r3, [r2, #12]
}
 8000e6c:	bf00      	nop
 8000e6e:	3714      	adds	r7, #20
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e80:	4b04      	ldr	r3, [pc, #16]	; (8000e94 <__NVIC_GetPriorityGrouping+0x18>)
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	0a1b      	lsrs	r3, r3, #8
 8000e86:	f003 0307 	and.w	r3, r3, #7
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	e000ed00 	.word	0xe000ed00

08000e98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	db0b      	blt.n	8000ec2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	f003 021f 	and.w	r2, r3, #31
 8000eb0:	4907      	ldr	r1, [pc, #28]	; (8000ed0 <__NVIC_EnableIRQ+0x38>)
 8000eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb6:	095b      	lsrs	r3, r3, #5
 8000eb8:	2001      	movs	r0, #1
 8000eba:	fa00 f202 	lsl.w	r2, r0, r2
 8000ebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ec2:	bf00      	nop
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	e000e100 	.word	0xe000e100

08000ed4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	6039      	str	r1, [r7, #0]
 8000ede:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	db0a      	blt.n	8000efe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	b2da      	uxtb	r2, r3
 8000eec:	490c      	ldr	r1, [pc, #48]	; (8000f20 <__NVIC_SetPriority+0x4c>)
 8000eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef2:	0112      	lsls	r2, r2, #4
 8000ef4:	b2d2      	uxtb	r2, r2
 8000ef6:	440b      	add	r3, r1
 8000ef8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000efc:	e00a      	b.n	8000f14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	b2da      	uxtb	r2, r3
 8000f02:	4908      	ldr	r1, [pc, #32]	; (8000f24 <__NVIC_SetPriority+0x50>)
 8000f04:	79fb      	ldrb	r3, [r7, #7]
 8000f06:	f003 030f 	and.w	r3, r3, #15
 8000f0a:	3b04      	subs	r3, #4
 8000f0c:	0112      	lsls	r2, r2, #4
 8000f0e:	b2d2      	uxtb	r2, r2
 8000f10:	440b      	add	r3, r1
 8000f12:	761a      	strb	r2, [r3, #24]
}
 8000f14:	bf00      	nop
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	e000e100 	.word	0xe000e100
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b089      	sub	sp, #36	; 0x24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	f003 0307 	and.w	r3, r3, #7
 8000f3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	f1c3 0307 	rsb	r3, r3, #7
 8000f42:	2b04      	cmp	r3, #4
 8000f44:	bf28      	it	cs
 8000f46:	2304      	movcs	r3, #4
 8000f48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	3304      	adds	r3, #4
 8000f4e:	2b06      	cmp	r3, #6
 8000f50:	d902      	bls.n	8000f58 <NVIC_EncodePriority+0x30>
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	3b03      	subs	r3, #3
 8000f56:	e000      	b.n	8000f5a <NVIC_EncodePriority+0x32>
 8000f58:	2300      	movs	r3, #0
 8000f5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f60:	69bb      	ldr	r3, [r7, #24]
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	43da      	mvns	r2, r3
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	401a      	ands	r2, r3
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f70:	f04f 31ff 	mov.w	r1, #4294967295
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7a:	43d9      	mvns	r1, r3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f80:	4313      	orrs	r3, r2
         );
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3724      	adds	r7, #36	; 0x24
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr

08000f8e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	b082      	sub	sp, #8
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f96:	6878      	ldr	r0, [r7, #4]
 8000f98:	f7ff ff4c 	bl	8000e34 <__NVIC_SetPriorityGrouping>
}
 8000f9c:	bf00      	nop
 8000f9e:	3708      	adds	r7, #8
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b086      	sub	sp, #24
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	60b9      	str	r1, [r7, #8]
 8000fae:	607a      	str	r2, [r7, #4]
 8000fb0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fb6:	f7ff ff61 	bl	8000e7c <__NVIC_GetPriorityGrouping>
 8000fba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fbc:	687a      	ldr	r2, [r7, #4]
 8000fbe:	68b9      	ldr	r1, [r7, #8]
 8000fc0:	6978      	ldr	r0, [r7, #20]
 8000fc2:	f7ff ffb1 	bl	8000f28 <NVIC_EncodePriority>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fcc:	4611      	mov	r1, r2
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff ff80 	bl	8000ed4 <__NVIC_SetPriority>
}
 8000fd4:	bf00      	nop
 8000fd6:	3718      	adds	r7, #24
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff ff54 	bl	8000e98 <__NVIC_EnableIRQ>
}
 8000ff0:	bf00      	nop
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b089      	sub	sp, #36	; 0x24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001002:	2300      	movs	r3, #0
 8001004:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001006:	2300      	movs	r3, #0
 8001008:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800100a:	2300      	movs	r3, #0
 800100c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800100e:	2300      	movs	r3, #0
 8001010:	61fb      	str	r3, [r7, #28]
 8001012:	e16b      	b.n	80012ec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001014:	2201      	movs	r2, #1
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	697a      	ldr	r2, [r7, #20]
 8001024:	4013      	ands	r3, r2
 8001026:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001028:	693a      	ldr	r2, [r7, #16]
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	429a      	cmp	r2, r3
 800102e:	f040 815a 	bne.w	80012e6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f003 0303 	and.w	r3, r3, #3
 800103a:	2b01      	cmp	r3, #1
 800103c:	d005      	beq.n	800104a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001046:	2b02      	cmp	r3, #2
 8001048:	d130      	bne.n	80010ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	2203      	movs	r2, #3
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	43db      	mvns	r3, r3
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	4013      	ands	r3, r2
 8001060:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	68da      	ldr	r2, [r3, #12]
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	fa02 f303 	lsl.w	r3, r2, r3
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	4313      	orrs	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001080:	2201      	movs	r2, #1
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	43db      	mvns	r3, r3
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	4013      	ands	r3, r2
 800108e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	091b      	lsrs	r3, r3, #4
 8001096:	f003 0201 	and.w	r2, r3, #1
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f003 0303 	and.w	r3, r3, #3
 80010b4:	2b03      	cmp	r3, #3
 80010b6:	d017      	beq.n	80010e8 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	2203      	movs	r2, #3
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	43db      	mvns	r3, r3
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	4013      	ands	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	689a      	ldr	r2, [r3, #8]
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	4313      	orrs	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f003 0303 	and.w	r3, r3, #3
 80010f0:	2b02      	cmp	r3, #2
 80010f2:	d123      	bne.n	800113c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	08da      	lsrs	r2, r3, #3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	3208      	adds	r2, #8
 80010fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001100:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	f003 0307 	and.w	r3, r3, #7
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	220f      	movs	r2, #15
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	43db      	mvns	r3, r3
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	4013      	ands	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	691a      	ldr	r2, [r3, #16]
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	f003 0307 	and.w	r3, r3, #7
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	4313      	orrs	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	08da      	lsrs	r2, r3, #3
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	3208      	adds	r2, #8
 8001136:	69b9      	ldr	r1, [r7, #24]
 8001138:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	2203      	movs	r2, #3
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	43db      	mvns	r3, r3
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	4013      	ands	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f003 0203 	and.w	r2, r3, #3
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	4313      	orrs	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001178:	2b00      	cmp	r3, #0
 800117a:	f000 80b4 	beq.w	80012e6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	60fb      	str	r3, [r7, #12]
 8001182:	4b60      	ldr	r3, [pc, #384]	; (8001304 <HAL_GPIO_Init+0x30c>)
 8001184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001186:	4a5f      	ldr	r2, [pc, #380]	; (8001304 <HAL_GPIO_Init+0x30c>)
 8001188:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800118c:	6453      	str	r3, [r2, #68]	; 0x44
 800118e:	4b5d      	ldr	r3, [pc, #372]	; (8001304 <HAL_GPIO_Init+0x30c>)
 8001190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001192:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800119a:	4a5b      	ldr	r2, [pc, #364]	; (8001308 <HAL_GPIO_Init+0x310>)
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	089b      	lsrs	r3, r3, #2
 80011a0:	3302      	adds	r3, #2
 80011a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	f003 0303 	and.w	r3, r3, #3
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	220f      	movs	r2, #15
 80011b2:	fa02 f303 	lsl.w	r3, r2, r3
 80011b6:	43db      	mvns	r3, r3
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	4013      	ands	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a52      	ldr	r2, [pc, #328]	; (800130c <HAL_GPIO_Init+0x314>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d02b      	beq.n	800121e <HAL_GPIO_Init+0x226>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4a51      	ldr	r2, [pc, #324]	; (8001310 <HAL_GPIO_Init+0x318>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d025      	beq.n	800121a <HAL_GPIO_Init+0x222>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4a50      	ldr	r2, [pc, #320]	; (8001314 <HAL_GPIO_Init+0x31c>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d01f      	beq.n	8001216 <HAL_GPIO_Init+0x21e>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4a4f      	ldr	r2, [pc, #316]	; (8001318 <HAL_GPIO_Init+0x320>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d019      	beq.n	8001212 <HAL_GPIO_Init+0x21a>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4a4e      	ldr	r2, [pc, #312]	; (800131c <HAL_GPIO_Init+0x324>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d013      	beq.n	800120e <HAL_GPIO_Init+0x216>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4a4d      	ldr	r2, [pc, #308]	; (8001320 <HAL_GPIO_Init+0x328>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d00d      	beq.n	800120a <HAL_GPIO_Init+0x212>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4a4c      	ldr	r2, [pc, #304]	; (8001324 <HAL_GPIO_Init+0x32c>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d007      	beq.n	8001206 <HAL_GPIO_Init+0x20e>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a4b      	ldr	r2, [pc, #300]	; (8001328 <HAL_GPIO_Init+0x330>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d101      	bne.n	8001202 <HAL_GPIO_Init+0x20a>
 80011fe:	2307      	movs	r3, #7
 8001200:	e00e      	b.n	8001220 <HAL_GPIO_Init+0x228>
 8001202:	2308      	movs	r3, #8
 8001204:	e00c      	b.n	8001220 <HAL_GPIO_Init+0x228>
 8001206:	2306      	movs	r3, #6
 8001208:	e00a      	b.n	8001220 <HAL_GPIO_Init+0x228>
 800120a:	2305      	movs	r3, #5
 800120c:	e008      	b.n	8001220 <HAL_GPIO_Init+0x228>
 800120e:	2304      	movs	r3, #4
 8001210:	e006      	b.n	8001220 <HAL_GPIO_Init+0x228>
 8001212:	2303      	movs	r3, #3
 8001214:	e004      	b.n	8001220 <HAL_GPIO_Init+0x228>
 8001216:	2302      	movs	r3, #2
 8001218:	e002      	b.n	8001220 <HAL_GPIO_Init+0x228>
 800121a:	2301      	movs	r3, #1
 800121c:	e000      	b.n	8001220 <HAL_GPIO_Init+0x228>
 800121e:	2300      	movs	r3, #0
 8001220:	69fa      	ldr	r2, [r7, #28]
 8001222:	f002 0203 	and.w	r2, r2, #3
 8001226:	0092      	lsls	r2, r2, #2
 8001228:	4093      	lsls	r3, r2
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	4313      	orrs	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001230:	4935      	ldr	r1, [pc, #212]	; (8001308 <HAL_GPIO_Init+0x310>)
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	089b      	lsrs	r3, r3, #2
 8001236:	3302      	adds	r3, #2
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800123e:	4b3b      	ldr	r3, [pc, #236]	; (800132c <HAL_GPIO_Init+0x334>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	43db      	mvns	r3, r3
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	4013      	ands	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001256:	2b00      	cmp	r3, #0
 8001258:	d003      	beq.n	8001262 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	4313      	orrs	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001262:	4a32      	ldr	r2, [pc, #200]	; (800132c <HAL_GPIO_Init+0x334>)
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001268:	4b30      	ldr	r3, [pc, #192]	; (800132c <HAL_GPIO_Init+0x334>)
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	43db      	mvns	r3, r3
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	4013      	ands	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001280:	2b00      	cmp	r3, #0
 8001282:	d003      	beq.n	800128c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	4313      	orrs	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800128c:	4a27      	ldr	r2, [pc, #156]	; (800132c <HAL_GPIO_Init+0x334>)
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001292:	4b26      	ldr	r3, [pc, #152]	; (800132c <HAL_GPIO_Init+0x334>)
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	43db      	mvns	r3, r3
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	4013      	ands	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d003      	beq.n	80012b6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012b6:	4a1d      	ldr	r2, [pc, #116]	; (800132c <HAL_GPIO_Init+0x334>)
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012bc:	4b1b      	ldr	r3, [pc, #108]	; (800132c <HAL_GPIO_Init+0x334>)
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	43db      	mvns	r3, r3
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	4013      	ands	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d003      	beq.n	80012e0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	4313      	orrs	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012e0:	4a12      	ldr	r2, [pc, #72]	; (800132c <HAL_GPIO_Init+0x334>)
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	3301      	adds	r3, #1
 80012ea:	61fb      	str	r3, [r7, #28]
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	2b0f      	cmp	r3, #15
 80012f0:	f67f ae90 	bls.w	8001014 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012f4:	bf00      	nop
 80012f6:	bf00      	nop
 80012f8:	3724      	adds	r7, #36	; 0x24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	40023800 	.word	0x40023800
 8001308:	40013800 	.word	0x40013800
 800130c:	40020000 	.word	0x40020000
 8001310:	40020400 	.word	0x40020400
 8001314:	40020800 	.word	0x40020800
 8001318:	40020c00 	.word	0x40020c00
 800131c:	40021000 	.word	0x40021000
 8001320:	40021400 	.word	0x40021400
 8001324:	40021800 	.word	0x40021800
 8001328:	40021c00 	.word	0x40021c00
 800132c:	40013c00 	.word	0x40013c00

08001330 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	460b      	mov	r3, r1
 800133a:	807b      	strh	r3, [r7, #2]
 800133c:	4613      	mov	r3, r2
 800133e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001340:	787b      	ldrb	r3, [r7, #1]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d003      	beq.n	800134e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001346:	887a      	ldrh	r2, [r7, #2]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800134c:	e003      	b.n	8001356 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800134e:	887b      	ldrh	r3, [r7, #2]
 8001350:	041a      	lsls	r2, r3, #16
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	619a      	str	r2, [r3, #24]
}
 8001356:	bf00      	nop
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
	...

08001364 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b086      	sub	sp, #24
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d101      	bne.n	8001376 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e264      	b.n	8001840 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	2b00      	cmp	r3, #0
 8001380:	d075      	beq.n	800146e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001382:	4ba3      	ldr	r3, [pc, #652]	; (8001610 <HAL_RCC_OscConfig+0x2ac>)
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	f003 030c 	and.w	r3, r3, #12
 800138a:	2b04      	cmp	r3, #4
 800138c:	d00c      	beq.n	80013a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800138e:	4ba0      	ldr	r3, [pc, #640]	; (8001610 <HAL_RCC_OscConfig+0x2ac>)
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001396:	2b08      	cmp	r3, #8
 8001398:	d112      	bne.n	80013c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800139a:	4b9d      	ldr	r3, [pc, #628]	; (8001610 <HAL_RCC_OscConfig+0x2ac>)
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80013a6:	d10b      	bne.n	80013c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013a8:	4b99      	ldr	r3, [pc, #612]	; (8001610 <HAL_RCC_OscConfig+0x2ac>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d05b      	beq.n	800146c <HAL_RCC_OscConfig+0x108>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d157      	bne.n	800146c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013bc:	2301      	movs	r3, #1
 80013be:	e23f      	b.n	8001840 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013c8:	d106      	bne.n	80013d8 <HAL_RCC_OscConfig+0x74>
 80013ca:	4b91      	ldr	r3, [pc, #580]	; (8001610 <HAL_RCC_OscConfig+0x2ac>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a90      	ldr	r2, [pc, #576]	; (8001610 <HAL_RCC_OscConfig+0x2ac>)
 80013d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013d4:	6013      	str	r3, [r2, #0]
 80013d6:	e01d      	b.n	8001414 <HAL_RCC_OscConfig+0xb0>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013e0:	d10c      	bne.n	80013fc <HAL_RCC_OscConfig+0x98>
 80013e2:	4b8b      	ldr	r3, [pc, #556]	; (8001610 <HAL_RCC_OscConfig+0x2ac>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a8a      	ldr	r2, [pc, #552]	; (8001610 <HAL_RCC_OscConfig+0x2ac>)
 80013e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013ec:	6013      	str	r3, [r2, #0]
 80013ee:	4b88      	ldr	r3, [pc, #544]	; (8001610 <HAL_RCC_OscConfig+0x2ac>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a87      	ldr	r2, [pc, #540]	; (8001610 <HAL_RCC_OscConfig+0x2ac>)
 80013f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013f8:	6013      	str	r3, [r2, #0]
 80013fa:	e00b      	b.n	8001414 <HAL_RCC_OscConfig+0xb0>
 80013fc:	4b84      	ldr	r3, [pc, #528]	; (8001610 <HAL_RCC_OscConfig+0x2ac>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a83      	ldr	r2, [pc, #524]	; (8001610 <HAL_RCC_OscConfig+0x2ac>)
 8001402:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001406:	6013      	str	r3, [r2, #0]
 8001408:	4b81      	ldr	r3, [pc, #516]	; (8001610 <HAL_RCC_OscConfig+0x2ac>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a80      	ldr	r2, [pc, #512]	; (8001610 <HAL_RCC_OscConfig+0x2ac>)
 800140e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001412:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d013      	beq.n	8001444 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800141c:	f7ff fcfe 	bl	8000e1c <HAL_GetTick>
 8001420:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001422:	e008      	b.n	8001436 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001424:	f7ff fcfa 	bl	8000e1c <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	2b64      	cmp	r3, #100	; 0x64
 8001430:	d901      	bls.n	8001436 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e204      	b.n	8001840 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001436:	4b76      	ldr	r3, [pc, #472]	; (8001610 <HAL_RCC_OscConfig+0x2ac>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d0f0      	beq.n	8001424 <HAL_RCC_OscConfig+0xc0>
 8001442:	e014      	b.n	800146e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001444:	f7ff fcea 	bl	8000e1c <HAL_GetTick>
 8001448:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800144a:	e008      	b.n	800145e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800144c:	f7ff fce6 	bl	8000e1c <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	2b64      	cmp	r3, #100	; 0x64
 8001458:	d901      	bls.n	800145e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e1f0      	b.n	8001840 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800145e:	4b6c      	ldr	r3, [pc, #432]	; (8001610 <HAL_RCC_OscConfig+0x2ac>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d1f0      	bne.n	800144c <HAL_RCC_OscConfig+0xe8>
 800146a:	e000      	b.n	800146e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800146c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 0302 	and.w	r3, r3, #2
 8001476:	2b00      	cmp	r3, #0
 8001478:	d063      	beq.n	8001542 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800147a:	4b65      	ldr	r3, [pc, #404]	; (8001610 <HAL_RCC_OscConfig+0x2ac>)
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	f003 030c 	and.w	r3, r3, #12
 8001482:	2b00      	cmp	r3, #0
 8001484:	d00b      	beq.n	800149e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001486:	4b62      	ldr	r3, [pc, #392]	; (8001610 <HAL_RCC_OscConfig+0x2ac>)
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800148e:	2b08      	cmp	r3, #8
 8001490:	d11c      	bne.n	80014cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001492:	4b5f      	ldr	r3, [pc, #380]	; (8001610 <HAL_RCC_OscConfig+0x2ac>)
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d116      	bne.n	80014cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800149e:	4b5c      	ldr	r3, [pc, #368]	; (8001610 <HAL_RCC_OscConfig+0x2ac>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 0302 	and.w	r3, r3, #2
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d005      	beq.n	80014b6 <HAL_RCC_OscConfig+0x152>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	68db      	ldr	r3, [r3, #12]
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d001      	beq.n	80014b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e1c4      	b.n	8001840 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014b6:	4b56      	ldr	r3, [pc, #344]	; (8001610 <HAL_RCC_OscConfig+0x2ac>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	691b      	ldr	r3, [r3, #16]
 80014c2:	00db      	lsls	r3, r3, #3
 80014c4:	4952      	ldr	r1, [pc, #328]	; (8001610 <HAL_RCC_OscConfig+0x2ac>)
 80014c6:	4313      	orrs	r3, r2
 80014c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ca:	e03a      	b.n	8001542 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d020      	beq.n	8001516 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014d4:	4b4f      	ldr	r3, [pc, #316]	; (8001614 <HAL_RCC_OscConfig+0x2b0>)
 80014d6:	2201      	movs	r2, #1
 80014d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014da:	f7ff fc9f 	bl	8000e1c <HAL_GetTick>
 80014de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014e0:	e008      	b.n	80014f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014e2:	f7ff fc9b 	bl	8000e1c <HAL_GetTick>
 80014e6:	4602      	mov	r2, r0
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d901      	bls.n	80014f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80014f0:	2303      	movs	r3, #3
 80014f2:	e1a5      	b.n	8001840 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014f4:	4b46      	ldr	r3, [pc, #280]	; (8001610 <HAL_RCC_OscConfig+0x2ac>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 0302 	and.w	r3, r3, #2
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d0f0      	beq.n	80014e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001500:	4b43      	ldr	r3, [pc, #268]	; (8001610 <HAL_RCC_OscConfig+0x2ac>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	691b      	ldr	r3, [r3, #16]
 800150c:	00db      	lsls	r3, r3, #3
 800150e:	4940      	ldr	r1, [pc, #256]	; (8001610 <HAL_RCC_OscConfig+0x2ac>)
 8001510:	4313      	orrs	r3, r2
 8001512:	600b      	str	r3, [r1, #0]
 8001514:	e015      	b.n	8001542 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001516:	4b3f      	ldr	r3, [pc, #252]	; (8001614 <HAL_RCC_OscConfig+0x2b0>)
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800151c:	f7ff fc7e 	bl	8000e1c <HAL_GetTick>
 8001520:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001522:	e008      	b.n	8001536 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001524:	f7ff fc7a 	bl	8000e1c <HAL_GetTick>
 8001528:	4602      	mov	r2, r0
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	2b02      	cmp	r3, #2
 8001530:	d901      	bls.n	8001536 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	e184      	b.n	8001840 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001536:	4b36      	ldr	r3, [pc, #216]	; (8001610 <HAL_RCC_OscConfig+0x2ac>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0302 	and.w	r3, r3, #2
 800153e:	2b00      	cmp	r3, #0
 8001540:	d1f0      	bne.n	8001524 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 0308 	and.w	r3, r3, #8
 800154a:	2b00      	cmp	r3, #0
 800154c:	d030      	beq.n	80015b0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	695b      	ldr	r3, [r3, #20]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d016      	beq.n	8001584 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001556:	4b30      	ldr	r3, [pc, #192]	; (8001618 <HAL_RCC_OscConfig+0x2b4>)
 8001558:	2201      	movs	r2, #1
 800155a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800155c:	f7ff fc5e 	bl	8000e1c <HAL_GetTick>
 8001560:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001562:	e008      	b.n	8001576 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001564:	f7ff fc5a 	bl	8000e1c <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	2b02      	cmp	r3, #2
 8001570:	d901      	bls.n	8001576 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e164      	b.n	8001840 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001576:	4b26      	ldr	r3, [pc, #152]	; (8001610 <HAL_RCC_OscConfig+0x2ac>)
 8001578:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800157a:	f003 0302 	and.w	r3, r3, #2
 800157e:	2b00      	cmp	r3, #0
 8001580:	d0f0      	beq.n	8001564 <HAL_RCC_OscConfig+0x200>
 8001582:	e015      	b.n	80015b0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001584:	4b24      	ldr	r3, [pc, #144]	; (8001618 <HAL_RCC_OscConfig+0x2b4>)
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800158a:	f7ff fc47 	bl	8000e1c <HAL_GetTick>
 800158e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001590:	e008      	b.n	80015a4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001592:	f7ff fc43 	bl	8000e1c <HAL_GetTick>
 8001596:	4602      	mov	r2, r0
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	2b02      	cmp	r3, #2
 800159e:	d901      	bls.n	80015a4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80015a0:	2303      	movs	r3, #3
 80015a2:	e14d      	b.n	8001840 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015a4:	4b1a      	ldr	r3, [pc, #104]	; (8001610 <HAL_RCC_OscConfig+0x2ac>)
 80015a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015a8:	f003 0302 	and.w	r3, r3, #2
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d1f0      	bne.n	8001592 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0304 	and.w	r3, r3, #4
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	f000 80a0 	beq.w	80016fe <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015be:	2300      	movs	r3, #0
 80015c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015c2:	4b13      	ldr	r3, [pc, #76]	; (8001610 <HAL_RCC_OscConfig+0x2ac>)
 80015c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d10f      	bne.n	80015ee <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015ce:	2300      	movs	r3, #0
 80015d0:	60bb      	str	r3, [r7, #8]
 80015d2:	4b0f      	ldr	r3, [pc, #60]	; (8001610 <HAL_RCC_OscConfig+0x2ac>)
 80015d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d6:	4a0e      	ldr	r2, [pc, #56]	; (8001610 <HAL_RCC_OscConfig+0x2ac>)
 80015d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015dc:	6413      	str	r3, [r2, #64]	; 0x40
 80015de:	4b0c      	ldr	r3, [pc, #48]	; (8001610 <HAL_RCC_OscConfig+0x2ac>)
 80015e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e6:	60bb      	str	r3, [r7, #8]
 80015e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015ea:	2301      	movs	r3, #1
 80015ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ee:	4b0b      	ldr	r3, [pc, #44]	; (800161c <HAL_RCC_OscConfig+0x2b8>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d121      	bne.n	800163e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015fa:	4b08      	ldr	r3, [pc, #32]	; (800161c <HAL_RCC_OscConfig+0x2b8>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a07      	ldr	r2, [pc, #28]	; (800161c <HAL_RCC_OscConfig+0x2b8>)
 8001600:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001604:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001606:	f7ff fc09 	bl	8000e1c <HAL_GetTick>
 800160a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800160c:	e011      	b.n	8001632 <HAL_RCC_OscConfig+0x2ce>
 800160e:	bf00      	nop
 8001610:	40023800 	.word	0x40023800
 8001614:	42470000 	.word	0x42470000
 8001618:	42470e80 	.word	0x42470e80
 800161c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001620:	f7ff fbfc 	bl	8000e1c <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b02      	cmp	r3, #2
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e106      	b.n	8001840 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001632:	4b85      	ldr	r3, [pc, #532]	; (8001848 <HAL_RCC_OscConfig+0x4e4>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800163a:	2b00      	cmp	r3, #0
 800163c:	d0f0      	beq.n	8001620 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	2b01      	cmp	r3, #1
 8001644:	d106      	bne.n	8001654 <HAL_RCC_OscConfig+0x2f0>
 8001646:	4b81      	ldr	r3, [pc, #516]	; (800184c <HAL_RCC_OscConfig+0x4e8>)
 8001648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800164a:	4a80      	ldr	r2, [pc, #512]	; (800184c <HAL_RCC_OscConfig+0x4e8>)
 800164c:	f043 0301 	orr.w	r3, r3, #1
 8001650:	6713      	str	r3, [r2, #112]	; 0x70
 8001652:	e01c      	b.n	800168e <HAL_RCC_OscConfig+0x32a>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	2b05      	cmp	r3, #5
 800165a:	d10c      	bne.n	8001676 <HAL_RCC_OscConfig+0x312>
 800165c:	4b7b      	ldr	r3, [pc, #492]	; (800184c <HAL_RCC_OscConfig+0x4e8>)
 800165e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001660:	4a7a      	ldr	r2, [pc, #488]	; (800184c <HAL_RCC_OscConfig+0x4e8>)
 8001662:	f043 0304 	orr.w	r3, r3, #4
 8001666:	6713      	str	r3, [r2, #112]	; 0x70
 8001668:	4b78      	ldr	r3, [pc, #480]	; (800184c <HAL_RCC_OscConfig+0x4e8>)
 800166a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800166c:	4a77      	ldr	r2, [pc, #476]	; (800184c <HAL_RCC_OscConfig+0x4e8>)
 800166e:	f043 0301 	orr.w	r3, r3, #1
 8001672:	6713      	str	r3, [r2, #112]	; 0x70
 8001674:	e00b      	b.n	800168e <HAL_RCC_OscConfig+0x32a>
 8001676:	4b75      	ldr	r3, [pc, #468]	; (800184c <HAL_RCC_OscConfig+0x4e8>)
 8001678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800167a:	4a74      	ldr	r2, [pc, #464]	; (800184c <HAL_RCC_OscConfig+0x4e8>)
 800167c:	f023 0301 	bic.w	r3, r3, #1
 8001680:	6713      	str	r3, [r2, #112]	; 0x70
 8001682:	4b72      	ldr	r3, [pc, #456]	; (800184c <HAL_RCC_OscConfig+0x4e8>)
 8001684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001686:	4a71      	ldr	r2, [pc, #452]	; (800184c <HAL_RCC_OscConfig+0x4e8>)
 8001688:	f023 0304 	bic.w	r3, r3, #4
 800168c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d015      	beq.n	80016c2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001696:	f7ff fbc1 	bl	8000e1c <HAL_GetTick>
 800169a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800169c:	e00a      	b.n	80016b4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800169e:	f7ff fbbd 	bl	8000e1c <HAL_GetTick>
 80016a2:	4602      	mov	r2, r0
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d901      	bls.n	80016b4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80016b0:	2303      	movs	r3, #3
 80016b2:	e0c5      	b.n	8001840 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016b4:	4b65      	ldr	r3, [pc, #404]	; (800184c <HAL_RCC_OscConfig+0x4e8>)
 80016b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016b8:	f003 0302 	and.w	r3, r3, #2
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d0ee      	beq.n	800169e <HAL_RCC_OscConfig+0x33a>
 80016c0:	e014      	b.n	80016ec <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016c2:	f7ff fbab 	bl	8000e1c <HAL_GetTick>
 80016c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016c8:	e00a      	b.n	80016e0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016ca:	f7ff fba7 	bl	8000e1c <HAL_GetTick>
 80016ce:	4602      	mov	r2, r0
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80016d8:	4293      	cmp	r3, r2
 80016da:	d901      	bls.n	80016e0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80016dc:	2303      	movs	r3, #3
 80016de:	e0af      	b.n	8001840 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016e0:	4b5a      	ldr	r3, [pc, #360]	; (800184c <HAL_RCC_OscConfig+0x4e8>)
 80016e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016e4:	f003 0302 	and.w	r3, r3, #2
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d1ee      	bne.n	80016ca <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016ec:	7dfb      	ldrb	r3, [r7, #23]
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d105      	bne.n	80016fe <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016f2:	4b56      	ldr	r3, [pc, #344]	; (800184c <HAL_RCC_OscConfig+0x4e8>)
 80016f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f6:	4a55      	ldr	r2, [pc, #340]	; (800184c <HAL_RCC_OscConfig+0x4e8>)
 80016f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016fc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	699b      	ldr	r3, [r3, #24]
 8001702:	2b00      	cmp	r3, #0
 8001704:	f000 809b 	beq.w	800183e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001708:	4b50      	ldr	r3, [pc, #320]	; (800184c <HAL_RCC_OscConfig+0x4e8>)
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	f003 030c 	and.w	r3, r3, #12
 8001710:	2b08      	cmp	r3, #8
 8001712:	d05c      	beq.n	80017ce <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	699b      	ldr	r3, [r3, #24]
 8001718:	2b02      	cmp	r3, #2
 800171a:	d141      	bne.n	80017a0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800171c:	4b4c      	ldr	r3, [pc, #304]	; (8001850 <HAL_RCC_OscConfig+0x4ec>)
 800171e:	2200      	movs	r2, #0
 8001720:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001722:	f7ff fb7b 	bl	8000e1c <HAL_GetTick>
 8001726:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001728:	e008      	b.n	800173c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800172a:	f7ff fb77 	bl	8000e1c <HAL_GetTick>
 800172e:	4602      	mov	r2, r0
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	2b02      	cmp	r3, #2
 8001736:	d901      	bls.n	800173c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001738:	2303      	movs	r3, #3
 800173a:	e081      	b.n	8001840 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800173c:	4b43      	ldr	r3, [pc, #268]	; (800184c <HAL_RCC_OscConfig+0x4e8>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001744:	2b00      	cmp	r3, #0
 8001746:	d1f0      	bne.n	800172a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	69da      	ldr	r2, [r3, #28]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6a1b      	ldr	r3, [r3, #32]
 8001750:	431a      	orrs	r2, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001756:	019b      	lsls	r3, r3, #6
 8001758:	431a      	orrs	r2, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800175e:	085b      	lsrs	r3, r3, #1
 8001760:	3b01      	subs	r3, #1
 8001762:	041b      	lsls	r3, r3, #16
 8001764:	431a      	orrs	r2, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800176a:	061b      	lsls	r3, r3, #24
 800176c:	4937      	ldr	r1, [pc, #220]	; (800184c <HAL_RCC_OscConfig+0x4e8>)
 800176e:	4313      	orrs	r3, r2
 8001770:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001772:	4b37      	ldr	r3, [pc, #220]	; (8001850 <HAL_RCC_OscConfig+0x4ec>)
 8001774:	2201      	movs	r2, #1
 8001776:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001778:	f7ff fb50 	bl	8000e1c <HAL_GetTick>
 800177c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800177e:	e008      	b.n	8001792 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001780:	f7ff fb4c 	bl	8000e1c <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b02      	cmp	r3, #2
 800178c:	d901      	bls.n	8001792 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e056      	b.n	8001840 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001792:	4b2e      	ldr	r3, [pc, #184]	; (800184c <HAL_RCC_OscConfig+0x4e8>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d0f0      	beq.n	8001780 <HAL_RCC_OscConfig+0x41c>
 800179e:	e04e      	b.n	800183e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017a0:	4b2b      	ldr	r3, [pc, #172]	; (8001850 <HAL_RCC_OscConfig+0x4ec>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a6:	f7ff fb39 	bl	8000e1c <HAL_GetTick>
 80017aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017ac:	e008      	b.n	80017c0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017ae:	f7ff fb35 	bl	8000e1c <HAL_GetTick>
 80017b2:	4602      	mov	r2, r0
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d901      	bls.n	80017c0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80017bc:	2303      	movs	r3, #3
 80017be:	e03f      	b.n	8001840 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017c0:	4b22      	ldr	r3, [pc, #136]	; (800184c <HAL_RCC_OscConfig+0x4e8>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d1f0      	bne.n	80017ae <HAL_RCC_OscConfig+0x44a>
 80017cc:	e037      	b.n	800183e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	699b      	ldr	r3, [r3, #24]
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d101      	bne.n	80017da <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e032      	b.n	8001840 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80017da:	4b1c      	ldr	r3, [pc, #112]	; (800184c <HAL_RCC_OscConfig+0x4e8>)
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	699b      	ldr	r3, [r3, #24]
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d028      	beq.n	800183a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d121      	bne.n	800183a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001800:	429a      	cmp	r2, r3
 8001802:	d11a      	bne.n	800183a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001804:	68fa      	ldr	r2, [r7, #12]
 8001806:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800180a:	4013      	ands	r3, r2
 800180c:	687a      	ldr	r2, [r7, #4]
 800180e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001810:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001812:	4293      	cmp	r3, r2
 8001814:	d111      	bne.n	800183a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001820:	085b      	lsrs	r3, r3, #1
 8001822:	3b01      	subs	r3, #1
 8001824:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001826:	429a      	cmp	r2, r3
 8001828:	d107      	bne.n	800183a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001834:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001836:	429a      	cmp	r2, r3
 8001838:	d001      	beq.n	800183e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e000      	b.n	8001840 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800183e:	2300      	movs	r3, #0
}
 8001840:	4618      	mov	r0, r3
 8001842:	3718      	adds	r7, #24
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	40007000 	.word	0x40007000
 800184c:	40023800 	.word	0x40023800
 8001850:	42470060 	.word	0x42470060

08001854 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d101      	bne.n	8001868 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e0cc      	b.n	8001a02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001868:	4b68      	ldr	r3, [pc, #416]	; (8001a0c <HAL_RCC_ClockConfig+0x1b8>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0307 	and.w	r3, r3, #7
 8001870:	683a      	ldr	r2, [r7, #0]
 8001872:	429a      	cmp	r2, r3
 8001874:	d90c      	bls.n	8001890 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001876:	4b65      	ldr	r3, [pc, #404]	; (8001a0c <HAL_RCC_ClockConfig+0x1b8>)
 8001878:	683a      	ldr	r2, [r7, #0]
 800187a:	b2d2      	uxtb	r2, r2
 800187c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800187e:	4b63      	ldr	r3, [pc, #396]	; (8001a0c <HAL_RCC_ClockConfig+0x1b8>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0307 	and.w	r3, r3, #7
 8001886:	683a      	ldr	r2, [r7, #0]
 8001888:	429a      	cmp	r2, r3
 800188a:	d001      	beq.n	8001890 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e0b8      	b.n	8001a02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0302 	and.w	r3, r3, #2
 8001898:	2b00      	cmp	r3, #0
 800189a:	d020      	beq.n	80018de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 0304 	and.w	r3, r3, #4
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d005      	beq.n	80018b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018a8:	4b59      	ldr	r3, [pc, #356]	; (8001a10 <HAL_RCC_ClockConfig+0x1bc>)
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	4a58      	ldr	r2, [pc, #352]	; (8001a10 <HAL_RCC_ClockConfig+0x1bc>)
 80018ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80018b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0308 	and.w	r3, r3, #8
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d005      	beq.n	80018cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018c0:	4b53      	ldr	r3, [pc, #332]	; (8001a10 <HAL_RCC_ClockConfig+0x1bc>)
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	4a52      	ldr	r2, [pc, #328]	; (8001a10 <HAL_RCC_ClockConfig+0x1bc>)
 80018c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80018ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018cc:	4b50      	ldr	r3, [pc, #320]	; (8001a10 <HAL_RCC_ClockConfig+0x1bc>)
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	494d      	ldr	r1, [pc, #308]	; (8001a10 <HAL_RCC_ClockConfig+0x1bc>)
 80018da:	4313      	orrs	r3, r2
 80018dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d044      	beq.n	8001974 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d107      	bne.n	8001902 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018f2:	4b47      	ldr	r3, [pc, #284]	; (8001a10 <HAL_RCC_ClockConfig+0x1bc>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d119      	bne.n	8001932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e07f      	b.n	8001a02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	2b02      	cmp	r3, #2
 8001908:	d003      	beq.n	8001912 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800190e:	2b03      	cmp	r3, #3
 8001910:	d107      	bne.n	8001922 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001912:	4b3f      	ldr	r3, [pc, #252]	; (8001a10 <HAL_RCC_ClockConfig+0x1bc>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d109      	bne.n	8001932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e06f      	b.n	8001a02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001922:	4b3b      	ldr	r3, [pc, #236]	; (8001a10 <HAL_RCC_ClockConfig+0x1bc>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0302 	and.w	r3, r3, #2
 800192a:	2b00      	cmp	r3, #0
 800192c:	d101      	bne.n	8001932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e067      	b.n	8001a02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001932:	4b37      	ldr	r3, [pc, #220]	; (8001a10 <HAL_RCC_ClockConfig+0x1bc>)
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f023 0203 	bic.w	r2, r3, #3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	4934      	ldr	r1, [pc, #208]	; (8001a10 <HAL_RCC_ClockConfig+0x1bc>)
 8001940:	4313      	orrs	r3, r2
 8001942:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001944:	f7ff fa6a 	bl	8000e1c <HAL_GetTick>
 8001948:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800194a:	e00a      	b.n	8001962 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800194c:	f7ff fa66 	bl	8000e1c <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	f241 3288 	movw	r2, #5000	; 0x1388
 800195a:	4293      	cmp	r3, r2
 800195c:	d901      	bls.n	8001962 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e04f      	b.n	8001a02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001962:	4b2b      	ldr	r3, [pc, #172]	; (8001a10 <HAL_RCC_ClockConfig+0x1bc>)
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	f003 020c 	and.w	r2, r3, #12
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	429a      	cmp	r2, r3
 8001972:	d1eb      	bne.n	800194c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001974:	4b25      	ldr	r3, [pc, #148]	; (8001a0c <HAL_RCC_ClockConfig+0x1b8>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0307 	and.w	r3, r3, #7
 800197c:	683a      	ldr	r2, [r7, #0]
 800197e:	429a      	cmp	r2, r3
 8001980:	d20c      	bcs.n	800199c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001982:	4b22      	ldr	r3, [pc, #136]	; (8001a0c <HAL_RCC_ClockConfig+0x1b8>)
 8001984:	683a      	ldr	r2, [r7, #0]
 8001986:	b2d2      	uxtb	r2, r2
 8001988:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800198a:	4b20      	ldr	r3, [pc, #128]	; (8001a0c <HAL_RCC_ClockConfig+0x1b8>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0307 	and.w	r3, r3, #7
 8001992:	683a      	ldr	r2, [r7, #0]
 8001994:	429a      	cmp	r2, r3
 8001996:	d001      	beq.n	800199c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e032      	b.n	8001a02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0304 	and.w	r3, r3, #4
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d008      	beq.n	80019ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019a8:	4b19      	ldr	r3, [pc, #100]	; (8001a10 <HAL_RCC_ClockConfig+0x1bc>)
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	4916      	ldr	r1, [pc, #88]	; (8001a10 <HAL_RCC_ClockConfig+0x1bc>)
 80019b6:	4313      	orrs	r3, r2
 80019b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0308 	and.w	r3, r3, #8
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d009      	beq.n	80019da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019c6:	4b12      	ldr	r3, [pc, #72]	; (8001a10 <HAL_RCC_ClockConfig+0x1bc>)
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	691b      	ldr	r3, [r3, #16]
 80019d2:	00db      	lsls	r3, r3, #3
 80019d4:	490e      	ldr	r1, [pc, #56]	; (8001a10 <HAL_RCC_ClockConfig+0x1bc>)
 80019d6:	4313      	orrs	r3, r2
 80019d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019da:	f000 f821 	bl	8001a20 <HAL_RCC_GetSysClockFreq>
 80019de:	4602      	mov	r2, r0
 80019e0:	4b0b      	ldr	r3, [pc, #44]	; (8001a10 <HAL_RCC_ClockConfig+0x1bc>)
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	091b      	lsrs	r3, r3, #4
 80019e6:	f003 030f 	and.w	r3, r3, #15
 80019ea:	490a      	ldr	r1, [pc, #40]	; (8001a14 <HAL_RCC_ClockConfig+0x1c0>)
 80019ec:	5ccb      	ldrb	r3, [r1, r3]
 80019ee:	fa22 f303 	lsr.w	r3, r2, r3
 80019f2:	4a09      	ldr	r2, [pc, #36]	; (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 80019f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80019f6:	4b09      	ldr	r3, [pc, #36]	; (8001a1c <HAL_RCC_ClockConfig+0x1c8>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7ff f922 	bl	8000c44 <HAL_InitTick>

  return HAL_OK;
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3710      	adds	r7, #16
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	40023c00 	.word	0x40023c00
 8001a10:	40023800 	.word	0x40023800
 8001a14:	080081a0 	.word	0x080081a0
 8001a18:	20000000 	.word	0x20000000
 8001a1c:	20000004 	.word	0x20000004

08001a20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a20:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a24:	b084      	sub	sp, #16
 8001a26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	607b      	str	r3, [r7, #4]
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	2300      	movs	r3, #0
 8001a32:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001a34:	2300      	movs	r3, #0
 8001a36:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a38:	4b67      	ldr	r3, [pc, #412]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f003 030c 	and.w	r3, r3, #12
 8001a40:	2b08      	cmp	r3, #8
 8001a42:	d00d      	beq.n	8001a60 <HAL_RCC_GetSysClockFreq+0x40>
 8001a44:	2b08      	cmp	r3, #8
 8001a46:	f200 80bd 	bhi.w	8001bc4 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d002      	beq.n	8001a54 <HAL_RCC_GetSysClockFreq+0x34>
 8001a4e:	2b04      	cmp	r3, #4
 8001a50:	d003      	beq.n	8001a5a <HAL_RCC_GetSysClockFreq+0x3a>
 8001a52:	e0b7      	b.n	8001bc4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a54:	4b61      	ldr	r3, [pc, #388]	; (8001bdc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001a56:	60bb      	str	r3, [r7, #8]
       break;
 8001a58:	e0b7      	b.n	8001bca <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a5a:	4b61      	ldr	r3, [pc, #388]	; (8001be0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001a5c:	60bb      	str	r3, [r7, #8]
      break;
 8001a5e:	e0b4      	b.n	8001bca <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a60:	4b5d      	ldr	r3, [pc, #372]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a68:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a6a:	4b5b      	ldr	r3, [pc, #364]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d04d      	beq.n	8001b12 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a76:	4b58      	ldr	r3, [pc, #352]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	099b      	lsrs	r3, r3, #6
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	f04f 0300 	mov.w	r3, #0
 8001a82:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001a86:	f04f 0100 	mov.w	r1, #0
 8001a8a:	ea02 0800 	and.w	r8, r2, r0
 8001a8e:	ea03 0901 	and.w	r9, r3, r1
 8001a92:	4640      	mov	r0, r8
 8001a94:	4649      	mov	r1, r9
 8001a96:	f04f 0200 	mov.w	r2, #0
 8001a9a:	f04f 0300 	mov.w	r3, #0
 8001a9e:	014b      	lsls	r3, r1, #5
 8001aa0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001aa4:	0142      	lsls	r2, r0, #5
 8001aa6:	4610      	mov	r0, r2
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	ebb0 0008 	subs.w	r0, r0, r8
 8001aae:	eb61 0109 	sbc.w	r1, r1, r9
 8001ab2:	f04f 0200 	mov.w	r2, #0
 8001ab6:	f04f 0300 	mov.w	r3, #0
 8001aba:	018b      	lsls	r3, r1, #6
 8001abc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001ac0:	0182      	lsls	r2, r0, #6
 8001ac2:	1a12      	subs	r2, r2, r0
 8001ac4:	eb63 0301 	sbc.w	r3, r3, r1
 8001ac8:	f04f 0000 	mov.w	r0, #0
 8001acc:	f04f 0100 	mov.w	r1, #0
 8001ad0:	00d9      	lsls	r1, r3, #3
 8001ad2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001ad6:	00d0      	lsls	r0, r2, #3
 8001ad8:	4602      	mov	r2, r0
 8001ada:	460b      	mov	r3, r1
 8001adc:	eb12 0208 	adds.w	r2, r2, r8
 8001ae0:	eb43 0309 	adc.w	r3, r3, r9
 8001ae4:	f04f 0000 	mov.w	r0, #0
 8001ae8:	f04f 0100 	mov.w	r1, #0
 8001aec:	0259      	lsls	r1, r3, #9
 8001aee:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001af2:	0250      	lsls	r0, r2, #9
 8001af4:	4602      	mov	r2, r0
 8001af6:	460b      	mov	r3, r1
 8001af8:	4610      	mov	r0, r2
 8001afa:	4619      	mov	r1, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	461a      	mov	r2, r3
 8001b00:	f04f 0300 	mov.w	r3, #0
 8001b04:	f7fe fc04 	bl	8000310 <__aeabi_uldivmod>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	e04a      	b.n	8001ba8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b12:	4b31      	ldr	r3, [pc, #196]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	099b      	lsrs	r3, r3, #6
 8001b18:	461a      	mov	r2, r3
 8001b1a:	f04f 0300 	mov.w	r3, #0
 8001b1e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001b22:	f04f 0100 	mov.w	r1, #0
 8001b26:	ea02 0400 	and.w	r4, r2, r0
 8001b2a:	ea03 0501 	and.w	r5, r3, r1
 8001b2e:	4620      	mov	r0, r4
 8001b30:	4629      	mov	r1, r5
 8001b32:	f04f 0200 	mov.w	r2, #0
 8001b36:	f04f 0300 	mov.w	r3, #0
 8001b3a:	014b      	lsls	r3, r1, #5
 8001b3c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001b40:	0142      	lsls	r2, r0, #5
 8001b42:	4610      	mov	r0, r2
 8001b44:	4619      	mov	r1, r3
 8001b46:	1b00      	subs	r0, r0, r4
 8001b48:	eb61 0105 	sbc.w	r1, r1, r5
 8001b4c:	f04f 0200 	mov.w	r2, #0
 8001b50:	f04f 0300 	mov.w	r3, #0
 8001b54:	018b      	lsls	r3, r1, #6
 8001b56:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001b5a:	0182      	lsls	r2, r0, #6
 8001b5c:	1a12      	subs	r2, r2, r0
 8001b5e:	eb63 0301 	sbc.w	r3, r3, r1
 8001b62:	f04f 0000 	mov.w	r0, #0
 8001b66:	f04f 0100 	mov.w	r1, #0
 8001b6a:	00d9      	lsls	r1, r3, #3
 8001b6c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001b70:	00d0      	lsls	r0, r2, #3
 8001b72:	4602      	mov	r2, r0
 8001b74:	460b      	mov	r3, r1
 8001b76:	1912      	adds	r2, r2, r4
 8001b78:	eb45 0303 	adc.w	r3, r5, r3
 8001b7c:	f04f 0000 	mov.w	r0, #0
 8001b80:	f04f 0100 	mov.w	r1, #0
 8001b84:	0299      	lsls	r1, r3, #10
 8001b86:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001b8a:	0290      	lsls	r0, r2, #10
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	460b      	mov	r3, r1
 8001b90:	4610      	mov	r0, r2
 8001b92:	4619      	mov	r1, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	461a      	mov	r2, r3
 8001b98:	f04f 0300 	mov.w	r3, #0
 8001b9c:	f7fe fbb8 	bl	8000310 <__aeabi_uldivmod>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ba8:	4b0b      	ldr	r3, [pc, #44]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	0c1b      	lsrs	r3, r3, #16
 8001bae:	f003 0303 	and.w	r3, r3, #3
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001bb8:	68fa      	ldr	r2, [r7, #12]
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bc0:	60bb      	str	r3, [r7, #8]
      break;
 8001bc2:	e002      	b.n	8001bca <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001bc4:	4b05      	ldr	r3, [pc, #20]	; (8001bdc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001bc6:	60bb      	str	r3, [r7, #8]
      break;
 8001bc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bca:	68bb      	ldr	r3, [r7, #8]
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3710      	adds	r7, #16
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001bd6:	bf00      	nop
 8001bd8:	40023800 	.word	0x40023800
 8001bdc:	00f42400 	.word	0x00f42400
 8001be0:	007a1200 	.word	0x007a1200

08001be4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001be8:	4b03      	ldr	r3, [pc, #12]	; (8001bf8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001bea:	681b      	ldr	r3, [r3, #0]
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	20000000 	.word	0x20000000

08001bfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c00:	f7ff fff0 	bl	8001be4 <HAL_RCC_GetHCLKFreq>
 8001c04:	4602      	mov	r2, r0
 8001c06:	4b05      	ldr	r3, [pc, #20]	; (8001c1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	0a9b      	lsrs	r3, r3, #10
 8001c0c:	f003 0307 	and.w	r3, r3, #7
 8001c10:	4903      	ldr	r1, [pc, #12]	; (8001c20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c12:	5ccb      	ldrb	r3, [r1, r3]
 8001c14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	40023800 	.word	0x40023800
 8001c20:	080081b0 	.word	0x080081b0

08001c24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c28:	f7ff ffdc 	bl	8001be4 <HAL_RCC_GetHCLKFreq>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	4b05      	ldr	r3, [pc, #20]	; (8001c44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	0b5b      	lsrs	r3, r3, #13
 8001c34:	f003 0307 	and.w	r3, r3, #7
 8001c38:	4903      	ldr	r1, [pc, #12]	; (8001c48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c3a:	5ccb      	ldrb	r3, [r1, r3]
 8001c3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	40023800 	.word	0x40023800
 8001c48:	080081b0 	.word	0x080081b0

08001c4c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	220f      	movs	r2, #15
 8001c5a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c5c:	4b12      	ldr	r3, [pc, #72]	; (8001ca8 <HAL_RCC_GetClockConfig+0x5c>)
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	f003 0203 	and.w	r2, r3, #3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c68:	4b0f      	ldr	r3, [pc, #60]	; (8001ca8 <HAL_RCC_GetClockConfig+0x5c>)
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c74:	4b0c      	ldr	r3, [pc, #48]	; (8001ca8 <HAL_RCC_GetClockConfig+0x5c>)
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001c80:	4b09      	ldr	r3, [pc, #36]	; (8001ca8 <HAL_RCC_GetClockConfig+0x5c>)
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	08db      	lsrs	r3, r3, #3
 8001c86:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c8e:	4b07      	ldr	r3, [pc, #28]	; (8001cac <HAL_RCC_GetClockConfig+0x60>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0207 	and.w	r2, r3, #7
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	601a      	str	r2, [r3, #0]
}
 8001c9a:	bf00      	nop
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	40023800 	.word	0x40023800
 8001cac:	40023c00 	.word	0x40023c00

08001cb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d101      	bne.n	8001cc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e041      	b.n	8001d46 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d106      	bne.n	8001cdc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f000 f839 	bl	8001d4e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2202      	movs	r2, #2
 8001ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	3304      	adds	r3, #4
 8001cec:	4619      	mov	r1, r3
 8001cee:	4610      	mov	r0, r2
 8001cf0:	f000 f9d8 	bl	80020a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2201      	movs	r2, #1
 8001d08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2201      	movs	r2, #1
 8001d18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	b083      	sub	sp, #12
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d56:	bf00      	nop
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
	...

08001d64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b085      	sub	sp, #20
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d001      	beq.n	8001d7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e04e      	b.n	8001e1a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2202      	movs	r2, #2
 8001d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	68da      	ldr	r2, [r3, #12]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f042 0201 	orr.w	r2, r2, #1
 8001d92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a23      	ldr	r2, [pc, #140]	; (8001e28 <HAL_TIM_Base_Start_IT+0xc4>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d022      	beq.n	8001de4 <HAL_TIM_Base_Start_IT+0x80>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001da6:	d01d      	beq.n	8001de4 <HAL_TIM_Base_Start_IT+0x80>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a1f      	ldr	r2, [pc, #124]	; (8001e2c <HAL_TIM_Base_Start_IT+0xc8>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d018      	beq.n	8001de4 <HAL_TIM_Base_Start_IT+0x80>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a1e      	ldr	r2, [pc, #120]	; (8001e30 <HAL_TIM_Base_Start_IT+0xcc>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d013      	beq.n	8001de4 <HAL_TIM_Base_Start_IT+0x80>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a1c      	ldr	r2, [pc, #112]	; (8001e34 <HAL_TIM_Base_Start_IT+0xd0>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d00e      	beq.n	8001de4 <HAL_TIM_Base_Start_IT+0x80>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a1b      	ldr	r2, [pc, #108]	; (8001e38 <HAL_TIM_Base_Start_IT+0xd4>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d009      	beq.n	8001de4 <HAL_TIM_Base_Start_IT+0x80>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a19      	ldr	r2, [pc, #100]	; (8001e3c <HAL_TIM_Base_Start_IT+0xd8>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d004      	beq.n	8001de4 <HAL_TIM_Base_Start_IT+0x80>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a18      	ldr	r2, [pc, #96]	; (8001e40 <HAL_TIM_Base_Start_IT+0xdc>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d111      	bne.n	8001e08 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	f003 0307 	and.w	r3, r3, #7
 8001dee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2b06      	cmp	r3, #6
 8001df4:	d010      	beq.n	8001e18 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f042 0201 	orr.w	r2, r2, #1
 8001e04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e06:	e007      	b.n	8001e18 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f042 0201 	orr.w	r2, r2, #1
 8001e16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3714      	adds	r7, #20
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	40010000 	.word	0x40010000
 8001e2c:	40000400 	.word	0x40000400
 8001e30:	40000800 	.word	0x40000800
 8001e34:	40000c00 	.word	0x40000c00
 8001e38:	40010400 	.word	0x40010400
 8001e3c:	40014000 	.word	0x40014000
 8001e40:	40001800 	.word	0x40001800

08001e44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	691b      	ldr	r3, [r3, #16]
 8001e52:	f003 0302 	and.w	r3, r3, #2
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d122      	bne.n	8001ea0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	f003 0302 	and.w	r3, r3, #2
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d11b      	bne.n	8001ea0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f06f 0202 	mvn.w	r2, #2
 8001e70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2201      	movs	r2, #1
 8001e76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	699b      	ldr	r3, [r3, #24]
 8001e7e:	f003 0303 	and.w	r3, r3, #3
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d003      	beq.n	8001e8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f000 f8ee 	bl	8002068 <HAL_TIM_IC_CaptureCallback>
 8001e8c:	e005      	b.n	8001e9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f000 f8e0 	bl	8002054 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f000 f8f1 	bl	800207c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	691b      	ldr	r3, [r3, #16]
 8001ea6:	f003 0304 	and.w	r3, r3, #4
 8001eaa:	2b04      	cmp	r3, #4
 8001eac:	d122      	bne.n	8001ef4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	f003 0304 	and.w	r3, r3, #4
 8001eb8:	2b04      	cmp	r3, #4
 8001eba:	d11b      	bne.n	8001ef4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f06f 0204 	mvn.w	r2, #4
 8001ec4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2202      	movs	r2, #2
 8001eca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	699b      	ldr	r3, [r3, #24]
 8001ed2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d003      	beq.n	8001ee2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f000 f8c4 	bl	8002068 <HAL_TIM_IC_CaptureCallback>
 8001ee0:	e005      	b.n	8001eee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f000 f8b6 	bl	8002054 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f000 f8c7 	bl	800207c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	f003 0308 	and.w	r3, r3, #8
 8001efe:	2b08      	cmp	r3, #8
 8001f00:	d122      	bne.n	8001f48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	f003 0308 	and.w	r3, r3, #8
 8001f0c:	2b08      	cmp	r3, #8
 8001f0e:	d11b      	bne.n	8001f48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f06f 0208 	mvn.w	r2, #8
 8001f18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2204      	movs	r2, #4
 8001f1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	69db      	ldr	r3, [r3, #28]
 8001f26:	f003 0303 	and.w	r3, r3, #3
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d003      	beq.n	8001f36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f000 f89a 	bl	8002068 <HAL_TIM_IC_CaptureCallback>
 8001f34:	e005      	b.n	8001f42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f000 f88c 	bl	8002054 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f000 f89d 	bl	800207c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	691b      	ldr	r3, [r3, #16]
 8001f4e:	f003 0310 	and.w	r3, r3, #16
 8001f52:	2b10      	cmp	r3, #16
 8001f54:	d122      	bne.n	8001f9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	f003 0310 	and.w	r3, r3, #16
 8001f60:	2b10      	cmp	r3, #16
 8001f62:	d11b      	bne.n	8001f9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f06f 0210 	mvn.w	r2, #16
 8001f6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2208      	movs	r2, #8
 8001f72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	69db      	ldr	r3, [r3, #28]
 8001f7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d003      	beq.n	8001f8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f000 f870 	bl	8002068 <HAL_TIM_IC_CaptureCallback>
 8001f88:	e005      	b.n	8001f96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f000 f862 	bl	8002054 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f000 f873 	bl	800207c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	691b      	ldr	r3, [r3, #16]
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d10e      	bne.n	8001fc8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	f003 0301 	and.w	r3, r3, #1
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d107      	bne.n	8001fc8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f06f 0201 	mvn.w	r2, #1
 8001fc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f7fe fdac 	bl	8000b20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fd2:	2b80      	cmp	r3, #128	; 0x80
 8001fd4:	d10e      	bne.n	8001ff4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fe0:	2b80      	cmp	r3, #128	; 0x80
 8001fe2:	d107      	bne.n	8001ff4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001fec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f000 f902 	bl	80021f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	691b      	ldr	r3, [r3, #16]
 8001ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ffe:	2b40      	cmp	r3, #64	; 0x40
 8002000:	d10e      	bne.n	8002020 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800200c:	2b40      	cmp	r3, #64	; 0x40
 800200e:	d107      	bne.n	8002020 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002018:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f000 f838 	bl	8002090 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	691b      	ldr	r3, [r3, #16]
 8002026:	f003 0320 	and.w	r3, r3, #32
 800202a:	2b20      	cmp	r3, #32
 800202c:	d10e      	bne.n	800204c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	f003 0320 	and.w	r3, r3, #32
 8002038:	2b20      	cmp	r3, #32
 800203a:	d107      	bne.n	800204c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f06f 0220 	mvn.w	r2, #32
 8002044:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f000 f8cc 	bl	80021e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800204c:	bf00      	nop
 800204e:	3708      	adds	r7, #8
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800205c:	bf00      	nop
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002070:	bf00      	nop
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002084:	bf00      	nop
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002098:	bf00      	nop
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b085      	sub	sp, #20
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4a40      	ldr	r2, [pc, #256]	; (80021b8 <TIM_Base_SetConfig+0x114>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d013      	beq.n	80020e4 <TIM_Base_SetConfig+0x40>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020c2:	d00f      	beq.n	80020e4 <TIM_Base_SetConfig+0x40>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	4a3d      	ldr	r2, [pc, #244]	; (80021bc <TIM_Base_SetConfig+0x118>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d00b      	beq.n	80020e4 <TIM_Base_SetConfig+0x40>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	4a3c      	ldr	r2, [pc, #240]	; (80021c0 <TIM_Base_SetConfig+0x11c>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d007      	beq.n	80020e4 <TIM_Base_SetConfig+0x40>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	4a3b      	ldr	r2, [pc, #236]	; (80021c4 <TIM_Base_SetConfig+0x120>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d003      	beq.n	80020e4 <TIM_Base_SetConfig+0x40>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	4a3a      	ldr	r2, [pc, #232]	; (80021c8 <TIM_Base_SetConfig+0x124>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d108      	bne.n	80020f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	68fa      	ldr	r2, [r7, #12]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a2f      	ldr	r2, [pc, #188]	; (80021b8 <TIM_Base_SetConfig+0x114>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d02b      	beq.n	8002156 <TIM_Base_SetConfig+0xb2>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002104:	d027      	beq.n	8002156 <TIM_Base_SetConfig+0xb2>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a2c      	ldr	r2, [pc, #176]	; (80021bc <TIM_Base_SetConfig+0x118>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d023      	beq.n	8002156 <TIM_Base_SetConfig+0xb2>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a2b      	ldr	r2, [pc, #172]	; (80021c0 <TIM_Base_SetConfig+0x11c>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d01f      	beq.n	8002156 <TIM_Base_SetConfig+0xb2>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a2a      	ldr	r2, [pc, #168]	; (80021c4 <TIM_Base_SetConfig+0x120>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d01b      	beq.n	8002156 <TIM_Base_SetConfig+0xb2>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a29      	ldr	r2, [pc, #164]	; (80021c8 <TIM_Base_SetConfig+0x124>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d017      	beq.n	8002156 <TIM_Base_SetConfig+0xb2>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a28      	ldr	r2, [pc, #160]	; (80021cc <TIM_Base_SetConfig+0x128>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d013      	beq.n	8002156 <TIM_Base_SetConfig+0xb2>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a27      	ldr	r2, [pc, #156]	; (80021d0 <TIM_Base_SetConfig+0x12c>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d00f      	beq.n	8002156 <TIM_Base_SetConfig+0xb2>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a26      	ldr	r2, [pc, #152]	; (80021d4 <TIM_Base_SetConfig+0x130>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d00b      	beq.n	8002156 <TIM_Base_SetConfig+0xb2>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a25      	ldr	r2, [pc, #148]	; (80021d8 <TIM_Base_SetConfig+0x134>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d007      	beq.n	8002156 <TIM_Base_SetConfig+0xb2>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a24      	ldr	r2, [pc, #144]	; (80021dc <TIM_Base_SetConfig+0x138>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d003      	beq.n	8002156 <TIM_Base_SetConfig+0xb2>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a23      	ldr	r2, [pc, #140]	; (80021e0 <TIM_Base_SetConfig+0x13c>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d108      	bne.n	8002168 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800215c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	68fa      	ldr	r2, [r7, #12]
 8002164:	4313      	orrs	r3, r2
 8002166:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	695b      	ldr	r3, [r3, #20]
 8002172:	4313      	orrs	r3, r2
 8002174:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	68fa      	ldr	r2, [r7, #12]
 800217a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	689a      	ldr	r2, [r3, #8]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	4a0a      	ldr	r2, [pc, #40]	; (80021b8 <TIM_Base_SetConfig+0x114>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d003      	beq.n	800219c <TIM_Base_SetConfig+0xf8>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	4a0c      	ldr	r2, [pc, #48]	; (80021c8 <TIM_Base_SetConfig+0x124>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d103      	bne.n	80021a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	691a      	ldr	r2, [r3, #16]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2201      	movs	r2, #1
 80021a8:	615a      	str	r2, [r3, #20]
}
 80021aa:	bf00      	nop
 80021ac:	3714      	adds	r7, #20
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	40010000 	.word	0x40010000
 80021bc:	40000400 	.word	0x40000400
 80021c0:	40000800 	.word	0x40000800
 80021c4:	40000c00 	.word	0x40000c00
 80021c8:	40010400 	.word	0x40010400
 80021cc:	40014000 	.word	0x40014000
 80021d0:	40014400 	.word	0x40014400
 80021d4:	40014800 	.word	0x40014800
 80021d8:	40001800 	.word	0x40001800
 80021dc:	40001c00 	.word	0x40001c00
 80021e0:	40002000 	.word	0x40002000

080021e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80021ec:	bf00      	nop
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002200:	bf00      	nop
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d101      	bne.n	800221e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e03f      	b.n	800229e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b00      	cmp	r3, #0
 8002228:	d106      	bne.n	8002238 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f7fe fcb6 	bl	8000ba4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2224      	movs	r2, #36	; 0x24
 800223c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	68da      	ldr	r2, [r3, #12]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800224e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f000 f829 	bl	80022a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	691a      	ldr	r2, [r3, #16]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002264:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	695a      	ldr	r2, [r3, #20]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002274:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68da      	ldr	r2, [r3, #12]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002284:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2220      	movs	r2, #32
 8002290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2220      	movs	r2, #32
 8002298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
	...

080022a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80022a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022ac:	b09f      	sub	sp, #124	; 0x7c
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	691b      	ldr	r3, [r3, #16]
 80022b8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80022bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022be:	68d9      	ldr	r1, [r3, #12]
 80022c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	ea40 0301 	orr.w	r3, r0, r1
 80022c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80022ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022cc:	689a      	ldr	r2, [r3, #8]
 80022ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022d0:	691b      	ldr	r3, [r3, #16]
 80022d2:	431a      	orrs	r2, r3
 80022d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022d6:	695b      	ldr	r3, [r3, #20]
 80022d8:	431a      	orrs	r2, r3
 80022da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022dc:	69db      	ldr	r3, [r3, #28]
 80022de:	4313      	orrs	r3, r2
 80022e0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80022e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80022ec:	f021 010c 	bic.w	r1, r1, #12
 80022f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80022f6:	430b      	orrs	r3, r1
 80022f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80022fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	695b      	ldr	r3, [r3, #20]
 8002300:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002304:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002306:	6999      	ldr	r1, [r3, #24]
 8002308:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	ea40 0301 	orr.w	r3, r0, r1
 8002310:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002312:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	4bc5      	ldr	r3, [pc, #788]	; (800262c <UART_SetConfig+0x384>)
 8002318:	429a      	cmp	r2, r3
 800231a:	d004      	beq.n	8002326 <UART_SetConfig+0x7e>
 800231c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	4bc3      	ldr	r3, [pc, #780]	; (8002630 <UART_SetConfig+0x388>)
 8002322:	429a      	cmp	r2, r3
 8002324:	d103      	bne.n	800232e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002326:	f7ff fc7d 	bl	8001c24 <HAL_RCC_GetPCLK2Freq>
 800232a:	6778      	str	r0, [r7, #116]	; 0x74
 800232c:	e002      	b.n	8002334 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800232e:	f7ff fc65 	bl	8001bfc <HAL_RCC_GetPCLK1Freq>
 8002332:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002334:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002336:	69db      	ldr	r3, [r3, #28]
 8002338:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800233c:	f040 80b6 	bne.w	80024ac <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002340:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002342:	461c      	mov	r4, r3
 8002344:	f04f 0500 	mov.w	r5, #0
 8002348:	4622      	mov	r2, r4
 800234a:	462b      	mov	r3, r5
 800234c:	1891      	adds	r1, r2, r2
 800234e:	6439      	str	r1, [r7, #64]	; 0x40
 8002350:	415b      	adcs	r3, r3
 8002352:	647b      	str	r3, [r7, #68]	; 0x44
 8002354:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002358:	1912      	adds	r2, r2, r4
 800235a:	eb45 0303 	adc.w	r3, r5, r3
 800235e:	f04f 0000 	mov.w	r0, #0
 8002362:	f04f 0100 	mov.w	r1, #0
 8002366:	00d9      	lsls	r1, r3, #3
 8002368:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800236c:	00d0      	lsls	r0, r2, #3
 800236e:	4602      	mov	r2, r0
 8002370:	460b      	mov	r3, r1
 8002372:	1911      	adds	r1, r2, r4
 8002374:	6639      	str	r1, [r7, #96]	; 0x60
 8002376:	416b      	adcs	r3, r5
 8002378:	667b      	str	r3, [r7, #100]	; 0x64
 800237a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	461a      	mov	r2, r3
 8002380:	f04f 0300 	mov.w	r3, #0
 8002384:	1891      	adds	r1, r2, r2
 8002386:	63b9      	str	r1, [r7, #56]	; 0x38
 8002388:	415b      	adcs	r3, r3
 800238a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800238c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002390:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002394:	f7fd ffbc 	bl	8000310 <__aeabi_uldivmod>
 8002398:	4602      	mov	r2, r0
 800239a:	460b      	mov	r3, r1
 800239c:	4ba5      	ldr	r3, [pc, #660]	; (8002634 <UART_SetConfig+0x38c>)
 800239e:	fba3 2302 	umull	r2, r3, r3, r2
 80023a2:	095b      	lsrs	r3, r3, #5
 80023a4:	011e      	lsls	r6, r3, #4
 80023a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023a8:	461c      	mov	r4, r3
 80023aa:	f04f 0500 	mov.w	r5, #0
 80023ae:	4622      	mov	r2, r4
 80023b0:	462b      	mov	r3, r5
 80023b2:	1891      	adds	r1, r2, r2
 80023b4:	6339      	str	r1, [r7, #48]	; 0x30
 80023b6:	415b      	adcs	r3, r3
 80023b8:	637b      	str	r3, [r7, #52]	; 0x34
 80023ba:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80023be:	1912      	adds	r2, r2, r4
 80023c0:	eb45 0303 	adc.w	r3, r5, r3
 80023c4:	f04f 0000 	mov.w	r0, #0
 80023c8:	f04f 0100 	mov.w	r1, #0
 80023cc:	00d9      	lsls	r1, r3, #3
 80023ce:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80023d2:	00d0      	lsls	r0, r2, #3
 80023d4:	4602      	mov	r2, r0
 80023d6:	460b      	mov	r3, r1
 80023d8:	1911      	adds	r1, r2, r4
 80023da:	65b9      	str	r1, [r7, #88]	; 0x58
 80023dc:	416b      	adcs	r3, r5
 80023de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80023e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	461a      	mov	r2, r3
 80023e6:	f04f 0300 	mov.w	r3, #0
 80023ea:	1891      	adds	r1, r2, r2
 80023ec:	62b9      	str	r1, [r7, #40]	; 0x28
 80023ee:	415b      	adcs	r3, r3
 80023f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80023f6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80023fa:	f7fd ff89 	bl	8000310 <__aeabi_uldivmod>
 80023fe:	4602      	mov	r2, r0
 8002400:	460b      	mov	r3, r1
 8002402:	4b8c      	ldr	r3, [pc, #560]	; (8002634 <UART_SetConfig+0x38c>)
 8002404:	fba3 1302 	umull	r1, r3, r3, r2
 8002408:	095b      	lsrs	r3, r3, #5
 800240a:	2164      	movs	r1, #100	; 0x64
 800240c:	fb01 f303 	mul.w	r3, r1, r3
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	00db      	lsls	r3, r3, #3
 8002414:	3332      	adds	r3, #50	; 0x32
 8002416:	4a87      	ldr	r2, [pc, #540]	; (8002634 <UART_SetConfig+0x38c>)
 8002418:	fba2 2303 	umull	r2, r3, r2, r3
 800241c:	095b      	lsrs	r3, r3, #5
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002424:	441e      	add	r6, r3
 8002426:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002428:	4618      	mov	r0, r3
 800242a:	f04f 0100 	mov.w	r1, #0
 800242e:	4602      	mov	r2, r0
 8002430:	460b      	mov	r3, r1
 8002432:	1894      	adds	r4, r2, r2
 8002434:	623c      	str	r4, [r7, #32]
 8002436:	415b      	adcs	r3, r3
 8002438:	627b      	str	r3, [r7, #36]	; 0x24
 800243a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800243e:	1812      	adds	r2, r2, r0
 8002440:	eb41 0303 	adc.w	r3, r1, r3
 8002444:	f04f 0400 	mov.w	r4, #0
 8002448:	f04f 0500 	mov.w	r5, #0
 800244c:	00dd      	lsls	r5, r3, #3
 800244e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002452:	00d4      	lsls	r4, r2, #3
 8002454:	4622      	mov	r2, r4
 8002456:	462b      	mov	r3, r5
 8002458:	1814      	adds	r4, r2, r0
 800245a:	653c      	str	r4, [r7, #80]	; 0x50
 800245c:	414b      	adcs	r3, r1
 800245e:	657b      	str	r3, [r7, #84]	; 0x54
 8002460:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	461a      	mov	r2, r3
 8002466:	f04f 0300 	mov.w	r3, #0
 800246a:	1891      	adds	r1, r2, r2
 800246c:	61b9      	str	r1, [r7, #24]
 800246e:	415b      	adcs	r3, r3
 8002470:	61fb      	str	r3, [r7, #28]
 8002472:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002476:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800247a:	f7fd ff49 	bl	8000310 <__aeabi_uldivmod>
 800247e:	4602      	mov	r2, r0
 8002480:	460b      	mov	r3, r1
 8002482:	4b6c      	ldr	r3, [pc, #432]	; (8002634 <UART_SetConfig+0x38c>)
 8002484:	fba3 1302 	umull	r1, r3, r3, r2
 8002488:	095b      	lsrs	r3, r3, #5
 800248a:	2164      	movs	r1, #100	; 0x64
 800248c:	fb01 f303 	mul.w	r3, r1, r3
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	00db      	lsls	r3, r3, #3
 8002494:	3332      	adds	r3, #50	; 0x32
 8002496:	4a67      	ldr	r2, [pc, #412]	; (8002634 <UART_SetConfig+0x38c>)
 8002498:	fba2 2303 	umull	r2, r3, r2, r3
 800249c:	095b      	lsrs	r3, r3, #5
 800249e:	f003 0207 	and.w	r2, r3, #7
 80024a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4432      	add	r2, r6
 80024a8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80024aa:	e0b9      	b.n	8002620 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80024ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024ae:	461c      	mov	r4, r3
 80024b0:	f04f 0500 	mov.w	r5, #0
 80024b4:	4622      	mov	r2, r4
 80024b6:	462b      	mov	r3, r5
 80024b8:	1891      	adds	r1, r2, r2
 80024ba:	6139      	str	r1, [r7, #16]
 80024bc:	415b      	adcs	r3, r3
 80024be:	617b      	str	r3, [r7, #20]
 80024c0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80024c4:	1912      	adds	r2, r2, r4
 80024c6:	eb45 0303 	adc.w	r3, r5, r3
 80024ca:	f04f 0000 	mov.w	r0, #0
 80024ce:	f04f 0100 	mov.w	r1, #0
 80024d2:	00d9      	lsls	r1, r3, #3
 80024d4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80024d8:	00d0      	lsls	r0, r2, #3
 80024da:	4602      	mov	r2, r0
 80024dc:	460b      	mov	r3, r1
 80024de:	eb12 0804 	adds.w	r8, r2, r4
 80024e2:	eb43 0905 	adc.w	r9, r3, r5
 80024e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f04f 0100 	mov.w	r1, #0
 80024f0:	f04f 0200 	mov.w	r2, #0
 80024f4:	f04f 0300 	mov.w	r3, #0
 80024f8:	008b      	lsls	r3, r1, #2
 80024fa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80024fe:	0082      	lsls	r2, r0, #2
 8002500:	4640      	mov	r0, r8
 8002502:	4649      	mov	r1, r9
 8002504:	f7fd ff04 	bl	8000310 <__aeabi_uldivmod>
 8002508:	4602      	mov	r2, r0
 800250a:	460b      	mov	r3, r1
 800250c:	4b49      	ldr	r3, [pc, #292]	; (8002634 <UART_SetConfig+0x38c>)
 800250e:	fba3 2302 	umull	r2, r3, r3, r2
 8002512:	095b      	lsrs	r3, r3, #5
 8002514:	011e      	lsls	r6, r3, #4
 8002516:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002518:	4618      	mov	r0, r3
 800251a:	f04f 0100 	mov.w	r1, #0
 800251e:	4602      	mov	r2, r0
 8002520:	460b      	mov	r3, r1
 8002522:	1894      	adds	r4, r2, r2
 8002524:	60bc      	str	r4, [r7, #8]
 8002526:	415b      	adcs	r3, r3
 8002528:	60fb      	str	r3, [r7, #12]
 800252a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800252e:	1812      	adds	r2, r2, r0
 8002530:	eb41 0303 	adc.w	r3, r1, r3
 8002534:	f04f 0400 	mov.w	r4, #0
 8002538:	f04f 0500 	mov.w	r5, #0
 800253c:	00dd      	lsls	r5, r3, #3
 800253e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002542:	00d4      	lsls	r4, r2, #3
 8002544:	4622      	mov	r2, r4
 8002546:	462b      	mov	r3, r5
 8002548:	1814      	adds	r4, r2, r0
 800254a:	64bc      	str	r4, [r7, #72]	; 0x48
 800254c:	414b      	adcs	r3, r1
 800254e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002550:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	4618      	mov	r0, r3
 8002556:	f04f 0100 	mov.w	r1, #0
 800255a:	f04f 0200 	mov.w	r2, #0
 800255e:	f04f 0300 	mov.w	r3, #0
 8002562:	008b      	lsls	r3, r1, #2
 8002564:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002568:	0082      	lsls	r2, r0, #2
 800256a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800256e:	f7fd fecf 	bl	8000310 <__aeabi_uldivmod>
 8002572:	4602      	mov	r2, r0
 8002574:	460b      	mov	r3, r1
 8002576:	4b2f      	ldr	r3, [pc, #188]	; (8002634 <UART_SetConfig+0x38c>)
 8002578:	fba3 1302 	umull	r1, r3, r3, r2
 800257c:	095b      	lsrs	r3, r3, #5
 800257e:	2164      	movs	r1, #100	; 0x64
 8002580:	fb01 f303 	mul.w	r3, r1, r3
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	011b      	lsls	r3, r3, #4
 8002588:	3332      	adds	r3, #50	; 0x32
 800258a:	4a2a      	ldr	r2, [pc, #168]	; (8002634 <UART_SetConfig+0x38c>)
 800258c:	fba2 2303 	umull	r2, r3, r2, r3
 8002590:	095b      	lsrs	r3, r3, #5
 8002592:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002596:	441e      	add	r6, r3
 8002598:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800259a:	4618      	mov	r0, r3
 800259c:	f04f 0100 	mov.w	r1, #0
 80025a0:	4602      	mov	r2, r0
 80025a2:	460b      	mov	r3, r1
 80025a4:	1894      	adds	r4, r2, r2
 80025a6:	603c      	str	r4, [r7, #0]
 80025a8:	415b      	adcs	r3, r3
 80025aa:	607b      	str	r3, [r7, #4]
 80025ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80025b0:	1812      	adds	r2, r2, r0
 80025b2:	eb41 0303 	adc.w	r3, r1, r3
 80025b6:	f04f 0400 	mov.w	r4, #0
 80025ba:	f04f 0500 	mov.w	r5, #0
 80025be:	00dd      	lsls	r5, r3, #3
 80025c0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80025c4:	00d4      	lsls	r4, r2, #3
 80025c6:	4622      	mov	r2, r4
 80025c8:	462b      	mov	r3, r5
 80025ca:	eb12 0a00 	adds.w	sl, r2, r0
 80025ce:	eb43 0b01 	adc.w	fp, r3, r1
 80025d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f04f 0100 	mov.w	r1, #0
 80025dc:	f04f 0200 	mov.w	r2, #0
 80025e0:	f04f 0300 	mov.w	r3, #0
 80025e4:	008b      	lsls	r3, r1, #2
 80025e6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80025ea:	0082      	lsls	r2, r0, #2
 80025ec:	4650      	mov	r0, sl
 80025ee:	4659      	mov	r1, fp
 80025f0:	f7fd fe8e 	bl	8000310 <__aeabi_uldivmod>
 80025f4:	4602      	mov	r2, r0
 80025f6:	460b      	mov	r3, r1
 80025f8:	4b0e      	ldr	r3, [pc, #56]	; (8002634 <UART_SetConfig+0x38c>)
 80025fa:	fba3 1302 	umull	r1, r3, r3, r2
 80025fe:	095b      	lsrs	r3, r3, #5
 8002600:	2164      	movs	r1, #100	; 0x64
 8002602:	fb01 f303 	mul.w	r3, r1, r3
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	011b      	lsls	r3, r3, #4
 800260a:	3332      	adds	r3, #50	; 0x32
 800260c:	4a09      	ldr	r2, [pc, #36]	; (8002634 <UART_SetConfig+0x38c>)
 800260e:	fba2 2303 	umull	r2, r3, r2, r3
 8002612:	095b      	lsrs	r3, r3, #5
 8002614:	f003 020f 	and.w	r2, r3, #15
 8002618:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4432      	add	r2, r6
 800261e:	609a      	str	r2, [r3, #8]
}
 8002620:	bf00      	nop
 8002622:	377c      	adds	r7, #124	; 0x7c
 8002624:	46bd      	mov	sp, r7
 8002626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800262a:	bf00      	nop
 800262c:	40011000 	.word	0x40011000
 8002630:	40011400 	.word	0x40011400
 8002634:	51eb851f 	.word	0x51eb851f

08002638 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f103 0208 	add.w	r2, r3, #8
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f04f 32ff 	mov.w	r2, #4294967295
 8002650:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f103 0208 	add.w	r2, r3, #8
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f103 0208 	add.w	r2, r3, #8
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800266c:	bf00      	nop
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002686:	bf00      	nop
 8002688:	370c      	adds	r7, #12
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr

08002692 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002692:	b480      	push	{r7}
 8002694:	b085      	sub	sp, #20
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
 800269a:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	68fa      	ldr	r2, [r7, #12]
 80026a6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	689a      	ldr	r2, [r3, #8]
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	683a      	ldr	r2, [r7, #0]
 80026b6:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	683a      	ldr	r2, [r7, #0]
 80026bc:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	1c5a      	adds	r2, r3, #1
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	601a      	str	r2, [r3, #0]
}
 80026ce:	bf00      	nop
 80026d0:	3714      	adds	r7, #20
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr

080026da <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80026da:	b480      	push	{r7}
 80026dc:	b085      	sub	sp, #20
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
 80026e2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f0:	d103      	bne.n	80026fa <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	691b      	ldr	r3, [r3, #16]
 80026f6:	60fb      	str	r3, [r7, #12]
 80026f8:	e00c      	b.n	8002714 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	3308      	adds	r3, #8
 80026fe:	60fb      	str	r3, [r7, #12]
 8002700:	e002      	b.n	8002708 <vListInsert+0x2e>
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	60fb      	str	r3, [r7, #12]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	68ba      	ldr	r2, [r7, #8]
 8002710:	429a      	cmp	r2, r3
 8002712:	d2f6      	bcs.n	8002702 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	685a      	ldr	r2, [r3, #4]
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	683a      	ldr	r2, [r7, #0]
 8002722:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	68fa      	ldr	r2, [r7, #12]
 8002728:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	683a      	ldr	r2, [r7, #0]
 800272e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	1c5a      	adds	r2, r3, #1
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	601a      	str	r2, [r3, #0]
}
 8002740:	bf00      	nop
 8002742:	3714      	adds	r7, #20
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800274c:	b480      	push	{r7}
 800274e:	b085      	sub	sp, #20
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	691b      	ldr	r3, [r3, #16]
 8002758:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	6892      	ldr	r2, [r2, #8]
 8002762:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	6852      	ldr	r2, [r2, #4]
 800276c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	429a      	cmp	r2, r3
 8002776:	d103      	bne.n	8002780 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	689a      	ldr	r2, [r3, #8]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	1e5a      	subs	r2, r3, #1
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
}
 8002794:	4618      	mov	r0, r3
 8002796:	3714      	adds	r7, #20
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d10a      	bne.n	80027ca <xQueueGenericReset+0x2a>
        __asm volatile
 80027b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027b8:	f383 8811 	msr	BASEPRI, r3
 80027bc:	f3bf 8f6f 	isb	sy
 80027c0:	f3bf 8f4f 	dsb	sy
 80027c4:	60bb      	str	r3, [r7, #8]
    }
 80027c6:	bf00      	nop
 80027c8:	e7fe      	b.n	80027c8 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 80027ca:	f002 f85b 	bl	8004884 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027d6:	68f9      	ldr	r1, [r7, #12]
 80027d8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80027da:	fb01 f303 	mul.w	r3, r1, r3
 80027de:	441a      	add	r2, r3
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2200      	movs	r2, #0
 80027e8:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027fa:	3b01      	subs	r3, #1
 80027fc:	68f9      	ldr	r1, [r7, #12]
 80027fe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002800:	fb01 f303 	mul.w	r3, r1, r3
 8002804:	441a      	add	r2, r3
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	22ff      	movs	r2, #255	; 0xff
 800280e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	22ff      	movs	r2, #255	; 0xff
 8002816:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d109      	bne.n	8002834 <xQueueGenericReset+0x94>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	691b      	ldr	r3, [r3, #16]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d00f      	beq.n	8002848 <xQueueGenericReset+0xa8>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	3310      	adds	r3, #16
 800282c:	4618      	mov	r0, r3
 800282e:	f001 f8bb 	bl	80039a8 <xTaskRemoveFromEventList>
 8002832:	e009      	b.n	8002848 <xQueueGenericReset+0xa8>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	3310      	adds	r3, #16
 8002838:	4618      	mov	r0, r3
 800283a:	f7ff fefd 	bl	8002638 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	3324      	adds	r3, #36	; 0x24
 8002842:	4618      	mov	r0, r3
 8002844:	f7ff fef8 	bl	8002638 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8002848:	f002 f84c 	bl	80048e4 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 800284c:	2301      	movs	r3, #1
}
 800284e:	4618      	mov	r0, r3
 8002850:	3710      	adds	r7, #16
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002856:	b580      	push	{r7, lr}
 8002858:	b08c      	sub	sp, #48	; 0x30
 800285a:	af02      	add	r7, sp, #8
 800285c:	60f8      	str	r0, [r7, #12]
 800285e:	60b9      	str	r1, [r7, #8]
 8002860:	4613      	mov	r3, r2
 8002862:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d10a      	bne.n	8002880 <xQueueGenericCreate+0x2a>
        __asm volatile
 800286a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800286e:	f383 8811 	msr	BASEPRI, r3
 8002872:	f3bf 8f6f 	isb	sy
 8002876:	f3bf 8f4f 	dsb	sy
 800287a:	61bb      	str	r3, [r7, #24]
    }
 800287c:	bf00      	nop
 800287e:	e7fe      	b.n	800287e <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	68ba      	ldr	r2, [r7, #8]
 8002884:	fb02 f303 	mul.w	r3, r2, r3
 8002888:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d006      	beq.n	800289e <xQueueGenericCreate+0x48>
 8002890:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	fbb2 f3f3 	udiv	r3, r2, r3
 8002898:	68fa      	ldr	r2, [r7, #12]
 800289a:	429a      	cmp	r2, r3
 800289c:	d101      	bne.n	80028a2 <xQueueGenericCreate+0x4c>
 800289e:	2301      	movs	r3, #1
 80028a0:	e000      	b.n	80028a4 <xQueueGenericCreate+0x4e>
 80028a2:	2300      	movs	r3, #0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d10a      	bne.n	80028be <xQueueGenericCreate+0x68>
        __asm volatile
 80028a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028ac:	f383 8811 	msr	BASEPRI, r3
 80028b0:	f3bf 8f6f 	isb	sy
 80028b4:	f3bf 8f4f 	dsb	sy
 80028b8:	617b      	str	r3, [r7, #20]
    }
 80028ba:	bf00      	nop
 80028bc:	e7fe      	b.n	80028bc <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 80028be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c0:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80028c4:	d90a      	bls.n	80028dc <xQueueGenericCreate+0x86>
        __asm volatile
 80028c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028ca:	f383 8811 	msr	BASEPRI, r3
 80028ce:	f3bf 8f6f 	isb	sy
 80028d2:	f3bf 8f4f 	dsb	sy
 80028d6:	613b      	str	r3, [r7, #16]
    }
 80028d8:	bf00      	nop
 80028da:	e7fe      	b.n	80028da <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80028dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028de:	3350      	adds	r3, #80	; 0x50
 80028e0:	4618      	mov	r0, r3
 80028e2:	f002 f8fb 	bl	8004adc <pvPortMalloc>
 80028e6:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 80028e8:	6a3b      	ldr	r3, [r7, #32]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d00d      	beq.n	800290a <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80028ee:	6a3b      	ldr	r3, [r7, #32]
 80028f0:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	3350      	adds	r3, #80	; 0x50
 80028f6:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80028f8:	79fa      	ldrb	r2, [r7, #7]
 80028fa:	6a3b      	ldr	r3, [r7, #32]
 80028fc:	9300      	str	r3, [sp, #0]
 80028fe:	4613      	mov	r3, r2
 8002900:	69fa      	ldr	r2, [r7, #28]
 8002902:	68b9      	ldr	r1, [r7, #8]
 8002904:	68f8      	ldr	r0, [r7, #12]
 8002906:	f000 f805 	bl	8002914 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800290a:	6a3b      	ldr	r3, [r7, #32]
    }
 800290c:	4618      	mov	r0, r3
 800290e:	3728      	adds	r7, #40	; 0x28
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	607a      	str	r2, [r7, #4]
 8002920:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d103      	bne.n	8002930 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	69ba      	ldr	r2, [r7, #24]
 800292c:	601a      	str	r2, [r3, #0]
 800292e:	e002      	b.n	8002936 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	68fa      	ldr	r2, [r7, #12]
 800293a:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	68ba      	ldr	r2, [r7, #8]
 8002940:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002942:	2101      	movs	r1, #1
 8002944:	69b8      	ldr	r0, [r7, #24]
 8002946:	f7ff ff2b 	bl	80027a0 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	78fa      	ldrb	r2, [r7, #3]
 800294e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8002952:	78fb      	ldrb	r3, [r7, #3]
 8002954:	68ba      	ldr	r2, [r7, #8]
 8002956:	68f9      	ldr	r1, [r7, #12]
 8002958:	2073      	movs	r0, #115	; 0x73
 800295a:	f003 ffdf 	bl	800691c <SEGGER_SYSVIEW_RecordU32x3>
}
 800295e:	bf00      	nop
 8002960:	3710      	adds	r7, #16
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
	...

08002968 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b090      	sub	sp, #64	; 0x40
 800296c:	af02      	add	r7, sp, #8
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	607a      	str	r2, [r7, #4]
 8002974:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002976:	2300      	movs	r3, #0
 8002978:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 800297e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002980:	2b00      	cmp	r3, #0
 8002982:	d10a      	bne.n	800299a <xQueueGenericSend+0x32>
        __asm volatile
 8002984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002988:	f383 8811 	msr	BASEPRI, r3
 800298c:	f3bf 8f6f 	isb	sy
 8002990:	f3bf 8f4f 	dsb	sy
 8002994:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002996:	bf00      	nop
 8002998:	e7fe      	b.n	8002998 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d103      	bne.n	80029a8 <xQueueGenericSend+0x40>
 80029a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d101      	bne.n	80029ac <xQueueGenericSend+0x44>
 80029a8:	2301      	movs	r3, #1
 80029aa:	e000      	b.n	80029ae <xQueueGenericSend+0x46>
 80029ac:	2300      	movs	r3, #0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d10a      	bne.n	80029c8 <xQueueGenericSend+0x60>
        __asm volatile
 80029b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029b6:	f383 8811 	msr	BASEPRI, r3
 80029ba:	f3bf 8f6f 	isb	sy
 80029be:	f3bf 8f4f 	dsb	sy
 80029c2:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80029c4:	bf00      	nop
 80029c6:	e7fe      	b.n	80029c6 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d103      	bne.n	80029d6 <xQueueGenericSend+0x6e>
 80029ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d101      	bne.n	80029da <xQueueGenericSend+0x72>
 80029d6:	2301      	movs	r3, #1
 80029d8:	e000      	b.n	80029dc <xQueueGenericSend+0x74>
 80029da:	2300      	movs	r3, #0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d10a      	bne.n	80029f6 <xQueueGenericSend+0x8e>
        __asm volatile
 80029e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029e4:	f383 8811 	msr	BASEPRI, r3
 80029e8:	f3bf 8f6f 	isb	sy
 80029ec:	f3bf 8f4f 	dsb	sy
 80029f0:	623b      	str	r3, [r7, #32]
    }
 80029f2:	bf00      	nop
 80029f4:	e7fe      	b.n	80029f4 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80029f6:	f001 f971 	bl	8003cdc <xTaskGetSchedulerState>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d102      	bne.n	8002a06 <xQueueGenericSend+0x9e>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d101      	bne.n	8002a0a <xQueueGenericSend+0xa2>
 8002a06:	2301      	movs	r3, #1
 8002a08:	e000      	b.n	8002a0c <xQueueGenericSend+0xa4>
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d10a      	bne.n	8002a26 <xQueueGenericSend+0xbe>
        __asm volatile
 8002a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a14:	f383 8811 	msr	BASEPRI, r3
 8002a18:	f3bf 8f6f 	isb	sy
 8002a1c:	f3bf 8f4f 	dsb	sy
 8002a20:	61fb      	str	r3, [r7, #28]
    }
 8002a22:	bf00      	nop
 8002a24:	e7fe      	b.n	8002a24 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002a26:	f001 ff2d 	bl	8004884 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d302      	bcc.n	8002a3c <xQueueGenericSend+0xd4>
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d11f      	bne.n	8002a7c <xQueueGenericSend+0x114>
            {
                traceQUEUE_SEND( pxQueue );
 8002a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f004 fcfa 	bl	8007438 <SEGGER_SYSVIEW_ShrinkId>
 8002a44:	68ba      	ldr	r2, [r7, #8]
 8002a46:	6879      	ldr	r1, [r7, #4]
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	9300      	str	r3, [sp, #0]
 8002a4c:	460b      	mov	r3, r1
 8002a4e:	4601      	mov	r1, r0
 8002a50:	205a      	movs	r0, #90	; 0x5a
 8002a52:	f003 ffd9 	bl	8006a08 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002a56:	683a      	ldr	r2, [r7, #0]
 8002a58:	68b9      	ldr	r1, [r7, #8]
 8002a5a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a5c:	f000 fa56 	bl	8002f0c <prvCopyDataToQueue>
 8002a60:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d004      	beq.n	8002a74 <xQueueGenericSend+0x10c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a6c:	3324      	adds	r3, #36	; 0x24
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f000 ff9a 	bl	80039a8 <xTaskRemoveFromEventList>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002a74:	f001 ff36 	bl	80048e4 <vPortExitCritical>
                return pdPASS;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e07d      	b.n	8002b78 <xQueueGenericSend+0x210>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d110      	bne.n	8002aa4 <xQueueGenericSend+0x13c>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002a82:	f001 ff2f 	bl	80048e4 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8002a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f004 fcd5 	bl	8007438 <SEGGER_SYSVIEW_ShrinkId>
 8002a8e:	68ba      	ldr	r2, [r7, #8]
 8002a90:	6879      	ldr	r1, [r7, #4]
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	9300      	str	r3, [sp, #0]
 8002a96:	460b      	mov	r3, r1
 8002a98:	4601      	mov	r1, r0
 8002a9a:	205a      	movs	r0, #90	; 0x5a
 8002a9c:	f003 ffb4 	bl	8006a08 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	e069      	b.n	8002b78 <xQueueGenericSend+0x210>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002aa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d106      	bne.n	8002ab8 <xQueueGenericSend+0x150>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002aaa:	f107 0314 	add.w	r3, r7, #20
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f000 ffe0 	bl	8003a74 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002ab8:	f001 ff14 	bl	80048e4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002abc:	f000 fd58 	bl	8003570 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002ac0:	f001 fee0 	bl	8004884 <vPortEnterCritical>
 8002ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ac6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002aca:	b25b      	sxtb	r3, r3
 8002acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ad0:	d103      	bne.n	8002ada <xQueueGenericSend+0x172>
 8002ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002adc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ae0:	b25b      	sxtb	r3, r3
 8002ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ae6:	d103      	bne.n	8002af0 <xQueueGenericSend+0x188>
 8002ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002af0:	f001 fef8 	bl	80048e4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002af4:	1d3a      	adds	r2, r7, #4
 8002af6:	f107 0314 	add.w	r3, r7, #20
 8002afa:	4611      	mov	r1, r2
 8002afc:	4618      	mov	r0, r3
 8002afe:	f000 ffcf 	bl	8003aa0 <xTaskCheckForTimeOut>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d124      	bne.n	8002b52 <xQueueGenericSend+0x1ea>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002b08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b0a:	f000 faf7 	bl	80030fc <prvIsQueueFull>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d018      	beq.n	8002b46 <xQueueGenericSend+0x1de>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b16:	3310      	adds	r3, #16
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	4611      	mov	r1, r2
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f000 fef1 	bl	8003904 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002b22:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b24:	f000 fa82 	bl	800302c <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8002b28:	f000 fd30 	bl	800358c <xTaskResumeAll>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	f47f af79 	bne.w	8002a26 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8002b34:	4b12      	ldr	r3, [pc, #72]	; (8002b80 <xQueueGenericSend+0x218>)
 8002b36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b3a:	601a      	str	r2, [r3, #0]
 8002b3c:	f3bf 8f4f 	dsb	sy
 8002b40:	f3bf 8f6f 	isb	sy
 8002b44:	e76f      	b.n	8002a26 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002b46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b48:	f000 fa70 	bl	800302c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002b4c:	f000 fd1e 	bl	800358c <xTaskResumeAll>
 8002b50:	e769      	b.n	8002a26 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002b52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b54:	f000 fa6a 	bl	800302c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002b58:	f000 fd18 	bl	800358c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8002b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f004 fc6a 	bl	8007438 <SEGGER_SYSVIEW_ShrinkId>
 8002b64:	68ba      	ldr	r2, [r7, #8]
 8002b66:	6879      	ldr	r1, [r7, #4]
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	9300      	str	r3, [sp, #0]
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	4601      	mov	r1, r0
 8002b70:	205a      	movs	r0, #90	; 0x5a
 8002b72:	f003 ff49 	bl	8006a08 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8002b76:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3738      	adds	r7, #56	; 0x38
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	e000ed04 	.word	0xe000ed04

08002b84 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b090      	sub	sp, #64	; 0x40
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	60b9      	str	r1, [r7, #8]
 8002b8e:	607a      	str	r2, [r7, #4]
 8002b90:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8002b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d10a      	bne.n	8002bb2 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8002b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ba0:	f383 8811 	msr	BASEPRI, r3
 8002ba4:	f3bf 8f6f 	isb	sy
 8002ba8:	f3bf 8f4f 	dsb	sy
 8002bac:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002bae:	bf00      	nop
 8002bb0:	e7fe      	b.n	8002bb0 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d103      	bne.n	8002bc0 <xQueueGenericSendFromISR+0x3c>
 8002bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d101      	bne.n	8002bc4 <xQueueGenericSendFromISR+0x40>
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e000      	b.n	8002bc6 <xQueueGenericSendFromISR+0x42>
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d10a      	bne.n	8002be0 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8002bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bce:	f383 8811 	msr	BASEPRI, r3
 8002bd2:	f3bf 8f6f 	isb	sy
 8002bd6:	f3bf 8f4f 	dsb	sy
 8002bda:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002bdc:	bf00      	nop
 8002bde:	e7fe      	b.n	8002bde <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d103      	bne.n	8002bee <xQueueGenericSendFromISR+0x6a>
 8002be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d101      	bne.n	8002bf2 <xQueueGenericSendFromISR+0x6e>
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e000      	b.n	8002bf4 <xQueueGenericSendFromISR+0x70>
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d10a      	bne.n	8002c0e <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8002bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bfc:	f383 8811 	msr	BASEPRI, r3
 8002c00:	f3bf 8f6f 	isb	sy
 8002c04:	f3bf 8f4f 	dsb	sy
 8002c08:	623b      	str	r3, [r7, #32]
    }
 8002c0a:	bf00      	nop
 8002c0c:	e7fe      	b.n	8002c0c <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002c0e:	f001 ff25 	bl	8004a5c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8002c12:	f3ef 8211 	mrs	r2, BASEPRI
 8002c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c1a:	f383 8811 	msr	BASEPRI, r3
 8002c1e:	f3bf 8f6f 	isb	sy
 8002c22:	f3bf 8f4f 	dsb	sy
 8002c26:	61fa      	str	r2, [r7, #28]
 8002c28:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8002c2a:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002c2c:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d302      	bcc.n	8002c40 <xQueueGenericSendFromISR+0xbc>
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d148      	bne.n	8002cd2 <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8002c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c4e:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8002c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c52:	4618      	mov	r0, r3
 8002c54:	f004 fbf0 	bl	8007438 <SEGGER_SYSVIEW_ShrinkId>
 8002c58:	4601      	mov	r1, r0
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	2060      	movs	r0, #96	; 0x60
 8002c60:	f003 fe02 	bl	8006868 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002c64:	683a      	ldr	r2, [r7, #0]
 8002c66:	68b9      	ldr	r1, [r7, #8]
 8002c68:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002c6a:	f000 f94f 	bl	8002f0c <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8002c6e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c76:	d112      	bne.n	8002c9e <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d025      	beq.n	8002ccc <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c82:	3324      	adds	r3, #36	; 0x24
 8002c84:	4618      	mov	r0, r3
 8002c86:	f000 fe8f 	bl	80039a8 <xTaskRemoveFromEventList>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d01d      	beq.n	8002ccc <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d01a      	beq.n	8002ccc <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	601a      	str	r2, [r3, #0]
 8002c9c:	e016      	b.n	8002ccc <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8002c9e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002ca2:	2b7f      	cmp	r3, #127	; 0x7f
 8002ca4:	d10a      	bne.n	8002cbc <xQueueGenericSendFromISR+0x138>
        __asm volatile
 8002ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002caa:	f383 8811 	msr	BASEPRI, r3
 8002cae:	f3bf 8f6f 	isb	sy
 8002cb2:	f3bf 8f4f 	dsb	sy
 8002cb6:	617b      	str	r3, [r7, #20]
    }
 8002cb8:	bf00      	nop
 8002cba:	e7fe      	b.n	8002cba <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002cbc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	b25a      	sxtb	r2, r3
 8002cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8002cd0:	e00b      	b.n	8002cea <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8002cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f004 fbaf 	bl	8007438 <SEGGER_SYSVIEW_ShrinkId>
 8002cda:	4601      	mov	r1, r0
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	461a      	mov	r2, r3
 8002ce0:	2060      	movs	r0, #96	; 0x60
 8002ce2:	f003 fdc1 	bl	8006868 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cec:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002cf4:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002cf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3740      	adds	r7, #64	; 0x40
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002d00:	b590      	push	{r4, r7, lr}
 8002d02:	b08f      	sub	sp, #60	; 0x3c
 8002d04:	af02      	add	r7, sp, #8
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d10a      	bne.n	8002d30 <xQueueReceive+0x30>
        __asm volatile
 8002d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d1e:	f383 8811 	msr	BASEPRI, r3
 8002d22:	f3bf 8f6f 	isb	sy
 8002d26:	f3bf 8f4f 	dsb	sy
 8002d2a:	623b      	str	r3, [r7, #32]
    }
 8002d2c:	bf00      	nop
 8002d2e:	e7fe      	b.n	8002d2e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d103      	bne.n	8002d3e <xQueueReceive+0x3e>
 8002d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d101      	bne.n	8002d42 <xQueueReceive+0x42>
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e000      	b.n	8002d44 <xQueueReceive+0x44>
 8002d42:	2300      	movs	r3, #0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d10a      	bne.n	8002d5e <xQueueReceive+0x5e>
        __asm volatile
 8002d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d4c:	f383 8811 	msr	BASEPRI, r3
 8002d50:	f3bf 8f6f 	isb	sy
 8002d54:	f3bf 8f4f 	dsb	sy
 8002d58:	61fb      	str	r3, [r7, #28]
    }
 8002d5a:	bf00      	nop
 8002d5c:	e7fe      	b.n	8002d5c <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002d5e:	f000 ffbd 	bl	8003cdc <xTaskGetSchedulerState>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d102      	bne.n	8002d6e <xQueueReceive+0x6e>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d101      	bne.n	8002d72 <xQueueReceive+0x72>
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e000      	b.n	8002d74 <xQueueReceive+0x74>
 8002d72:	2300      	movs	r3, #0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d10a      	bne.n	8002d8e <xQueueReceive+0x8e>
        __asm volatile
 8002d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d7c:	f383 8811 	msr	BASEPRI, r3
 8002d80:	f3bf 8f6f 	isb	sy
 8002d84:	f3bf 8f4f 	dsb	sy
 8002d88:	61bb      	str	r3, [r7, #24]
    }
 8002d8a:	bf00      	nop
 8002d8c:	e7fe      	b.n	8002d8c <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002d8e:	f001 fd79 	bl	8004884 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d96:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d024      	beq.n	8002de8 <xQueueReceive+0xe8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002d9e:	68b9      	ldr	r1, [r7, #8]
 8002da0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002da2:	f000 f91d 	bl	8002fe0 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da8:	4618      	mov	r0, r3
 8002daa:	f004 fb45 	bl	8007438 <SEGGER_SYSVIEW_ShrinkId>
 8002dae:	4604      	mov	r4, r0
 8002db0:	2000      	movs	r0, #0
 8002db2:	f004 fb41 	bl	8007438 <SEGGER_SYSVIEW_ShrinkId>
 8002db6:	4602      	mov	r2, r0
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2101      	movs	r1, #1
 8002dbc:	9100      	str	r1, [sp, #0]
 8002dbe:	4621      	mov	r1, r4
 8002dc0:	205c      	movs	r0, #92	; 0x5c
 8002dc2:	f003 fe21 	bl	8006a08 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc8:	1e5a      	subs	r2, r3, #1
 8002dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dcc:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d004      	beq.n	8002de0 <xQueueReceive+0xe0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd8:	3310      	adds	r3, #16
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f000 fde4 	bl	80039a8 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002de0:	f001 fd80 	bl	80048e4 <vPortExitCritical>
                return pdPASS;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e08a      	b.n	8002efe <xQueueReceive+0x1fe>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d113      	bne.n	8002e16 <xQueueReceive+0x116>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002dee:	f001 fd79 	bl	80048e4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002df4:	4618      	mov	r0, r3
 8002df6:	f004 fb1f 	bl	8007438 <SEGGER_SYSVIEW_ShrinkId>
 8002dfa:	4604      	mov	r4, r0
 8002dfc:	2000      	movs	r0, #0
 8002dfe:	f004 fb1b 	bl	8007438 <SEGGER_SYSVIEW_ShrinkId>
 8002e02:	4602      	mov	r2, r0
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2101      	movs	r1, #1
 8002e08:	9100      	str	r1, [sp, #0]
 8002e0a:	4621      	mov	r1, r4
 8002e0c:	205c      	movs	r0, #92	; 0x5c
 8002e0e:	f003 fdfb 	bl	8006a08 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002e12:	2300      	movs	r3, #0
 8002e14:	e073      	b.n	8002efe <xQueueReceive+0x1fe>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d106      	bne.n	8002e2a <xQueueReceive+0x12a>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002e1c:	f107 0310 	add.w	r3, r7, #16
 8002e20:	4618      	mov	r0, r3
 8002e22:	f000 fe27 	bl	8003a74 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002e26:	2301      	movs	r3, #1
 8002e28:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002e2a:	f001 fd5b 	bl	80048e4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002e2e:	f000 fb9f 	bl	8003570 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002e32:	f001 fd27 	bl	8004884 <vPortEnterCritical>
 8002e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e3c:	b25b      	sxtb	r3, r3
 8002e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e42:	d103      	bne.n	8002e4c <xQueueReceive+0x14c>
 8002e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e52:	b25b      	sxtb	r3, r3
 8002e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e58:	d103      	bne.n	8002e62 <xQueueReceive+0x162>
 8002e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e62:	f001 fd3f 	bl	80048e4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002e66:	1d3a      	adds	r2, r7, #4
 8002e68:	f107 0310 	add.w	r3, r7, #16
 8002e6c:	4611      	mov	r1, r2
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f000 fe16 	bl	8003aa0 <xTaskCheckForTimeOut>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d124      	bne.n	8002ec4 <xQueueReceive+0x1c4>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002e7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e7c:	f000 f928 	bl	80030d0 <prvIsQueueEmpty>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d018      	beq.n	8002eb8 <xQueueReceive+0x1b8>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e88:	3324      	adds	r3, #36	; 0x24
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	4611      	mov	r1, r2
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f000 fd38 	bl	8003904 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002e94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e96:	f000 f8c9 	bl	800302c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002e9a:	f000 fb77 	bl	800358c <xTaskResumeAll>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	f47f af74 	bne.w	8002d8e <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002ea6:	4b18      	ldr	r3, [pc, #96]	; (8002f08 <xQueueReceive+0x208>)
 8002ea8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002eac:	601a      	str	r2, [r3, #0]
 8002eae:	f3bf 8f4f 	dsb	sy
 8002eb2:	f3bf 8f6f 	isb	sy
 8002eb6:	e76a      	b.n	8002d8e <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002eb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002eba:	f000 f8b7 	bl	800302c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002ebe:	f000 fb65 	bl	800358c <xTaskResumeAll>
 8002ec2:	e764      	b.n	8002d8e <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002ec4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ec6:	f000 f8b1 	bl	800302c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002eca:	f000 fb5f 	bl	800358c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002ece:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ed0:	f000 f8fe 	bl	80030d0 <prvIsQueueEmpty>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	f43f af59 	beq.w	8002d8e <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f004 faaa 	bl	8007438 <SEGGER_SYSVIEW_ShrinkId>
 8002ee4:	4604      	mov	r4, r0
 8002ee6:	2000      	movs	r0, #0
 8002ee8:	f004 faa6 	bl	8007438 <SEGGER_SYSVIEW_ShrinkId>
 8002eec:	4602      	mov	r2, r0
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2101      	movs	r1, #1
 8002ef2:	9100      	str	r1, [sp, #0]
 8002ef4:	4621      	mov	r1, r4
 8002ef6:	205c      	movs	r0, #92	; 0x5c
 8002ef8:	f003 fd86 	bl	8006a08 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002efc:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3734      	adds	r7, #52	; 0x34
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd90      	pop	{r4, r7, pc}
 8002f06:	bf00      	nop
 8002f08:	e000ed04 	.word	0xe000ed04

08002f0c <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b086      	sub	sp, #24
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f20:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d10d      	bne.n	8002f46 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d14d      	bne.n	8002fce <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	4618      	mov	r0, r3
 8002f38:	f000 feee 	bl	8003d18 <xTaskPriorityDisinherit>
 8002f3c:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	609a      	str	r2, [r3, #8]
 8002f44:	e043      	b.n	8002fce <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d119      	bne.n	8002f80 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6858      	ldr	r0, [r3, #4]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f54:	461a      	mov	r2, r3
 8002f56:	68b9      	ldr	r1, [r7, #8]
 8002f58:	f004 fc2a 	bl	80077b0 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	685a      	ldr	r2, [r3, #4]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f64:	441a      	add	r2, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	685a      	ldr	r2, [r3, #4]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d32b      	bcc.n	8002fce <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	605a      	str	r2, [r3, #4]
 8002f7e:	e026      	b.n	8002fce <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	68d8      	ldr	r0, [r3, #12]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f88:	461a      	mov	r2, r3
 8002f8a:	68b9      	ldr	r1, [r7, #8]
 8002f8c:	f004 fc10 	bl	80077b0 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	68da      	ldr	r2, [r3, #12]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f98:	425b      	negs	r3, r3
 8002f9a:	441a      	add	r2, r3
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	68da      	ldr	r2, [r3, #12]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d207      	bcs.n	8002fbc <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	689a      	ldr	r2, [r3, #8]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb4:	425b      	negs	r3, r3
 8002fb6:	441a      	add	r2, r3
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d105      	bne.n	8002fce <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d002      	beq.n	8002fce <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	1c5a      	adds	r2, r3, #1
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8002fd6:	697b      	ldr	r3, [r7, #20]
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3718      	adds	r7, #24
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d018      	beq.n	8003024 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	68da      	ldr	r2, [r3, #12]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffa:	441a      	add	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	68da      	ldr	r2, [r3, #12]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	429a      	cmp	r2, r3
 800300a:	d303      	bcc.n	8003014 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	68d9      	ldr	r1, [r3, #12]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301c:	461a      	mov	r2, r3
 800301e:	6838      	ldr	r0, [r7, #0]
 8003020:	f004 fbc6 	bl	80077b0 <memcpy>
    }
}
 8003024:	bf00      	nop
 8003026:	3708      	adds	r7, #8
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8003034:	f001 fc26 	bl	8004884 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800303e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003040:	e011      	b.n	8003066 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003046:	2b00      	cmp	r3, #0
 8003048:	d012      	beq.n	8003070 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	3324      	adds	r3, #36	; 0x24
 800304e:	4618      	mov	r0, r3
 8003050:	f000 fcaa 	bl	80039a8 <xTaskRemoveFromEventList>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d001      	beq.n	800305e <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 800305a:	f000 fd87 	bl	8003b6c <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800305e:	7bfb      	ldrb	r3, [r7, #15]
 8003060:	3b01      	subs	r3, #1
 8003062:	b2db      	uxtb	r3, r3
 8003064:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003066:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800306a:	2b00      	cmp	r3, #0
 800306c:	dce9      	bgt.n	8003042 <prvUnlockQueue+0x16>
 800306e:	e000      	b.n	8003072 <prvUnlockQueue+0x46>
                        break;
 8003070:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	22ff      	movs	r2, #255	; 0xff
 8003076:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800307a:	f001 fc33 	bl	80048e4 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800307e:	f001 fc01 	bl	8004884 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003088:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800308a:	e011      	b.n	80030b0 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	691b      	ldr	r3, [r3, #16]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d012      	beq.n	80030ba <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	3310      	adds	r3, #16
 8003098:	4618      	mov	r0, r3
 800309a:	f000 fc85 	bl	80039a8 <xTaskRemoveFromEventList>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d001      	beq.n	80030a8 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80030a4:	f000 fd62 	bl	8003b6c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80030a8:	7bbb      	ldrb	r3, [r7, #14]
 80030aa:	3b01      	subs	r3, #1
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80030b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	dce9      	bgt.n	800308c <prvUnlockQueue+0x60>
 80030b8:	e000      	b.n	80030bc <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80030ba:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	22ff      	movs	r2, #255	; 0xff
 80030c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80030c4:	f001 fc0e 	bl	80048e4 <vPortExitCritical>
}
 80030c8:	bf00      	nop
 80030ca:	3710      	adds	r7, #16
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80030d8:	f001 fbd4 	bl	8004884 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d102      	bne.n	80030ea <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80030e4:	2301      	movs	r3, #1
 80030e6:	60fb      	str	r3, [r7, #12]
 80030e8:	e001      	b.n	80030ee <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80030ea:	2300      	movs	r3, #0
 80030ec:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80030ee:	f001 fbf9 	bl	80048e4 <vPortExitCritical>

    return xReturn;
 80030f2:	68fb      	ldr	r3, [r7, #12]
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3710      	adds	r7, #16
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003104:	f001 fbbe 	bl	8004884 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003110:	429a      	cmp	r2, r3
 8003112:	d102      	bne.n	800311a <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8003114:	2301      	movs	r3, #1
 8003116:	60fb      	str	r3, [r7, #12]
 8003118:	e001      	b.n	800311e <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800311a:	2300      	movs	r3, #0
 800311c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800311e:	f001 fbe1 	bl	80048e4 <vPortExitCritical>

    return xReturn;
 8003122:	68fb      	ldr	r3, [r7, #12]
}
 8003124:	4618      	mov	r0, r3
 8003126:	3710      	adds	r7, #16
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003136:	2300      	movs	r3, #0
 8003138:	60fb      	str	r3, [r7, #12]
 800313a:	e01e      	b.n	800317a <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800313c:	4a13      	ldr	r2, [pc, #76]	; (800318c <vQueueAddToRegistry+0x60>)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d115      	bne.n	8003174 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003148:	4910      	ldr	r1, [pc, #64]	; (800318c <vQueueAddToRegistry+0x60>)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	683a      	ldr	r2, [r7, #0]
 800314e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8003152:	4a0e      	ldr	r2, [pc, #56]	; (800318c <vQueueAddToRegistry+0x60>)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	00db      	lsls	r3, r3, #3
 8003158:	4413      	add	r3, r2
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4618      	mov	r0, r3
 8003162:	f004 f969 	bl	8007438 <SEGGER_SYSVIEW_ShrinkId>
 8003166:	4601      	mov	r1, r0
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	461a      	mov	r2, r3
 800316c:	2071      	movs	r0, #113	; 0x71
 800316e:	f003 fb7b 	bl	8006868 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8003172:	e006      	b.n	8003182 <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	3301      	adds	r3, #1
 8003178:	60fb      	str	r3, [r7, #12]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2b07      	cmp	r3, #7
 800317e:	d9dd      	bls.n	800313c <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8003180:	bf00      	nop
 8003182:	bf00      	nop
 8003184:	3710      	adds	r7, #16
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	2001a878 	.word	0x2001a878

08003190 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8003190:	b580      	push	{r7, lr}
 8003192:	b086      	sub	sp, #24
 8003194:	af00      	add	r7, sp, #0
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	60b9      	str	r1, [r7, #8]
 800319a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80031a0:	f001 fb70 	bl	8004884 <vPortEnterCritical>
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80031aa:	b25b      	sxtb	r3, r3
 80031ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031b0:	d103      	bne.n	80031ba <vQueueWaitForMessageRestricted+0x2a>
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031c0:	b25b      	sxtb	r3, r3
 80031c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031c6:	d103      	bne.n	80031d0 <vQueueWaitForMessageRestricted+0x40>
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031d0:	f001 fb88 	bl	80048e4 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d106      	bne.n	80031ea <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	3324      	adds	r3, #36	; 0x24
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	68b9      	ldr	r1, [r7, #8]
 80031e4:	4618      	mov	r0, r3
 80031e6:	f000 fbb1 	bl	800394c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80031ea:	6978      	ldr	r0, [r7, #20]
 80031ec:	f7ff ff1e 	bl	800302c <prvUnlockQueue>
    }
 80031f0:	bf00      	nop
 80031f2:	3718      	adds	r7, #24
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b08c      	sub	sp, #48	; 0x30
 80031fc:	af04      	add	r7, sp, #16
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	603b      	str	r3, [r7, #0]
 8003204:	4613      	mov	r3, r2
 8003206:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003208:	88fb      	ldrh	r3, [r7, #6]
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	4618      	mov	r0, r3
 800320e:	f001 fc65 	bl	8004adc <pvPortMalloc>
 8003212:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d00e      	beq.n	8003238 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800321a:	2058      	movs	r0, #88	; 0x58
 800321c:	f001 fc5e 	bl	8004adc <pvPortMalloc>
 8003220:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d003      	beq.n	8003230 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	697a      	ldr	r2, [r7, #20]
 800322c:	631a      	str	r2, [r3, #48]	; 0x30
 800322e:	e005      	b.n	800323c <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8003230:	6978      	ldr	r0, [r7, #20]
 8003232:	f001 fd33 	bl	8004c9c <vPortFree>
 8003236:	e001      	b.n	800323c <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8003238:	2300      	movs	r3, #0
 800323a:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d013      	beq.n	800326a <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003242:	88fa      	ldrh	r2, [r7, #6]
 8003244:	2300      	movs	r3, #0
 8003246:	9303      	str	r3, [sp, #12]
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	9302      	str	r3, [sp, #8]
 800324c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800324e:	9301      	str	r3, [sp, #4]
 8003250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003252:	9300      	str	r3, [sp, #0]
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	68b9      	ldr	r1, [r7, #8]
 8003258:	68f8      	ldr	r0, [r7, #12]
 800325a:	f000 f80e 	bl	800327a <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800325e:	69f8      	ldr	r0, [r7, #28]
 8003260:	f000 f8a2 	bl	80033a8 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003264:	2301      	movs	r3, #1
 8003266:	61bb      	str	r3, [r7, #24]
 8003268:	e002      	b.n	8003270 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800326a:	f04f 33ff 	mov.w	r3, #4294967295
 800326e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8003270:	69bb      	ldr	r3, [r7, #24]
    }
 8003272:	4618      	mov	r0, r3
 8003274:	3720      	adds	r7, #32
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}

0800327a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800327a:	b580      	push	{r7, lr}
 800327c:	b088      	sub	sp, #32
 800327e:	af00      	add	r7, sp, #0
 8003280:	60f8      	str	r0, [r7, #12]
 8003282:	60b9      	str	r1, [r7, #8]
 8003284:	607a      	str	r2, [r7, #4]
 8003286:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800328a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	461a      	mov	r2, r3
 8003292:	21a5      	movs	r1, #165	; 0xa5
 8003294:	f004 fa9a 	bl	80077cc <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800329a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80032a2:	3b01      	subs	r3, #1
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	4413      	add	r3, r2
 80032a8:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80032aa:	69bb      	ldr	r3, [r7, #24]
 80032ac:	f023 0307 	bic.w	r3, r3, #7
 80032b0:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	f003 0307 	and.w	r3, r3, #7
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d00a      	beq.n	80032d2 <prvInitialiseNewTask+0x58>
        __asm volatile
 80032bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032c0:	f383 8811 	msr	BASEPRI, r3
 80032c4:	f3bf 8f6f 	isb	sy
 80032c8:	f3bf 8f4f 	dsb	sy
 80032cc:	617b      	str	r3, [r7, #20]
    }
 80032ce:	bf00      	nop
 80032d0:	e7fe      	b.n	80032d0 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d01f      	beq.n	8003318 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80032d8:	2300      	movs	r3, #0
 80032da:	61fb      	str	r3, [r7, #28]
 80032dc:	e012      	b.n	8003304 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80032de:	68ba      	ldr	r2, [r7, #8]
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	4413      	add	r3, r2
 80032e4:	7819      	ldrb	r1, [r3, #0]
 80032e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	4413      	add	r3, r2
 80032ec:	3334      	adds	r3, #52	; 0x34
 80032ee:	460a      	mov	r2, r1
 80032f0:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80032f2:	68ba      	ldr	r2, [r7, #8]
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	4413      	add	r3, r2
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d006      	beq.n	800330c <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	3301      	adds	r3, #1
 8003302:	61fb      	str	r3, [r7, #28]
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	2b09      	cmp	r3, #9
 8003308:	d9e9      	bls.n	80032de <prvInitialiseNewTask+0x64>
 800330a:	e000      	b.n	800330e <prvInitialiseNewTask+0x94>
            {
                break;
 800330c:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800330e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003310:	2200      	movs	r2, #0
 8003312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003316:	e003      	b.n	8003320 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800331a:	2200      	movs	r2, #0
 800331c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003322:	2b04      	cmp	r3, #4
 8003324:	d901      	bls.n	800332a <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003326:	2304      	movs	r3, #4
 8003328:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800332a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800332c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800332e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8003330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003332:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003334:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8003336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003338:	2200      	movs	r2, #0
 800333a:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800333c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800333e:	3304      	adds	r3, #4
 8003340:	4618      	mov	r0, r3
 8003342:	f7ff f999 	bl	8002678 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003348:	3318      	adds	r3, #24
 800334a:	4618      	mov	r0, r3
 800334c:	f7ff f994 	bl	8002678 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003352:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003354:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003358:	f1c3 0205 	rsb	r2, r3, #5
 800335c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800335e:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003362:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003364:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8003366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003368:	3350      	adds	r3, #80	; 0x50
 800336a:	2204      	movs	r2, #4
 800336c:	2100      	movs	r1, #0
 800336e:	4618      	mov	r0, r3
 8003370:	f004 fa2c 	bl	80077cc <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8003374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003376:	3354      	adds	r3, #84	; 0x54
 8003378:	2201      	movs	r2, #1
 800337a:	2100      	movs	r1, #0
 800337c:	4618      	mov	r0, r3
 800337e:	f004 fa25 	bl	80077cc <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003382:	683a      	ldr	r2, [r7, #0]
 8003384:	68f9      	ldr	r1, [r7, #12]
 8003386:	69b8      	ldr	r0, [r7, #24]
 8003388:	f001 f8d0 	bl	800452c <pxPortInitialiseStack>
 800338c:	4602      	mov	r2, r0
 800338e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003390:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8003392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003394:	2b00      	cmp	r3, #0
 8003396:	d002      	beq.n	800339e <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800339a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800339c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800339e:	bf00      	nop
 80033a0:	3720      	adds	r7, #32
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
	...

080033a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80033a8:	b5b0      	push	{r4, r5, r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af02      	add	r7, sp, #8
 80033ae:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80033b0:	f001 fa68 	bl	8004884 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80033b4:	4b35      	ldr	r3, [pc, #212]	; (800348c <prvAddNewTaskToReadyList+0xe4>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	3301      	adds	r3, #1
 80033ba:	4a34      	ldr	r2, [pc, #208]	; (800348c <prvAddNewTaskToReadyList+0xe4>)
 80033bc:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80033be:	4b34      	ldr	r3, [pc, #208]	; (8003490 <prvAddNewTaskToReadyList+0xe8>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d109      	bne.n	80033da <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80033c6:	4a32      	ldr	r2, [pc, #200]	; (8003490 <prvAddNewTaskToReadyList+0xe8>)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80033cc:	4b2f      	ldr	r3, [pc, #188]	; (800348c <prvAddNewTaskToReadyList+0xe4>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d110      	bne.n	80033f6 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80033d4:	f000 fbe8 	bl	8003ba8 <prvInitialiseTaskLists>
 80033d8:	e00d      	b.n	80033f6 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80033da:	4b2e      	ldr	r3, [pc, #184]	; (8003494 <prvAddNewTaskToReadyList+0xec>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d109      	bne.n	80033f6 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80033e2:	4b2b      	ldr	r3, [pc, #172]	; (8003490 <prvAddNewTaskToReadyList+0xe8>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d802      	bhi.n	80033f6 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80033f0:	4a27      	ldr	r2, [pc, #156]	; (8003490 <prvAddNewTaskToReadyList+0xe8>)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80033f6:	4b28      	ldr	r3, [pc, #160]	; (8003498 <prvAddNewTaskToReadyList+0xf0>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	3301      	adds	r3, #1
 80033fc:	4a26      	ldr	r2, [pc, #152]	; (8003498 <prvAddNewTaskToReadyList+0xf0>)
 80033fe:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003400:	4b25      	ldr	r3, [pc, #148]	; (8003498 <prvAddNewTaskToReadyList+0xf0>)
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d016      	beq.n	800343c <prvAddNewTaskToReadyList+0x94>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4618      	mov	r0, r3
 8003412:	f003 feeb 	bl	80071ec <SEGGER_SYSVIEW_OnTaskCreate>
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003426:	461d      	mov	r5, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	461c      	mov	r4, r3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003432:	1ae3      	subs	r3, r4, r3
 8003434:	9300      	str	r3, [sp, #0]
 8003436:	462b      	mov	r3, r5
 8003438:	f001 fdf6 	bl	8005028 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	4618      	mov	r0, r3
 8003440:	f003 ff58 	bl	80072f4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003448:	2201      	movs	r2, #1
 800344a:	409a      	lsls	r2, r3
 800344c:	4b13      	ldr	r3, [pc, #76]	; (800349c <prvAddNewTaskToReadyList+0xf4>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4313      	orrs	r3, r2
 8003452:	4a12      	ldr	r2, [pc, #72]	; (800349c <prvAddNewTaskToReadyList+0xf4>)
 8003454:	6013      	str	r3, [r2, #0]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800345a:	4613      	mov	r3, r2
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	4413      	add	r3, r2
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	4a0f      	ldr	r2, [pc, #60]	; (80034a0 <prvAddNewTaskToReadyList+0xf8>)
 8003464:	441a      	add	r2, r3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	3304      	adds	r3, #4
 800346a:	4619      	mov	r1, r3
 800346c:	4610      	mov	r0, r2
 800346e:	f7ff f910 	bl	8002692 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8003472:	f001 fa37 	bl	80048e4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003476:	4b07      	ldr	r3, [pc, #28]	; (8003494 <prvAddNewTaskToReadyList+0xec>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d001      	beq.n	8003482 <prvAddNewTaskToReadyList+0xda>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800347e:	4b04      	ldr	r3, [pc, #16]	; (8003490 <prvAddNewTaskToReadyList+0xe8>)
 8003480:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003482:	bf00      	nop
 8003484:	3708      	adds	r7, #8
 8003486:	46bd      	mov	sp, r7
 8003488:	bdb0      	pop	{r4, r5, r7, pc}
 800348a:	bf00      	nop
 800348c:	20000174 	.word	0x20000174
 8003490:	2000009c 	.word	0x2000009c
 8003494:	20000180 	.word	0x20000180
 8003498:	20000190 	.word	0x20000190
 800349c:	2000017c 	.word	0x2000017c
 80034a0:	200000a0 	.word	0x200000a0

080034a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b086      	sub	sp, #24
 80034a8:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80034aa:	4b29      	ldr	r3, [pc, #164]	; (8003550 <vTaskStartScheduler+0xac>)
 80034ac:	9301      	str	r3, [sp, #4]
 80034ae:	2300      	movs	r3, #0
 80034b0:	9300      	str	r3, [sp, #0]
 80034b2:	2300      	movs	r3, #0
 80034b4:	2282      	movs	r2, #130	; 0x82
 80034b6:	4927      	ldr	r1, [pc, #156]	; (8003554 <vTaskStartScheduler+0xb0>)
 80034b8:	4827      	ldr	r0, [pc, #156]	; (8003558 <vTaskStartScheduler+0xb4>)
 80034ba:	f7ff fe9d 	bl	80031f8 <xTaskCreate>
 80034be:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d102      	bne.n	80034cc <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80034c6:	f000 fd1f 	bl	8003f08 <xTimerCreateTimerTask>
 80034ca:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d129      	bne.n	8003526 <vTaskStartScheduler+0x82>
        __asm volatile
 80034d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034d6:	f383 8811 	msr	BASEPRI, r3
 80034da:	f3bf 8f6f 	isb	sy
 80034de:	f3bf 8f4f 	dsb	sy
 80034e2:	60bb      	str	r3, [r7, #8]
    }
 80034e4:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80034e6:	4b1d      	ldr	r3, [pc, #116]	; (800355c <vTaskStartScheduler+0xb8>)
 80034e8:	f04f 32ff 	mov.w	r2, #4294967295
 80034ec:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80034ee:	4b1c      	ldr	r3, [pc, #112]	; (8003560 <vTaskStartScheduler+0xbc>)
 80034f0:	2201      	movs	r2, #1
 80034f2:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80034f4:	4b1b      	ldr	r3, [pc, #108]	; (8003564 <vTaskStartScheduler+0xc0>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80034fa:	4b1b      	ldr	r3, [pc, #108]	; (8003568 <vTaskStartScheduler+0xc4>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	3334      	adds	r3, #52	; 0x34
 8003500:	2205      	movs	r2, #5
 8003502:	4914      	ldr	r1, [pc, #80]	; (8003554 <vTaskStartScheduler+0xb0>)
 8003504:	4618      	mov	r0, r3
 8003506:	f004 f945 	bl	8007794 <memcmp>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d005      	beq.n	800351c <vTaskStartScheduler+0x78>
 8003510:	4b15      	ldr	r3, [pc, #84]	; (8003568 <vTaskStartScheduler+0xc4>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4618      	mov	r0, r3
 8003516:	f003 feab 	bl	8007270 <SEGGER_SYSVIEW_OnTaskStartExec>
 800351a:	e001      	b.n	8003520 <vTaskStartScheduler+0x7c>
 800351c:	f003 fe4a 	bl	80071b4 <SEGGER_SYSVIEW_OnIdle>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8003520:	f001 f890 	bl	8004644 <xPortStartScheduler>
 8003524:	e00e      	b.n	8003544 <vTaskStartScheduler+0xa0>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800352c:	d10a      	bne.n	8003544 <vTaskStartScheduler+0xa0>
        __asm volatile
 800352e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003532:	f383 8811 	msr	BASEPRI, r3
 8003536:	f3bf 8f6f 	isb	sy
 800353a:	f3bf 8f4f 	dsb	sy
 800353e:	607b      	str	r3, [r7, #4]
    }
 8003540:	bf00      	nop
 8003542:	e7fe      	b.n	8003542 <vTaskStartScheduler+0x9e>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003544:	4b09      	ldr	r3, [pc, #36]	; (800356c <vTaskStartScheduler+0xc8>)
 8003546:	681b      	ldr	r3, [r3, #0]
}
 8003548:	bf00      	nop
 800354a:	3710      	adds	r7, #16
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}
 8003550:	20000198 	.word	0x20000198
 8003554:	080080bc 	.word	0x080080bc
 8003558:	08003b85 	.word	0x08003b85
 800355c:	20000194 	.word	0x20000194
 8003560:	20000180 	.word	0x20000180
 8003564:	20000178 	.word	0x20000178
 8003568:	2000009c 	.word	0x2000009c
 800356c:	2000000c 	.word	0x2000000c

08003570 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003570:	b480      	push	{r7}
 8003572:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003574:	4b04      	ldr	r3, [pc, #16]	; (8003588 <vTaskSuspendAll+0x18>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	3301      	adds	r3, #1
 800357a:	4a03      	ldr	r2, [pc, #12]	; (8003588 <vTaskSuspendAll+0x18>)
 800357c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800357e:	bf00      	nop
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr
 8003588:	2000019c 	.word	0x2000019c

0800358c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003592:	2300      	movs	r3, #0
 8003594:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003596:	2300      	movs	r3, #0
 8003598:	607b      	str	r3, [r7, #4]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800359a:	4b3d      	ldr	r3, [pc, #244]	; (8003690 <xTaskResumeAll+0x104>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d10a      	bne.n	80035b8 <xTaskResumeAll+0x2c>
        __asm volatile
 80035a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035a6:	f383 8811 	msr	BASEPRI, r3
 80035aa:	f3bf 8f6f 	isb	sy
 80035ae:	f3bf 8f4f 	dsb	sy
 80035b2:	603b      	str	r3, [r7, #0]
    }
 80035b4:	bf00      	nop
 80035b6:	e7fe      	b.n	80035b6 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80035b8:	f001 f964 	bl	8004884 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80035bc:	4b34      	ldr	r3, [pc, #208]	; (8003690 <xTaskResumeAll+0x104>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	3b01      	subs	r3, #1
 80035c2:	4a33      	ldr	r2, [pc, #204]	; (8003690 <xTaskResumeAll+0x104>)
 80035c4:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035c6:	4b32      	ldr	r3, [pc, #200]	; (8003690 <xTaskResumeAll+0x104>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d159      	bne.n	8003682 <xTaskResumeAll+0xf6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80035ce:	4b31      	ldr	r3, [pc, #196]	; (8003694 <xTaskResumeAll+0x108>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d055      	beq.n	8003682 <xTaskResumeAll+0xf6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80035d6:	e032      	b.n	800363e <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035d8:	4b2f      	ldr	r3, [pc, #188]	; (8003698 <xTaskResumeAll+0x10c>)
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	3318      	adds	r3, #24
 80035e4:	4618      	mov	r0, r3
 80035e6:	f7ff f8b1 	bl	800274c <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	3304      	adds	r3, #4
 80035ee:	4618      	mov	r0, r3
 80035f0:	f7ff f8ac 	bl	800274c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	4618      	mov	r0, r3
 80035f8:	f003 fe7c 	bl	80072f4 <SEGGER_SYSVIEW_OnTaskStartReady>
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003600:	2201      	movs	r2, #1
 8003602:	409a      	lsls	r2, r3
 8003604:	4b25      	ldr	r3, [pc, #148]	; (800369c <xTaskResumeAll+0x110>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4313      	orrs	r3, r2
 800360a:	4a24      	ldr	r2, [pc, #144]	; (800369c <xTaskResumeAll+0x110>)
 800360c:	6013      	str	r3, [r2, #0]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003612:	4613      	mov	r3, r2
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	4413      	add	r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	4a21      	ldr	r2, [pc, #132]	; (80036a0 <xTaskResumeAll+0x114>)
 800361c:	441a      	add	r2, r3
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	3304      	adds	r3, #4
 8003622:	4619      	mov	r1, r3
 8003624:	4610      	mov	r0, r2
 8003626:	f7ff f834 	bl	8002692 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800362e:	4b1d      	ldr	r3, [pc, #116]	; (80036a4 <xTaskResumeAll+0x118>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003634:	429a      	cmp	r2, r3
 8003636:	d302      	bcc.n	800363e <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8003638:	4b1b      	ldr	r3, [pc, #108]	; (80036a8 <xTaskResumeAll+0x11c>)
 800363a:	2201      	movs	r2, #1
 800363c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800363e:	4b16      	ldr	r3, [pc, #88]	; (8003698 <xTaskResumeAll+0x10c>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d1c8      	bne.n	80035d8 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d001      	beq.n	8003650 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800364c:	f000 fb2a 	bl	8003ca4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003650:	4b16      	ldr	r3, [pc, #88]	; (80036ac <xTaskResumeAll+0x120>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	60bb      	str	r3, [r7, #8]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d010      	beq.n	800367e <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800365c:	f000 f84a 	bl	80036f4 <xTaskIncrementTick>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d002      	beq.n	800366c <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 8003666:	4b10      	ldr	r3, [pc, #64]	; (80036a8 <xTaskResumeAll+0x11c>)
 8003668:	2201      	movs	r2, #1
 800366a:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	3b01      	subs	r3, #1
 8003670:	60bb      	str	r3, [r7, #8]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d1f1      	bne.n	800365c <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8003678:	4b0c      	ldr	r3, [pc, #48]	; (80036ac <xTaskResumeAll+0x120>)
 800367a:	2200      	movs	r2, #0
 800367c:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800367e:	4b0a      	ldr	r3, [pc, #40]	; (80036a8 <xTaskResumeAll+0x11c>)
 8003680:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003682:	f001 f92f 	bl	80048e4 <vPortExitCritical>

    return xAlreadyYielded;
 8003686:	687b      	ldr	r3, [r7, #4]
}
 8003688:	4618      	mov	r0, r3
 800368a:	3710      	adds	r7, #16
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}
 8003690:	2000019c 	.word	0x2000019c
 8003694:	20000174 	.word	0x20000174
 8003698:	20000134 	.word	0x20000134
 800369c:	2000017c 	.word	0x2000017c
 80036a0:	200000a0 	.word	0x200000a0
 80036a4:	2000009c 	.word	0x2000009c
 80036a8:	20000188 	.word	0x20000188
 80036ac:	20000184 	.word	0x20000184

080036b0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80036b6:	4b05      	ldr	r3, [pc, #20]	; (80036cc <xTaskGetTickCount+0x1c>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80036bc:	687b      	ldr	r3, [r7, #4]
}
 80036be:	4618      	mov	r0, r3
 80036c0:	370c      	adds	r7, #12
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop
 80036cc:	20000178 	.word	0x20000178

080036d0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80036d6:	f001 f9c1 	bl	8004a5c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80036da:	2300      	movs	r3, #0
 80036dc:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80036de:	4b04      	ldr	r3, [pc, #16]	; (80036f0 <xTaskGetTickCountFromISR+0x20>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80036e4:	683b      	ldr	r3, [r7, #0]
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3708      	adds	r7, #8
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	20000178 	.word	0x20000178

080036f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b086      	sub	sp, #24
 80036f8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80036fa:	2300      	movs	r3, #0
 80036fc:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80036fe:	4b41      	ldr	r3, [pc, #260]	; (8003804 <xTaskIncrementTick+0x110>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d173      	bne.n	80037ee <xTaskIncrementTick+0xfa>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003706:	4b40      	ldr	r3, [pc, #256]	; (8003808 <xTaskIncrementTick+0x114>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	3301      	adds	r3, #1
 800370c:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800370e:	4a3e      	ldr	r2, [pc, #248]	; (8003808 <xTaskIncrementTick+0x114>)
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d120      	bne.n	800375c <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 800371a:	4b3c      	ldr	r3, [pc, #240]	; (800380c <xTaskIncrementTick+0x118>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d00a      	beq.n	800373a <xTaskIncrementTick+0x46>
        __asm volatile
 8003724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003728:	f383 8811 	msr	BASEPRI, r3
 800372c:	f3bf 8f6f 	isb	sy
 8003730:	f3bf 8f4f 	dsb	sy
 8003734:	603b      	str	r3, [r7, #0]
    }
 8003736:	bf00      	nop
 8003738:	e7fe      	b.n	8003738 <xTaskIncrementTick+0x44>
 800373a:	4b34      	ldr	r3, [pc, #208]	; (800380c <xTaskIncrementTick+0x118>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	60fb      	str	r3, [r7, #12]
 8003740:	4b33      	ldr	r3, [pc, #204]	; (8003810 <xTaskIncrementTick+0x11c>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a31      	ldr	r2, [pc, #196]	; (800380c <xTaskIncrementTick+0x118>)
 8003746:	6013      	str	r3, [r2, #0]
 8003748:	4a31      	ldr	r2, [pc, #196]	; (8003810 <xTaskIncrementTick+0x11c>)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6013      	str	r3, [r2, #0]
 800374e:	4b31      	ldr	r3, [pc, #196]	; (8003814 <xTaskIncrementTick+0x120>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	3301      	adds	r3, #1
 8003754:	4a2f      	ldr	r2, [pc, #188]	; (8003814 <xTaskIncrementTick+0x120>)
 8003756:	6013      	str	r3, [r2, #0]
 8003758:	f000 faa4 	bl	8003ca4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800375c:	4b2e      	ldr	r3, [pc, #184]	; (8003818 <xTaskIncrementTick+0x124>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	693a      	ldr	r2, [r7, #16]
 8003762:	429a      	cmp	r2, r3
 8003764:	d348      	bcc.n	80037f8 <xTaskIncrementTick+0x104>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003766:	4b29      	ldr	r3, [pc, #164]	; (800380c <xTaskIncrementTick+0x118>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d104      	bne.n	800377a <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003770:	4b29      	ldr	r3, [pc, #164]	; (8003818 <xTaskIncrementTick+0x124>)
 8003772:	f04f 32ff 	mov.w	r2, #4294967295
 8003776:	601a      	str	r2, [r3, #0]
                    break;
 8003778:	e03e      	b.n	80037f8 <xTaskIncrementTick+0x104>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800377a:	4b24      	ldr	r3, [pc, #144]	; (800380c <xTaskIncrementTick+0x118>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800378a:	693a      	ldr	r2, [r7, #16]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	429a      	cmp	r2, r3
 8003790:	d203      	bcs.n	800379a <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003792:	4a21      	ldr	r2, [pc, #132]	; (8003818 <xTaskIncrementTick+0x124>)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003798:	e02e      	b.n	80037f8 <xTaskIncrementTick+0x104>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	3304      	adds	r3, #4
 800379e:	4618      	mov	r0, r3
 80037a0:	f7fe ffd4 	bl	800274c <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d004      	beq.n	80037b6 <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	3318      	adds	r3, #24
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7fe ffcb 	bl	800274c <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	4618      	mov	r0, r3
 80037ba:	f003 fd9b 	bl	80072f4 <SEGGER_SYSVIEW_OnTaskStartReady>
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c2:	2201      	movs	r2, #1
 80037c4:	409a      	lsls	r2, r3
 80037c6:	4b15      	ldr	r3, [pc, #84]	; (800381c <xTaskIncrementTick+0x128>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	4a13      	ldr	r2, [pc, #76]	; (800381c <xTaskIncrementTick+0x128>)
 80037ce:	6013      	str	r3, [r2, #0]
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037d4:	4613      	mov	r3, r2
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	4413      	add	r3, r2
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	4a10      	ldr	r2, [pc, #64]	; (8003820 <xTaskIncrementTick+0x12c>)
 80037de:	441a      	add	r2, r3
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	3304      	adds	r3, #4
 80037e4:	4619      	mov	r1, r3
 80037e6:	4610      	mov	r0, r2
 80037e8:	f7fe ff53 	bl	8002692 <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037ec:	e7bb      	b.n	8003766 <xTaskIncrementTick+0x72>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80037ee:	4b0d      	ldr	r3, [pc, #52]	; (8003824 <xTaskIncrementTick+0x130>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	3301      	adds	r3, #1
 80037f4:	4a0b      	ldr	r2, [pc, #44]	; (8003824 <xTaskIncrementTick+0x130>)
 80037f6:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80037f8:	697b      	ldr	r3, [r7, #20]
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3718      	adds	r7, #24
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	2000019c 	.word	0x2000019c
 8003808:	20000178 	.word	0x20000178
 800380c:	2000012c 	.word	0x2000012c
 8003810:	20000130 	.word	0x20000130
 8003814:	2000018c 	.word	0x2000018c
 8003818:	20000194 	.word	0x20000194
 800381c:	2000017c 	.word	0x2000017c
 8003820:	200000a0 	.word	0x200000a0
 8003824:	20000184 	.word	0x20000184

08003828 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b086      	sub	sp, #24
 800382c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800382e:	4b2f      	ldr	r3, [pc, #188]	; (80038ec <vTaskSwitchContext+0xc4>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d003      	beq.n	800383e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003836:	4b2e      	ldr	r3, [pc, #184]	; (80038f0 <vTaskSwitchContext+0xc8>)
 8003838:	2201      	movs	r2, #1
 800383a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800383c:	e052      	b.n	80038e4 <vTaskSwitchContext+0xbc>
        xYieldPending = pdFALSE;
 800383e:	4b2c      	ldr	r3, [pc, #176]	; (80038f0 <vTaskSwitchContext+0xc8>)
 8003840:	2200      	movs	r2, #0
 8003842:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003844:	4b2b      	ldr	r3, [pc, #172]	; (80038f4 <vTaskSwitchContext+0xcc>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	fab3 f383 	clz	r3, r3
 8003850:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003852:	7afb      	ldrb	r3, [r7, #11]
 8003854:	f1c3 031f 	rsb	r3, r3, #31
 8003858:	617b      	str	r3, [r7, #20]
 800385a:	4927      	ldr	r1, [pc, #156]	; (80038f8 <vTaskSwitchContext+0xd0>)
 800385c:	697a      	ldr	r2, [r7, #20]
 800385e:	4613      	mov	r3, r2
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	4413      	add	r3, r2
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	440b      	add	r3, r1
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d10a      	bne.n	8003884 <vTaskSwitchContext+0x5c>
        __asm volatile
 800386e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003872:	f383 8811 	msr	BASEPRI, r3
 8003876:	f3bf 8f6f 	isb	sy
 800387a:	f3bf 8f4f 	dsb	sy
 800387e:	607b      	str	r3, [r7, #4]
    }
 8003880:	bf00      	nop
 8003882:	e7fe      	b.n	8003882 <vTaskSwitchContext+0x5a>
 8003884:	697a      	ldr	r2, [r7, #20]
 8003886:	4613      	mov	r3, r2
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	4413      	add	r3, r2
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	4a1a      	ldr	r2, [pc, #104]	; (80038f8 <vTaskSwitchContext+0xd0>)
 8003890:	4413      	add	r3, r2
 8003892:	613b      	str	r3, [r7, #16]
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	685a      	ldr	r2, [r3, #4]
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	605a      	str	r2, [r3, #4]
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	685a      	ldr	r2, [r3, #4]
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	3308      	adds	r3, #8
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d104      	bne.n	80038b4 <vTaskSwitchContext+0x8c>
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	685a      	ldr	r2, [r3, #4]
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	605a      	str	r2, [r3, #4]
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	4a10      	ldr	r2, [pc, #64]	; (80038fc <vTaskSwitchContext+0xd4>)
 80038bc:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80038be:	4b0f      	ldr	r3, [pc, #60]	; (80038fc <vTaskSwitchContext+0xd4>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	3334      	adds	r3, #52	; 0x34
 80038c4:	2205      	movs	r2, #5
 80038c6:	490e      	ldr	r1, [pc, #56]	; (8003900 <vTaskSwitchContext+0xd8>)
 80038c8:	4618      	mov	r0, r3
 80038ca:	f003 ff63 	bl	8007794 <memcmp>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d005      	beq.n	80038e0 <vTaskSwitchContext+0xb8>
 80038d4:	4b09      	ldr	r3, [pc, #36]	; (80038fc <vTaskSwitchContext+0xd4>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4618      	mov	r0, r3
 80038da:	f003 fcc9 	bl	8007270 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80038de:	e001      	b.n	80038e4 <vTaskSwitchContext+0xbc>
        traceTASK_SWITCHED_IN();
 80038e0:	f003 fc68 	bl	80071b4 <SEGGER_SYSVIEW_OnIdle>
}
 80038e4:	bf00      	nop
 80038e6:	3718      	adds	r7, #24
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	2000019c 	.word	0x2000019c
 80038f0:	20000188 	.word	0x20000188
 80038f4:	2000017c 	.word	0x2000017c
 80038f8:	200000a0 	.word	0x200000a0
 80038fc:	2000009c 	.word	0x2000009c
 8003900:	080080bc 	.word	0x080080bc

08003904 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d10a      	bne.n	800392a <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003918:	f383 8811 	msr	BASEPRI, r3
 800391c:	f3bf 8f6f 	isb	sy
 8003920:	f3bf 8f4f 	dsb	sy
 8003924:	60fb      	str	r3, [r7, #12]
    }
 8003926:	bf00      	nop
 8003928:	e7fe      	b.n	8003928 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800392a:	4b07      	ldr	r3, [pc, #28]	; (8003948 <vTaskPlaceOnEventList+0x44>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	3318      	adds	r3, #24
 8003930:	4619      	mov	r1, r3
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f7fe fed1 	bl	80026da <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003938:	2101      	movs	r1, #1
 800393a:	6838      	ldr	r0, [r7, #0]
 800393c:	f000 fa6c 	bl	8003e18 <prvAddCurrentTaskToDelayedList>
}
 8003940:	bf00      	nop
 8003942:	3710      	adds	r7, #16
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}
 8003948:	2000009c 	.word	0x2000009c

0800394c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800394c:	b580      	push	{r7, lr}
 800394e:	b086      	sub	sp, #24
 8003950:	af00      	add	r7, sp, #0
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	60b9      	str	r1, [r7, #8]
 8003956:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d10a      	bne.n	8003974 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800395e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003962:	f383 8811 	msr	BASEPRI, r3
 8003966:	f3bf 8f6f 	isb	sy
 800396a:	f3bf 8f4f 	dsb	sy
 800396e:	617b      	str	r3, [r7, #20]
    }
 8003970:	bf00      	nop
 8003972:	e7fe      	b.n	8003972 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003974:	4b0b      	ldr	r3, [pc, #44]	; (80039a4 <vTaskPlaceOnEventListRestricted+0x58>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	3318      	adds	r3, #24
 800397a:	4619      	mov	r1, r3
 800397c:	68f8      	ldr	r0, [r7, #12]
 800397e:	f7fe fe88 	bl	8002692 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d002      	beq.n	800398e <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8003988:	f04f 33ff 	mov.w	r3, #4294967295
 800398c:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800398e:	2024      	movs	r0, #36	; 0x24
 8003990:	f002 ff10 	bl	80067b4 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003994:	6879      	ldr	r1, [r7, #4]
 8003996:	68b8      	ldr	r0, [r7, #8]
 8003998:	f000 fa3e 	bl	8003e18 <prvAddCurrentTaskToDelayedList>
    }
 800399c:	bf00      	nop
 800399e:	3718      	adds	r7, #24
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	2000009c 	.word	0x2000009c

080039a8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b086      	sub	sp, #24
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d10a      	bne.n	80039d4 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80039be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039c2:	f383 8811 	msr	BASEPRI, r3
 80039c6:	f3bf 8f6f 	isb	sy
 80039ca:	f3bf 8f4f 	dsb	sy
 80039ce:	60fb      	str	r3, [r7, #12]
    }
 80039d0:	bf00      	nop
 80039d2:	e7fe      	b.n	80039d2 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	3318      	adds	r3, #24
 80039d8:	4618      	mov	r0, r3
 80039da:	f7fe feb7 	bl	800274c <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039de:	4b1f      	ldr	r3, [pc, #124]	; (8003a5c <xTaskRemoveFromEventList+0xb4>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d120      	bne.n	8003a28 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	3304      	adds	r3, #4
 80039ea:	4618      	mov	r0, r3
 80039ec:	f7fe feae 	bl	800274c <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	4618      	mov	r0, r3
 80039f4:	f003 fc7e 	bl	80072f4 <SEGGER_SYSVIEW_OnTaskStartReady>
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039fc:	2201      	movs	r2, #1
 80039fe:	409a      	lsls	r2, r3
 8003a00:	4b17      	ldr	r3, [pc, #92]	; (8003a60 <xTaskRemoveFromEventList+0xb8>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	4a16      	ldr	r2, [pc, #88]	; (8003a60 <xTaskRemoveFromEventList+0xb8>)
 8003a08:	6013      	str	r3, [r2, #0]
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a0e:	4613      	mov	r3, r2
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	4413      	add	r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	4a13      	ldr	r2, [pc, #76]	; (8003a64 <xTaskRemoveFromEventList+0xbc>)
 8003a18:	441a      	add	r2, r3
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	3304      	adds	r3, #4
 8003a1e:	4619      	mov	r1, r3
 8003a20:	4610      	mov	r0, r2
 8003a22:	f7fe fe36 	bl	8002692 <vListInsertEnd>
 8003a26:	e005      	b.n	8003a34 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	3318      	adds	r3, #24
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	480e      	ldr	r0, [pc, #56]	; (8003a68 <xTaskRemoveFromEventList+0xc0>)
 8003a30:	f7fe fe2f 	bl	8002692 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a38:	4b0c      	ldr	r3, [pc, #48]	; (8003a6c <xTaskRemoveFromEventList+0xc4>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d905      	bls.n	8003a4e <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003a42:	2301      	movs	r3, #1
 8003a44:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003a46:	4b0a      	ldr	r3, [pc, #40]	; (8003a70 <xTaskRemoveFromEventList+0xc8>)
 8003a48:	2201      	movs	r2, #1
 8003a4a:	601a      	str	r2, [r3, #0]
 8003a4c:	e001      	b.n	8003a52 <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8003a52:	697b      	ldr	r3, [r7, #20]
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3718      	adds	r7, #24
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	2000019c 	.word	0x2000019c
 8003a60:	2000017c 	.word	0x2000017c
 8003a64:	200000a0 	.word	0x200000a0
 8003a68:	20000134 	.word	0x20000134
 8003a6c:	2000009c 	.word	0x2000009c
 8003a70:	20000188 	.word	0x20000188

08003a74 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003a7c:	4b06      	ldr	r3, [pc, #24]	; (8003a98 <vTaskInternalSetTimeOutState+0x24>)
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003a84:	4b05      	ldr	r3, [pc, #20]	; (8003a9c <vTaskInternalSetTimeOutState+0x28>)
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	605a      	str	r2, [r3, #4]
}
 8003a8c:	bf00      	nop
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr
 8003a98:	2000018c 	.word	0x2000018c
 8003a9c:	20000178 	.word	0x20000178

08003aa0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b088      	sub	sp, #32
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d10a      	bne.n	8003ac6 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ab4:	f383 8811 	msr	BASEPRI, r3
 8003ab8:	f3bf 8f6f 	isb	sy
 8003abc:	f3bf 8f4f 	dsb	sy
 8003ac0:	613b      	str	r3, [r7, #16]
    }
 8003ac2:	bf00      	nop
 8003ac4:	e7fe      	b.n	8003ac4 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d10a      	bne.n	8003ae2 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ad0:	f383 8811 	msr	BASEPRI, r3
 8003ad4:	f3bf 8f6f 	isb	sy
 8003ad8:	f3bf 8f4f 	dsb	sy
 8003adc:	60fb      	str	r3, [r7, #12]
    }
 8003ade:	bf00      	nop
 8003ae0:	e7fe      	b.n	8003ae0 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003ae2:	f000 fecf 	bl	8004884 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003ae6:	4b1f      	ldr	r3, [pc, #124]	; (8003b64 <xTaskCheckForTimeOut+0xc4>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	69ba      	ldr	r2, [r7, #24]
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003afe:	d102      	bne.n	8003b06 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003b00:	2300      	movs	r3, #0
 8003b02:	61fb      	str	r3, [r7, #28]
 8003b04:	e026      	b.n	8003b54 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	4b17      	ldr	r3, [pc, #92]	; (8003b68 <xTaskCheckForTimeOut+0xc8>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d00a      	beq.n	8003b28 <xTaskCheckForTimeOut+0x88>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	69ba      	ldr	r2, [r7, #24]
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d305      	bcc.n	8003b28 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	2200      	movs	r2, #0
 8003b24:	601a      	str	r2, [r3, #0]
 8003b26:	e015      	b.n	8003b54 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	697a      	ldr	r2, [r7, #20]
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d20b      	bcs.n	8003b4a <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	1ad2      	subs	r2, r2, r3
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f7ff ff98 	bl	8003a74 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003b44:	2300      	movs	r3, #0
 8003b46:	61fb      	str	r3, [r7, #28]
 8003b48:	e004      	b.n	8003b54 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003b50:	2301      	movs	r3, #1
 8003b52:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003b54:	f000 fec6 	bl	80048e4 <vPortExitCritical>

    return xReturn;
 8003b58:	69fb      	ldr	r3, [r7, #28]
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3720      	adds	r7, #32
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	20000178 	.word	0x20000178
 8003b68:	2000018c 	.word	0x2000018c

08003b6c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003b70:	4b03      	ldr	r3, [pc, #12]	; (8003b80 <vTaskMissedYield+0x14>)
 8003b72:	2201      	movs	r2, #1
 8003b74:	601a      	str	r2, [r3, #0]
}
 8003b76:	bf00      	nop
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr
 8003b80:	20000188 	.word	0x20000188

08003b84 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b082      	sub	sp, #8
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003b8c:	f000 f84c 	bl	8003c28 <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 8003b90:	4b04      	ldr	r3, [pc, #16]	; (8003ba4 <prvIdleTask+0x20>)
 8003b92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b96:	601a      	str	r2, [r3, #0]
 8003b98:	f3bf 8f4f 	dsb	sy
 8003b9c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003ba0:	e7f4      	b.n	8003b8c <prvIdleTask+0x8>
 8003ba2:	bf00      	nop
 8003ba4:	e000ed04 	.word	0xe000ed04

08003ba8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003bae:	2300      	movs	r3, #0
 8003bb0:	607b      	str	r3, [r7, #4]
 8003bb2:	e00c      	b.n	8003bce <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	4613      	mov	r3, r2
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	4413      	add	r3, r2
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	4a12      	ldr	r2, [pc, #72]	; (8003c08 <prvInitialiseTaskLists+0x60>)
 8003bc0:	4413      	add	r3, r2
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f7fe fd38 	bl	8002638 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	3301      	adds	r3, #1
 8003bcc:	607b      	str	r3, [r7, #4]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2b04      	cmp	r3, #4
 8003bd2:	d9ef      	bls.n	8003bb4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003bd4:	480d      	ldr	r0, [pc, #52]	; (8003c0c <prvInitialiseTaskLists+0x64>)
 8003bd6:	f7fe fd2f 	bl	8002638 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003bda:	480d      	ldr	r0, [pc, #52]	; (8003c10 <prvInitialiseTaskLists+0x68>)
 8003bdc:	f7fe fd2c 	bl	8002638 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003be0:	480c      	ldr	r0, [pc, #48]	; (8003c14 <prvInitialiseTaskLists+0x6c>)
 8003be2:	f7fe fd29 	bl	8002638 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003be6:	480c      	ldr	r0, [pc, #48]	; (8003c18 <prvInitialiseTaskLists+0x70>)
 8003be8:	f7fe fd26 	bl	8002638 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003bec:	480b      	ldr	r0, [pc, #44]	; (8003c1c <prvInitialiseTaskLists+0x74>)
 8003bee:	f7fe fd23 	bl	8002638 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003bf2:	4b0b      	ldr	r3, [pc, #44]	; (8003c20 <prvInitialiseTaskLists+0x78>)
 8003bf4:	4a05      	ldr	r2, [pc, #20]	; (8003c0c <prvInitialiseTaskLists+0x64>)
 8003bf6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003bf8:	4b0a      	ldr	r3, [pc, #40]	; (8003c24 <prvInitialiseTaskLists+0x7c>)
 8003bfa:	4a05      	ldr	r2, [pc, #20]	; (8003c10 <prvInitialiseTaskLists+0x68>)
 8003bfc:	601a      	str	r2, [r3, #0]
}
 8003bfe:	bf00      	nop
 8003c00:	3708      	adds	r7, #8
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	200000a0 	.word	0x200000a0
 8003c0c:	20000104 	.word	0x20000104
 8003c10:	20000118 	.word	0x20000118
 8003c14:	20000134 	.word	0x20000134
 8003c18:	20000148 	.word	0x20000148
 8003c1c:	20000160 	.word	0x20000160
 8003c20:	2000012c 	.word	0x2000012c
 8003c24:	20000130 	.word	0x20000130

08003c28 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b082      	sub	sp, #8
 8003c2c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c2e:	e019      	b.n	8003c64 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003c30:	f000 fe28 	bl	8004884 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c34:	4b10      	ldr	r3, [pc, #64]	; (8003c78 <prvCheckTasksWaitingTermination+0x50>)
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	3304      	adds	r3, #4
 8003c40:	4618      	mov	r0, r3
 8003c42:	f7fe fd83 	bl	800274c <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003c46:	4b0d      	ldr	r3, [pc, #52]	; (8003c7c <prvCheckTasksWaitingTermination+0x54>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	4a0b      	ldr	r2, [pc, #44]	; (8003c7c <prvCheckTasksWaitingTermination+0x54>)
 8003c4e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003c50:	4b0b      	ldr	r3, [pc, #44]	; (8003c80 <prvCheckTasksWaitingTermination+0x58>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	3b01      	subs	r3, #1
 8003c56:	4a0a      	ldr	r2, [pc, #40]	; (8003c80 <prvCheckTasksWaitingTermination+0x58>)
 8003c58:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003c5a:	f000 fe43 	bl	80048e4 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 f810 	bl	8003c84 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c64:	4b06      	ldr	r3, [pc, #24]	; (8003c80 <prvCheckTasksWaitingTermination+0x58>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d1e1      	bne.n	8003c30 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003c6c:	bf00      	nop
 8003c6e:	bf00      	nop
 8003c70:	3708      	adds	r7, #8
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	20000148 	.word	0x20000148
 8003c7c:	20000174 	.word	0x20000174
 8003c80:	2000015c 	.word	0x2000015c

08003c84 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b082      	sub	sp, #8
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c90:	4618      	mov	r0, r3
 8003c92:	f001 f803 	bl	8004c9c <vPortFree>
                vPortFree( pxTCB );
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f001 f800 	bl	8004c9c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003c9c:	bf00      	nop
 8003c9e:	3708      	adds	r7, #8
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ca8:	4b0a      	ldr	r3, [pc, #40]	; (8003cd4 <prvResetNextTaskUnblockTime+0x30>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d104      	bne.n	8003cbc <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003cb2:	4b09      	ldr	r3, [pc, #36]	; (8003cd8 <prvResetNextTaskUnblockTime+0x34>)
 8003cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8003cb8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003cba:	e005      	b.n	8003cc8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003cbc:	4b05      	ldr	r3, [pc, #20]	; (8003cd4 <prvResetNextTaskUnblockTime+0x30>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a04      	ldr	r2, [pc, #16]	; (8003cd8 <prvResetNextTaskUnblockTime+0x34>)
 8003cc6:	6013      	str	r3, [r2, #0]
}
 8003cc8:	bf00      	nop
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr
 8003cd2:	bf00      	nop
 8003cd4:	2000012c 	.word	0x2000012c
 8003cd8:	20000194 	.word	0x20000194

08003cdc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003ce2:	4b0b      	ldr	r3, [pc, #44]	; (8003d10 <xTaskGetSchedulerState+0x34>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d102      	bne.n	8003cf0 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003cea:	2301      	movs	r3, #1
 8003cec:	607b      	str	r3, [r7, #4]
 8003cee:	e008      	b.n	8003d02 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003cf0:	4b08      	ldr	r3, [pc, #32]	; (8003d14 <xTaskGetSchedulerState+0x38>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d102      	bne.n	8003cfe <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003cf8:	2302      	movs	r3, #2
 8003cfa:	607b      	str	r3, [r7, #4]
 8003cfc:	e001      	b.n	8003d02 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003d02:	687b      	ldr	r3, [r7, #4]
    }
 8003d04:	4618      	mov	r0, r3
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr
 8003d10:	20000180 	.word	0x20000180
 8003d14:	2000019c 	.word	0x2000019c

08003d18 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b086      	sub	sp, #24
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003d24:	2300      	movs	r3, #0
 8003d26:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d068      	beq.n	8003e00 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003d2e:	4b37      	ldr	r3, [pc, #220]	; (8003e0c <xTaskPriorityDisinherit+0xf4>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	693a      	ldr	r2, [r7, #16]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d00a      	beq.n	8003d4e <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8003d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d3c:	f383 8811 	msr	BASEPRI, r3
 8003d40:	f3bf 8f6f 	isb	sy
 8003d44:	f3bf 8f4f 	dsb	sy
 8003d48:	60fb      	str	r3, [r7, #12]
    }
 8003d4a:	bf00      	nop
 8003d4c:	e7fe      	b.n	8003d4c <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10a      	bne.n	8003d6c <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8003d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d5a:	f383 8811 	msr	BASEPRI, r3
 8003d5e:	f3bf 8f6f 	isb	sy
 8003d62:	f3bf 8f4f 	dsb	sy
 8003d66:	60bb      	str	r3, [r7, #8]
    }
 8003d68:	bf00      	nop
 8003d6a:	e7fe      	b.n	8003d6a <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d70:	1e5a      	subs	r2, r3, #1
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d03e      	beq.n	8003e00 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d13a      	bne.n	8003e00 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	3304      	adds	r3, #4
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f7fe fcdc 	bl	800274c <uxListRemove>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d10a      	bne.n	8003db0 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9e:	2201      	movs	r2, #1
 8003da0:	fa02 f303 	lsl.w	r3, r2, r3
 8003da4:	43da      	mvns	r2, r3
 8003da6:	4b1a      	ldr	r3, [pc, #104]	; (8003e10 <xTaskPriorityDisinherit+0xf8>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4013      	ands	r3, r2
 8003dac:	4a18      	ldr	r2, [pc, #96]	; (8003e10 <xTaskPriorityDisinherit+0xf8>)
 8003dae:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	4619      	mov	r1, r3
 8003db4:	204a      	movs	r0, #74	; 0x4a
 8003db6:	f002 fd1b 	bl	80067f0 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc6:	f1c3 0205 	rsb	r2, r3, #5
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	409a      	lsls	r2, r3
 8003dd6:	4b0e      	ldr	r3, [pc, #56]	; (8003e10 <xTaskPriorityDisinherit+0xf8>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	4a0c      	ldr	r2, [pc, #48]	; (8003e10 <xTaskPriorityDisinherit+0xf8>)
 8003dde:	6013      	str	r3, [r2, #0]
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003de4:	4613      	mov	r3, r2
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	4413      	add	r3, r2
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	4a09      	ldr	r2, [pc, #36]	; (8003e14 <xTaskPriorityDisinherit+0xfc>)
 8003dee:	441a      	add	r2, r3
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	3304      	adds	r3, #4
 8003df4:	4619      	mov	r1, r3
 8003df6:	4610      	mov	r0, r2
 8003df8:	f7fe fc4b 	bl	8002692 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003e00:	697b      	ldr	r3, [r7, #20]
    }
 8003e02:	4618      	mov	r0, r3
 8003e04:	3718      	adds	r7, #24
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	2000009c 	.word	0x2000009c
 8003e10:	2000017c 	.word	0x2000017c
 8003e14:	200000a0 	.word	0x200000a0

08003e18 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003e22:	4b32      	ldr	r3, [pc, #200]	; (8003eec <prvAddCurrentTaskToDelayedList+0xd4>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e28:	4b31      	ldr	r3, [pc, #196]	; (8003ef0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	3304      	adds	r3, #4
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f7fe fc8c 	bl	800274c <uxListRemove>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d10b      	bne.n	8003e52 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003e3a:	4b2d      	ldr	r3, [pc, #180]	; (8003ef0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e40:	2201      	movs	r2, #1
 8003e42:	fa02 f303 	lsl.w	r3, r2, r3
 8003e46:	43da      	mvns	r2, r3
 8003e48:	4b2a      	ldr	r3, [pc, #168]	; (8003ef4 <prvAddCurrentTaskToDelayedList+0xdc>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	4a29      	ldr	r2, [pc, #164]	; (8003ef4 <prvAddCurrentTaskToDelayedList+0xdc>)
 8003e50:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e58:	d110      	bne.n	8003e7c <prvAddCurrentTaskToDelayedList+0x64>
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d00d      	beq.n	8003e7c <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8003e60:	4b23      	ldr	r3, [pc, #140]	; (8003ef0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	211b      	movs	r1, #27
 8003e66:	4618      	mov	r0, r3
 8003e68:	f003 fa86 	bl	8007378 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e6c:	4b20      	ldr	r3, [pc, #128]	; (8003ef0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	3304      	adds	r3, #4
 8003e72:	4619      	mov	r1, r3
 8003e74:	4820      	ldr	r0, [pc, #128]	; (8003ef8 <prvAddCurrentTaskToDelayedList+0xe0>)
 8003e76:	f7fe fc0c 	bl	8002692 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003e7a:	e032      	b.n	8003ee2 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003e7c:	68fa      	ldr	r2, [r7, #12]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4413      	add	r3, r2
 8003e82:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003e84:	4b1a      	ldr	r3, [pc, #104]	; (8003ef0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	68ba      	ldr	r2, [r7, #8]
 8003e8a:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003e8c:	68ba      	ldr	r2, [r7, #8]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d20f      	bcs.n	8003eb4 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003e94:	4b16      	ldr	r3, [pc, #88]	; (8003ef0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	2104      	movs	r1, #4
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f003 fa6c 	bl	8007378 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ea0:	4b16      	ldr	r3, [pc, #88]	; (8003efc <prvAddCurrentTaskToDelayedList+0xe4>)
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	4b12      	ldr	r3, [pc, #72]	; (8003ef0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	3304      	adds	r3, #4
 8003eaa:	4619      	mov	r1, r3
 8003eac:	4610      	mov	r0, r2
 8003eae:	f7fe fc14 	bl	80026da <vListInsert>
}
 8003eb2:	e016      	b.n	8003ee2 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003eb4:	4b0e      	ldr	r3, [pc, #56]	; (8003ef0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	2104      	movs	r1, #4
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f003 fa5c 	bl	8007378 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ec0:	4b0f      	ldr	r3, [pc, #60]	; (8003f00 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	4b0a      	ldr	r3, [pc, #40]	; (8003ef0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	3304      	adds	r3, #4
 8003eca:	4619      	mov	r1, r3
 8003ecc:	4610      	mov	r0, r2
 8003ece:	f7fe fc04 	bl	80026da <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003ed2:	4b0c      	ldr	r3, [pc, #48]	; (8003f04 <prvAddCurrentTaskToDelayedList+0xec>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	68ba      	ldr	r2, [r7, #8]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d202      	bcs.n	8003ee2 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8003edc:	4a09      	ldr	r2, [pc, #36]	; (8003f04 <prvAddCurrentTaskToDelayedList+0xec>)
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	6013      	str	r3, [r2, #0]
}
 8003ee2:	bf00      	nop
 8003ee4:	3710      	adds	r7, #16
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	20000178 	.word	0x20000178
 8003ef0:	2000009c 	.word	0x2000009c
 8003ef4:	2000017c 	.word	0x2000017c
 8003ef8:	20000160 	.word	0x20000160
 8003efc:	20000130 	.word	0x20000130
 8003f00:	2000012c 	.word	0x2000012c
 8003f04:	20000194 	.word	0x20000194

08003f08 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003f12:	f000 fad5 	bl	80044c0 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003f16:	4b11      	ldr	r3, [pc, #68]	; (8003f5c <xTimerCreateTimerTask+0x54>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00b      	beq.n	8003f36 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003f1e:	4b10      	ldr	r3, [pc, #64]	; (8003f60 <xTimerCreateTimerTask+0x58>)
 8003f20:	9301      	str	r3, [sp, #4]
 8003f22:	2302      	movs	r3, #2
 8003f24:	9300      	str	r3, [sp, #0]
 8003f26:	2300      	movs	r3, #0
 8003f28:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003f2c:	490d      	ldr	r1, [pc, #52]	; (8003f64 <xTimerCreateTimerTask+0x5c>)
 8003f2e:	480e      	ldr	r0, [pc, #56]	; (8003f68 <xTimerCreateTimerTask+0x60>)
 8003f30:	f7ff f962 	bl	80031f8 <xTaskCreate>
 8003f34:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d10a      	bne.n	8003f52 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f40:	f383 8811 	msr	BASEPRI, r3
 8003f44:	f3bf 8f6f 	isb	sy
 8003f48:	f3bf 8f4f 	dsb	sy
 8003f4c:	603b      	str	r3, [r7, #0]
    }
 8003f4e:	bf00      	nop
 8003f50:	e7fe      	b.n	8003f50 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003f52:	687b      	ldr	r3, [r7, #4]
    }
 8003f54:	4618      	mov	r0, r3
 8003f56:	3708      	adds	r7, #8
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	200001d0 	.word	0x200001d0
 8003f60:	200001d4 	.word	0x200001d4
 8003f64:	080080c4 	.word	0x080080c4
 8003f68:	080040a1 	.word	0x080040a1

08003f6c <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b08a      	sub	sp, #40	; 0x28
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	60b9      	str	r1, [r7, #8]
 8003f76:	607a      	str	r2, [r7, #4]
 8003f78:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d10a      	bne.n	8003f9a <xTimerGenericCommand+0x2e>
        __asm volatile
 8003f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f88:	f383 8811 	msr	BASEPRI, r3
 8003f8c:	f3bf 8f6f 	isb	sy
 8003f90:	f3bf 8f4f 	dsb	sy
 8003f94:	623b      	str	r3, [r7, #32]
    }
 8003f96:	bf00      	nop
 8003f98:	e7fe      	b.n	8003f98 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8003f9a:	4b1a      	ldr	r3, [pc, #104]	; (8004004 <xTimerGenericCommand+0x98>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d02a      	beq.n	8003ff8 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	2b05      	cmp	r3, #5
 8003fb2:	dc18      	bgt.n	8003fe6 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003fb4:	f7ff fe92 	bl	8003cdc <xTaskGetSchedulerState>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b02      	cmp	r3, #2
 8003fbc:	d109      	bne.n	8003fd2 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003fbe:	4b11      	ldr	r3, [pc, #68]	; (8004004 <xTimerGenericCommand+0x98>)
 8003fc0:	6818      	ldr	r0, [r3, #0]
 8003fc2:	f107 0114 	add.w	r1, r7, #20
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fca:	f7fe fccd 	bl	8002968 <xQueueGenericSend>
 8003fce:	6278      	str	r0, [r7, #36]	; 0x24
 8003fd0:	e012      	b.n	8003ff8 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003fd2:	4b0c      	ldr	r3, [pc, #48]	; (8004004 <xTimerGenericCommand+0x98>)
 8003fd4:	6818      	ldr	r0, [r3, #0]
 8003fd6:	f107 0114 	add.w	r1, r7, #20
 8003fda:	2300      	movs	r3, #0
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f7fe fcc3 	bl	8002968 <xQueueGenericSend>
 8003fe2:	6278      	str	r0, [r7, #36]	; 0x24
 8003fe4:	e008      	b.n	8003ff8 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003fe6:	4b07      	ldr	r3, [pc, #28]	; (8004004 <xTimerGenericCommand+0x98>)
 8003fe8:	6818      	ldr	r0, [r3, #0]
 8003fea:	f107 0114 	add.w	r1, r7, #20
 8003fee:	2300      	movs	r3, #0
 8003ff0:	683a      	ldr	r2, [r7, #0]
 8003ff2:	f7fe fdc7 	bl	8002b84 <xQueueGenericSendFromISR>
 8003ff6:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3728      	adds	r7, #40	; 0x28
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	200001d0 	.word	0x200001d0

08004008 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004008:	b580      	push	{r7, lr}
 800400a:	b088      	sub	sp, #32
 800400c:	af02      	add	r7, sp, #8
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004012:	4b22      	ldr	r3, [pc, #136]	; (800409c <prvProcessExpiredTimer+0x94>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	3304      	adds	r3, #4
 8004020:	4618      	mov	r0, r3
 8004022:	f7fe fb93 	bl	800274c <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800402c:	f003 0304 	and.w	r3, r3, #4
 8004030:	2b00      	cmp	r3, #0
 8004032:	d022      	beq.n	800407a <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	699a      	ldr	r2, [r3, #24]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	18d1      	adds	r1, r2, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	683a      	ldr	r2, [r7, #0]
 8004040:	6978      	ldr	r0, [r7, #20]
 8004042:	f000 f8d1 	bl	80041e8 <prvInsertTimerInActiveList>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d01f      	beq.n	800408c <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800404c:	2300      	movs	r3, #0
 800404e:	9300      	str	r3, [sp, #0]
 8004050:	2300      	movs	r3, #0
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	2100      	movs	r1, #0
 8004056:	6978      	ldr	r0, [r7, #20]
 8004058:	f7ff ff88 	bl	8003f6c <xTimerGenericCommand>
 800405c:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d113      	bne.n	800408c <prvProcessExpiredTimer+0x84>
        __asm volatile
 8004064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004068:	f383 8811 	msr	BASEPRI, r3
 800406c:	f3bf 8f6f 	isb	sy
 8004070:	f3bf 8f4f 	dsb	sy
 8004074:	60fb      	str	r3, [r7, #12]
    }
 8004076:	bf00      	nop
 8004078:	e7fe      	b.n	8004078 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004080:	f023 0301 	bic.w	r3, r3, #1
 8004084:	b2da      	uxtb	r2, r3
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	6a1b      	ldr	r3, [r3, #32]
 8004090:	6978      	ldr	r0, [r7, #20]
 8004092:	4798      	blx	r3
    }
 8004094:	bf00      	nop
 8004096:	3718      	adds	r7, #24
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}
 800409c:	200001c8 	.word	0x200001c8

080040a0 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b084      	sub	sp, #16
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80040a8:	f107 0308 	add.w	r3, r7, #8
 80040ac:	4618      	mov	r0, r3
 80040ae:	f000 f857 	bl	8004160 <prvGetNextExpireTime>
 80040b2:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	4619      	mov	r1, r3
 80040b8:	68f8      	ldr	r0, [r7, #12]
 80040ba:	f000 f803 	bl	80040c4 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80040be:	f000 f8d5 	bl	800426c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80040c2:	e7f1      	b.n	80040a8 <prvTimerTask+0x8>

080040c4 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80040ce:	f7ff fa4f 	bl	8003570 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80040d2:	f107 0308 	add.w	r3, r7, #8
 80040d6:	4618      	mov	r0, r3
 80040d8:	f000 f866 	bl	80041a8 <prvSampleTimeNow>
 80040dc:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d130      	bne.n	8004146 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d10a      	bne.n	8004100 <prvProcessTimerOrBlockTask+0x3c>
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d806      	bhi.n	8004100 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80040f2:	f7ff fa4b 	bl	800358c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80040f6:	68f9      	ldr	r1, [r7, #12]
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f7ff ff85 	bl	8004008 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80040fe:	e024      	b.n	800414a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d008      	beq.n	8004118 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004106:	4b13      	ldr	r3, [pc, #76]	; (8004154 <prvProcessTimerOrBlockTask+0x90>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d101      	bne.n	8004114 <prvProcessTimerOrBlockTask+0x50>
 8004110:	2301      	movs	r3, #1
 8004112:	e000      	b.n	8004116 <prvProcessTimerOrBlockTask+0x52>
 8004114:	2300      	movs	r3, #0
 8004116:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004118:	4b0f      	ldr	r3, [pc, #60]	; (8004158 <prvProcessTimerOrBlockTask+0x94>)
 800411a:	6818      	ldr	r0, [r3, #0]
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	683a      	ldr	r2, [r7, #0]
 8004124:	4619      	mov	r1, r3
 8004126:	f7ff f833 	bl	8003190 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800412a:	f7ff fa2f 	bl	800358c <xTaskResumeAll>
 800412e:	4603      	mov	r3, r0
 8004130:	2b00      	cmp	r3, #0
 8004132:	d10a      	bne.n	800414a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8004134:	4b09      	ldr	r3, [pc, #36]	; (800415c <prvProcessTimerOrBlockTask+0x98>)
 8004136:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800413a:	601a      	str	r2, [r3, #0]
 800413c:	f3bf 8f4f 	dsb	sy
 8004140:	f3bf 8f6f 	isb	sy
    }
 8004144:	e001      	b.n	800414a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8004146:	f7ff fa21 	bl	800358c <xTaskResumeAll>
    }
 800414a:	bf00      	nop
 800414c:	3710      	adds	r7, #16
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	200001cc 	.word	0x200001cc
 8004158:	200001d0 	.word	0x200001d0
 800415c:	e000ed04 	.word	0xe000ed04

08004160 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004160:	b480      	push	{r7}
 8004162:	b085      	sub	sp, #20
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004168:	4b0e      	ldr	r3, [pc, #56]	; (80041a4 <prvGetNextExpireTime+0x44>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d101      	bne.n	8004176 <prvGetNextExpireTime+0x16>
 8004172:	2201      	movs	r2, #1
 8004174:	e000      	b.n	8004178 <prvGetNextExpireTime+0x18>
 8004176:	2200      	movs	r2, #0
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d105      	bne.n	8004190 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004184:	4b07      	ldr	r3, [pc, #28]	; (80041a4 <prvGetNextExpireTime+0x44>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	60fb      	str	r3, [r7, #12]
 800418e:	e001      	b.n	8004194 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004190:	2300      	movs	r3, #0
 8004192:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004194:	68fb      	ldr	r3, [r7, #12]
    }
 8004196:	4618      	mov	r0, r3
 8004198:	3714      	adds	r7, #20
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	200001c8 	.word	0x200001c8

080041a8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80041b0:	f7ff fa7e 	bl	80036b0 <xTaskGetTickCount>
 80041b4:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80041b6:	4b0b      	ldr	r3, [pc, #44]	; (80041e4 <prvSampleTimeNow+0x3c>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	68fa      	ldr	r2, [r7, #12]
 80041bc:	429a      	cmp	r2, r3
 80041be:	d205      	bcs.n	80041cc <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80041c0:	f000 f91a 	bl	80043f8 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	601a      	str	r2, [r3, #0]
 80041ca:	e002      	b.n	80041d2 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80041d2:	4a04      	ldr	r2, [pc, #16]	; (80041e4 <prvSampleTimeNow+0x3c>)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80041d8:	68fb      	ldr	r3, [r7, #12]
    }
 80041da:	4618      	mov	r0, r3
 80041dc:	3710      	adds	r7, #16
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	200001d8 	.word	0x200001d8

080041e8 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b086      	sub	sp, #24
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	607a      	str	r2, [r7, #4]
 80041f4:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80041f6:	2300      	movs	r3, #0
 80041f8:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	68ba      	ldr	r2, [r7, #8]
 80041fe:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	68fa      	ldr	r2, [r7, #12]
 8004204:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004206:	68ba      	ldr	r2, [r7, #8]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	429a      	cmp	r2, r3
 800420c:	d812      	bhi.n	8004234 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	1ad2      	subs	r2, r2, r3
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	699b      	ldr	r3, [r3, #24]
 8004218:	429a      	cmp	r2, r3
 800421a:	d302      	bcc.n	8004222 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800421c:	2301      	movs	r3, #1
 800421e:	617b      	str	r3, [r7, #20]
 8004220:	e01b      	b.n	800425a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004222:	4b10      	ldr	r3, [pc, #64]	; (8004264 <prvInsertTimerInActiveList+0x7c>)
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	3304      	adds	r3, #4
 800422a:	4619      	mov	r1, r3
 800422c:	4610      	mov	r0, r2
 800422e:	f7fe fa54 	bl	80026da <vListInsert>
 8004232:	e012      	b.n	800425a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	429a      	cmp	r2, r3
 800423a:	d206      	bcs.n	800424a <prvInsertTimerInActiveList+0x62>
 800423c:	68ba      	ldr	r2, [r7, #8]
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	429a      	cmp	r2, r3
 8004242:	d302      	bcc.n	800424a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004244:	2301      	movs	r3, #1
 8004246:	617b      	str	r3, [r7, #20]
 8004248:	e007      	b.n	800425a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800424a:	4b07      	ldr	r3, [pc, #28]	; (8004268 <prvInsertTimerInActiveList+0x80>)
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	3304      	adds	r3, #4
 8004252:	4619      	mov	r1, r3
 8004254:	4610      	mov	r0, r2
 8004256:	f7fe fa40 	bl	80026da <vListInsert>
            }
        }

        return xProcessTimerNow;
 800425a:	697b      	ldr	r3, [r7, #20]
    }
 800425c:	4618      	mov	r0, r3
 800425e:	3718      	adds	r7, #24
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}
 8004264:	200001cc 	.word	0x200001cc
 8004268:	200001c8 	.word	0x200001c8

0800426c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800426c:	b580      	push	{r7, lr}
 800426e:	b08c      	sub	sp, #48	; 0x30
 8004270:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004272:	e0ae      	b.n	80043d2 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	2b00      	cmp	r3, #0
 8004278:	f2c0 80aa 	blt.w	80043d0 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004282:	695b      	ldr	r3, [r3, #20]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d004      	beq.n	8004292 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428a:	3304      	adds	r3, #4
 800428c:	4618      	mov	r0, r3
 800428e:	f7fe fa5d 	bl	800274c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004292:	1d3b      	adds	r3, r7, #4
 8004294:	4618      	mov	r0, r3
 8004296:	f7ff ff87 	bl	80041a8 <prvSampleTimeNow>
 800429a:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	2b09      	cmp	r3, #9
 80042a0:	f200 8097 	bhi.w	80043d2 <prvProcessReceivedCommands+0x166>
 80042a4:	a201      	add	r2, pc, #4	; (adr r2, 80042ac <prvProcessReceivedCommands+0x40>)
 80042a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042aa:	bf00      	nop
 80042ac:	080042d5 	.word	0x080042d5
 80042b0:	080042d5 	.word	0x080042d5
 80042b4:	080042d5 	.word	0x080042d5
 80042b8:	08004349 	.word	0x08004349
 80042bc:	0800435d 	.word	0x0800435d
 80042c0:	080043a7 	.word	0x080043a7
 80042c4:	080042d5 	.word	0x080042d5
 80042c8:	080042d5 	.word	0x080042d5
 80042cc:	08004349 	.word	0x08004349
 80042d0:	0800435d 	.word	0x0800435d
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80042d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042da:	f043 0301 	orr.w	r3, r3, #1
 80042de:	b2da      	uxtb	r2, r3
 80042e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ea:	699b      	ldr	r3, [r3, #24]
 80042ec:	18d1      	adds	r1, r2, r3
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6a3a      	ldr	r2, [r7, #32]
 80042f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80042f4:	f7ff ff78 	bl	80041e8 <prvInsertTimerInActiveList>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d069      	beq.n	80043d2 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80042fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004300:	6a1b      	ldr	r3, [r3, #32]
 8004302:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004304:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004308:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800430c:	f003 0304 	and.w	r3, r3, #4
 8004310:	2b00      	cmp	r3, #0
 8004312:	d05e      	beq.n	80043d2 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004314:	68fa      	ldr	r2, [r7, #12]
 8004316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004318:	699b      	ldr	r3, [r3, #24]
 800431a:	441a      	add	r2, r3
 800431c:	2300      	movs	r3, #0
 800431e:	9300      	str	r3, [sp, #0]
 8004320:	2300      	movs	r3, #0
 8004322:	2100      	movs	r1, #0
 8004324:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004326:	f7ff fe21 	bl	8003f6c <xTimerGenericCommand>
 800432a:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d14f      	bne.n	80043d2 <prvProcessReceivedCommands+0x166>
        __asm volatile
 8004332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004336:	f383 8811 	msr	BASEPRI, r3
 800433a:	f3bf 8f6f 	isb	sy
 800433e:	f3bf 8f4f 	dsb	sy
 8004342:	61bb      	str	r3, [r7, #24]
    }
 8004344:	bf00      	nop
 8004346:	e7fe      	b.n	8004346 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800434e:	f023 0301 	bic.w	r3, r3, #1
 8004352:	b2da      	uxtb	r2, r3
 8004354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004356:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800435a:	e03a      	b.n	80043d2 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800435c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004362:	f043 0301 	orr.w	r3, r3, #1
 8004366:	b2da      	uxtb	r2, r3
 8004368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800436e:	68fa      	ldr	r2, [r7, #12]
 8004370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004372:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004376:	699b      	ldr	r3, [r3, #24]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d10a      	bne.n	8004392 <prvProcessReceivedCommands+0x126>
        __asm volatile
 800437c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004380:	f383 8811 	msr	BASEPRI, r3
 8004384:	f3bf 8f6f 	isb	sy
 8004388:	f3bf 8f4f 	dsb	sy
 800438c:	617b      	str	r3, [r7, #20]
    }
 800438e:	bf00      	nop
 8004390:	e7fe      	b.n	8004390 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004394:	699a      	ldr	r2, [r3, #24]
 8004396:	6a3b      	ldr	r3, [r7, #32]
 8004398:	18d1      	adds	r1, r2, r3
 800439a:	6a3b      	ldr	r3, [r7, #32]
 800439c:	6a3a      	ldr	r2, [r7, #32]
 800439e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80043a0:	f7ff ff22 	bl	80041e8 <prvInsertTimerInActiveList>
                        break;
 80043a4:	e015      	b.n	80043d2 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80043a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043ac:	f003 0302 	and.w	r3, r3, #2
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d103      	bne.n	80043bc <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 80043b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80043b6:	f000 fc71 	bl	8004c9c <vPortFree>
 80043ba:	e00a      	b.n	80043d2 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80043bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043c2:	f023 0301 	bic.w	r3, r3, #1
 80043c6:	b2da      	uxtb	r2, r3
 80043c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80043ce:	e000      	b.n	80043d2 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80043d0:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80043d2:	4b08      	ldr	r3, [pc, #32]	; (80043f4 <prvProcessReceivedCommands+0x188>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f107 0108 	add.w	r1, r7, #8
 80043da:	2200      	movs	r2, #0
 80043dc:	4618      	mov	r0, r3
 80043de:	f7fe fc8f 	bl	8002d00 <xQueueReceive>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	f47f af45 	bne.w	8004274 <prvProcessReceivedCommands+0x8>
        }
    }
 80043ea:	bf00      	nop
 80043ec:	bf00      	nop
 80043ee:	3728      	adds	r7, #40	; 0x28
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	200001d0 	.word	0x200001d0

080043f8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b088      	sub	sp, #32
 80043fc:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80043fe:	e048      	b.n	8004492 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004400:	4b2d      	ldr	r3, [pc, #180]	; (80044b8 <prvSwitchTimerLists+0xc0>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800440a:	4b2b      	ldr	r3, [pc, #172]	; (80044b8 <prvSwitchTimerLists+0xc0>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	3304      	adds	r3, #4
 8004418:	4618      	mov	r0, r3
 800441a:	f7fe f997 	bl	800274c <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	6a1b      	ldr	r3, [r3, #32]
 8004422:	68f8      	ldr	r0, [r7, #12]
 8004424:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800442c:	f003 0304 	and.w	r3, r3, #4
 8004430:	2b00      	cmp	r3, #0
 8004432:	d02e      	beq.n	8004492 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	699b      	ldr	r3, [r3, #24]
 8004438:	693a      	ldr	r2, [r7, #16]
 800443a:	4413      	add	r3, r2
 800443c:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 800443e:	68ba      	ldr	r2, [r7, #8]
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	429a      	cmp	r2, r3
 8004444:	d90e      	bls.n	8004464 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	68ba      	ldr	r2, [r7, #8]
 800444a:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	68fa      	ldr	r2, [r7, #12]
 8004450:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004452:	4b19      	ldr	r3, [pc, #100]	; (80044b8 <prvSwitchTimerLists+0xc0>)
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	3304      	adds	r3, #4
 800445a:	4619      	mov	r1, r3
 800445c:	4610      	mov	r0, r2
 800445e:	f7fe f93c 	bl	80026da <vListInsert>
 8004462:	e016      	b.n	8004492 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004464:	2300      	movs	r3, #0
 8004466:	9300      	str	r3, [sp, #0]
 8004468:	2300      	movs	r3, #0
 800446a:	693a      	ldr	r2, [r7, #16]
 800446c:	2100      	movs	r1, #0
 800446e:	68f8      	ldr	r0, [r7, #12]
 8004470:	f7ff fd7c 	bl	8003f6c <xTimerGenericCommand>
 8004474:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d10a      	bne.n	8004492 <prvSwitchTimerLists+0x9a>
        __asm volatile
 800447c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004480:	f383 8811 	msr	BASEPRI, r3
 8004484:	f3bf 8f6f 	isb	sy
 8004488:	f3bf 8f4f 	dsb	sy
 800448c:	603b      	str	r3, [r7, #0]
    }
 800448e:	bf00      	nop
 8004490:	e7fe      	b.n	8004490 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004492:	4b09      	ldr	r3, [pc, #36]	; (80044b8 <prvSwitchTimerLists+0xc0>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d1b1      	bne.n	8004400 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 800449c:	4b06      	ldr	r3, [pc, #24]	; (80044b8 <prvSwitchTimerLists+0xc0>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 80044a2:	4b06      	ldr	r3, [pc, #24]	; (80044bc <prvSwitchTimerLists+0xc4>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a04      	ldr	r2, [pc, #16]	; (80044b8 <prvSwitchTimerLists+0xc0>)
 80044a8:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80044aa:	4a04      	ldr	r2, [pc, #16]	; (80044bc <prvSwitchTimerLists+0xc4>)
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	6013      	str	r3, [r2, #0]
    }
 80044b0:	bf00      	nop
 80044b2:	3718      	adds	r7, #24
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	200001c8 	.word	0x200001c8
 80044bc:	200001cc 	.word	0x200001cc

080044c0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80044c0:	b580      	push	{r7, lr}
 80044c2:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80044c4:	f000 f9de 	bl	8004884 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80044c8:	4b12      	ldr	r3, [pc, #72]	; (8004514 <prvCheckForValidListAndQueue+0x54>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d11d      	bne.n	800450c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80044d0:	4811      	ldr	r0, [pc, #68]	; (8004518 <prvCheckForValidListAndQueue+0x58>)
 80044d2:	f7fe f8b1 	bl	8002638 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80044d6:	4811      	ldr	r0, [pc, #68]	; (800451c <prvCheckForValidListAndQueue+0x5c>)
 80044d8:	f7fe f8ae 	bl	8002638 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80044dc:	4b10      	ldr	r3, [pc, #64]	; (8004520 <prvCheckForValidListAndQueue+0x60>)
 80044de:	4a0e      	ldr	r2, [pc, #56]	; (8004518 <prvCheckForValidListAndQueue+0x58>)
 80044e0:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80044e2:	4b10      	ldr	r3, [pc, #64]	; (8004524 <prvCheckForValidListAndQueue+0x64>)
 80044e4:	4a0d      	ldr	r2, [pc, #52]	; (800451c <prvCheckForValidListAndQueue+0x5c>)
 80044e6:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80044e8:	2200      	movs	r2, #0
 80044ea:	210c      	movs	r1, #12
 80044ec:	200a      	movs	r0, #10
 80044ee:	f7fe f9b2 	bl	8002856 <xQueueGenericCreate>
 80044f2:	4603      	mov	r3, r0
 80044f4:	4a07      	ldr	r2, [pc, #28]	; (8004514 <prvCheckForValidListAndQueue+0x54>)
 80044f6:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 80044f8:	4b06      	ldr	r3, [pc, #24]	; (8004514 <prvCheckForValidListAndQueue+0x54>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d005      	beq.n	800450c <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004500:	4b04      	ldr	r3, [pc, #16]	; (8004514 <prvCheckForValidListAndQueue+0x54>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4908      	ldr	r1, [pc, #32]	; (8004528 <prvCheckForValidListAndQueue+0x68>)
 8004506:	4618      	mov	r0, r3
 8004508:	f7fe fe10 	bl	800312c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800450c:	f000 f9ea 	bl	80048e4 <vPortExitCritical>
    }
 8004510:	bf00      	nop
 8004512:	bd80      	pop	{r7, pc}
 8004514:	200001d0 	.word	0x200001d0
 8004518:	200001a0 	.word	0x200001a0
 800451c:	200001b4 	.word	0x200001b4
 8004520:	200001c8 	.word	0x200001c8
 8004524:	200001cc 	.word	0x200001cc
 8004528:	080080cc 	.word	0x080080cc

0800452c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800452c:	b480      	push	{r7}
 800452e:	b085      	sub	sp, #20
 8004530:	af00      	add	r7, sp, #0
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	60b9      	str	r1, [r7, #8]
 8004536:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	3b04      	subs	r3, #4
 800453c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004544:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	3b04      	subs	r3, #4
 800454a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	f023 0201 	bic.w	r2, r3, #1
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	3b04      	subs	r3, #4
 800455a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800455c:	4a0c      	ldr	r2, [pc, #48]	; (8004590 <pxPortInitialiseStack+0x64>)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	3b14      	subs	r3, #20
 8004566:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	3b04      	subs	r3, #4
 8004572:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f06f 0202 	mvn.w	r2, #2
 800457a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	3b20      	subs	r3, #32
 8004580:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004582:	68fb      	ldr	r3, [r7, #12]
}
 8004584:	4618      	mov	r0, r3
 8004586:	3714      	adds	r7, #20
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr
 8004590:	08004595 	.word	0x08004595

08004594 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004594:	b480      	push	{r7}
 8004596:	b085      	sub	sp, #20
 8004598:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800459a:	2300      	movs	r3, #0
 800459c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800459e:	4b12      	ldr	r3, [pc, #72]	; (80045e8 <prvTaskExitError+0x54>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045a6:	d00a      	beq.n	80045be <prvTaskExitError+0x2a>
        __asm volatile
 80045a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ac:	f383 8811 	msr	BASEPRI, r3
 80045b0:	f3bf 8f6f 	isb	sy
 80045b4:	f3bf 8f4f 	dsb	sy
 80045b8:	60fb      	str	r3, [r7, #12]
    }
 80045ba:	bf00      	nop
 80045bc:	e7fe      	b.n	80045bc <prvTaskExitError+0x28>
        __asm volatile
 80045be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c2:	f383 8811 	msr	BASEPRI, r3
 80045c6:	f3bf 8f6f 	isb	sy
 80045ca:	f3bf 8f4f 	dsb	sy
 80045ce:	60bb      	str	r3, [r7, #8]
    }
 80045d0:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80045d2:	bf00      	nop
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d0fc      	beq.n	80045d4 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80045da:	bf00      	nop
 80045dc:	bf00      	nop
 80045de:	3714      	adds	r7, #20
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr
 80045e8:	20000010 	.word	0x20000010
 80045ec:	00000000 	.word	0x00000000

080045f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80045f0:	4b07      	ldr	r3, [pc, #28]	; (8004610 <pxCurrentTCBConst2>)
 80045f2:	6819      	ldr	r1, [r3, #0]
 80045f4:	6808      	ldr	r0, [r1, #0]
 80045f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045fa:	f380 8809 	msr	PSP, r0
 80045fe:	f3bf 8f6f 	isb	sy
 8004602:	f04f 0000 	mov.w	r0, #0
 8004606:	f380 8811 	msr	BASEPRI, r0
 800460a:	4770      	bx	lr
 800460c:	f3af 8000 	nop.w

08004610 <pxCurrentTCBConst2>:
 8004610:	2000009c 	.word	0x2000009c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004614:	bf00      	nop
 8004616:	bf00      	nop

08004618 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004618:	4808      	ldr	r0, [pc, #32]	; (800463c <prvPortStartFirstTask+0x24>)
 800461a:	6800      	ldr	r0, [r0, #0]
 800461c:	6800      	ldr	r0, [r0, #0]
 800461e:	f380 8808 	msr	MSP, r0
 8004622:	f04f 0000 	mov.w	r0, #0
 8004626:	f380 8814 	msr	CONTROL, r0
 800462a:	b662      	cpsie	i
 800462c:	b661      	cpsie	f
 800462e:	f3bf 8f4f 	dsb	sy
 8004632:	f3bf 8f6f 	isb	sy
 8004636:	df00      	svc	0
 8004638:	bf00      	nop
 800463a:	0000      	.short	0x0000
 800463c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004640:	bf00      	nop
 8004642:	bf00      	nop

08004644 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b086      	sub	sp, #24
 8004648:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800464a:	4b46      	ldr	r3, [pc, #280]	; (8004764 <xPortStartScheduler+0x120>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a46      	ldr	r2, [pc, #280]	; (8004768 <xPortStartScheduler+0x124>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d10a      	bne.n	800466a <xPortStartScheduler+0x26>
        __asm volatile
 8004654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004658:	f383 8811 	msr	BASEPRI, r3
 800465c:	f3bf 8f6f 	isb	sy
 8004660:	f3bf 8f4f 	dsb	sy
 8004664:	613b      	str	r3, [r7, #16]
    }
 8004666:	bf00      	nop
 8004668:	e7fe      	b.n	8004668 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800466a:	4b3e      	ldr	r3, [pc, #248]	; (8004764 <xPortStartScheduler+0x120>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a3f      	ldr	r2, [pc, #252]	; (800476c <xPortStartScheduler+0x128>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d10a      	bne.n	800468a <xPortStartScheduler+0x46>
        __asm volatile
 8004674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004678:	f383 8811 	msr	BASEPRI, r3
 800467c:	f3bf 8f6f 	isb	sy
 8004680:	f3bf 8f4f 	dsb	sy
 8004684:	60fb      	str	r3, [r7, #12]
    }
 8004686:	bf00      	nop
 8004688:	e7fe      	b.n	8004688 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800468a:	4b39      	ldr	r3, [pc, #228]	; (8004770 <xPortStartScheduler+0x12c>)
 800468c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	b2db      	uxtb	r3, r3
 8004694:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	22ff      	movs	r2, #255	; 0xff
 800469a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80046a4:	78fb      	ldrb	r3, [r7, #3]
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80046ac:	b2da      	uxtb	r2, r3
 80046ae:	4b31      	ldr	r3, [pc, #196]	; (8004774 <xPortStartScheduler+0x130>)
 80046b0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80046b2:	4b31      	ldr	r3, [pc, #196]	; (8004778 <xPortStartScheduler+0x134>)
 80046b4:	2207      	movs	r2, #7
 80046b6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80046b8:	e009      	b.n	80046ce <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80046ba:	4b2f      	ldr	r3, [pc, #188]	; (8004778 <xPortStartScheduler+0x134>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	3b01      	subs	r3, #1
 80046c0:	4a2d      	ldr	r2, [pc, #180]	; (8004778 <xPortStartScheduler+0x134>)
 80046c2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80046c4:	78fb      	ldrb	r3, [r7, #3]
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	005b      	lsls	r3, r3, #1
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80046ce:	78fb      	ldrb	r3, [r7, #3]
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046d6:	2b80      	cmp	r3, #128	; 0x80
 80046d8:	d0ef      	beq.n	80046ba <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80046da:	4b27      	ldr	r3, [pc, #156]	; (8004778 <xPortStartScheduler+0x134>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f1c3 0307 	rsb	r3, r3, #7
 80046e2:	2b04      	cmp	r3, #4
 80046e4:	d00a      	beq.n	80046fc <xPortStartScheduler+0xb8>
        __asm volatile
 80046e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ea:	f383 8811 	msr	BASEPRI, r3
 80046ee:	f3bf 8f6f 	isb	sy
 80046f2:	f3bf 8f4f 	dsb	sy
 80046f6:	60bb      	str	r3, [r7, #8]
    }
 80046f8:	bf00      	nop
 80046fa:	e7fe      	b.n	80046fa <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80046fc:	4b1e      	ldr	r3, [pc, #120]	; (8004778 <xPortStartScheduler+0x134>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	021b      	lsls	r3, r3, #8
 8004702:	4a1d      	ldr	r2, [pc, #116]	; (8004778 <xPortStartScheduler+0x134>)
 8004704:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004706:	4b1c      	ldr	r3, [pc, #112]	; (8004778 <xPortStartScheduler+0x134>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800470e:	4a1a      	ldr	r2, [pc, #104]	; (8004778 <xPortStartScheduler+0x134>)
 8004710:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	b2da      	uxtb	r2, r3
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800471a:	4b18      	ldr	r3, [pc, #96]	; (800477c <xPortStartScheduler+0x138>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a17      	ldr	r2, [pc, #92]	; (800477c <xPortStartScheduler+0x138>)
 8004720:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004724:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004726:	4b15      	ldr	r3, [pc, #84]	; (800477c <xPortStartScheduler+0x138>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a14      	ldr	r2, [pc, #80]	; (800477c <xPortStartScheduler+0x138>)
 800472c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004730:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004732:	f000 f963 	bl	80049fc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004736:	4b12      	ldr	r3, [pc, #72]	; (8004780 <xPortStartScheduler+0x13c>)
 8004738:	2200      	movs	r2, #0
 800473a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800473c:	f000 f982 	bl	8004a44 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004740:	4b10      	ldr	r3, [pc, #64]	; (8004784 <xPortStartScheduler+0x140>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a0f      	ldr	r2, [pc, #60]	; (8004784 <xPortStartScheduler+0x140>)
 8004746:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800474a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800474c:	f7ff ff64 	bl	8004618 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004750:	f7ff f86a 	bl	8003828 <vTaskSwitchContext>
    prvTaskExitError();
 8004754:	f7ff ff1e 	bl	8004594 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	3718      	adds	r7, #24
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop
 8004764:	e000ed00 	.word	0xe000ed00
 8004768:	410fc271 	.word	0x410fc271
 800476c:	410fc270 	.word	0x410fc270
 8004770:	e000e400 	.word	0xe000e400
 8004774:	200001dc 	.word	0x200001dc
 8004778:	200001e0 	.word	0x200001e0
 800477c:	e000ed20 	.word	0xe000ed20
 8004780:	20000010 	.word	0x20000010
 8004784:	e000ef34 	.word	0xe000ef34

08004788 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8004788:	b480      	push	{r7}
 800478a:	b087      	sub	sp, #28
 800478c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800478e:	4b37      	ldr	r3, [pc, #220]	; (800486c <vInitPrioGroupValue+0xe4>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a37      	ldr	r2, [pc, #220]	; (8004870 <vInitPrioGroupValue+0xe8>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d10a      	bne.n	80047ae <vInitPrioGroupValue+0x26>
        __asm volatile
 8004798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800479c:	f383 8811 	msr	BASEPRI, r3
 80047a0:	f3bf 8f6f 	isb	sy
 80047a4:	f3bf 8f4f 	dsb	sy
 80047a8:	613b      	str	r3, [r7, #16]
    }
 80047aa:	bf00      	nop
 80047ac:	e7fe      	b.n	80047ac <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80047ae:	4b2f      	ldr	r3, [pc, #188]	; (800486c <vInitPrioGroupValue+0xe4>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a30      	ldr	r2, [pc, #192]	; (8004874 <vInitPrioGroupValue+0xec>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d10a      	bne.n	80047ce <vInitPrioGroupValue+0x46>
        __asm volatile
 80047b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047bc:	f383 8811 	msr	BASEPRI, r3
 80047c0:	f3bf 8f6f 	isb	sy
 80047c4:	f3bf 8f4f 	dsb	sy
 80047c8:	60fb      	str	r3, [r7, #12]
    }
 80047ca:	bf00      	nop
 80047cc:	e7fe      	b.n	80047cc <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80047ce:	4b2a      	ldr	r3, [pc, #168]	; (8004878 <vInitPrioGroupValue+0xf0>)
 80047d0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	22ff      	movs	r2, #255	; 0xff
 80047de:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80047e8:	78fb      	ldrb	r3, [r7, #3]
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80047f0:	b2da      	uxtb	r2, r3
 80047f2:	4b22      	ldr	r3, [pc, #136]	; (800487c <vInitPrioGroupValue+0xf4>)
 80047f4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80047f6:	4b22      	ldr	r3, [pc, #136]	; (8004880 <vInitPrioGroupValue+0xf8>)
 80047f8:	2207      	movs	r2, #7
 80047fa:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80047fc:	e009      	b.n	8004812 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80047fe:	4b20      	ldr	r3, [pc, #128]	; (8004880 <vInitPrioGroupValue+0xf8>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	3b01      	subs	r3, #1
 8004804:	4a1e      	ldr	r2, [pc, #120]	; (8004880 <vInitPrioGroupValue+0xf8>)
 8004806:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004808:	78fb      	ldrb	r3, [r7, #3]
 800480a:	b2db      	uxtb	r3, r3
 800480c:	005b      	lsls	r3, r3, #1
 800480e:	b2db      	uxtb	r3, r3
 8004810:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004812:	78fb      	ldrb	r3, [r7, #3]
 8004814:	b2db      	uxtb	r3, r3
 8004816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800481a:	2b80      	cmp	r3, #128	; 0x80
 800481c:	d0ef      	beq.n	80047fe <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800481e:	4b18      	ldr	r3, [pc, #96]	; (8004880 <vInitPrioGroupValue+0xf8>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f1c3 0307 	rsb	r3, r3, #7
 8004826:	2b04      	cmp	r3, #4
 8004828:	d00a      	beq.n	8004840 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800482a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800482e:	f383 8811 	msr	BASEPRI, r3
 8004832:	f3bf 8f6f 	isb	sy
 8004836:	f3bf 8f4f 	dsb	sy
 800483a:	60bb      	str	r3, [r7, #8]
    }
 800483c:	bf00      	nop
 800483e:	e7fe      	b.n	800483e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004840:	4b0f      	ldr	r3, [pc, #60]	; (8004880 <vInitPrioGroupValue+0xf8>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	021b      	lsls	r3, r3, #8
 8004846:	4a0e      	ldr	r2, [pc, #56]	; (8004880 <vInitPrioGroupValue+0xf8>)
 8004848:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800484a:	4b0d      	ldr	r3, [pc, #52]	; (8004880 <vInitPrioGroupValue+0xf8>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004852:	4a0b      	ldr	r2, [pc, #44]	; (8004880 <vInitPrioGroupValue+0xf8>)
 8004854:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	b2da      	uxtb	r2, r3
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800485e:	bf00      	nop
 8004860:	371c      	adds	r7, #28
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr
 800486a:	bf00      	nop
 800486c:	e000ed00 	.word	0xe000ed00
 8004870:	410fc271 	.word	0x410fc271
 8004874:	410fc270 	.word	0x410fc270
 8004878:	e000e400 	.word	0xe000e400
 800487c:	200001dc 	.word	0x200001dc
 8004880:	200001e0 	.word	0x200001e0

08004884 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
        __asm volatile
 800488a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800488e:	f383 8811 	msr	BASEPRI, r3
 8004892:	f3bf 8f6f 	isb	sy
 8004896:	f3bf 8f4f 	dsb	sy
 800489a:	607b      	str	r3, [r7, #4]
    }
 800489c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800489e:	4b0f      	ldr	r3, [pc, #60]	; (80048dc <vPortEnterCritical+0x58>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	3301      	adds	r3, #1
 80048a4:	4a0d      	ldr	r2, [pc, #52]	; (80048dc <vPortEnterCritical+0x58>)
 80048a6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80048a8:	4b0c      	ldr	r3, [pc, #48]	; (80048dc <vPortEnterCritical+0x58>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d10f      	bne.n	80048d0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80048b0:	4b0b      	ldr	r3, [pc, #44]	; (80048e0 <vPortEnterCritical+0x5c>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d00a      	beq.n	80048d0 <vPortEnterCritical+0x4c>
        __asm volatile
 80048ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048be:	f383 8811 	msr	BASEPRI, r3
 80048c2:	f3bf 8f6f 	isb	sy
 80048c6:	f3bf 8f4f 	dsb	sy
 80048ca:	603b      	str	r3, [r7, #0]
    }
 80048cc:	bf00      	nop
 80048ce:	e7fe      	b.n	80048ce <vPortEnterCritical+0x4a>
    }
}
 80048d0:	bf00      	nop
 80048d2:	370c      	adds	r7, #12
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr
 80048dc:	20000010 	.word	0x20000010
 80048e0:	e000ed04 	.word	0xe000ed04

080048e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80048ea:	4b12      	ldr	r3, [pc, #72]	; (8004934 <vPortExitCritical+0x50>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d10a      	bne.n	8004908 <vPortExitCritical+0x24>
        __asm volatile
 80048f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f6:	f383 8811 	msr	BASEPRI, r3
 80048fa:	f3bf 8f6f 	isb	sy
 80048fe:	f3bf 8f4f 	dsb	sy
 8004902:	607b      	str	r3, [r7, #4]
    }
 8004904:	bf00      	nop
 8004906:	e7fe      	b.n	8004906 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004908:	4b0a      	ldr	r3, [pc, #40]	; (8004934 <vPortExitCritical+0x50>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	3b01      	subs	r3, #1
 800490e:	4a09      	ldr	r2, [pc, #36]	; (8004934 <vPortExitCritical+0x50>)
 8004910:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004912:	4b08      	ldr	r3, [pc, #32]	; (8004934 <vPortExitCritical+0x50>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d105      	bne.n	8004926 <vPortExitCritical+0x42>
 800491a:	2300      	movs	r3, #0
 800491c:	603b      	str	r3, [r7, #0]
        __asm volatile
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	f383 8811 	msr	BASEPRI, r3
    }
 8004924:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004926:	bf00      	nop
 8004928:	370c      	adds	r7, #12
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr
 8004932:	bf00      	nop
 8004934:	20000010 	.word	0x20000010
	...

08004940 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004940:	f3ef 8009 	mrs	r0, PSP
 8004944:	f3bf 8f6f 	isb	sy
 8004948:	4b15      	ldr	r3, [pc, #84]	; (80049a0 <pxCurrentTCBConst>)
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	f01e 0f10 	tst.w	lr, #16
 8004950:	bf08      	it	eq
 8004952:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004956:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800495a:	6010      	str	r0, [r2, #0]
 800495c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004960:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004964:	f380 8811 	msr	BASEPRI, r0
 8004968:	f3bf 8f4f 	dsb	sy
 800496c:	f3bf 8f6f 	isb	sy
 8004970:	f7fe ff5a 	bl	8003828 <vTaskSwitchContext>
 8004974:	f04f 0000 	mov.w	r0, #0
 8004978:	f380 8811 	msr	BASEPRI, r0
 800497c:	bc09      	pop	{r0, r3}
 800497e:	6819      	ldr	r1, [r3, #0]
 8004980:	6808      	ldr	r0, [r1, #0]
 8004982:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004986:	f01e 0f10 	tst.w	lr, #16
 800498a:	bf08      	it	eq
 800498c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004990:	f380 8809 	msr	PSP, r0
 8004994:	f3bf 8f6f 	isb	sy
 8004998:	4770      	bx	lr
 800499a:	bf00      	nop
 800499c:	f3af 8000 	nop.w

080049a0 <pxCurrentTCBConst>:
 80049a0:	2000009c 	.word	0x2000009c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80049a4:	bf00      	nop
 80049a6:	bf00      	nop

080049a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b082      	sub	sp, #8
 80049ac:	af00      	add	r7, sp, #0
        __asm volatile
 80049ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b2:	f383 8811 	msr	BASEPRI, r3
 80049b6:	f3bf 8f6f 	isb	sy
 80049ba:	f3bf 8f4f 	dsb	sy
 80049be:	607b      	str	r3, [r7, #4]
    }
 80049c0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80049c2:	f002 fb7d 	bl	80070c0 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80049c6:	f7fe fe95 	bl	80036f4 <xTaskIncrementTick>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d006      	beq.n	80049de <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80049d0:	f002 fbd4 	bl	800717c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80049d4:	4b08      	ldr	r3, [pc, #32]	; (80049f8 <SysTick_Handler+0x50>)
 80049d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049da:	601a      	str	r2, [r3, #0]
 80049dc:	e001      	b.n	80049e2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80049de:	f002 fbb1 	bl	8007144 <SEGGER_SYSVIEW_RecordExitISR>
 80049e2:	2300      	movs	r3, #0
 80049e4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	f383 8811 	msr	BASEPRI, r3
    }
 80049ec:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80049ee:	bf00      	nop
 80049f0:	3708      	adds	r7, #8
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	bf00      	nop
 80049f8:	e000ed04 	.word	0xe000ed04

080049fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80049fc:	b480      	push	{r7}
 80049fe:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004a00:	4b0b      	ldr	r3, [pc, #44]	; (8004a30 <vPortSetupTimerInterrupt+0x34>)
 8004a02:	2200      	movs	r2, #0
 8004a04:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004a06:	4b0b      	ldr	r3, [pc, #44]	; (8004a34 <vPortSetupTimerInterrupt+0x38>)
 8004a08:	2200      	movs	r2, #0
 8004a0a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004a0c:	4b0a      	ldr	r3, [pc, #40]	; (8004a38 <vPortSetupTimerInterrupt+0x3c>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a0a      	ldr	r2, [pc, #40]	; (8004a3c <vPortSetupTimerInterrupt+0x40>)
 8004a12:	fba2 2303 	umull	r2, r3, r2, r3
 8004a16:	099b      	lsrs	r3, r3, #6
 8004a18:	4a09      	ldr	r2, [pc, #36]	; (8004a40 <vPortSetupTimerInterrupt+0x44>)
 8004a1a:	3b01      	subs	r3, #1
 8004a1c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004a1e:	4b04      	ldr	r3, [pc, #16]	; (8004a30 <vPortSetupTimerInterrupt+0x34>)
 8004a20:	2207      	movs	r2, #7
 8004a22:	601a      	str	r2, [r3, #0]
}
 8004a24:	bf00      	nop
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr
 8004a2e:	bf00      	nop
 8004a30:	e000e010 	.word	0xe000e010
 8004a34:	e000e018 	.word	0xe000e018
 8004a38:	20000000 	.word	0x20000000
 8004a3c:	10624dd3 	.word	0x10624dd3
 8004a40:	e000e014 	.word	0xe000e014

08004a44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004a44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004a54 <vPortEnableVFP+0x10>
 8004a48:	6801      	ldr	r1, [r0, #0]
 8004a4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004a4e:	6001      	str	r1, [r0, #0]
 8004a50:	4770      	bx	lr
 8004a52:	0000      	.short	0x0000
 8004a54:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004a58:	bf00      	nop
 8004a5a:	bf00      	nop

08004a5c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8004a5c:	b480      	push	{r7}
 8004a5e:	b085      	sub	sp, #20
 8004a60:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004a62:	f3ef 8305 	mrs	r3, IPSR
 8004a66:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2b0f      	cmp	r3, #15
 8004a6c:	d914      	bls.n	8004a98 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004a6e:	4a17      	ldr	r2, [pc, #92]	; (8004acc <vPortValidateInterruptPriority+0x70>)
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	4413      	add	r3, r2
 8004a74:	781b      	ldrb	r3, [r3, #0]
 8004a76:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004a78:	4b15      	ldr	r3, [pc, #84]	; (8004ad0 <vPortValidateInterruptPriority+0x74>)
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	7afa      	ldrb	r2, [r7, #11]
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d20a      	bcs.n	8004a98 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a86:	f383 8811 	msr	BASEPRI, r3
 8004a8a:	f3bf 8f6f 	isb	sy
 8004a8e:	f3bf 8f4f 	dsb	sy
 8004a92:	607b      	str	r3, [r7, #4]
    }
 8004a94:	bf00      	nop
 8004a96:	e7fe      	b.n	8004a96 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004a98:	4b0e      	ldr	r3, [pc, #56]	; (8004ad4 <vPortValidateInterruptPriority+0x78>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004aa0:	4b0d      	ldr	r3, [pc, #52]	; (8004ad8 <vPortValidateInterruptPriority+0x7c>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d90a      	bls.n	8004abe <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aac:	f383 8811 	msr	BASEPRI, r3
 8004ab0:	f3bf 8f6f 	isb	sy
 8004ab4:	f3bf 8f4f 	dsb	sy
 8004ab8:	603b      	str	r3, [r7, #0]
    }
 8004aba:	bf00      	nop
 8004abc:	e7fe      	b.n	8004abc <vPortValidateInterruptPriority+0x60>
    }
 8004abe:	bf00      	nop
 8004ac0:	3714      	adds	r7, #20
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr
 8004aca:	bf00      	nop
 8004acc:	e000e3f0 	.word	0xe000e3f0
 8004ad0:	200001dc 	.word	0x200001dc
 8004ad4:	e000ed0c 	.word	0xe000ed0c
 8004ad8:	200001e0 	.word	0x200001e0

08004adc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b08a      	sub	sp, #40	; 0x28
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004ae8:	f7fe fd42 	bl	8003570 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004aec:	4b65      	ldr	r3, [pc, #404]	; (8004c84 <pvPortMalloc+0x1a8>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d101      	bne.n	8004af8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004af4:	f000 f934 	bl	8004d60 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004af8:	4b63      	ldr	r3, [pc, #396]	; (8004c88 <pvPortMalloc+0x1ac>)
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4013      	ands	r3, r2
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	f040 80a7 	bne.w	8004c54 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d02d      	beq.n	8004b68 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8004b0c:	2208      	movs	r2, #8
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d227      	bcs.n	8004b68 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004b18:	2208      	movs	r2, #8
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	4413      	add	r3, r2
 8004b1e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f003 0307 	and.w	r3, r3, #7
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d021      	beq.n	8004b6e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f023 0307 	bic.w	r3, r3, #7
 8004b30:	3308      	adds	r3, #8
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d214      	bcs.n	8004b62 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f023 0307 	bic.w	r3, r3, #7
 8004b3e:	3308      	adds	r3, #8
 8004b40:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f003 0307 	and.w	r3, r3, #7
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d010      	beq.n	8004b6e <pvPortMalloc+0x92>
        __asm volatile
 8004b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b50:	f383 8811 	msr	BASEPRI, r3
 8004b54:	f3bf 8f6f 	isb	sy
 8004b58:	f3bf 8f4f 	dsb	sy
 8004b5c:	617b      	str	r3, [r7, #20]
    }
 8004b5e:	bf00      	nop
 8004b60:	e7fe      	b.n	8004b60 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004b62:	2300      	movs	r3, #0
 8004b64:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004b66:	e002      	b.n	8004b6e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	607b      	str	r3, [r7, #4]
 8004b6c:	e000      	b.n	8004b70 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004b6e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d06e      	beq.n	8004c54 <pvPortMalloc+0x178>
 8004b76:	4b45      	ldr	r3, [pc, #276]	; (8004c8c <pvPortMalloc+0x1b0>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d869      	bhi.n	8004c54 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004b80:	4b43      	ldr	r3, [pc, #268]	; (8004c90 <pvPortMalloc+0x1b4>)
 8004b82:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004b84:	4b42      	ldr	r3, [pc, #264]	; (8004c90 <pvPortMalloc+0x1b4>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b8a:	e004      	b.n	8004b96 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8004b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d903      	bls.n	8004ba8 <pvPortMalloc+0xcc>
 8004ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d1f1      	bne.n	8004b8c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004ba8:	4b36      	ldr	r3, [pc, #216]	; (8004c84 <pvPortMalloc+0x1a8>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d050      	beq.n	8004c54 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004bb2:	6a3b      	ldr	r3, [r7, #32]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	2208      	movs	r2, #8
 8004bb8:	4413      	add	r3, r2
 8004bba:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	6a3b      	ldr	r3, [r7, #32]
 8004bc2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc6:	685a      	ldr	r2, [r3, #4]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	1ad2      	subs	r2, r2, r3
 8004bcc:	2308      	movs	r3, #8
 8004bce:	005b      	lsls	r3, r3, #1
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d91f      	bls.n	8004c14 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004bd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4413      	add	r3, r2
 8004bda:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004bdc:	69bb      	ldr	r3, [r7, #24]
 8004bde:	f003 0307 	and.w	r3, r3, #7
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d00a      	beq.n	8004bfc <pvPortMalloc+0x120>
        __asm volatile
 8004be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bea:	f383 8811 	msr	BASEPRI, r3
 8004bee:	f3bf 8f6f 	isb	sy
 8004bf2:	f3bf 8f4f 	dsb	sy
 8004bf6:	613b      	str	r3, [r7, #16]
    }
 8004bf8:	bf00      	nop
 8004bfa:	e7fe      	b.n	8004bfa <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfe:	685a      	ldr	r2, [r3, #4]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	1ad2      	subs	r2, r2, r3
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004c0e:	69b8      	ldr	r0, [r7, #24]
 8004c10:	f000 f908 	bl	8004e24 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004c14:	4b1d      	ldr	r3, [pc, #116]	; (8004c8c <pvPortMalloc+0x1b0>)
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	4a1b      	ldr	r2, [pc, #108]	; (8004c8c <pvPortMalloc+0x1b0>)
 8004c20:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004c22:	4b1a      	ldr	r3, [pc, #104]	; (8004c8c <pvPortMalloc+0x1b0>)
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	4b1b      	ldr	r3, [pc, #108]	; (8004c94 <pvPortMalloc+0x1b8>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d203      	bcs.n	8004c36 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004c2e:	4b17      	ldr	r3, [pc, #92]	; (8004c8c <pvPortMalloc+0x1b0>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a18      	ldr	r2, [pc, #96]	; (8004c94 <pvPortMalloc+0x1b8>)
 8004c34:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c38:	685a      	ldr	r2, [r3, #4]
 8004c3a:	4b13      	ldr	r3, [pc, #76]	; (8004c88 <pvPortMalloc+0x1ac>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	431a      	orrs	r2, r3
 8004c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c42:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c46:	2200      	movs	r2, #0
 8004c48:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004c4a:	4b13      	ldr	r3, [pc, #76]	; (8004c98 <pvPortMalloc+0x1bc>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	3301      	adds	r3, #1
 8004c50:	4a11      	ldr	r2, [pc, #68]	; (8004c98 <pvPortMalloc+0x1bc>)
 8004c52:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004c54:	f7fe fc9a 	bl	800358c <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c58:	69fb      	ldr	r3, [r7, #28]
 8004c5a:	f003 0307 	and.w	r3, r3, #7
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d00a      	beq.n	8004c78 <pvPortMalloc+0x19c>
        __asm volatile
 8004c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c66:	f383 8811 	msr	BASEPRI, r3
 8004c6a:	f3bf 8f6f 	isb	sy
 8004c6e:	f3bf 8f4f 	dsb	sy
 8004c72:	60fb      	str	r3, [r7, #12]
    }
 8004c74:	bf00      	nop
 8004c76:	e7fe      	b.n	8004c76 <pvPortMalloc+0x19a>
    return pvReturn;
 8004c78:	69fb      	ldr	r3, [r7, #28]
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3728      	adds	r7, #40	; 0x28
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	200191ec 	.word	0x200191ec
 8004c88:	20019200 	.word	0x20019200
 8004c8c:	200191f0 	.word	0x200191f0
 8004c90:	200191e4 	.word	0x200191e4
 8004c94:	200191f4 	.word	0x200191f4
 8004c98:	200191f8 	.word	0x200191f8

08004c9c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b086      	sub	sp, #24
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d04d      	beq.n	8004d4a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004cae:	2308      	movs	r3, #8
 8004cb0:	425b      	negs	r3, r3
 8004cb2:	697a      	ldr	r2, [r7, #20]
 8004cb4:	4413      	add	r3, r2
 8004cb6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	685a      	ldr	r2, [r3, #4]
 8004cc0:	4b24      	ldr	r3, [pc, #144]	; (8004d54 <vPortFree+0xb8>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d10a      	bne.n	8004ce0 <vPortFree+0x44>
        __asm volatile
 8004cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cce:	f383 8811 	msr	BASEPRI, r3
 8004cd2:	f3bf 8f6f 	isb	sy
 8004cd6:	f3bf 8f4f 	dsb	sy
 8004cda:	60fb      	str	r3, [r7, #12]
    }
 8004cdc:	bf00      	nop
 8004cde:	e7fe      	b.n	8004cde <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d00a      	beq.n	8004cfe <vPortFree+0x62>
        __asm volatile
 8004ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cec:	f383 8811 	msr	BASEPRI, r3
 8004cf0:	f3bf 8f6f 	isb	sy
 8004cf4:	f3bf 8f4f 	dsb	sy
 8004cf8:	60bb      	str	r3, [r7, #8]
    }
 8004cfa:	bf00      	nop
 8004cfc:	e7fe      	b.n	8004cfc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	685a      	ldr	r2, [r3, #4]
 8004d02:	4b14      	ldr	r3, [pc, #80]	; (8004d54 <vPortFree+0xb8>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4013      	ands	r3, r2
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d01e      	beq.n	8004d4a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d11a      	bne.n	8004d4a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	685a      	ldr	r2, [r3, #4]
 8004d18:	4b0e      	ldr	r3, [pc, #56]	; (8004d54 <vPortFree+0xb8>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	43db      	mvns	r3, r3
 8004d1e:	401a      	ands	r2, r3
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004d24:	f7fe fc24 	bl	8003570 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	685a      	ldr	r2, [r3, #4]
 8004d2c:	4b0a      	ldr	r3, [pc, #40]	; (8004d58 <vPortFree+0xbc>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4413      	add	r3, r2
 8004d32:	4a09      	ldr	r2, [pc, #36]	; (8004d58 <vPortFree+0xbc>)
 8004d34:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004d36:	6938      	ldr	r0, [r7, #16]
 8004d38:	f000 f874 	bl	8004e24 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004d3c:	4b07      	ldr	r3, [pc, #28]	; (8004d5c <vPortFree+0xc0>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	3301      	adds	r3, #1
 8004d42:	4a06      	ldr	r2, [pc, #24]	; (8004d5c <vPortFree+0xc0>)
 8004d44:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004d46:	f7fe fc21 	bl	800358c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004d4a:	bf00      	nop
 8004d4c:	3718      	adds	r7, #24
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop
 8004d54:	20019200 	.word	0x20019200
 8004d58:	200191f0 	.word	0x200191f0
 8004d5c:	200191fc 	.word	0x200191fc

08004d60 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004d60:	b480      	push	{r7}
 8004d62:	b085      	sub	sp, #20
 8004d64:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004d66:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 8004d6a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8004d6c:	4b27      	ldr	r3, [pc, #156]	; (8004e0c <prvHeapInit+0xac>)
 8004d6e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f003 0307 	and.w	r3, r3, #7
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d00c      	beq.n	8004d94 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	3307      	adds	r3, #7
 8004d7e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f023 0307 	bic.w	r3, r3, #7
 8004d86:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004d88:	68ba      	ldr	r2, [r7, #8]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	4a1f      	ldr	r2, [pc, #124]	; (8004e0c <prvHeapInit+0xac>)
 8004d90:	4413      	add	r3, r2
 8004d92:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004d98:	4a1d      	ldr	r2, [pc, #116]	; (8004e10 <prvHeapInit+0xb0>)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004d9e:	4b1c      	ldr	r3, [pc, #112]	; (8004e10 <prvHeapInit+0xb0>)
 8004da0:	2200      	movs	r2, #0
 8004da2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	68ba      	ldr	r2, [r7, #8]
 8004da8:	4413      	add	r3, r2
 8004daa:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004dac:	2208      	movs	r2, #8
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	1a9b      	subs	r3, r3, r2
 8004db2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f023 0307 	bic.w	r3, r3, #7
 8004dba:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	4a15      	ldr	r2, [pc, #84]	; (8004e14 <prvHeapInit+0xb4>)
 8004dc0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004dc2:	4b14      	ldr	r3, [pc, #80]	; (8004e14 <prvHeapInit+0xb4>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004dca:	4b12      	ldr	r3, [pc, #72]	; (8004e14 <prvHeapInit+0xb4>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	68fa      	ldr	r2, [r7, #12]
 8004dda:	1ad2      	subs	r2, r2, r3
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004de0:	4b0c      	ldr	r3, [pc, #48]	; (8004e14 <prvHeapInit+0xb4>)
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	4a0a      	ldr	r2, [pc, #40]	; (8004e18 <prvHeapInit+0xb8>)
 8004dee:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	4a09      	ldr	r2, [pc, #36]	; (8004e1c <prvHeapInit+0xbc>)
 8004df6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004df8:	4b09      	ldr	r3, [pc, #36]	; (8004e20 <prvHeapInit+0xc0>)
 8004dfa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004dfe:	601a      	str	r2, [r3, #0]
}
 8004e00:	bf00      	nop
 8004e02:	3714      	adds	r7, #20
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr
 8004e0c:	200001e4 	.word	0x200001e4
 8004e10:	200191e4 	.word	0x200191e4
 8004e14:	200191ec 	.word	0x200191ec
 8004e18:	200191f4 	.word	0x200191f4
 8004e1c:	200191f0 	.word	0x200191f0
 8004e20:	20019200 	.word	0x20019200

08004e24 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004e24:	b480      	push	{r7}
 8004e26:	b085      	sub	sp, #20
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004e2c:	4b28      	ldr	r3, [pc, #160]	; (8004ed0 <prvInsertBlockIntoFreeList+0xac>)
 8004e2e:	60fb      	str	r3, [r7, #12]
 8004e30:	e002      	b.n	8004e38 <prvInsertBlockIntoFreeList+0x14>
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	60fb      	str	r3, [r7, #12]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d8f7      	bhi.n	8004e32 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	68ba      	ldr	r2, [r7, #8]
 8004e4c:	4413      	add	r3, r2
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d108      	bne.n	8004e66 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	685a      	ldr	r2, [r3, #4]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	441a      	add	r2, r3
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	68ba      	ldr	r2, [r7, #8]
 8004e70:	441a      	add	r2, r3
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d118      	bne.n	8004eac <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	4b15      	ldr	r3, [pc, #84]	; (8004ed4 <prvInsertBlockIntoFreeList+0xb0>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d00d      	beq.n	8004ea2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	685a      	ldr	r2, [r3, #4]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	441a      	add	r2, r3
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	601a      	str	r2, [r3, #0]
 8004ea0:	e008      	b.n	8004eb4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004ea2:	4b0c      	ldr	r3, [pc, #48]	; (8004ed4 <prvInsertBlockIntoFreeList+0xb0>)
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	601a      	str	r2, [r3, #0]
 8004eaa:	e003      	b.n	8004eb4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004eb4:	68fa      	ldr	r2, [r7, #12]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d002      	beq.n	8004ec2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004ec2:	bf00      	nop
 8004ec4:	3714      	adds	r7, #20
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr
 8004ece:	bf00      	nop
 8004ed0:	200191e4 	.word	0x200191e4
 8004ed4:	200191ec 	.word	0x200191ec

08004ed8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004edc:	4803      	ldr	r0, [pc, #12]	; (8004eec <_cbSendSystemDesc+0x14>)
 8004ede:	f002 f899 	bl	8007014 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004ee2:	4803      	ldr	r0, [pc, #12]	; (8004ef0 <_cbSendSystemDesc+0x18>)
 8004ee4:	f002 f896 	bl	8007014 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004ee8:	bf00      	nop
 8004eea:	bd80      	pop	{r7, pc}
 8004eec:	080080d4 	.word	0x080080d4
 8004ef0:	08008118 	.word	0x08008118

08004ef4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004ef8:	4b06      	ldr	r3, [pc, #24]	; (8004f14 <SEGGER_SYSVIEW_Conf+0x20>)
 8004efa:	6818      	ldr	r0, [r3, #0]
 8004efc:	4b05      	ldr	r3, [pc, #20]	; (8004f14 <SEGGER_SYSVIEW_Conf+0x20>)
 8004efe:	6819      	ldr	r1, [r3, #0]
 8004f00:	4b05      	ldr	r3, [pc, #20]	; (8004f18 <SEGGER_SYSVIEW_Conf+0x24>)
 8004f02:	4a06      	ldr	r2, [pc, #24]	; (8004f1c <SEGGER_SYSVIEW_Conf+0x28>)
 8004f04:	f001 fc02 	bl	800670c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004f08:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8004f0c:	f001 fc42 	bl	8006794 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004f10:	bf00      	nop
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	20000000 	.word	0x20000000
 8004f18:	08004ed9 	.word	0x08004ed9
 8004f1c:	080081b8 	.word	0x080081b8

08004f20 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f22:	b085      	sub	sp, #20
 8004f24:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004f26:	2300      	movs	r3, #0
 8004f28:	607b      	str	r3, [r7, #4]
 8004f2a:	e033      	b.n	8004f94 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004f2c:	491e      	ldr	r1, [pc, #120]	; (8004fa8 <_cbSendTaskList+0x88>)
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	4613      	mov	r3, r2
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	4413      	add	r3, r2
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	440b      	add	r3, r1
 8004f3a:	6818      	ldr	r0, [r3, #0]
 8004f3c:	491a      	ldr	r1, [pc, #104]	; (8004fa8 <_cbSendTaskList+0x88>)
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	4613      	mov	r3, r2
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	4413      	add	r3, r2
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	440b      	add	r3, r1
 8004f4a:	3304      	adds	r3, #4
 8004f4c:	6819      	ldr	r1, [r3, #0]
 8004f4e:	4c16      	ldr	r4, [pc, #88]	; (8004fa8 <_cbSendTaskList+0x88>)
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	4613      	mov	r3, r2
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	4413      	add	r3, r2
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	4423      	add	r3, r4
 8004f5c:	3308      	adds	r3, #8
 8004f5e:	681c      	ldr	r4, [r3, #0]
 8004f60:	4d11      	ldr	r5, [pc, #68]	; (8004fa8 <_cbSendTaskList+0x88>)
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	4613      	mov	r3, r2
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	4413      	add	r3, r2
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	442b      	add	r3, r5
 8004f6e:	330c      	adds	r3, #12
 8004f70:	681d      	ldr	r5, [r3, #0]
 8004f72:	4e0d      	ldr	r6, [pc, #52]	; (8004fa8 <_cbSendTaskList+0x88>)
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	4613      	mov	r3, r2
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	4413      	add	r3, r2
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	4433      	add	r3, r6
 8004f80:	3310      	adds	r3, #16
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	9300      	str	r3, [sp, #0]
 8004f86:	462b      	mov	r3, r5
 8004f88:	4622      	mov	r2, r4
 8004f8a:	f000 f8b5 	bl	80050f8 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	3301      	adds	r3, #1
 8004f92:	607b      	str	r3, [r7, #4]
 8004f94:	4b05      	ldr	r3, [pc, #20]	; (8004fac <_cbSendTaskList+0x8c>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d3c6      	bcc.n	8004f2c <_cbSendTaskList+0xc>
  }
}
 8004f9e:	bf00      	nop
 8004fa0:	bf00      	nop
 8004fa2:	370c      	adds	r7, #12
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fa8:	20019204 	.word	0x20019204
 8004fac:	200192a4 	.word	0x200192a4

08004fb0 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004fb0:	b5b0      	push	{r4, r5, r7, lr}
 8004fb2:	b082      	sub	sp, #8
 8004fb4:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004fb6:	f7fe fb8b 	bl	80036d0 <xTaskGetTickCountFromISR>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	f04f 0300 	mov.w	r3, #0
 8004fc2:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004fc6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004fca:	4602      	mov	r2, r0
 8004fcc:	460b      	mov	r3, r1
 8004fce:	f04f 0400 	mov.w	r4, #0
 8004fd2:	f04f 0500 	mov.w	r5, #0
 8004fd6:	015d      	lsls	r5, r3, #5
 8004fd8:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8004fdc:	0154      	lsls	r4, r2, #5
 8004fde:	4622      	mov	r2, r4
 8004fe0:	462b      	mov	r3, r5
 8004fe2:	1a12      	subs	r2, r2, r0
 8004fe4:	eb63 0301 	sbc.w	r3, r3, r1
 8004fe8:	f04f 0400 	mov.w	r4, #0
 8004fec:	f04f 0500 	mov.w	r5, #0
 8004ff0:	009d      	lsls	r5, r3, #2
 8004ff2:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 8004ff6:	0094      	lsls	r4, r2, #2
 8004ff8:	4622      	mov	r2, r4
 8004ffa:	462b      	mov	r3, r5
 8004ffc:	1812      	adds	r2, r2, r0
 8004ffe:	eb41 0303 	adc.w	r3, r1, r3
 8005002:	f04f 0000 	mov.w	r0, #0
 8005006:	f04f 0100 	mov.w	r1, #0
 800500a:	00d9      	lsls	r1, r3, #3
 800500c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005010:	00d0      	lsls	r0, r2, #3
 8005012:	4602      	mov	r2, r0
 8005014:	460b      	mov	r3, r1
 8005016:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 800501a:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800501e:	4610      	mov	r0, r2
 8005020:	4619      	mov	r1, r3
 8005022:	3708      	adds	r7, #8
 8005024:	46bd      	mov	sp, r7
 8005026:	bdb0      	pop	{r4, r5, r7, pc}

08005028 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8005028:	b580      	push	{r7, lr}
 800502a:	b086      	sub	sp, #24
 800502c:	af02      	add	r7, sp, #8
 800502e:	60f8      	str	r0, [r7, #12]
 8005030:	60b9      	str	r1, [r7, #8]
 8005032:	607a      	str	r2, [r7, #4]
 8005034:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8005036:	2205      	movs	r2, #5
 8005038:	492b      	ldr	r1, [pc, #172]	; (80050e8 <SYSVIEW_AddTask+0xc0>)
 800503a:	68b8      	ldr	r0, [r7, #8]
 800503c:	f002 fbaa 	bl	8007794 <memcmp>
 8005040:	4603      	mov	r3, r0
 8005042:	2b00      	cmp	r3, #0
 8005044:	d04b      	beq.n	80050de <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8005046:	4b29      	ldr	r3, [pc, #164]	; (80050ec <SYSVIEW_AddTask+0xc4>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	2b07      	cmp	r3, #7
 800504c:	d903      	bls.n	8005056 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800504e:	4828      	ldr	r0, [pc, #160]	; (80050f0 <SYSVIEW_AddTask+0xc8>)
 8005050:	f002 faf2 	bl	8007638 <SEGGER_SYSVIEW_Warn>
    return;
 8005054:	e044      	b.n	80050e0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8005056:	4b25      	ldr	r3, [pc, #148]	; (80050ec <SYSVIEW_AddTask+0xc4>)
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	4926      	ldr	r1, [pc, #152]	; (80050f4 <SYSVIEW_AddTask+0xcc>)
 800505c:	4613      	mov	r3, r2
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	4413      	add	r3, r2
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	440b      	add	r3, r1
 8005066:	68fa      	ldr	r2, [r7, #12]
 8005068:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800506a:	4b20      	ldr	r3, [pc, #128]	; (80050ec <SYSVIEW_AddTask+0xc4>)
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	4921      	ldr	r1, [pc, #132]	; (80050f4 <SYSVIEW_AddTask+0xcc>)
 8005070:	4613      	mov	r3, r2
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	4413      	add	r3, r2
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	440b      	add	r3, r1
 800507a:	3304      	adds	r3, #4
 800507c:	68ba      	ldr	r2, [r7, #8]
 800507e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8005080:	4b1a      	ldr	r3, [pc, #104]	; (80050ec <SYSVIEW_AddTask+0xc4>)
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	491b      	ldr	r1, [pc, #108]	; (80050f4 <SYSVIEW_AddTask+0xcc>)
 8005086:	4613      	mov	r3, r2
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	4413      	add	r3, r2
 800508c:	009b      	lsls	r3, r3, #2
 800508e:	440b      	add	r3, r1
 8005090:	3308      	adds	r3, #8
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8005096:	4b15      	ldr	r3, [pc, #84]	; (80050ec <SYSVIEW_AddTask+0xc4>)
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	4916      	ldr	r1, [pc, #88]	; (80050f4 <SYSVIEW_AddTask+0xcc>)
 800509c:	4613      	mov	r3, r2
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	4413      	add	r3, r2
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	440b      	add	r3, r1
 80050a6:	330c      	adds	r3, #12
 80050a8:	683a      	ldr	r2, [r7, #0]
 80050aa:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80050ac:	4b0f      	ldr	r3, [pc, #60]	; (80050ec <SYSVIEW_AddTask+0xc4>)
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	4910      	ldr	r1, [pc, #64]	; (80050f4 <SYSVIEW_AddTask+0xcc>)
 80050b2:	4613      	mov	r3, r2
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	4413      	add	r3, r2
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	440b      	add	r3, r1
 80050bc:	3310      	adds	r3, #16
 80050be:	69ba      	ldr	r2, [r7, #24]
 80050c0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80050c2:	4b0a      	ldr	r3, [pc, #40]	; (80050ec <SYSVIEW_AddTask+0xc4>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	3301      	adds	r3, #1
 80050c8:	4a08      	ldr	r2, [pc, #32]	; (80050ec <SYSVIEW_AddTask+0xc4>)
 80050ca:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80050cc:	69bb      	ldr	r3, [r7, #24]
 80050ce:	9300      	str	r3, [sp, #0]
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	687a      	ldr	r2, [r7, #4]
 80050d4:	68b9      	ldr	r1, [r7, #8]
 80050d6:	68f8      	ldr	r0, [r7, #12]
 80050d8:	f000 f80e 	bl	80050f8 <SYSVIEW_SendTaskInfo>
 80050dc:	e000      	b.n	80050e0 <SYSVIEW_AddTask+0xb8>
    return;
 80050de:	bf00      	nop

}
 80050e0:	3710      	adds	r7, #16
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	08008128 	.word	0x08008128
 80050ec:	200192a4 	.word	0x200192a4
 80050f0:	08008130 	.word	0x08008130
 80050f4:	20019204 	.word	0x20019204

080050f8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b08a      	sub	sp, #40	; 0x28
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	60f8      	str	r0, [r7, #12]
 8005100:	60b9      	str	r1, [r7, #8]
 8005102:	607a      	str	r2, [r7, #4]
 8005104:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8005106:	f107 0314 	add.w	r3, r7, #20
 800510a:	2214      	movs	r2, #20
 800510c:	2100      	movs	r1, #0
 800510e:	4618      	mov	r0, r3
 8005110:	f002 fb5c 	bl	80077cc <memset>
  TaskInfo.TaskID     = TaskID;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8005124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005126:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8005128:	f107 0314 	add.w	r3, r7, #20
 800512c:	4618      	mov	r0, r3
 800512e:	f001 fe79 	bl	8006e24 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8005132:	bf00      	nop
 8005134:	3728      	adds	r7, #40	; 0x28
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
	...

0800513c <__NVIC_EnableIRQ>:
{
 800513c:	b480      	push	{r7}
 800513e:	b083      	sub	sp, #12
 8005140:	af00      	add	r7, sp, #0
 8005142:	4603      	mov	r3, r0
 8005144:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800514a:	2b00      	cmp	r3, #0
 800514c:	db0b      	blt.n	8005166 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800514e:	79fb      	ldrb	r3, [r7, #7]
 8005150:	f003 021f 	and.w	r2, r3, #31
 8005154:	4907      	ldr	r1, [pc, #28]	; (8005174 <__NVIC_EnableIRQ+0x38>)
 8005156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800515a:	095b      	lsrs	r3, r3, #5
 800515c:	2001      	movs	r0, #1
 800515e:	fa00 f202 	lsl.w	r2, r0, r2
 8005162:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005166:	bf00      	nop
 8005168:	370c      	adds	r7, #12
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr
 8005172:	bf00      	nop
 8005174:	e000e100 	.word	0xe000e100

08005178 <__NVIC_SetPriority>:
{
 8005178:	b480      	push	{r7}
 800517a:	b083      	sub	sp, #12
 800517c:	af00      	add	r7, sp, #0
 800517e:	4603      	mov	r3, r0
 8005180:	6039      	str	r1, [r7, #0]
 8005182:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005188:	2b00      	cmp	r3, #0
 800518a:	db0a      	blt.n	80051a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	b2da      	uxtb	r2, r3
 8005190:	490c      	ldr	r1, [pc, #48]	; (80051c4 <__NVIC_SetPriority+0x4c>)
 8005192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005196:	0112      	lsls	r2, r2, #4
 8005198:	b2d2      	uxtb	r2, r2
 800519a:	440b      	add	r3, r1
 800519c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80051a0:	e00a      	b.n	80051b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	b2da      	uxtb	r2, r3
 80051a6:	4908      	ldr	r1, [pc, #32]	; (80051c8 <__NVIC_SetPriority+0x50>)
 80051a8:	79fb      	ldrb	r3, [r7, #7]
 80051aa:	f003 030f 	and.w	r3, r3, #15
 80051ae:	3b04      	subs	r3, #4
 80051b0:	0112      	lsls	r2, r2, #4
 80051b2:	b2d2      	uxtb	r2, r2
 80051b4:	440b      	add	r3, r1
 80051b6:	761a      	strb	r2, [r3, #24]
}
 80051b8:	bf00      	nop
 80051ba:	370c      	adds	r7, #12
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr
 80051c4:	e000e100 	.word	0xe000e100
 80051c8:	e000ed00 	.word	0xe000ed00

080051cc <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b082      	sub	sp, #8
 80051d0:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 80051d2:	f002 fa8d 	bl	80076f0 <SEGGER_SYSVIEW_IsStarted>
 80051d6:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d101      	bne.n	80051e2 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 80051de:	f001 fca5 	bl	8006b2c <SEGGER_SYSVIEW_Start>
  }
}
 80051e2:	bf00      	nop
 80051e4:	3708      	adds	r7, #8
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}
	...

080051ec <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b082      	sub	sp, #8
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	4603      	mov	r3, r0
 80051f4:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 80051f6:	4b0c      	ldr	r3, [pc, #48]	; (8005228 <_cbOnUARTRx+0x3c>)
 80051f8:	781b      	ldrb	r3, [r3, #0]
 80051fa:	2b03      	cmp	r3, #3
 80051fc:	d806      	bhi.n	800520c <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 80051fe:	4b0a      	ldr	r3, [pc, #40]	; (8005228 <_cbOnUARTRx+0x3c>)
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	3301      	adds	r3, #1
 8005204:	b2da      	uxtb	r2, r3
 8005206:	4b08      	ldr	r3, [pc, #32]	; (8005228 <_cbOnUARTRx+0x3c>)
 8005208:	701a      	strb	r2, [r3, #0]
    goto Done;
 800520a:	e009      	b.n	8005220 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 800520c:	f7ff ffde 	bl	80051cc <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8005210:	4b05      	ldr	r3, [pc, #20]	; (8005228 <_cbOnUARTRx+0x3c>)
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	4618      	mov	r0, r3
 8005216:	1dfb      	adds	r3, r7, #7
 8005218:	2201      	movs	r2, #1
 800521a:	4619      	mov	r1, r3
 800521c:	f000 fb9a 	bl	8005954 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8005220:	bf00      	nop
}
 8005222:	3708      	adds	r7, #8
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}
 8005228:	20000014 	.word	0x20000014

0800522c <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 800522c:	b580      	push	{r7, lr}
 800522e:	b084      	sub	sp, #16
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8005234:	4b14      	ldr	r3, [pc, #80]	; (8005288 <_cbOnUARTTx+0x5c>)
 8005236:	785b      	ldrb	r3, [r3, #1]
 8005238:	2b03      	cmp	r3, #3
 800523a:	d80f      	bhi.n	800525c <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 800523c:	4b12      	ldr	r3, [pc, #72]	; (8005288 <_cbOnUARTTx+0x5c>)
 800523e:	785b      	ldrb	r3, [r3, #1]
 8005240:	461a      	mov	r2, r3
 8005242:	4b12      	ldr	r3, [pc, #72]	; (800528c <_cbOnUARTTx+0x60>)
 8005244:	5c9a      	ldrb	r2, [r3, r2]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 800524a:	4b0f      	ldr	r3, [pc, #60]	; (8005288 <_cbOnUARTTx+0x5c>)
 800524c:	785b      	ldrb	r3, [r3, #1]
 800524e:	3301      	adds	r3, #1
 8005250:	b2da      	uxtb	r2, r3
 8005252:	4b0d      	ldr	r3, [pc, #52]	; (8005288 <_cbOnUARTTx+0x5c>)
 8005254:	705a      	strb	r2, [r3, #1]
    r = 1;
 8005256:	2301      	movs	r3, #1
 8005258:	60fb      	str	r3, [r7, #12]
    goto Done;
 800525a:	e00f      	b.n	800527c <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 800525c:	4b0a      	ldr	r3, [pc, #40]	; (8005288 <_cbOnUARTTx+0x5c>)
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	2201      	movs	r2, #1
 8005262:	6879      	ldr	r1, [r7, #4]
 8005264:	4618      	mov	r0, r3
 8005266:	f000 fa19 	bl	800569c <SEGGER_RTT_ReadUpBufferNoLock>
 800526a:	4603      	mov	r3, r0
 800526c:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2b00      	cmp	r3, #0
 8005272:	da02      	bge.n	800527a <_cbOnUARTTx+0x4e>
    r = 0;
 8005274:	2300      	movs	r3, #0
 8005276:	60fb      	str	r3, [r7, #12]
 8005278:	e000      	b.n	800527c <_cbOnUARTTx+0x50>
  }
Done:
 800527a:	bf00      	nop
  return r;
 800527c:	68fb      	ldr	r3, [r7, #12]
}
 800527e:	4618      	mov	r0, r3
 8005280:	3710      	adds	r7, #16
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}
 8005286:	bf00      	nop
 8005288:	20000014 	.word	0x20000014
 800528c:	080081c0 	.word	0x080081c0

08005290 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b082      	sub	sp, #8
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8005298:	4a04      	ldr	r2, [pc, #16]	; (80052ac <SEGGER_UART_init+0x1c>)
 800529a:	4905      	ldr	r1, [pc, #20]	; (80052b0 <SEGGER_UART_init+0x20>)
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f000 f863 	bl	8005368 <HIF_UART_Init>
}
 80052a2:	bf00      	nop
 80052a4:	3708      	adds	r7, #8
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	bf00      	nop
 80052ac:	080051ed 	.word	0x080051ed
 80052b0:	0800522d 	.word	0x0800522d

080052b4 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b084      	sub	sp, #16
 80052b8:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 80052ba:	4b1e      	ldr	r3, [pc, #120]	; (8005334 <USART2_IRQHandler+0x80>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f003 0320 	and.w	r3, r3, #32
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d011      	beq.n	80052ee <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 80052ca:	4b1b      	ldr	r3, [pc, #108]	; (8005338 <USART2_IRQHandler+0x84>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f003 030b 	and.w	r3, r3, #11
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d108      	bne.n	80052ee <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 80052dc:	4b17      	ldr	r3, [pc, #92]	; (800533c <USART2_IRQHandler+0x88>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d004      	beq.n	80052ee <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 80052e4:	4b15      	ldr	r3, [pc, #84]	; (800533c <USART2_IRQHandler+0x88>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	79fa      	ldrb	r2, [r7, #7]
 80052ea:	4610      	mov	r0, r2
 80052ec:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d01a      	beq.n	800532e <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 80052f8:	4b11      	ldr	r3, [pc, #68]	; (8005340 <USART2_IRQHandler+0x8c>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d015      	beq.n	800532c <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8005300:	4b0f      	ldr	r3, [pc, #60]	; (8005340 <USART2_IRQHandler+0x8c>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	1dfa      	adds	r2, r7, #7
 8005306:	4610      	mov	r0, r2
 8005308:	4798      	blx	r3
 800530a:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d106      	bne.n	8005320 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8005312:	4b0c      	ldr	r3, [pc, #48]	; (8005344 <USART2_IRQHandler+0x90>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a0b      	ldr	r2, [pc, #44]	; (8005344 <USART2_IRQHandler+0x90>)
 8005318:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800531c:	6013      	str	r3, [r2, #0]
 800531e:	e006      	b.n	800532e <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8005320:	4b04      	ldr	r3, [pc, #16]	; (8005334 <USART2_IRQHandler+0x80>)
 8005322:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8005324:	79fa      	ldrb	r2, [r7, #7]
 8005326:	4b04      	ldr	r3, [pc, #16]	; (8005338 <USART2_IRQHandler+0x84>)
 8005328:	601a      	str	r2, [r3, #0]
 800532a:	e000      	b.n	800532e <USART2_IRQHandler+0x7a>
      return;
 800532c:	bf00      	nop
    }
  }
}
 800532e:	3710      	adds	r7, #16
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}
 8005334:	40004400 	.word	0x40004400
 8005338:	40004404 	.word	0x40004404
 800533c:	200192a8 	.word	0x200192a8
 8005340:	200192ac 	.word	0x200192ac
 8005344:	4000440c 	.word	0x4000440c

08005348 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8005348:	b480      	push	{r7}
 800534a:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 800534c:	4b05      	ldr	r3, [pc, #20]	; (8005364 <HIF_UART_EnableTXEInterrupt+0x1c>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a04      	ldr	r2, [pc, #16]	; (8005364 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8005352:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005356:	6013      	str	r3, [r2, #0]
}
 8005358:	bf00      	nop
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr
 8005362:	bf00      	nop
 8005364:	4000440c 	.word	0x4000440c

08005368 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8005368:	b580      	push	{r7, lr}
 800536a:	b086      	sub	sp, #24
 800536c:	af00      	add	r7, sp, #0
 800536e:	60f8      	str	r0, [r7, #12]
 8005370:	60b9      	str	r1, [r7, #8]
 8005372:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8005374:	4b2e      	ldr	r3, [pc, #184]	; (8005430 <HIF_UART_Init+0xc8>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a2d      	ldr	r2, [pc, #180]	; (8005430 <HIF_UART_Init+0xc8>)
 800537a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800537e:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8005380:	4b2c      	ldr	r3, [pc, #176]	; (8005434 <HIF_UART_Init+0xcc>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a2b      	ldr	r2, [pc, #172]	; (8005434 <HIF_UART_Init+0xcc>)
 8005386:	f043 0301 	orr.w	r3, r3, #1
 800538a:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 800538c:	4b2a      	ldr	r3, [pc, #168]	; (8005438 <HIF_UART_Init+0xd0>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005398:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 80053a0:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 80053a2:	4a25      	ldr	r2, [pc, #148]	; (8005438 <HIF_UART_Init+0xd0>)
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 80053a8:	4b24      	ldr	r3, [pc, #144]	; (800543c <HIF_UART_Init+0xd4>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053b4:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80053bc:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 80053be:	4a1f      	ldr	r2, [pc, #124]	; (800543c <HIF_UART_Init+0xd4>)
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 80053c4:	4b1e      	ldr	r3, [pc, #120]	; (8005440 <HIF_UART_Init+0xd8>)
 80053c6:	f24a 022c 	movw	r2, #41004	; 0xa02c
 80053ca:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 80053cc:	4b1d      	ldr	r3, [pc, #116]	; (8005444 <HIF_UART_Init+0xdc>)
 80053ce:	2200      	movs	r2, #0
 80053d0:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 80053d2:	4b1d      	ldr	r3, [pc, #116]	; (8005448 <HIF_UART_Init+0xe0>)
 80053d4:	2280      	movs	r2, #128	; 0x80
 80053d6:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	00db      	lsls	r3, r3, #3
 80053dc:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 80053de:	4a1b      	ldr	r2, [pc, #108]	; (800544c <HIF_UART_Init+0xe4>)
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80053e6:	3301      	adds	r3, #1
 80053e8:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	085b      	lsrs	r3, r3, #1
 80053ee:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053f6:	d302      	bcc.n	80053fe <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 80053f8:	f640 73ff 	movw	r3, #4095	; 0xfff
 80053fc:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d004      	beq.n	800540e <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	011b      	lsls	r3, r3, #4
 8005408:	4a11      	ldr	r2, [pc, #68]	; (8005450 <HIF_UART_Init+0xe8>)
 800540a:	b29b      	uxth	r3, r3
 800540c:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 800540e:	4a11      	ldr	r2, [pc, #68]	; (8005454 <HIF_UART_Init+0xec>)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8005414:	4a10      	ldr	r2, [pc, #64]	; (8005458 <HIF_UART_Init+0xf0>)
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 800541a:	2106      	movs	r1, #6
 800541c:	2026      	movs	r0, #38	; 0x26
 800541e:	f7ff feab 	bl	8005178 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8005422:	2026      	movs	r0, #38	; 0x26
 8005424:	f7ff fe8a 	bl	800513c <__NVIC_EnableIRQ>
}
 8005428:	bf00      	nop
 800542a:	3718      	adds	r7, #24
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}
 8005430:	40023840 	.word	0x40023840
 8005434:	40023830 	.word	0x40023830
 8005438:	40020020 	.word	0x40020020
 800543c:	40020000 	.word	0x40020000
 8005440:	4000440c 	.word	0x4000440c
 8005444:	40004410 	.word	0x40004410
 8005448:	40004414 	.word	0x40004414
 800544c:	0501bd00 	.word	0x0501bd00
 8005450:	40004408 	.word	0x40004408
 8005454:	200192a8 	.word	0x200192a8
 8005458:	200192ac 	.word	0x200192ac

0800545c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800545c:	b480      	push	{r7}
 800545e:	b083      	sub	sp, #12
 8005460:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8005462:	4b24      	ldr	r3, [pc, #144]	; (80054f4 <_DoInit+0x98>)
 8005464:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2203      	movs	r2, #3
 800546a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2203      	movs	r2, #3
 8005470:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4a20      	ldr	r2, [pc, #128]	; (80054f8 <_DoInit+0x9c>)
 8005476:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	4a20      	ldr	r2, [pc, #128]	; (80054fc <_DoInit+0xa0>)
 800547c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005484:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2200      	movs	r2, #0
 8005490:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2200      	movs	r2, #0
 8005496:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	4a17      	ldr	r2, [pc, #92]	; (80054f8 <_DoInit+0x9c>)
 800549c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	4a17      	ldr	r2, [pc, #92]	; (8005500 <_DoInit+0xa4>)
 80054a2:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2210      	movs	r2, #16
 80054a8:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2200      	movs	r2, #0
 80054b4:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	3307      	adds	r3, #7
 80054c0:	4a10      	ldr	r2, [pc, #64]	; (8005504 <_DoInit+0xa8>)
 80054c2:	6810      	ldr	r0, [r2, #0]
 80054c4:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80054c6:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4a0e      	ldr	r2, [pc, #56]	; (8005508 <_DoInit+0xac>)
 80054ce:	6810      	ldr	r0, [r2, #0]
 80054d0:	6018      	str	r0, [r3, #0]
 80054d2:	8891      	ldrh	r1, [r2, #4]
 80054d4:	7992      	ldrb	r2, [r2, #6]
 80054d6:	8099      	strh	r1, [r3, #4]
 80054d8:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80054da:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2220      	movs	r2, #32
 80054e2:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80054e4:	f3bf 8f5f 	dmb	sy
}
 80054e8:	bf00      	nop
 80054ea:	370c      	adds	r7, #12
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr
 80054f4:	2001a8b8 	.word	0x2001a8b8
 80054f8:	08008180 	.word	0x08008180
 80054fc:	200192b0 	.word	0x200192b0
 8005500:	200196b0 	.word	0x200196b0
 8005504:	0800818c 	.word	0x0800818c
 8005508:	08008190 	.word	0x08008190

0800550c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 800550c:	b580      	push	{r7, lr}
 800550e:	b08a      	sub	sp, #40	; 0x28
 8005510:	af00      	add	r7, sp, #0
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	60b9      	str	r1, [r7, #8]
 8005516:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8005518:	2300      	movs	r3, #0
 800551a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	691b      	ldr	r3, [r3, #16]
 8005526:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8005528:	69ba      	ldr	r2, [r7, #24]
 800552a:	69fb      	ldr	r3, [r7, #28]
 800552c:	429a      	cmp	r2, r3
 800552e:	d905      	bls.n	800553c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8005530:	69ba      	ldr	r2, [r7, #24]
 8005532:	69fb      	ldr	r3, [r7, #28]
 8005534:	1ad3      	subs	r3, r2, r3
 8005536:	3b01      	subs	r3, #1
 8005538:	627b      	str	r3, [r7, #36]	; 0x24
 800553a:	e007      	b.n	800554c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	689a      	ldr	r2, [r3, #8]
 8005540:	69b9      	ldr	r1, [r7, #24]
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	1acb      	subs	r3, r1, r3
 8005546:	4413      	add	r3, r2
 8005548:	3b01      	subs	r3, #1
 800554a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	689a      	ldr	r2, [r3, #8]
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	1ad3      	subs	r3, r2, r3
 8005554:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005556:	4293      	cmp	r3, r2
 8005558:	bf28      	it	cs
 800555a:	4613      	movcs	r3, r2
 800555c:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800555e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	4293      	cmp	r3, r2
 8005564:	bf28      	it	cs
 8005566:	4613      	movcs	r3, r2
 8005568:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	685a      	ldr	r2, [r3, #4]
 800556e:	69fb      	ldr	r3, [r7, #28]
 8005570:	4413      	add	r3, r2
 8005572:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8005574:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005576:	68b9      	ldr	r1, [r7, #8]
 8005578:	6978      	ldr	r0, [r7, #20]
 800557a:	f002 f919 	bl	80077b0 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800557e:	6a3a      	ldr	r2, [r7, #32]
 8005580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005582:	4413      	add	r3, r2
 8005584:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8005586:	68ba      	ldr	r2, [r7, #8]
 8005588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558a:	4413      	add	r3, r2
 800558c:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005592:	1ad3      	subs	r3, r2, r3
 8005594:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8005596:	69fa      	ldr	r2, [r7, #28]
 8005598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559a:	4413      	add	r3, r2
 800559c:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	69fa      	ldr	r2, [r7, #28]
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d101      	bne.n	80055ac <_WriteBlocking+0xa0>
      WrOff = 0u;
 80055a8:	2300      	movs	r3, #0
 80055aa:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80055ac:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	69fa      	ldr	r2, [r7, #28]
 80055b4:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d1b2      	bne.n	8005522 <_WriteBlocking+0x16>
  return NumBytesWritten;
 80055bc:	6a3b      	ldr	r3, [r7, #32]
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3728      	adds	r7, #40	; 0x28
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}

080055c6 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80055c6:	b580      	push	{r7, lr}
 80055c8:	b088      	sub	sp, #32
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	60f8      	str	r0, [r7, #12]
 80055ce:	60b9      	str	r1, [r7, #8]
 80055d0:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	689a      	ldr	r2, [r3, #8]
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	1ad3      	subs	r3, r2, r3
 80055e0:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 80055e2:	69ba      	ldr	r2, [r7, #24]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d911      	bls.n	800560e <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	685a      	ldr	r2, [r3, #4]
 80055ee:	69fb      	ldr	r3, [r7, #28]
 80055f0:	4413      	add	r3, r2
 80055f2:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	68b9      	ldr	r1, [r7, #8]
 80055f8:	6938      	ldr	r0, [r7, #16]
 80055fa:	f002 f8d9 	bl	80077b0 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80055fe:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8005602:	69fa      	ldr	r2, [r7, #28]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	441a      	add	r2, r3
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 800560c:	e01f      	b.n	800564e <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 800560e:	69bb      	ldr	r3, [r7, #24]
 8005610:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	685a      	ldr	r2, [r3, #4]
 8005616:	69fb      	ldr	r3, [r7, #28]
 8005618:	4413      	add	r3, r2
 800561a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 800561c:	697a      	ldr	r2, [r7, #20]
 800561e:	68b9      	ldr	r1, [r7, #8]
 8005620:	6938      	ldr	r0, [r7, #16]
 8005622:	f002 f8c5 	bl	80077b0 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	69bb      	ldr	r3, [r7, #24]
 800562a:	1ad3      	subs	r3, r2, r3
 800562c:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8005634:	68ba      	ldr	r2, [r7, #8]
 8005636:	69bb      	ldr	r3, [r7, #24]
 8005638:	4413      	add	r3, r2
 800563a:	697a      	ldr	r2, [r7, #20]
 800563c:	4619      	mov	r1, r3
 800563e:	6938      	ldr	r0, [r7, #16]
 8005640:	f002 f8b6 	bl	80077b0 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005644:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	697a      	ldr	r2, [r7, #20]
 800564c:	60da      	str	r2, [r3, #12]
}
 800564e:	bf00      	nop
 8005650:	3720      	adds	r7, #32
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}

08005656 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8005656:	b480      	push	{r7}
 8005658:	b087      	sub	sp, #28
 800565a:	af00      	add	r7, sp, #0
 800565c:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800566a:	693a      	ldr	r2, [r7, #16]
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	429a      	cmp	r2, r3
 8005670:	d808      	bhi.n	8005684 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	689a      	ldr	r2, [r3, #8]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	1ad2      	subs	r2, r2, r3
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	4413      	add	r3, r2
 800567e:	3b01      	subs	r3, #1
 8005680:	617b      	str	r3, [r7, #20]
 8005682:	e004      	b.n	800568e <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8005684:	693a      	ldr	r2, [r7, #16]
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	1ad3      	subs	r3, r2, r3
 800568a:	3b01      	subs	r3, #1
 800568c:	617b      	str	r3, [r7, #20]
  }
  return r;
 800568e:	697b      	ldr	r3, [r7, #20]
}
 8005690:	4618      	mov	r0, r3
 8005692:	371c      	adds	r7, #28
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr

0800569c <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800569c:	b580      	push	{r7, lr}
 800569e:	b08c      	sub	sp, #48	; 0x30
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	60f8      	str	r0, [r7, #12]
 80056a4:	60b9      	str	r1, [r7, #8]
 80056a6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 80056a8:	4b3e      	ldr	r3, [pc, #248]	; (80057a4 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 80056aa:	623b      	str	r3, [r7, #32]
 80056ac:	6a3b      	ldr	r3, [r7, #32]
 80056ae:	781b      	ldrb	r3, [r3, #0]
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d101      	bne.n	80056ba <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 80056b6:	f7ff fed1 	bl	800545c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	1c5a      	adds	r2, r3, #1
 80056be:	4613      	mov	r3, r2
 80056c0:	005b      	lsls	r3, r3, #1
 80056c2:	4413      	add	r3, r2
 80056c4:	00db      	lsls	r3, r3, #3
 80056c6:	4a37      	ldr	r2, [pc, #220]	; (80057a4 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 80056c8:	4413      	add	r3, r2
 80056ca:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80056d0:	69fb      	ldr	r3, [r7, #28]
 80056d2:	691b      	ldr	r3, [r3, #16]
 80056d4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80056d6:	69fb      	ldr	r3, [r7, #28]
 80056d8:	68db      	ldr	r3, [r3, #12]
 80056da:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80056dc:	2300      	movs	r3, #0
 80056de:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80056e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056e2:	69bb      	ldr	r3, [r7, #24]
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d92b      	bls.n	8005740 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80056e8:	69fb      	ldr	r3, [r7, #28]
 80056ea:	689a      	ldr	r2, [r3, #8]
 80056ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ee:	1ad3      	subs	r3, r2, r3
 80056f0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80056f2:	697a      	ldr	r2, [r7, #20]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	4293      	cmp	r3, r2
 80056f8:	bf28      	it	cs
 80056fa:	4613      	movcs	r3, r2
 80056fc:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80056fe:	69fb      	ldr	r3, [r7, #28]
 8005700:	685a      	ldr	r2, [r3, #4]
 8005702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005704:	4413      	add	r3, r2
 8005706:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005708:	697a      	ldr	r2, [r7, #20]
 800570a:	6939      	ldr	r1, [r7, #16]
 800570c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800570e:	f002 f84f 	bl	80077b0 <memcpy>
    NumBytesRead += NumBytesRem;
 8005712:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	4413      	add	r3, r2
 8005718:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800571a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	4413      	add	r3, r2
 8005720:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005722:	687a      	ldr	r2, [r7, #4]
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	1ad3      	subs	r3, r2, r3
 8005728:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800572a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	4413      	add	r3, r2
 8005730:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005732:	69fb      	ldr	r3, [r7, #28]
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005738:	429a      	cmp	r2, r3
 800573a:	d101      	bne.n	8005740 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 800573c:	2300      	movs	r3, #0
 800573e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005740:	69ba      	ldr	r2, [r7, #24]
 8005742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005744:	1ad3      	subs	r3, r2, r3
 8005746:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005748:	697a      	ldr	r2, [r7, #20]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4293      	cmp	r3, r2
 800574e:	bf28      	it	cs
 8005750:	4613      	movcs	r3, r2
 8005752:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d019      	beq.n	800578e <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800575a:	69fb      	ldr	r3, [r7, #28]
 800575c:	685a      	ldr	r2, [r3, #4]
 800575e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005760:	4413      	add	r3, r2
 8005762:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005764:	697a      	ldr	r2, [r7, #20]
 8005766:	6939      	ldr	r1, [r7, #16]
 8005768:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800576a:	f002 f821 	bl	80077b0 <memcpy>
    NumBytesRead += NumBytesRem;
 800576e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	4413      	add	r3, r2
 8005774:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005776:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	4413      	add	r3, r2
 800577c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	1ad3      	subs	r3, r2, r3
 8005784:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005786:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	4413      	add	r3, r2
 800578c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 800578e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005790:	2b00      	cmp	r3, #0
 8005792:	d002      	beq.n	800579a <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005798:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800579a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800579c:	4618      	mov	r0, r3
 800579e:	3730      	adds	r7, #48	; 0x30
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}
 80057a4:	2001a8b8 	.word	0x2001a8b8

080057a8 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b08c      	sub	sp, #48	; 0x30
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	60f8      	str	r0, [r7, #12]
 80057b0:	60b9      	str	r1, [r7, #8]
 80057b2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80057b4:	4b3e      	ldr	r3, [pc, #248]	; (80058b0 <SEGGER_RTT_ReadNoLock+0x108>)
 80057b6:	623b      	str	r3, [r7, #32]
 80057b8:	6a3b      	ldr	r3, [r7, #32]
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d101      	bne.n	80057c6 <SEGGER_RTT_ReadNoLock+0x1e>
 80057c2:	f7ff fe4b 	bl	800545c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80057c6:	68fa      	ldr	r2, [r7, #12]
 80057c8:	4613      	mov	r3, r2
 80057ca:	005b      	lsls	r3, r3, #1
 80057cc:	4413      	add	r3, r2
 80057ce:	00db      	lsls	r3, r3, #3
 80057d0:	3360      	adds	r3, #96	; 0x60
 80057d2:	4a37      	ldr	r2, [pc, #220]	; (80058b0 <SEGGER_RTT_ReadNoLock+0x108>)
 80057d4:	4413      	add	r3, r2
 80057d6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80057dc:	69fb      	ldr	r3, [r7, #28]
 80057de:	691b      	ldr	r3, [r3, #16]
 80057e0:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80057e2:	69fb      	ldr	r3, [r7, #28]
 80057e4:	68db      	ldr	r3, [r3, #12]
 80057e6:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80057e8:	2300      	movs	r3, #0
 80057ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80057ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057ee:	69bb      	ldr	r3, [r7, #24]
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d92b      	bls.n	800584c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	689a      	ldr	r2, [r3, #8]
 80057f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057fa:	1ad3      	subs	r3, r2, r3
 80057fc:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80057fe:	697a      	ldr	r2, [r7, #20]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	4293      	cmp	r3, r2
 8005804:	bf28      	it	cs
 8005806:	4613      	movcs	r3, r2
 8005808:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	685a      	ldr	r2, [r3, #4]
 800580e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005810:	4413      	add	r3, r2
 8005812:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005814:	697a      	ldr	r2, [r7, #20]
 8005816:	6939      	ldr	r1, [r7, #16]
 8005818:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800581a:	f001 ffc9 	bl	80077b0 <memcpy>
    NumBytesRead += NumBytesRem;
 800581e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	4413      	add	r3, r2
 8005824:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005826:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	4413      	add	r3, r2
 800582c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	1ad3      	subs	r3, r2, r3
 8005834:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005836:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	4413      	add	r3, r2
 800583c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800583e:	69fb      	ldr	r3, [r7, #28]
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005844:	429a      	cmp	r2, r3
 8005846:	d101      	bne.n	800584c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005848:	2300      	movs	r3, #0
 800584a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800584c:	69ba      	ldr	r2, [r7, #24]
 800584e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005850:	1ad3      	subs	r3, r2, r3
 8005852:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005854:	697a      	ldr	r2, [r7, #20]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4293      	cmp	r3, r2
 800585a:	bf28      	it	cs
 800585c:	4613      	movcs	r3, r2
 800585e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d019      	beq.n	800589a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005866:	69fb      	ldr	r3, [r7, #28]
 8005868:	685a      	ldr	r2, [r3, #4]
 800586a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800586c:	4413      	add	r3, r2
 800586e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005870:	697a      	ldr	r2, [r7, #20]
 8005872:	6939      	ldr	r1, [r7, #16]
 8005874:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005876:	f001 ff9b 	bl	80077b0 <memcpy>
    NumBytesRead += NumBytesRem;
 800587a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	4413      	add	r3, r2
 8005880:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005882:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	4413      	add	r3, r2
 8005888:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	1ad3      	subs	r3, r2, r3
 8005890:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005892:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	4413      	add	r3, r2
 8005898:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800589a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800589c:	2b00      	cmp	r3, #0
 800589e:	d002      	beq.n	80058a6 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80058a0:	69fb      	ldr	r3, [r7, #28]
 80058a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058a4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80058a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3730      	adds	r7, #48	; 0x30
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}
 80058b0:	2001a8b8 	.word	0x2001a8b8

080058b4 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b088      	sub	sp, #32
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	60b9      	str	r1, [r7, #8]
 80058be:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80058c4:	68fa      	ldr	r2, [r7, #12]
 80058c6:	4613      	mov	r3, r2
 80058c8:	005b      	lsls	r3, r3, #1
 80058ca:	4413      	add	r3, r2
 80058cc:	00db      	lsls	r3, r3, #3
 80058ce:	3360      	adds	r3, #96	; 0x60
 80058d0:	4a1f      	ldr	r2, [pc, #124]	; (8005950 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 80058d2:	4413      	add	r3, r2
 80058d4:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	695b      	ldr	r3, [r3, #20]
 80058da:	2b02      	cmp	r3, #2
 80058dc:	d029      	beq.n	8005932 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 80058de:	2b02      	cmp	r3, #2
 80058e0:	d82e      	bhi.n	8005940 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d002      	beq.n	80058ec <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d013      	beq.n	8005912 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 80058ea:	e029      	b.n	8005940 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80058ec:	6978      	ldr	r0, [r7, #20]
 80058ee:	f7ff feb2 	bl	8005656 <_GetAvailWriteSpace>
 80058f2:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80058f4:	693a      	ldr	r2, [r7, #16]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d202      	bcs.n	8005902 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 80058fc:	2300      	movs	r3, #0
 80058fe:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8005900:	e021      	b.n	8005946 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8005906:	687a      	ldr	r2, [r7, #4]
 8005908:	69b9      	ldr	r1, [r7, #24]
 800590a:	6978      	ldr	r0, [r7, #20]
 800590c:	f7ff fe5b 	bl	80055c6 <_WriteNoCheck>
    break;
 8005910:	e019      	b.n	8005946 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005912:	6978      	ldr	r0, [r7, #20]
 8005914:	f7ff fe9f 	bl	8005656 <_GetAvailWriteSpace>
 8005918:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800591a:	687a      	ldr	r2, [r7, #4]
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	4293      	cmp	r3, r2
 8005920:	bf28      	it	cs
 8005922:	4613      	movcs	r3, r2
 8005924:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8005926:	69fa      	ldr	r2, [r7, #28]
 8005928:	69b9      	ldr	r1, [r7, #24]
 800592a:	6978      	ldr	r0, [r7, #20]
 800592c:	f7ff fe4b 	bl	80055c6 <_WriteNoCheck>
    break;
 8005930:	e009      	b.n	8005946 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	69b9      	ldr	r1, [r7, #24]
 8005936:	6978      	ldr	r0, [r7, #20]
 8005938:	f7ff fde8 	bl	800550c <_WriteBlocking>
 800593c:	61f8      	str	r0, [r7, #28]
    break;
 800593e:	e002      	b.n	8005946 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8005940:	2300      	movs	r3, #0
 8005942:	61fb      	str	r3, [r7, #28]
    break;
 8005944:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8005946:	69fb      	ldr	r3, [r7, #28]
}
 8005948:	4618      	mov	r0, r3
 800594a:	3720      	adds	r7, #32
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}
 8005950:	2001a8b8 	.word	0x2001a8b8

08005954 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005954:	b580      	push	{r7, lr}
 8005956:	b088      	sub	sp, #32
 8005958:	af00      	add	r7, sp, #0
 800595a:	60f8      	str	r0, [r7, #12]
 800595c:	60b9      	str	r1, [r7, #8]
 800595e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8005960:	4b0e      	ldr	r3, [pc, #56]	; (800599c <SEGGER_RTT_WriteDownBuffer+0x48>)
 8005962:	61fb      	str	r3, [r7, #28]
 8005964:	69fb      	ldr	r3, [r7, #28]
 8005966:	781b      	ldrb	r3, [r3, #0]
 8005968:	b2db      	uxtb	r3, r3
 800596a:	2b00      	cmp	r3, #0
 800596c:	d101      	bne.n	8005972 <SEGGER_RTT_WriteDownBuffer+0x1e>
 800596e:	f7ff fd75 	bl	800545c <_DoInit>
  SEGGER_RTT_LOCK();
 8005972:	f3ef 8311 	mrs	r3, BASEPRI
 8005976:	f04f 0120 	mov.w	r1, #32
 800597a:	f381 8811 	msr	BASEPRI, r1
 800597e:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	68b9      	ldr	r1, [r7, #8]
 8005984:	68f8      	ldr	r0, [r7, #12]
 8005986:	f7ff ff95 	bl	80058b4 <SEGGER_RTT_WriteDownBufferNoLock>
 800598a:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 800598c:	69bb      	ldr	r3, [r7, #24]
 800598e:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8005992:	697b      	ldr	r3, [r7, #20]
}
 8005994:	4618      	mov	r0, r3
 8005996:	3720      	adds	r7, #32
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}
 800599c:	2001a8b8 	.word	0x2001a8b8

080059a0 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b088      	sub	sp, #32
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	60f8      	str	r0, [r7, #12]
 80059a8:	60b9      	str	r1, [r7, #8]
 80059aa:	607a      	str	r2, [r7, #4]
 80059ac:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80059ae:	4b3d      	ldr	r3, [pc, #244]	; (8005aa4 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80059b0:	61bb      	str	r3, [r7, #24]
 80059b2:	69bb      	ldr	r3, [r7, #24]
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d101      	bne.n	80059c0 <SEGGER_RTT_AllocUpBuffer+0x20>
 80059bc:	f7ff fd4e 	bl	800545c <_DoInit>
  SEGGER_RTT_LOCK();
 80059c0:	f3ef 8311 	mrs	r3, BASEPRI
 80059c4:	f04f 0120 	mov.w	r1, #32
 80059c8:	f381 8811 	msr	BASEPRI, r1
 80059cc:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80059ce:	4b35      	ldr	r3, [pc, #212]	; (8005aa4 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80059d0:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80059d2:	2300      	movs	r3, #0
 80059d4:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80059d6:	6939      	ldr	r1, [r7, #16]
 80059d8:	69fb      	ldr	r3, [r7, #28]
 80059da:	1c5a      	adds	r2, r3, #1
 80059dc:	4613      	mov	r3, r2
 80059de:	005b      	lsls	r3, r3, #1
 80059e0:	4413      	add	r3, r2
 80059e2:	00db      	lsls	r3, r3, #3
 80059e4:	440b      	add	r3, r1
 80059e6:	3304      	adds	r3, #4
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d008      	beq.n	8005a00 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80059ee:	69fb      	ldr	r3, [r7, #28]
 80059f0:	3301      	adds	r3, #1
 80059f2:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	691b      	ldr	r3, [r3, #16]
 80059f8:	69fa      	ldr	r2, [r7, #28]
 80059fa:	429a      	cmp	r2, r3
 80059fc:	dbeb      	blt.n	80059d6 <SEGGER_RTT_AllocUpBuffer+0x36>
 80059fe:	e000      	b.n	8005a02 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005a00:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	691b      	ldr	r3, [r3, #16]
 8005a06:	69fa      	ldr	r2, [r7, #28]
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	da3f      	bge.n	8005a8c <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005a0c:	6939      	ldr	r1, [r7, #16]
 8005a0e:	69fb      	ldr	r3, [r7, #28]
 8005a10:	1c5a      	adds	r2, r3, #1
 8005a12:	4613      	mov	r3, r2
 8005a14:	005b      	lsls	r3, r3, #1
 8005a16:	4413      	add	r3, r2
 8005a18:	00db      	lsls	r3, r3, #3
 8005a1a:	440b      	add	r3, r1
 8005a1c:	68fa      	ldr	r2, [r7, #12]
 8005a1e:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005a20:	6939      	ldr	r1, [r7, #16]
 8005a22:	69fb      	ldr	r3, [r7, #28]
 8005a24:	1c5a      	adds	r2, r3, #1
 8005a26:	4613      	mov	r3, r2
 8005a28:	005b      	lsls	r3, r3, #1
 8005a2a:	4413      	add	r3, r2
 8005a2c:	00db      	lsls	r3, r3, #3
 8005a2e:	440b      	add	r3, r1
 8005a30:	3304      	adds	r3, #4
 8005a32:	68ba      	ldr	r2, [r7, #8]
 8005a34:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8005a36:	6939      	ldr	r1, [r7, #16]
 8005a38:	69fa      	ldr	r2, [r7, #28]
 8005a3a:	4613      	mov	r3, r2
 8005a3c:	005b      	lsls	r3, r3, #1
 8005a3e:	4413      	add	r3, r2
 8005a40:	00db      	lsls	r3, r3, #3
 8005a42:	440b      	add	r3, r1
 8005a44:	3320      	adds	r3, #32
 8005a46:	687a      	ldr	r2, [r7, #4]
 8005a48:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8005a4a:	6939      	ldr	r1, [r7, #16]
 8005a4c:	69fa      	ldr	r2, [r7, #28]
 8005a4e:	4613      	mov	r3, r2
 8005a50:	005b      	lsls	r3, r3, #1
 8005a52:	4413      	add	r3, r2
 8005a54:	00db      	lsls	r3, r3, #3
 8005a56:	440b      	add	r3, r1
 8005a58:	3328      	adds	r3, #40	; 0x28
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005a5e:	6939      	ldr	r1, [r7, #16]
 8005a60:	69fa      	ldr	r2, [r7, #28]
 8005a62:	4613      	mov	r3, r2
 8005a64:	005b      	lsls	r3, r3, #1
 8005a66:	4413      	add	r3, r2
 8005a68:	00db      	lsls	r3, r3, #3
 8005a6a:	440b      	add	r3, r1
 8005a6c:	3324      	adds	r3, #36	; 0x24
 8005a6e:	2200      	movs	r2, #0
 8005a70:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005a72:	6939      	ldr	r1, [r7, #16]
 8005a74:	69fa      	ldr	r2, [r7, #28]
 8005a76:	4613      	mov	r3, r2
 8005a78:	005b      	lsls	r3, r3, #1
 8005a7a:	4413      	add	r3, r2
 8005a7c:	00db      	lsls	r3, r3, #3
 8005a7e:	440b      	add	r3, r1
 8005a80:	332c      	adds	r3, #44	; 0x2c
 8005a82:	683a      	ldr	r2, [r7, #0]
 8005a84:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005a86:	f3bf 8f5f 	dmb	sy
 8005a8a:	e002      	b.n	8005a92 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005a8c:	f04f 33ff 	mov.w	r3, #4294967295
 8005a90:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005a98:	69fb      	ldr	r3, [r7, #28]
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3720      	adds	r7, #32
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}
 8005aa2:	bf00      	nop
 8005aa4:	2001a8b8 	.word	0x2001a8b8

08005aa8 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b088      	sub	sp, #32
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	60f8      	str	r0, [r7, #12]
 8005ab0:	60b9      	str	r1, [r7, #8]
 8005ab2:	607a      	str	r2, [r7, #4]
 8005ab4:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005ab6:	4b33      	ldr	r3, [pc, #204]	; (8005b84 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005ab8:	61bb      	str	r3, [r7, #24]
 8005aba:	69bb      	ldr	r3, [r7, #24]
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d101      	bne.n	8005ac8 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005ac4:	f7ff fcca 	bl	800545c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005ac8:	4b2e      	ldr	r3, [pc, #184]	; (8005b84 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005aca:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	695b      	ldr	r3, [r3, #20]
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d24d      	bcs.n	8005b74 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8005ad8:	f3ef 8311 	mrs	r3, BASEPRI
 8005adc:	f04f 0120 	mov.w	r1, #32
 8005ae0:	f381 8811 	msr	BASEPRI, r1
 8005ae4:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d031      	beq.n	8005b50 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8005aec:	6979      	ldr	r1, [r7, #20]
 8005aee:	68fa      	ldr	r2, [r7, #12]
 8005af0:	4613      	mov	r3, r2
 8005af2:	005b      	lsls	r3, r3, #1
 8005af4:	4413      	add	r3, r2
 8005af6:	00db      	lsls	r3, r3, #3
 8005af8:	440b      	add	r3, r1
 8005afa:	3360      	adds	r3, #96	; 0x60
 8005afc:	68ba      	ldr	r2, [r7, #8]
 8005afe:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8005b00:	6979      	ldr	r1, [r7, #20]
 8005b02:	68fa      	ldr	r2, [r7, #12]
 8005b04:	4613      	mov	r3, r2
 8005b06:	005b      	lsls	r3, r3, #1
 8005b08:	4413      	add	r3, r2
 8005b0a:	00db      	lsls	r3, r3, #3
 8005b0c:	440b      	add	r3, r1
 8005b0e:	3364      	adds	r3, #100	; 0x64
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8005b14:	6979      	ldr	r1, [r7, #20]
 8005b16:	68fa      	ldr	r2, [r7, #12]
 8005b18:	4613      	mov	r3, r2
 8005b1a:	005b      	lsls	r3, r3, #1
 8005b1c:	4413      	add	r3, r2
 8005b1e:	00db      	lsls	r3, r3, #3
 8005b20:	440b      	add	r3, r1
 8005b22:	3368      	adds	r3, #104	; 0x68
 8005b24:	683a      	ldr	r2, [r7, #0]
 8005b26:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8005b28:	6979      	ldr	r1, [r7, #20]
 8005b2a:	68fa      	ldr	r2, [r7, #12]
 8005b2c:	4613      	mov	r3, r2
 8005b2e:	005b      	lsls	r3, r3, #1
 8005b30:	4413      	add	r3, r2
 8005b32:	00db      	lsls	r3, r3, #3
 8005b34:	440b      	add	r3, r1
 8005b36:	3370      	adds	r3, #112	; 0x70
 8005b38:	2200      	movs	r2, #0
 8005b3a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8005b3c:	6979      	ldr	r1, [r7, #20]
 8005b3e:	68fa      	ldr	r2, [r7, #12]
 8005b40:	4613      	mov	r3, r2
 8005b42:	005b      	lsls	r3, r3, #1
 8005b44:	4413      	add	r3, r2
 8005b46:	00db      	lsls	r3, r3, #3
 8005b48:	440b      	add	r3, r1
 8005b4a:	336c      	adds	r3, #108	; 0x6c
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8005b50:	6979      	ldr	r1, [r7, #20]
 8005b52:	68fa      	ldr	r2, [r7, #12]
 8005b54:	4613      	mov	r3, r2
 8005b56:	005b      	lsls	r3, r3, #1
 8005b58:	4413      	add	r3, r2
 8005b5a:	00db      	lsls	r3, r3, #3
 8005b5c:	440b      	add	r3, r1
 8005b5e:	3374      	adds	r3, #116	; 0x74
 8005b60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b62:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005b64:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	61fb      	str	r3, [r7, #28]
 8005b72:	e002      	b.n	8005b7a <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8005b74:	f04f 33ff 	mov.w	r3, #4294967295
 8005b78:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8005b7a:	69fb      	ldr	r3, [r7, #28]
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3720      	adds	r7, #32
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}
 8005b84:	2001a8b8 	.word	0x2001a8b8

08005b88 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005b88:	b480      	push	{r7}
 8005b8a:	b087      	sub	sp, #28
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	60f8      	str	r0, [r7, #12]
 8005b90:	60b9      	str	r1, [r7, #8]
 8005b92:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8005b94:	2300      	movs	r3, #0
 8005b96:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005b98:	e002      	b.n	8005ba0 <_EncodeStr+0x18>
    Len++;
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	3301      	adds	r3, #1
 8005b9e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005ba0:	68ba      	ldr	r2, [r7, #8]
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	4413      	add	r3, r2
 8005ba6:	781b      	ldrb	r3, [r3, #0]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d1f6      	bne.n	8005b9a <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8005bac:	693a      	ldr	r2, [r7, #16]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d901      	bls.n	8005bb8 <_EncodeStr+0x30>
    Len = Limit;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	2bfe      	cmp	r3, #254	; 0xfe
 8005bbc:	d806      	bhi.n	8005bcc <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	1c5a      	adds	r2, r3, #1
 8005bc2:	60fa      	str	r2, [r7, #12]
 8005bc4:	693a      	ldr	r2, [r7, #16]
 8005bc6:	b2d2      	uxtb	r2, r2
 8005bc8:	701a      	strb	r2, [r3, #0]
 8005bca:	e011      	b.n	8005bf0 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	1c5a      	adds	r2, r3, #1
 8005bd0:	60fa      	str	r2, [r7, #12]
 8005bd2:	22ff      	movs	r2, #255	; 0xff
 8005bd4:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	1c5a      	adds	r2, r3, #1
 8005bda:	60fa      	str	r2, [r7, #12]
 8005bdc:	693a      	ldr	r2, [r7, #16]
 8005bde:	b2d2      	uxtb	r2, r2
 8005be0:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	0a19      	lsrs	r1, r3, #8
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	1c5a      	adds	r2, r3, #1
 8005bea:	60fa      	str	r2, [r7, #12]
 8005bec:	b2ca      	uxtb	r2, r1
 8005bee:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005bf4:	e00a      	b.n	8005c0c <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8005bf6:	68ba      	ldr	r2, [r7, #8]
 8005bf8:	1c53      	adds	r3, r2, #1
 8005bfa:	60bb      	str	r3, [r7, #8]
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	1c59      	adds	r1, r3, #1
 8005c00:	60f9      	str	r1, [r7, #12]
 8005c02:	7812      	ldrb	r2, [r2, #0]
 8005c04:	701a      	strb	r2, [r3, #0]
    n++;
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	3301      	adds	r3, #1
 8005c0a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005c0c:	697a      	ldr	r2, [r7, #20]
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d3f0      	bcc.n	8005bf6 <_EncodeStr+0x6e>
  }
  return pPayload;
 8005c14:	68fb      	ldr	r3, [r7, #12]
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	371c      	adds	r7, #28
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr

08005c22 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005c22:	b480      	push	{r7}
 8005c24:	b083      	sub	sp, #12
 8005c26:	af00      	add	r7, sp, #0
 8005c28:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	3304      	adds	r3, #4
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	370c      	adds	r7, #12
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr
	...

08005c3c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b082      	sub	sp, #8
 8005c40:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005c42:	4b36      	ldr	r3, [pc, #216]	; (8005d1c <_HandleIncomingPacket+0xe0>)
 8005c44:	7e1b      	ldrb	r3, [r3, #24]
 8005c46:	4618      	mov	r0, r3
 8005c48:	1cfb      	adds	r3, r7, #3
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	4619      	mov	r1, r3
 8005c4e:	f7ff fdab 	bl	80057a8 <SEGGER_RTT_ReadNoLock>
 8005c52:	4603      	mov	r3, r0
 8005c54:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	dd54      	ble.n	8005d06 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8005c5c:	78fb      	ldrb	r3, [r7, #3]
 8005c5e:	2b80      	cmp	r3, #128	; 0x80
 8005c60:	d032      	beq.n	8005cc8 <_HandleIncomingPacket+0x8c>
 8005c62:	2b80      	cmp	r3, #128	; 0x80
 8005c64:	dc42      	bgt.n	8005cec <_HandleIncomingPacket+0xb0>
 8005c66:	2b07      	cmp	r3, #7
 8005c68:	dc16      	bgt.n	8005c98 <_HandleIncomingPacket+0x5c>
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	dd3e      	ble.n	8005cec <_HandleIncomingPacket+0xb0>
 8005c6e:	3b01      	subs	r3, #1
 8005c70:	2b06      	cmp	r3, #6
 8005c72:	d83b      	bhi.n	8005cec <_HandleIncomingPacket+0xb0>
 8005c74:	a201      	add	r2, pc, #4	; (adr r2, 8005c7c <_HandleIncomingPacket+0x40>)
 8005c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c7a:	bf00      	nop
 8005c7c:	08005c9f 	.word	0x08005c9f
 8005c80:	08005ca5 	.word	0x08005ca5
 8005c84:	08005cab 	.word	0x08005cab
 8005c88:	08005cb1 	.word	0x08005cb1
 8005c8c:	08005cb7 	.word	0x08005cb7
 8005c90:	08005cbd 	.word	0x08005cbd
 8005c94:	08005cc3 	.word	0x08005cc3
 8005c98:	2b7f      	cmp	r3, #127	; 0x7f
 8005c9a:	d036      	beq.n	8005d0a <_HandleIncomingPacket+0xce>
 8005c9c:	e026      	b.n	8005cec <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005c9e:	f000 ff45 	bl	8006b2c <SEGGER_SYSVIEW_Start>
      break;
 8005ca2:	e037      	b.n	8005d14 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005ca4:	f000 fffe 	bl	8006ca4 <SEGGER_SYSVIEW_Stop>
      break;
 8005ca8:	e034      	b.n	8005d14 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005caa:	f001 f9d7 	bl	800705c <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005cae:	e031      	b.n	8005d14 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005cb0:	f001 f99c 	bl	8006fec <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005cb4:	e02e      	b.n	8005d14 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005cb6:	f001 f81b 	bl	8006cf0 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005cba:	e02b      	b.n	8005d14 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005cbc:	f001 fc6a 	bl	8007594 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005cc0:	e028      	b.n	8005d14 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005cc2:	f001 fc49 	bl	8007558 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005cc6:	e025      	b.n	8005d14 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005cc8:	4b14      	ldr	r3, [pc, #80]	; (8005d1c <_HandleIncomingPacket+0xe0>)
 8005cca:	7e1b      	ldrb	r3, [r3, #24]
 8005ccc:	4618      	mov	r0, r3
 8005cce:	1cfb      	adds	r3, r7, #3
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	4619      	mov	r1, r3
 8005cd4:	f7ff fd68 	bl	80057a8 <SEGGER_RTT_ReadNoLock>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	dd15      	ble.n	8005d0e <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005ce2:	78fb      	ldrb	r3, [r7, #3]
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f001 fbb7 	bl	8007458 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005cea:	e010      	b.n	8005d0e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005cec:	78fb      	ldrb	r3, [r7, #3]
 8005cee:	b25b      	sxtb	r3, r3
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	da0e      	bge.n	8005d12 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005cf4:	4b09      	ldr	r3, [pc, #36]	; (8005d1c <_HandleIncomingPacket+0xe0>)
 8005cf6:	7e1b      	ldrb	r3, [r3, #24]
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	1cfb      	adds	r3, r7, #3
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	4619      	mov	r1, r3
 8005d00:	f7ff fd52 	bl	80057a8 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005d04:	e005      	b.n	8005d12 <_HandleIncomingPacket+0xd6>
    }
  }
 8005d06:	bf00      	nop
 8005d08:	e004      	b.n	8005d14 <_HandleIncomingPacket+0xd8>
      break;
 8005d0a:	bf00      	nop
 8005d0c:	e002      	b.n	8005d14 <_HandleIncomingPacket+0xd8>
      break;
 8005d0e:	bf00      	nop
 8005d10:	e000      	b.n	8005d14 <_HandleIncomingPacket+0xd8>
      break;
 8005d12:	bf00      	nop
}
 8005d14:	bf00      	nop
 8005d16:	3708      	adds	r7, #8
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}
 8005d1c:	2001a6c8 	.word	0x2001a6c8

08005d20 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b08c      	sub	sp, #48	; 0x30
 8005d24:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005d26:	2301      	movs	r3, #1
 8005d28:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8005d2a:	1d3b      	adds	r3, r7, #4
 8005d2c:	3301      	adds	r3, #1
 8005d2e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005d30:	69fb      	ldr	r3, [r7, #28]
 8005d32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d34:	4b32      	ldr	r3, [pc, #200]	; (8005e00 <_TrySendOverflowPacket+0xe0>)
 8005d36:	695b      	ldr	r3, [r3, #20]
 8005d38:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d3a:	e00b      	b.n	8005d54 <_TrySendOverflowPacket+0x34>
 8005d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d3e:	b2da      	uxtb	r2, r3
 8005d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d42:	1c59      	adds	r1, r3, #1
 8005d44:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005d46:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d4a:	b2d2      	uxtb	r2, r2
 8005d4c:	701a      	strb	r2, [r3, #0]
 8005d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d50:	09db      	lsrs	r3, r3, #7
 8005d52:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d56:	2b7f      	cmp	r3, #127	; 0x7f
 8005d58:	d8f0      	bhi.n	8005d3c <_TrySendOverflowPacket+0x1c>
 8005d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d5c:	1c5a      	adds	r2, r3, #1
 8005d5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d62:	b2d2      	uxtb	r2, r2
 8005d64:	701a      	strb	r2, [r3, #0]
 8005d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d68:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005d6a:	4b26      	ldr	r3, [pc, #152]	; (8005e04 <_TrySendOverflowPacket+0xe4>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005d70:	4b23      	ldr	r3, [pc, #140]	; (8005e00 <_TrySendOverflowPacket+0xe0>)
 8005d72:	68db      	ldr	r3, [r3, #12]
 8005d74:	69ba      	ldr	r2, [r7, #24]
 8005d76:	1ad3      	subs	r3, r2, r3
 8005d78:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005d7a:	69fb      	ldr	r3, [r7, #28]
 8005d7c:	627b      	str	r3, [r7, #36]	; 0x24
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	623b      	str	r3, [r7, #32]
 8005d82:	e00b      	b.n	8005d9c <_TrySendOverflowPacket+0x7c>
 8005d84:	6a3b      	ldr	r3, [r7, #32]
 8005d86:	b2da      	uxtb	r2, r3
 8005d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8a:	1c59      	adds	r1, r3, #1
 8005d8c:	6279      	str	r1, [r7, #36]	; 0x24
 8005d8e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d92:	b2d2      	uxtb	r2, r2
 8005d94:	701a      	strb	r2, [r3, #0]
 8005d96:	6a3b      	ldr	r3, [r7, #32]
 8005d98:	09db      	lsrs	r3, r3, #7
 8005d9a:	623b      	str	r3, [r7, #32]
 8005d9c:	6a3b      	ldr	r3, [r7, #32]
 8005d9e:	2b7f      	cmp	r3, #127	; 0x7f
 8005da0:	d8f0      	bhi.n	8005d84 <_TrySendOverflowPacket+0x64>
 8005da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da4:	1c5a      	adds	r2, r3, #1
 8005da6:	627a      	str	r2, [r7, #36]	; 0x24
 8005da8:	6a3a      	ldr	r2, [r7, #32]
 8005daa:	b2d2      	uxtb	r2, r2
 8005dac:	701a      	strb	r2, [r3, #0]
 8005dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db0:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8005db2:	4b13      	ldr	r3, [pc, #76]	; (8005e00 <_TrySendOverflowPacket+0xe0>)
 8005db4:	785b      	ldrb	r3, [r3, #1]
 8005db6:	4618      	mov	r0, r3
 8005db8:	1d3b      	adds	r3, r7, #4
 8005dba:	69fa      	ldr	r2, [r7, #28]
 8005dbc:	1ad3      	subs	r3, r2, r3
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	1d3b      	adds	r3, r7, #4
 8005dc2:	4619      	mov	r1, r3
 8005dc4:	f7fa fa04 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8005dcc:	f7ff fabc 	bl	8005348 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d009      	beq.n	8005dea <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005dd6:	4a0a      	ldr	r2, [pc, #40]	; (8005e00 <_TrySendOverflowPacket+0xe0>)
 8005dd8:	69bb      	ldr	r3, [r7, #24]
 8005dda:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005ddc:	4b08      	ldr	r3, [pc, #32]	; (8005e00 <_TrySendOverflowPacket+0xe0>)
 8005dde:	781b      	ldrb	r3, [r3, #0]
 8005de0:	3b01      	subs	r3, #1
 8005de2:	b2da      	uxtb	r2, r3
 8005de4:	4b06      	ldr	r3, [pc, #24]	; (8005e00 <_TrySendOverflowPacket+0xe0>)
 8005de6:	701a      	strb	r2, [r3, #0]
 8005de8:	e004      	b.n	8005df4 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005dea:	4b05      	ldr	r3, [pc, #20]	; (8005e00 <_TrySendOverflowPacket+0xe0>)
 8005dec:	695b      	ldr	r3, [r3, #20]
 8005dee:	3301      	adds	r3, #1
 8005df0:	4a03      	ldr	r2, [pc, #12]	; (8005e00 <_TrySendOverflowPacket+0xe0>)
 8005df2:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005df4:	693b      	ldr	r3, [r7, #16]
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3730      	adds	r7, #48	; 0x30
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	bf00      	nop
 8005e00:	2001a6c8 	.word	0x2001a6c8
 8005e04:	e0001004 	.word	0xe0001004

08005e08 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b08a      	sub	sp, #40	; 0x28
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	60f8      	str	r0, [r7, #12]
 8005e10:	60b9      	str	r1, [r7, #8]
 8005e12:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005e14:	4b6d      	ldr	r3, [pc, #436]	; (8005fcc <_SendPacket+0x1c4>)
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d010      	beq.n	8005e3e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005e1c:	4b6b      	ldr	r3, [pc, #428]	; (8005fcc <_SendPacket+0x1c4>)
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	f000 80a5 	beq.w	8005f70 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005e26:	4b69      	ldr	r3, [pc, #420]	; (8005fcc <_SendPacket+0x1c4>)
 8005e28:	781b      	ldrb	r3, [r3, #0]
 8005e2a:	2b02      	cmp	r3, #2
 8005e2c:	d109      	bne.n	8005e42 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005e2e:	f7ff ff77 	bl	8005d20 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005e32:	4b66      	ldr	r3, [pc, #408]	; (8005fcc <_SendPacket+0x1c4>)
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	f040 809c 	bne.w	8005f74 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8005e3c:	e001      	b.n	8005e42 <_SendPacket+0x3a>
    goto Send;
 8005e3e:	bf00      	nop
 8005e40:	e000      	b.n	8005e44 <_SendPacket+0x3c>
Send:
 8005e42:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2b1f      	cmp	r3, #31
 8005e48:	d809      	bhi.n	8005e5e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005e4a:	4b60      	ldr	r3, [pc, #384]	; (8005fcc <_SendPacket+0x1c4>)
 8005e4c:	69da      	ldr	r2, [r3, #28]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	fa22 f303 	lsr.w	r3, r2, r3
 8005e54:	f003 0301 	and.w	r3, r3, #1
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	f040 808d 	bne.w	8005f78 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2b17      	cmp	r3, #23
 8005e62:	d807      	bhi.n	8005e74 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	3b01      	subs	r3, #1
 8005e68:	60fb      	str	r3, [r7, #12]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	b2da      	uxtb	r2, r3
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	701a      	strb	r2, [r3, #0]
 8005e72:	e03d      	b.n	8005ef0 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8005e74:	68ba      	ldr	r2, [r7, #8]
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	1ad3      	subs	r3, r2, r3
 8005e7a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8005e7c:	69fb      	ldr	r3, [r7, #28]
 8005e7e:	2b7f      	cmp	r3, #127	; 0x7f
 8005e80:	d912      	bls.n	8005ea8 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8005e82:	69fb      	ldr	r3, [r7, #28]
 8005e84:	09da      	lsrs	r2, r3, #7
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	3b01      	subs	r3, #1
 8005e8a:	60fb      	str	r3, [r7, #12]
 8005e8c:	b2d2      	uxtb	r2, r2
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8005e92:	69fb      	ldr	r3, [r7, #28]
 8005e94:	b2db      	uxtb	r3, r3
 8005e96:	68fa      	ldr	r2, [r7, #12]
 8005e98:	3a01      	subs	r2, #1
 8005e9a:	60fa      	str	r2, [r7, #12]
 8005e9c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005ea0:	b2da      	uxtb	r2, r3
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	701a      	strb	r2, [r3, #0]
 8005ea6:	e006      	b.n	8005eb6 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	3b01      	subs	r3, #1
 8005eac:	60fb      	str	r3, [r7, #12]
 8005eae:	69fb      	ldr	r3, [r7, #28]
 8005eb0:	b2da      	uxtb	r2, r3
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2b7f      	cmp	r3, #127	; 0x7f
 8005eba:	d912      	bls.n	8005ee2 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	09da      	lsrs	r2, r3, #7
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	3b01      	subs	r3, #1
 8005ec4:	60fb      	str	r3, [r7, #12]
 8005ec6:	b2d2      	uxtb	r2, r2
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	b2db      	uxtb	r3, r3
 8005ed0:	68fa      	ldr	r2, [r7, #12]
 8005ed2:	3a01      	subs	r2, #1
 8005ed4:	60fa      	str	r2, [r7, #12]
 8005ed6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005eda:	b2da      	uxtb	r2, r3
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	701a      	strb	r2, [r3, #0]
 8005ee0:	e006      	b.n	8005ef0 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	3b01      	subs	r3, #1
 8005ee6:	60fb      	str	r3, [r7, #12]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	b2da      	uxtb	r2, r3
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005ef0:	4b37      	ldr	r3, [pc, #220]	; (8005fd0 <_SendPacket+0x1c8>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005ef6:	4b35      	ldr	r3, [pc, #212]	; (8005fcc <_SendPacket+0x1c4>)
 8005ef8:	68db      	ldr	r3, [r3, #12]
 8005efa:	69ba      	ldr	r2, [r7, #24]
 8005efc:	1ad3      	subs	r3, r2, r3
 8005efe:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	627b      	str	r3, [r7, #36]	; 0x24
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	623b      	str	r3, [r7, #32]
 8005f08:	e00b      	b.n	8005f22 <_SendPacket+0x11a>
 8005f0a:	6a3b      	ldr	r3, [r7, #32]
 8005f0c:	b2da      	uxtb	r2, r3
 8005f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f10:	1c59      	adds	r1, r3, #1
 8005f12:	6279      	str	r1, [r7, #36]	; 0x24
 8005f14:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f18:	b2d2      	uxtb	r2, r2
 8005f1a:	701a      	strb	r2, [r3, #0]
 8005f1c:	6a3b      	ldr	r3, [r7, #32]
 8005f1e:	09db      	lsrs	r3, r3, #7
 8005f20:	623b      	str	r3, [r7, #32]
 8005f22:	6a3b      	ldr	r3, [r7, #32]
 8005f24:	2b7f      	cmp	r3, #127	; 0x7f
 8005f26:	d8f0      	bhi.n	8005f0a <_SendPacket+0x102>
 8005f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2a:	1c5a      	adds	r2, r3, #1
 8005f2c:	627a      	str	r2, [r7, #36]	; 0x24
 8005f2e:	6a3a      	ldr	r2, [r7, #32]
 8005f30:	b2d2      	uxtb	r2, r2
 8005f32:	701a      	strb	r2, [r3, #0]
 8005f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f36:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8005f38:	4b24      	ldr	r3, [pc, #144]	; (8005fcc <_SendPacket+0x1c4>)
 8005f3a:	785b      	ldrb	r3, [r3, #1]
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	68ba      	ldr	r2, [r7, #8]
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	1ad3      	subs	r3, r2, r3
 8005f44:	461a      	mov	r2, r3
 8005f46:	68f9      	ldr	r1, [r7, #12]
 8005f48:	f7fa f942 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8005f50:	f7ff f9fa 	bl	8005348 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d003      	beq.n	8005f62 <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005f5a:	4a1c      	ldr	r2, [pc, #112]	; (8005fcc <_SendPacket+0x1c4>)
 8005f5c:	69bb      	ldr	r3, [r7, #24]
 8005f5e:	60d3      	str	r3, [r2, #12]
 8005f60:	e00b      	b.n	8005f7a <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005f62:	4b1a      	ldr	r3, [pc, #104]	; (8005fcc <_SendPacket+0x1c4>)
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	3301      	adds	r3, #1
 8005f68:	b2da      	uxtb	r2, r3
 8005f6a:	4b18      	ldr	r3, [pc, #96]	; (8005fcc <_SendPacket+0x1c4>)
 8005f6c:	701a      	strb	r2, [r3, #0]
 8005f6e:	e004      	b.n	8005f7a <_SendPacket+0x172>
    goto SendDone;
 8005f70:	bf00      	nop
 8005f72:	e002      	b.n	8005f7a <_SendPacket+0x172>
      goto SendDone;
 8005f74:	bf00      	nop
 8005f76:	e000      	b.n	8005f7a <_SendPacket+0x172>
      goto SendDone;
 8005f78:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005f7a:	4b14      	ldr	r3, [pc, #80]	; (8005fcc <_SendPacket+0x1c4>)
 8005f7c:	7e1b      	ldrb	r3, [r3, #24]
 8005f7e:	4619      	mov	r1, r3
 8005f80:	4a14      	ldr	r2, [pc, #80]	; (8005fd4 <_SendPacket+0x1cc>)
 8005f82:	460b      	mov	r3, r1
 8005f84:	005b      	lsls	r3, r3, #1
 8005f86:	440b      	add	r3, r1
 8005f88:	00db      	lsls	r3, r3, #3
 8005f8a:	4413      	add	r3, r2
 8005f8c:	336c      	adds	r3, #108	; 0x6c
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	4b0e      	ldr	r3, [pc, #56]	; (8005fcc <_SendPacket+0x1c4>)
 8005f92:	7e1b      	ldrb	r3, [r3, #24]
 8005f94:	4618      	mov	r0, r3
 8005f96:	490f      	ldr	r1, [pc, #60]	; (8005fd4 <_SendPacket+0x1cc>)
 8005f98:	4603      	mov	r3, r0
 8005f9a:	005b      	lsls	r3, r3, #1
 8005f9c:	4403      	add	r3, r0
 8005f9e:	00db      	lsls	r3, r3, #3
 8005fa0:	440b      	add	r3, r1
 8005fa2:	3370      	adds	r3, #112	; 0x70
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d00b      	beq.n	8005fc2 <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005faa:	4b08      	ldr	r3, [pc, #32]	; (8005fcc <_SendPacket+0x1c4>)
 8005fac:	789b      	ldrb	r3, [r3, #2]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d107      	bne.n	8005fc2 <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005fb2:	4b06      	ldr	r3, [pc, #24]	; (8005fcc <_SendPacket+0x1c4>)
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005fb8:	f7ff fe40 	bl	8005c3c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005fbc:	4b03      	ldr	r3, [pc, #12]	; (8005fcc <_SendPacket+0x1c4>)
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005fc2:	bf00      	nop
 8005fc4:	3728      	adds	r7, #40	; 0x28
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}
 8005fca:	bf00      	nop
 8005fcc:	2001a6c8 	.word	0x2001a6c8
 8005fd0:	e0001004 	.word	0xe0001004
 8005fd4:	2001a8b8 	.word	0x2001a8b8

08005fd8 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b08a      	sub	sp, #40	; 0x28
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
 8005fe0:	460b      	mov	r3, r1
 8005fe2:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	691b      	ldr	r3, [r3, #16]
 8005fe8:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	3301      	adds	r3, #1
 8005fee:	2b80      	cmp	r3, #128	; 0x80
 8005ff0:	d80a      	bhi.n	8006008 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	1c59      	adds	r1, r3, #1
 8005ff8:	687a      	ldr	r2, [r7, #4]
 8005ffa:	6051      	str	r1, [r2, #4]
 8005ffc:	78fa      	ldrb	r2, [r7, #3]
 8005ffe:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	1c5a      	adds	r2, r3, #1
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	691b      	ldr	r3, [r3, #16]
 800600c:	2b80      	cmp	r3, #128	; 0x80
 800600e:	d15a      	bne.n	80060c6 <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	691a      	ldr	r2, [r3, #16]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	b2d2      	uxtb	r2, r2
 800601a:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	68db      	ldr	r3, [r3, #12]
 8006026:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	627b      	str	r3, [r7, #36]	; 0x24
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	623b      	str	r3, [r7, #32]
 8006030:	e00b      	b.n	800604a <_StoreChar+0x72>
 8006032:	6a3b      	ldr	r3, [r7, #32]
 8006034:	b2da      	uxtb	r2, r3
 8006036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006038:	1c59      	adds	r1, r3, #1
 800603a:	6279      	str	r1, [r7, #36]	; 0x24
 800603c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006040:	b2d2      	uxtb	r2, r2
 8006042:	701a      	strb	r2, [r3, #0]
 8006044:	6a3b      	ldr	r3, [r7, #32]
 8006046:	09db      	lsrs	r3, r3, #7
 8006048:	623b      	str	r3, [r7, #32]
 800604a:	6a3b      	ldr	r3, [r7, #32]
 800604c:	2b7f      	cmp	r3, #127	; 0x7f
 800604e:	d8f0      	bhi.n	8006032 <_StoreChar+0x5a>
 8006050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006052:	1c5a      	adds	r2, r3, #1
 8006054:	627a      	str	r2, [r7, #36]	; 0x24
 8006056:	6a3a      	ldr	r2, [r7, #32]
 8006058:	b2d2      	uxtb	r2, r2
 800605a:	701a      	strb	r2, [r3, #0]
 800605c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605e:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	61fb      	str	r3, [r7, #28]
 8006064:	2300      	movs	r3, #0
 8006066:	61bb      	str	r3, [r7, #24]
 8006068:	e00b      	b.n	8006082 <_StoreChar+0xaa>
 800606a:	69bb      	ldr	r3, [r7, #24]
 800606c:	b2da      	uxtb	r2, r3
 800606e:	69fb      	ldr	r3, [r7, #28]
 8006070:	1c59      	adds	r1, r3, #1
 8006072:	61f9      	str	r1, [r7, #28]
 8006074:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006078:	b2d2      	uxtb	r2, r2
 800607a:	701a      	strb	r2, [r3, #0]
 800607c:	69bb      	ldr	r3, [r7, #24]
 800607e:	09db      	lsrs	r3, r3, #7
 8006080:	61bb      	str	r3, [r7, #24]
 8006082:	69bb      	ldr	r3, [r7, #24]
 8006084:	2b7f      	cmp	r3, #127	; 0x7f
 8006086:	d8f0      	bhi.n	800606a <_StoreChar+0x92>
 8006088:	69fb      	ldr	r3, [r7, #28]
 800608a:	1c5a      	adds	r2, r3, #1
 800608c:	61fa      	str	r2, [r7, #28]
 800608e:	69ba      	ldr	r2, [r7, #24]
 8006090:	b2d2      	uxtb	r2, r2
 8006092:	701a      	strb	r2, [r3, #0]
 8006094:	69fb      	ldr	r3, [r7, #28]
 8006096:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	221a      	movs	r2, #26
 800609e:	6939      	ldr	r1, [r7, #16]
 80060a0:	4618      	mov	r0, r3
 80060a2:	f7ff feb1 	bl	8005e08 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4618      	mov	r0, r3
 80060ac:	f7ff fdb9 	bl	8005c22 <_PreparePacket>
 80060b0:	4602      	mov	r2, r0
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	1c5a      	adds	r2, r3, #1
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2200      	movs	r2, #0
 80060c4:	611a      	str	r2, [r3, #16]
  }
}
 80060c6:	bf00      	nop
 80060c8:	3728      	adds	r7, #40	; 0x28
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}
	...

080060d0 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b08a      	sub	sp, #40	; 0x28
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	60f8      	str	r0, [r7, #12]
 80060d8:	60b9      	str	r1, [r7, #8]
 80060da:	607a      	str	r2, [r7, #4]
 80060dc:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 80060e2:	2301      	movs	r3, #1
 80060e4:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 80060e6:	2301      	movs	r3, #1
 80060e8:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80060ea:	e007      	b.n	80060fc <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 80060ec:	6a3a      	ldr	r2, [r7, #32]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80060f4:	623b      	str	r3, [r7, #32]
    Width++;
 80060f6:	69fb      	ldr	r3, [r7, #28]
 80060f8:	3301      	adds	r3, #1
 80060fa:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80060fc:	6a3a      	ldr	r2, [r7, #32]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	429a      	cmp	r2, r3
 8006102:	d2f3      	bcs.n	80060ec <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8006104:	683a      	ldr	r2, [r7, #0]
 8006106:	69fb      	ldr	r3, [r7, #28]
 8006108:	429a      	cmp	r2, r3
 800610a:	d901      	bls.n	8006110 <_PrintUnsigned+0x40>
    Width = NumDigits;
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8006110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006112:	f003 0301 	and.w	r3, r3, #1
 8006116:	2b00      	cmp	r3, #0
 8006118:	d11f      	bne.n	800615a <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 800611a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800611c:	2b00      	cmp	r3, #0
 800611e:	d01c      	beq.n	800615a <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8006120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006122:	f003 0302 	and.w	r3, r3, #2
 8006126:	2b00      	cmp	r3, #0
 8006128:	d005      	beq.n	8006136 <_PrintUnsigned+0x66>
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d102      	bne.n	8006136 <_PrintUnsigned+0x66>
        c = '0';
 8006130:	2330      	movs	r3, #48	; 0x30
 8006132:	76fb      	strb	r3, [r7, #27]
 8006134:	e001      	b.n	800613a <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8006136:	2320      	movs	r3, #32
 8006138:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800613a:	e007      	b.n	800614c <_PrintUnsigned+0x7c>
        FieldWidth--;
 800613c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800613e:	3b01      	subs	r3, #1
 8006140:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8006142:	7efb      	ldrb	r3, [r7, #27]
 8006144:	4619      	mov	r1, r3
 8006146:	68f8      	ldr	r0, [r7, #12]
 8006148:	f7ff ff46 	bl	8005fd8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800614c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800614e:	2b00      	cmp	r3, #0
 8006150:	d003      	beq.n	800615a <_PrintUnsigned+0x8a>
 8006152:	69fa      	ldr	r2, [r7, #28]
 8006154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006156:	429a      	cmp	r2, r3
 8006158:	d3f0      	bcc.n	800613c <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	2b01      	cmp	r3, #1
 800615e:	d903      	bls.n	8006168 <_PrintUnsigned+0x98>
      NumDigits--;
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	3b01      	subs	r3, #1
 8006164:	603b      	str	r3, [r7, #0]
 8006166:	e009      	b.n	800617c <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8006168:	68ba      	ldr	r2, [r7, #8]
 800616a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006170:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8006172:	697a      	ldr	r2, [r7, #20]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	429a      	cmp	r2, r3
 8006178:	d200      	bcs.n	800617c <_PrintUnsigned+0xac>
        break;
 800617a:	e005      	b.n	8006188 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 800617c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617e:	687a      	ldr	r2, [r7, #4]
 8006180:	fb02 f303 	mul.w	r3, r2, r3
 8006184:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8006186:	e7e8      	b.n	800615a <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8006188:	68ba      	ldr	r2, [r7, #8]
 800618a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006190:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006196:	fb02 f303 	mul.w	r3, r2, r3
 800619a:	68ba      	ldr	r2, [r7, #8]
 800619c:	1ad3      	subs	r3, r2, r3
 800619e:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 80061a0:	4a15      	ldr	r2, [pc, #84]	; (80061f8 <_PrintUnsigned+0x128>)
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	4413      	add	r3, r2
 80061a6:	781b      	ldrb	r3, [r3, #0]
 80061a8:	4619      	mov	r1, r3
 80061aa:	68f8      	ldr	r0, [r7, #12]
 80061ac:	f7ff ff14 	bl	8005fd8 <_StoreChar>
    Digit /= Base;
 80061b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80061b8:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 80061ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d1e3      	bne.n	8006188 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80061c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061c2:	f003 0301 	and.w	r3, r3, #1
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d011      	beq.n	80061ee <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 80061ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d00e      	beq.n	80061ee <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80061d0:	e006      	b.n	80061e0 <_PrintUnsigned+0x110>
        FieldWidth--;
 80061d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d4:	3b01      	subs	r3, #1
 80061d6:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 80061d8:	2120      	movs	r1, #32
 80061da:	68f8      	ldr	r0, [r7, #12]
 80061dc:	f7ff fefc 	bl	8005fd8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80061e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d003      	beq.n	80061ee <_PrintUnsigned+0x11e>
 80061e6:	69fa      	ldr	r2, [r7, #28]
 80061e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ea:	429a      	cmp	r2, r3
 80061ec:	d3f1      	bcc.n	80061d2 <_PrintUnsigned+0x102>
      }
    }
  }
}
 80061ee:	bf00      	nop
 80061f0:	3728      	adds	r7, #40	; 0x28
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	bf00      	nop
 80061f8:	080081d0 	.word	0x080081d0

080061fc <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b088      	sub	sp, #32
 8006200:	af02      	add	r7, sp, #8
 8006202:	60f8      	str	r0, [r7, #12]
 8006204:	60b9      	str	r1, [r7, #8]
 8006206:	607a      	str	r2, [r7, #4]
 8006208:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	2b00      	cmp	r3, #0
 800620e:	bfb8      	it	lt
 8006210:	425b      	neglt	r3, r3
 8006212:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8006214:	2301      	movs	r3, #1
 8006216:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8006218:	e007      	b.n	800622a <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	693a      	ldr	r2, [r7, #16]
 800621e:	fb92 f3f3 	sdiv	r3, r2, r3
 8006222:	613b      	str	r3, [r7, #16]
    Width++;
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	3301      	adds	r3, #1
 8006228:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	693a      	ldr	r2, [r7, #16]
 800622e:	429a      	cmp	r2, r3
 8006230:	daf3      	bge.n	800621a <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8006232:	683a      	ldr	r2, [r7, #0]
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	429a      	cmp	r2, r3
 8006238:	d901      	bls.n	800623e <_PrintInt+0x42>
    Width = NumDigits;
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 800623e:	6a3b      	ldr	r3, [r7, #32]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d00a      	beq.n	800625a <_PrintInt+0x5e>
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	2b00      	cmp	r3, #0
 8006248:	db04      	blt.n	8006254 <_PrintInt+0x58>
 800624a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800624c:	f003 0304 	and.w	r3, r3, #4
 8006250:	2b00      	cmp	r3, #0
 8006252:	d002      	beq.n	800625a <_PrintInt+0x5e>
    FieldWidth--;
 8006254:	6a3b      	ldr	r3, [r7, #32]
 8006256:	3b01      	subs	r3, #1
 8006258:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 800625a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800625c:	f003 0302 	and.w	r3, r3, #2
 8006260:	2b00      	cmp	r3, #0
 8006262:	d002      	beq.n	800626a <_PrintInt+0x6e>
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d016      	beq.n	8006298 <_PrintInt+0x9c>
 800626a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626c:	f003 0301 	and.w	r3, r3, #1
 8006270:	2b00      	cmp	r3, #0
 8006272:	d111      	bne.n	8006298 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8006274:	6a3b      	ldr	r3, [r7, #32]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d00e      	beq.n	8006298 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800627a:	e006      	b.n	800628a <_PrintInt+0x8e>
        FieldWidth--;
 800627c:	6a3b      	ldr	r3, [r7, #32]
 800627e:	3b01      	subs	r3, #1
 8006280:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8006282:	2120      	movs	r1, #32
 8006284:	68f8      	ldr	r0, [r7, #12]
 8006286:	f7ff fea7 	bl	8005fd8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800628a:	6a3b      	ldr	r3, [r7, #32]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d003      	beq.n	8006298 <_PrintInt+0x9c>
 8006290:	697a      	ldr	r2, [r7, #20]
 8006292:	6a3b      	ldr	r3, [r7, #32]
 8006294:	429a      	cmp	r2, r3
 8006296:	d3f1      	bcc.n	800627c <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	2b00      	cmp	r3, #0
 800629c:	da07      	bge.n	80062ae <_PrintInt+0xb2>
    v = -v;
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	425b      	negs	r3, r3
 80062a2:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 80062a4:	212d      	movs	r1, #45	; 0x2d
 80062a6:	68f8      	ldr	r0, [r7, #12]
 80062a8:	f7ff fe96 	bl	8005fd8 <_StoreChar>
 80062ac:	e008      	b.n	80062c0 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 80062ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b0:	f003 0304 	and.w	r3, r3, #4
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d003      	beq.n	80062c0 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 80062b8:	212b      	movs	r1, #43	; 0x2b
 80062ba:	68f8      	ldr	r0, [r7, #12]
 80062bc:	f7ff fe8c 	bl	8005fd8 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 80062c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c2:	f003 0302 	and.w	r3, r3, #2
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d019      	beq.n	80062fe <_PrintInt+0x102>
 80062ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062cc:	f003 0301 	and.w	r3, r3, #1
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d114      	bne.n	80062fe <_PrintInt+0x102>
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d111      	bne.n	80062fe <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 80062da:	6a3b      	ldr	r3, [r7, #32]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d00e      	beq.n	80062fe <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80062e0:	e006      	b.n	80062f0 <_PrintInt+0xf4>
        FieldWidth--;
 80062e2:	6a3b      	ldr	r3, [r7, #32]
 80062e4:	3b01      	subs	r3, #1
 80062e6:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 80062e8:	2130      	movs	r1, #48	; 0x30
 80062ea:	68f8      	ldr	r0, [r7, #12]
 80062ec:	f7ff fe74 	bl	8005fd8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80062f0:	6a3b      	ldr	r3, [r7, #32]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d003      	beq.n	80062fe <_PrintInt+0x102>
 80062f6:	697a      	ldr	r2, [r7, #20]
 80062f8:	6a3b      	ldr	r3, [r7, #32]
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d3f1      	bcc.n	80062e2 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 80062fe:	68b9      	ldr	r1, [r7, #8]
 8006300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006302:	9301      	str	r3, [sp, #4]
 8006304:	6a3b      	ldr	r3, [r7, #32]
 8006306:	9300      	str	r3, [sp, #0]
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	687a      	ldr	r2, [r7, #4]
 800630c:	68f8      	ldr	r0, [r7, #12]
 800630e:	f7ff fedf 	bl	80060d0 <_PrintUnsigned>
}
 8006312:	bf00      	nop
 8006314:	3718      	adds	r7, #24
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}
	...

0800631c <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 800631c:	b580      	push	{r7, lr}
 800631e:	b098      	sub	sp, #96	; 0x60
 8006320:	af02      	add	r7, sp, #8
 8006322:	60f8      	str	r0, [r7, #12]
 8006324:	60b9      	str	r1, [r7, #8]
 8006326:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006328:	f3ef 8311 	mrs	r3, BASEPRI
 800632c:	f04f 0120 	mov.w	r1, #32
 8006330:	f381 8811 	msr	BASEPRI, r1
 8006334:	633b      	str	r3, [r7, #48]	; 0x30
 8006336:	48b7      	ldr	r0, [pc, #732]	; (8006614 <_VPrintTarget+0x2f8>)
 8006338:	f7ff fc73 	bl	8005c22 <_PreparePacket>
 800633c:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 800633e:	4bb5      	ldr	r3, [pc, #724]	; (8006614 <_VPrintTarget+0x2f8>)
 8006340:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8006342:	2300      	movs	r3, #0
 8006344:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8006346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006348:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 800634a:	69fb      	ldr	r3, [r7, #28]
 800634c:	3301      	adds	r3, #1
 800634e:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	781b      	ldrb	r3, [r3, #0]
 8006358:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	3301      	adds	r3, #1
 8006360:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8006362:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006366:	2b00      	cmp	r3, #0
 8006368:	f000 8183 	beq.w	8006672 <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 800636c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006370:	2b25      	cmp	r3, #37	; 0x25
 8006372:	f040 8170 	bne.w	8006656 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8006376:	2300      	movs	r3, #0
 8006378:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 800637a:	2301      	movs	r3, #1
 800637c:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	781b      	ldrb	r3, [r3, #0]
 8006382:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8006386:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800638a:	3b23      	subs	r3, #35	; 0x23
 800638c:	2b0d      	cmp	r3, #13
 800638e:	d83f      	bhi.n	8006410 <_VPrintTarget+0xf4>
 8006390:	a201      	add	r2, pc, #4	; (adr r2, 8006398 <_VPrintTarget+0x7c>)
 8006392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006396:	bf00      	nop
 8006398:	08006401 	.word	0x08006401
 800639c:	08006411 	.word	0x08006411
 80063a0:	08006411 	.word	0x08006411
 80063a4:	08006411 	.word	0x08006411
 80063a8:	08006411 	.word	0x08006411
 80063ac:	08006411 	.word	0x08006411
 80063b0:	08006411 	.word	0x08006411
 80063b4:	08006411 	.word	0x08006411
 80063b8:	080063f1 	.word	0x080063f1
 80063bc:	08006411 	.word	0x08006411
 80063c0:	080063d1 	.word	0x080063d1
 80063c4:	08006411 	.word	0x08006411
 80063c8:	08006411 	.word	0x08006411
 80063cc:	080063e1 	.word	0x080063e1
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 80063d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063d2:	f043 0301 	orr.w	r3, r3, #1
 80063d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	3301      	adds	r3, #1
 80063dc:	60fb      	str	r3, [r7, #12]
 80063de:	e01a      	b.n	8006416 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 80063e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063e2:	f043 0302 	orr.w	r3, r3, #2
 80063e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	3301      	adds	r3, #1
 80063ec:	60fb      	str	r3, [r7, #12]
 80063ee:	e012      	b.n	8006416 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 80063f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063f2:	f043 0304 	orr.w	r3, r3, #4
 80063f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	3301      	adds	r3, #1
 80063fc:	60fb      	str	r3, [r7, #12]
 80063fe:	e00a      	b.n	8006416 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8006400:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006402:	f043 0308 	orr.w	r3, r3, #8
 8006406:	64bb      	str	r3, [r7, #72]	; 0x48
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	3301      	adds	r3, #1
 800640c:	60fb      	str	r3, [r7, #12]
 800640e:	e002      	b.n	8006416 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8006410:	2300      	movs	r3, #0
 8006412:	653b      	str	r3, [r7, #80]	; 0x50
 8006414:	bf00      	nop
        }
      } while (v);
 8006416:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006418:	2b00      	cmp	r3, #0
 800641a:	d1b0      	bne.n	800637e <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 800641c:	2300      	movs	r3, #0
 800641e:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	781b      	ldrb	r3, [r3, #0]
 8006424:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8006428:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800642c:	2b2f      	cmp	r3, #47	; 0x2f
 800642e:	d912      	bls.n	8006456 <_VPrintTarget+0x13a>
 8006430:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006434:	2b39      	cmp	r3, #57	; 0x39
 8006436:	d80e      	bhi.n	8006456 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	3301      	adds	r3, #1
 800643c:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 800643e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006440:	4613      	mov	r3, r2
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	4413      	add	r3, r2
 8006446:	005b      	lsls	r3, r3, #1
 8006448:	461a      	mov	r2, r3
 800644a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800644e:	4413      	add	r3, r2
 8006450:	3b30      	subs	r3, #48	; 0x30
 8006452:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8006454:	e7e4      	b.n	8006420 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8006456:	2300      	movs	r3, #0
 8006458:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8006462:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006466:	2b2e      	cmp	r3, #46	; 0x2e
 8006468:	d11d      	bne.n	80064a6 <_VPrintTarget+0x18a>
        sFormat++;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	3301      	adds	r3, #1
 800646e:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	781b      	ldrb	r3, [r3, #0]
 8006474:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8006478:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800647c:	2b2f      	cmp	r3, #47	; 0x2f
 800647e:	d912      	bls.n	80064a6 <_VPrintTarget+0x18a>
 8006480:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006484:	2b39      	cmp	r3, #57	; 0x39
 8006486:	d80e      	bhi.n	80064a6 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	3301      	adds	r3, #1
 800648c:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 800648e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006490:	4613      	mov	r3, r2
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	4413      	add	r3, r2
 8006496:	005b      	lsls	r3, r3, #1
 8006498:	461a      	mov	r2, r3
 800649a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800649e:	4413      	add	r3, r2
 80064a0:	3b30      	subs	r3, #48	; 0x30
 80064a2:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 80064a4:	e7e4      	b.n	8006470 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 80064ae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80064b2:	2b6c      	cmp	r3, #108	; 0x6c
 80064b4:	d003      	beq.n	80064be <_VPrintTarget+0x1a2>
 80064b6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80064ba:	2b68      	cmp	r3, #104	; 0x68
 80064bc:	d107      	bne.n	80064ce <_VPrintTarget+0x1b2>
          c = *sFormat;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	3301      	adds	r3, #1
 80064ca:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 80064cc:	e7ef      	b.n	80064ae <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 80064ce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80064d2:	2b25      	cmp	r3, #37	; 0x25
 80064d4:	f000 80b3 	beq.w	800663e <_VPrintTarget+0x322>
 80064d8:	2b25      	cmp	r3, #37	; 0x25
 80064da:	f2c0 80b7 	blt.w	800664c <_VPrintTarget+0x330>
 80064de:	2b78      	cmp	r3, #120	; 0x78
 80064e0:	f300 80b4 	bgt.w	800664c <_VPrintTarget+0x330>
 80064e4:	2b58      	cmp	r3, #88	; 0x58
 80064e6:	f2c0 80b1 	blt.w	800664c <_VPrintTarget+0x330>
 80064ea:	3b58      	subs	r3, #88	; 0x58
 80064ec:	2b20      	cmp	r3, #32
 80064ee:	f200 80ad 	bhi.w	800664c <_VPrintTarget+0x330>
 80064f2:	a201      	add	r2, pc, #4	; (adr r2, 80064f8 <_VPrintTarget+0x1dc>)
 80064f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064f8:	080065ef 	.word	0x080065ef
 80064fc:	0800664d 	.word	0x0800664d
 8006500:	0800664d 	.word	0x0800664d
 8006504:	0800664d 	.word	0x0800664d
 8006508:	0800664d 	.word	0x0800664d
 800650c:	0800664d 	.word	0x0800664d
 8006510:	0800664d 	.word	0x0800664d
 8006514:	0800664d 	.word	0x0800664d
 8006518:	0800664d 	.word	0x0800664d
 800651c:	0800664d 	.word	0x0800664d
 8006520:	0800664d 	.word	0x0800664d
 8006524:	0800657d 	.word	0x0800657d
 8006528:	080065a3 	.word	0x080065a3
 800652c:	0800664d 	.word	0x0800664d
 8006530:	0800664d 	.word	0x0800664d
 8006534:	0800664d 	.word	0x0800664d
 8006538:	0800664d 	.word	0x0800664d
 800653c:	0800664d 	.word	0x0800664d
 8006540:	0800664d 	.word	0x0800664d
 8006544:	0800664d 	.word	0x0800664d
 8006548:	0800664d 	.word	0x0800664d
 800654c:	0800664d 	.word	0x0800664d
 8006550:	0800664d 	.word	0x0800664d
 8006554:	0800664d 	.word	0x0800664d
 8006558:	08006619 	.word	0x08006619
 800655c:	0800664d 	.word	0x0800664d
 8006560:	0800664d 	.word	0x0800664d
 8006564:	0800664d 	.word	0x0800664d
 8006568:	0800664d 	.word	0x0800664d
 800656c:	080065c9 	.word	0x080065c9
 8006570:	0800664d 	.word	0x0800664d
 8006574:	0800664d 	.word	0x0800664d
 8006578:	080065ef 	.word	0x080065ef
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	1d19      	adds	r1, r3, #4
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	6011      	str	r1, [r2, #0]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 800658a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800658c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8006590:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8006594:	f107 0314 	add.w	r3, r7, #20
 8006598:	4611      	mov	r1, r2
 800659a:	4618      	mov	r0, r3
 800659c:	f7ff fd1c 	bl	8005fd8 <_StoreChar>
        break;
 80065a0:	e055      	b.n	800664e <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	1d19      	adds	r1, r3, #4
 80065a8:	687a      	ldr	r2, [r7, #4]
 80065aa:	6011      	str	r1, [r2, #0]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 80065b0:	f107 0014 	add.w	r0, r7, #20
 80065b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065b6:	9301      	str	r3, [sp, #4]
 80065b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065ba:	9300      	str	r3, [sp, #0]
 80065bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065be:	220a      	movs	r2, #10
 80065c0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80065c2:	f7ff fe1b 	bl	80061fc <_PrintInt>
        break;
 80065c6:	e042      	b.n	800664e <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	1d19      	adds	r1, r3, #4
 80065ce:	687a      	ldr	r2, [r7, #4]
 80065d0:	6011      	str	r1, [r2, #0]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 80065d6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80065d8:	f107 0014 	add.w	r0, r7, #20
 80065dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065de:	9301      	str	r3, [sp, #4]
 80065e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065e2:	9300      	str	r3, [sp, #0]
 80065e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065e6:	220a      	movs	r2, #10
 80065e8:	f7ff fd72 	bl	80060d0 <_PrintUnsigned>
        break;
 80065ec:	e02f      	b.n	800664e <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	1d19      	adds	r1, r3, #4
 80065f4:	687a      	ldr	r2, [r7, #4]
 80065f6:	6011      	str	r1, [r2, #0]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 80065fc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80065fe:	f107 0014 	add.w	r0, r7, #20
 8006602:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006604:	9301      	str	r3, [sp, #4]
 8006606:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006608:	9300      	str	r3, [sp, #0]
 800660a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800660c:	2210      	movs	r2, #16
 800660e:	f7ff fd5f 	bl	80060d0 <_PrintUnsigned>
        break;
 8006612:	e01c      	b.n	800664e <_VPrintTarget+0x332>
 8006614:	2001a6f8 	.word	0x2001a6f8
      case 'p':
        v = va_arg(*pParamList, int);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	1d19      	adds	r1, r3, #4
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	6011      	str	r1, [r2, #0]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8006626:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006628:	f107 0014 	add.w	r0, r7, #20
 800662c:	2300      	movs	r3, #0
 800662e:	9301      	str	r3, [sp, #4]
 8006630:	2308      	movs	r3, #8
 8006632:	9300      	str	r3, [sp, #0]
 8006634:	2308      	movs	r3, #8
 8006636:	2210      	movs	r2, #16
 8006638:	f7ff fd4a 	bl	80060d0 <_PrintUnsigned>
        break;
 800663c:	e007      	b.n	800664e <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 800663e:	f107 0314 	add.w	r3, r7, #20
 8006642:	2125      	movs	r1, #37	; 0x25
 8006644:	4618      	mov	r0, r3
 8006646:	f7ff fcc7 	bl	8005fd8 <_StoreChar>
        break;
 800664a:	e000      	b.n	800664e <_VPrintTarget+0x332>
      default:
        break;
 800664c:	bf00      	nop
      }
      sFormat++;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	3301      	adds	r3, #1
 8006652:	60fb      	str	r3, [r7, #12]
 8006654:	e007      	b.n	8006666 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8006656:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800665a:	f107 0314 	add.w	r3, r7, #20
 800665e:	4611      	mov	r1, r2
 8006660:	4618      	mov	r0, r3
 8006662:	f7ff fcb9 	bl	8005fd8 <_StoreChar>
    }
  } while (*sFormat);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	781b      	ldrb	r3, [r3, #0]
 800666a:	2b00      	cmp	r3, #0
 800666c:	f47f ae72 	bne.w	8006354 <_VPrintTarget+0x38>
 8006670:	e000      	b.n	8006674 <_VPrintTarget+0x358>
      break;
 8006672:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8006674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006676:	2b00      	cmp	r3, #0
 8006678:	d041      	beq.n	80066fe <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 800667a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800667c:	69fb      	ldr	r3, [r7, #28]
 800667e:	b2d2      	uxtb	r2, r2
 8006680:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8006682:	69bb      	ldr	r3, [r7, #24]
 8006684:	643b      	str	r3, [r7, #64]	; 0x40
 8006686:	6a3b      	ldr	r3, [r7, #32]
 8006688:	63fb      	str	r3, [r7, #60]	; 0x3c
 800668a:	e00b      	b.n	80066a4 <_VPrintTarget+0x388>
 800668c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800668e:	b2da      	uxtb	r2, r3
 8006690:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006692:	1c59      	adds	r1, r3, #1
 8006694:	6439      	str	r1, [r7, #64]	; 0x40
 8006696:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800669a:	b2d2      	uxtb	r2, r2
 800669c:	701a      	strb	r2, [r3, #0]
 800669e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066a0:	09db      	lsrs	r3, r3, #7
 80066a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066a6:	2b7f      	cmp	r3, #127	; 0x7f
 80066a8:	d8f0      	bhi.n	800668c <_VPrintTarget+0x370>
 80066aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066ac:	1c5a      	adds	r2, r3, #1
 80066ae:	643a      	str	r2, [r7, #64]	; 0x40
 80066b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80066b2:	b2d2      	uxtb	r2, r2
 80066b4:	701a      	strb	r2, [r3, #0]
 80066b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066b8:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 80066ba:	69bb      	ldr	r3, [r7, #24]
 80066bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80066be:	2300      	movs	r3, #0
 80066c0:	637b      	str	r3, [r7, #52]	; 0x34
 80066c2:	e00b      	b.n	80066dc <_VPrintTarget+0x3c0>
 80066c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066c6:	b2da      	uxtb	r2, r3
 80066c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ca:	1c59      	adds	r1, r3, #1
 80066cc:	63b9      	str	r1, [r7, #56]	; 0x38
 80066ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066d2:	b2d2      	uxtb	r2, r2
 80066d4:	701a      	strb	r2, [r3, #0]
 80066d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066d8:	09db      	lsrs	r3, r3, #7
 80066da:	637b      	str	r3, [r7, #52]	; 0x34
 80066dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066de:	2b7f      	cmp	r3, #127	; 0x7f
 80066e0:	d8f0      	bhi.n	80066c4 <_VPrintTarget+0x3a8>
 80066e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066e4:	1c5a      	adds	r2, r3, #1
 80066e6:	63ba      	str	r2, [r7, #56]	; 0x38
 80066e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80066ea:	b2d2      	uxtb	r2, r2
 80066ec:	701a      	strb	r2, [r3, #0]
 80066ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066f0:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80066f2:	69fb      	ldr	r3, [r7, #28]
 80066f4:	69b9      	ldr	r1, [r7, #24]
 80066f6:	221a      	movs	r2, #26
 80066f8:	4618      	mov	r0, r3
 80066fa:	f7ff fb85 	bl	8005e08 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 80066fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006700:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8006704:	bf00      	nop
 8006706:	3758      	adds	r7, #88	; 0x58
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}

0800670c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800670c:	b580      	push	{r7, lr}
 800670e:	b086      	sub	sp, #24
 8006710:	af02      	add	r7, sp, #8
 8006712:	60f8      	str	r0, [r7, #12]
 8006714:	60b9      	str	r1, [r7, #8]
 8006716:	607a      	str	r2, [r7, #4]
 8006718:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800671a:	2300      	movs	r3, #0
 800671c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006720:	4917      	ldr	r1, [pc, #92]	; (8006780 <SEGGER_SYSVIEW_Init+0x74>)
 8006722:	4818      	ldr	r0, [pc, #96]	; (8006784 <SEGGER_SYSVIEW_Init+0x78>)
 8006724:	f7ff f93c 	bl	80059a0 <SEGGER_RTT_AllocUpBuffer>
 8006728:	4603      	mov	r3, r0
 800672a:	b2da      	uxtb	r2, r3
 800672c:	4b16      	ldr	r3, [pc, #88]	; (8006788 <SEGGER_SYSVIEW_Init+0x7c>)
 800672e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8006730:	4b15      	ldr	r3, [pc, #84]	; (8006788 <SEGGER_SYSVIEW_Init+0x7c>)
 8006732:	785a      	ldrb	r2, [r3, #1]
 8006734:	4b14      	ldr	r3, [pc, #80]	; (8006788 <SEGGER_SYSVIEW_Init+0x7c>)
 8006736:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006738:	4b13      	ldr	r3, [pc, #76]	; (8006788 <SEGGER_SYSVIEW_Init+0x7c>)
 800673a:	7e1b      	ldrb	r3, [r3, #24]
 800673c:	4618      	mov	r0, r3
 800673e:	2300      	movs	r3, #0
 8006740:	9300      	str	r3, [sp, #0]
 8006742:	2308      	movs	r3, #8
 8006744:	4a11      	ldr	r2, [pc, #68]	; (800678c <SEGGER_SYSVIEW_Init+0x80>)
 8006746:	490f      	ldr	r1, [pc, #60]	; (8006784 <SEGGER_SYSVIEW_Init+0x78>)
 8006748:	f7ff f9ae 	bl	8005aa8 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800674c:	4b0e      	ldr	r3, [pc, #56]	; (8006788 <SEGGER_SYSVIEW_Init+0x7c>)
 800674e:	2200      	movs	r2, #0
 8006750:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006752:	4b0f      	ldr	r3, [pc, #60]	; (8006790 <SEGGER_SYSVIEW_Init+0x84>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a0c      	ldr	r2, [pc, #48]	; (8006788 <SEGGER_SYSVIEW_Init+0x7c>)
 8006758:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800675a:	4a0b      	ldr	r2, [pc, #44]	; (8006788 <SEGGER_SYSVIEW_Init+0x7c>)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8006760:	4a09      	ldr	r2, [pc, #36]	; (8006788 <SEGGER_SYSVIEW_Init+0x7c>)
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8006766:	4a08      	ldr	r2, [pc, #32]	; (8006788 <SEGGER_SYSVIEW_Init+0x7c>)
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800676c:	4a06      	ldr	r2, [pc, #24]	; (8006788 <SEGGER_SYSVIEW_Init+0x7c>)
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8006772:	4b05      	ldr	r3, [pc, #20]	; (8006788 <SEGGER_SYSVIEW_Init+0x7c>)
 8006774:	2200      	movs	r2, #0
 8006776:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8006778:	bf00      	nop
 800677a:	3710      	adds	r7, #16
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}
 8006780:	200196c0 	.word	0x200196c0
 8006784:	08008198 	.word	0x08008198
 8006788:	2001a6c8 	.word	0x2001a6c8
 800678c:	2001a6c0 	.word	0x2001a6c0
 8006790:	e0001004 	.word	0xe0001004

08006794 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8006794:	b480      	push	{r7}
 8006796:	b083      	sub	sp, #12
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800679c:	4a04      	ldr	r2, [pc, #16]	; (80067b0 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6113      	str	r3, [r2, #16]
}
 80067a2:	bf00      	nop
 80067a4:	370c      	adds	r7, #12
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr
 80067ae:	bf00      	nop
 80067b0:	2001a6c8 	.word	0x2001a6c8

080067b4 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b084      	sub	sp, #16
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80067bc:	f3ef 8311 	mrs	r3, BASEPRI
 80067c0:	f04f 0120 	mov.w	r1, #32
 80067c4:	f381 8811 	msr	BASEPRI, r1
 80067c8:	60fb      	str	r3, [r7, #12]
 80067ca:	4808      	ldr	r0, [pc, #32]	; (80067ec <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80067cc:	f7ff fa29 	bl	8005c22 <_PreparePacket>
 80067d0:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80067d2:	687a      	ldr	r2, [r7, #4]
 80067d4:	68b9      	ldr	r1, [r7, #8]
 80067d6:	68b8      	ldr	r0, [r7, #8]
 80067d8:	f7ff fb16 	bl	8005e08 <_SendPacket>
  RECORD_END();
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f383 8811 	msr	BASEPRI, r3
}
 80067e2:	bf00      	nop
 80067e4:	3710      	adds	r7, #16
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}
 80067ea:	bf00      	nop
 80067ec:	2001a6f8 	.word	0x2001a6f8

080067f0 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b088      	sub	sp, #32
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80067fa:	f3ef 8311 	mrs	r3, BASEPRI
 80067fe:	f04f 0120 	mov.w	r1, #32
 8006802:	f381 8811 	msr	BASEPRI, r1
 8006806:	617b      	str	r3, [r7, #20]
 8006808:	4816      	ldr	r0, [pc, #88]	; (8006864 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800680a:	f7ff fa0a 	bl	8005c22 <_PreparePacket>
 800680e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	61fb      	str	r3, [r7, #28]
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	61bb      	str	r3, [r7, #24]
 800681c:	e00b      	b.n	8006836 <SEGGER_SYSVIEW_RecordU32+0x46>
 800681e:	69bb      	ldr	r3, [r7, #24]
 8006820:	b2da      	uxtb	r2, r3
 8006822:	69fb      	ldr	r3, [r7, #28]
 8006824:	1c59      	adds	r1, r3, #1
 8006826:	61f9      	str	r1, [r7, #28]
 8006828:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800682c:	b2d2      	uxtb	r2, r2
 800682e:	701a      	strb	r2, [r3, #0]
 8006830:	69bb      	ldr	r3, [r7, #24]
 8006832:	09db      	lsrs	r3, r3, #7
 8006834:	61bb      	str	r3, [r7, #24]
 8006836:	69bb      	ldr	r3, [r7, #24]
 8006838:	2b7f      	cmp	r3, #127	; 0x7f
 800683a:	d8f0      	bhi.n	800681e <SEGGER_SYSVIEW_RecordU32+0x2e>
 800683c:	69fb      	ldr	r3, [r7, #28]
 800683e:	1c5a      	adds	r2, r3, #1
 8006840:	61fa      	str	r2, [r7, #28]
 8006842:	69ba      	ldr	r2, [r7, #24]
 8006844:	b2d2      	uxtb	r2, r2
 8006846:	701a      	strb	r2, [r3, #0]
 8006848:	69fb      	ldr	r3, [r7, #28]
 800684a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800684c:	687a      	ldr	r2, [r7, #4]
 800684e:	68f9      	ldr	r1, [r7, #12]
 8006850:	6938      	ldr	r0, [r7, #16]
 8006852:	f7ff fad9 	bl	8005e08 <_SendPacket>
  RECORD_END();
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	f383 8811 	msr	BASEPRI, r3
}
 800685c:	bf00      	nop
 800685e:	3720      	adds	r7, #32
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}
 8006864:	2001a6f8 	.word	0x2001a6f8

08006868 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006868:	b580      	push	{r7, lr}
 800686a:	b08c      	sub	sp, #48	; 0x30
 800686c:	af00      	add	r7, sp, #0
 800686e:	60f8      	str	r0, [r7, #12]
 8006870:	60b9      	str	r1, [r7, #8]
 8006872:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006874:	f3ef 8311 	mrs	r3, BASEPRI
 8006878:	f04f 0120 	mov.w	r1, #32
 800687c:	f381 8811 	msr	BASEPRI, r1
 8006880:	61fb      	str	r3, [r7, #28]
 8006882:	4825      	ldr	r0, [pc, #148]	; (8006918 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8006884:	f7ff f9cd 	bl	8005c22 <_PreparePacket>
 8006888:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800688a:	69bb      	ldr	r3, [r7, #24]
 800688c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	62bb      	str	r3, [r7, #40]	; 0x28
 8006896:	e00b      	b.n	80068b0 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800689a:	b2da      	uxtb	r2, r3
 800689c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800689e:	1c59      	adds	r1, r3, #1
 80068a0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80068a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068a6:	b2d2      	uxtb	r2, r2
 80068a8:	701a      	strb	r2, [r3, #0]
 80068aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ac:	09db      	lsrs	r3, r3, #7
 80068ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80068b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068b2:	2b7f      	cmp	r3, #127	; 0x7f
 80068b4:	d8f0      	bhi.n	8006898 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80068b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068b8:	1c5a      	adds	r2, r3, #1
 80068ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80068bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068be:	b2d2      	uxtb	r2, r2
 80068c0:	701a      	strb	r2, [r3, #0]
 80068c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068c4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	627b      	str	r3, [r7, #36]	; 0x24
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	623b      	str	r3, [r7, #32]
 80068ce:	e00b      	b.n	80068e8 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80068d0:	6a3b      	ldr	r3, [r7, #32]
 80068d2:	b2da      	uxtb	r2, r3
 80068d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d6:	1c59      	adds	r1, r3, #1
 80068d8:	6279      	str	r1, [r7, #36]	; 0x24
 80068da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068de:	b2d2      	uxtb	r2, r2
 80068e0:	701a      	strb	r2, [r3, #0]
 80068e2:	6a3b      	ldr	r3, [r7, #32]
 80068e4:	09db      	lsrs	r3, r3, #7
 80068e6:	623b      	str	r3, [r7, #32]
 80068e8:	6a3b      	ldr	r3, [r7, #32]
 80068ea:	2b7f      	cmp	r3, #127	; 0x7f
 80068ec:	d8f0      	bhi.n	80068d0 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80068ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f0:	1c5a      	adds	r2, r3, #1
 80068f2:	627a      	str	r2, [r7, #36]	; 0x24
 80068f4:	6a3a      	ldr	r2, [r7, #32]
 80068f6:	b2d2      	uxtb	r2, r2
 80068f8:	701a      	strb	r2, [r3, #0]
 80068fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fc:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80068fe:	68fa      	ldr	r2, [r7, #12]
 8006900:	6979      	ldr	r1, [r7, #20]
 8006902:	69b8      	ldr	r0, [r7, #24]
 8006904:	f7ff fa80 	bl	8005e08 <_SendPacket>
  RECORD_END();
 8006908:	69fb      	ldr	r3, [r7, #28]
 800690a:	f383 8811 	msr	BASEPRI, r3
}
 800690e:	bf00      	nop
 8006910:	3730      	adds	r7, #48	; 0x30
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}
 8006916:	bf00      	nop
 8006918:	2001a6f8 	.word	0x2001a6f8

0800691c <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 800691c:	b580      	push	{r7, lr}
 800691e:	b08e      	sub	sp, #56	; 0x38
 8006920:	af00      	add	r7, sp, #0
 8006922:	60f8      	str	r0, [r7, #12]
 8006924:	60b9      	str	r1, [r7, #8]
 8006926:	607a      	str	r2, [r7, #4]
 8006928:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800692a:	f3ef 8311 	mrs	r3, BASEPRI
 800692e:	f04f 0120 	mov.w	r1, #32
 8006932:	f381 8811 	msr	BASEPRI, r1
 8006936:	61fb      	str	r3, [r7, #28]
 8006938:	4832      	ldr	r0, [pc, #200]	; (8006a04 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800693a:	f7ff f972 	bl	8005c22 <_PreparePacket>
 800693e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006940:	69bb      	ldr	r3, [r7, #24]
 8006942:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	637b      	str	r3, [r7, #52]	; 0x34
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	633b      	str	r3, [r7, #48]	; 0x30
 800694c:	e00b      	b.n	8006966 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800694e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006950:	b2da      	uxtb	r2, r3
 8006952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006954:	1c59      	adds	r1, r3, #1
 8006956:	6379      	str	r1, [r7, #52]	; 0x34
 8006958:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800695c:	b2d2      	uxtb	r2, r2
 800695e:	701a      	strb	r2, [r3, #0]
 8006960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006962:	09db      	lsrs	r3, r3, #7
 8006964:	633b      	str	r3, [r7, #48]	; 0x30
 8006966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006968:	2b7f      	cmp	r3, #127	; 0x7f
 800696a:	d8f0      	bhi.n	800694e <SEGGER_SYSVIEW_RecordU32x3+0x32>
 800696c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800696e:	1c5a      	adds	r2, r3, #1
 8006970:	637a      	str	r2, [r7, #52]	; 0x34
 8006972:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006974:	b2d2      	uxtb	r2, r2
 8006976:	701a      	strb	r2, [r3, #0]
 8006978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800697a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	62bb      	str	r3, [r7, #40]	; 0x28
 8006984:	e00b      	b.n	800699e <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8006986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006988:	b2da      	uxtb	r2, r3
 800698a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800698c:	1c59      	adds	r1, r3, #1
 800698e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006990:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006994:	b2d2      	uxtb	r2, r2
 8006996:	701a      	strb	r2, [r3, #0]
 8006998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800699a:	09db      	lsrs	r3, r3, #7
 800699c:	62bb      	str	r3, [r7, #40]	; 0x28
 800699e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069a0:	2b7f      	cmp	r3, #127	; 0x7f
 80069a2:	d8f0      	bhi.n	8006986 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 80069a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069a6:	1c5a      	adds	r2, r3, #1
 80069a8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80069aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069ac:	b2d2      	uxtb	r2, r2
 80069ae:	701a      	strb	r2, [r3, #0]
 80069b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069b2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	627b      	str	r3, [r7, #36]	; 0x24
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	623b      	str	r3, [r7, #32]
 80069bc:	e00b      	b.n	80069d6 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80069be:	6a3b      	ldr	r3, [r7, #32]
 80069c0:	b2da      	uxtb	r2, r3
 80069c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c4:	1c59      	adds	r1, r3, #1
 80069c6:	6279      	str	r1, [r7, #36]	; 0x24
 80069c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069cc:	b2d2      	uxtb	r2, r2
 80069ce:	701a      	strb	r2, [r3, #0]
 80069d0:	6a3b      	ldr	r3, [r7, #32]
 80069d2:	09db      	lsrs	r3, r3, #7
 80069d4:	623b      	str	r3, [r7, #32]
 80069d6:	6a3b      	ldr	r3, [r7, #32]
 80069d8:	2b7f      	cmp	r3, #127	; 0x7f
 80069da:	d8f0      	bhi.n	80069be <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 80069dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069de:	1c5a      	adds	r2, r3, #1
 80069e0:	627a      	str	r2, [r7, #36]	; 0x24
 80069e2:	6a3a      	ldr	r2, [r7, #32]
 80069e4:	b2d2      	uxtb	r2, r2
 80069e6:	701a      	strb	r2, [r3, #0]
 80069e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ea:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80069ec:	68fa      	ldr	r2, [r7, #12]
 80069ee:	6979      	ldr	r1, [r7, #20]
 80069f0:	69b8      	ldr	r0, [r7, #24]
 80069f2:	f7ff fa09 	bl	8005e08 <_SendPacket>
  RECORD_END();
 80069f6:	69fb      	ldr	r3, [r7, #28]
 80069f8:	f383 8811 	msr	BASEPRI, r3
}
 80069fc:	bf00      	nop
 80069fe:	3738      	adds	r7, #56	; 0x38
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}
 8006a04:	2001a6f8 	.word	0x2001a6f8

08006a08 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b090      	sub	sp, #64	; 0x40
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	60f8      	str	r0, [r7, #12]
 8006a10:	60b9      	str	r1, [r7, #8]
 8006a12:	607a      	str	r2, [r7, #4]
 8006a14:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006a16:	f3ef 8311 	mrs	r3, BASEPRI
 8006a1a:	f04f 0120 	mov.w	r1, #32
 8006a1e:	f381 8811 	msr	BASEPRI, r1
 8006a22:	61fb      	str	r3, [r7, #28]
 8006a24:	4840      	ldr	r0, [pc, #256]	; (8006b28 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8006a26:	f7ff f8fc 	bl	8005c22 <_PreparePacket>
 8006a2a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006a2c:	69bb      	ldr	r3, [r7, #24]
 8006a2e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a38:	e00b      	b.n	8006a52 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8006a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a3c:	b2da      	uxtb	r2, r3
 8006a3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a40:	1c59      	adds	r1, r3, #1
 8006a42:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006a44:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a48:	b2d2      	uxtb	r2, r2
 8006a4a:	701a      	strb	r2, [r3, #0]
 8006a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a4e:	09db      	lsrs	r3, r3, #7
 8006a50:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a54:	2b7f      	cmp	r3, #127	; 0x7f
 8006a56:	d8f0      	bhi.n	8006a3a <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006a58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a5a:	1c5a      	adds	r2, r3, #1
 8006a5c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006a5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a60:	b2d2      	uxtb	r2, r2
 8006a62:	701a      	strb	r2, [r3, #0]
 8006a64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a66:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	637b      	str	r3, [r7, #52]	; 0x34
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	633b      	str	r3, [r7, #48]	; 0x30
 8006a70:	e00b      	b.n	8006a8a <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8006a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a74:	b2da      	uxtb	r2, r3
 8006a76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a78:	1c59      	adds	r1, r3, #1
 8006a7a:	6379      	str	r1, [r7, #52]	; 0x34
 8006a7c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a80:	b2d2      	uxtb	r2, r2
 8006a82:	701a      	strb	r2, [r3, #0]
 8006a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a86:	09db      	lsrs	r3, r3, #7
 8006a88:	633b      	str	r3, [r7, #48]	; 0x30
 8006a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a8c:	2b7f      	cmp	r3, #127	; 0x7f
 8006a8e:	d8f0      	bhi.n	8006a72 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8006a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a92:	1c5a      	adds	r2, r3, #1
 8006a94:	637a      	str	r2, [r7, #52]	; 0x34
 8006a96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a98:	b2d2      	uxtb	r2, r2
 8006a9a:	701a      	strb	r2, [r3, #0]
 8006a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a9e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	62bb      	str	r3, [r7, #40]	; 0x28
 8006aa8:	e00b      	b.n	8006ac2 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8006aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aac:	b2da      	uxtb	r2, r3
 8006aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ab0:	1c59      	adds	r1, r3, #1
 8006ab2:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006ab4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ab8:	b2d2      	uxtb	r2, r2
 8006aba:	701a      	strb	r2, [r3, #0]
 8006abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006abe:	09db      	lsrs	r3, r3, #7
 8006ac0:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac4:	2b7f      	cmp	r3, #127	; 0x7f
 8006ac6:	d8f0      	bhi.n	8006aaa <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8006ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aca:	1c5a      	adds	r2, r3, #1
 8006acc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ace:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ad0:	b2d2      	uxtb	r2, r2
 8006ad2:	701a      	strb	r2, [r3, #0]
 8006ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ad6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	627b      	str	r3, [r7, #36]	; 0x24
 8006adc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ade:	623b      	str	r3, [r7, #32]
 8006ae0:	e00b      	b.n	8006afa <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8006ae2:	6a3b      	ldr	r3, [r7, #32]
 8006ae4:	b2da      	uxtb	r2, r3
 8006ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae8:	1c59      	adds	r1, r3, #1
 8006aea:	6279      	str	r1, [r7, #36]	; 0x24
 8006aec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006af0:	b2d2      	uxtb	r2, r2
 8006af2:	701a      	strb	r2, [r3, #0]
 8006af4:	6a3b      	ldr	r3, [r7, #32]
 8006af6:	09db      	lsrs	r3, r3, #7
 8006af8:	623b      	str	r3, [r7, #32]
 8006afa:	6a3b      	ldr	r3, [r7, #32]
 8006afc:	2b7f      	cmp	r3, #127	; 0x7f
 8006afe:	d8f0      	bhi.n	8006ae2 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8006b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b02:	1c5a      	adds	r2, r3, #1
 8006b04:	627a      	str	r2, [r7, #36]	; 0x24
 8006b06:	6a3a      	ldr	r2, [r7, #32]
 8006b08:	b2d2      	uxtb	r2, r2
 8006b0a:	701a      	strb	r2, [r3, #0]
 8006b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b0e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006b10:	68fa      	ldr	r2, [r7, #12]
 8006b12:	6979      	ldr	r1, [r7, #20]
 8006b14:	69b8      	ldr	r0, [r7, #24]
 8006b16:	f7ff f977 	bl	8005e08 <_SendPacket>
  RECORD_END();
 8006b1a:	69fb      	ldr	r3, [r7, #28]
 8006b1c:	f383 8811 	msr	BASEPRI, r3
}
 8006b20:	bf00      	nop
 8006b22:	3740      	adds	r7, #64	; 0x40
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}
 8006b28:	2001a6f8 	.word	0x2001a6f8

08006b2c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b08c      	sub	sp, #48	; 0x30
 8006b30:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8006b32:	4b59      	ldr	r3, [pc, #356]	; (8006c98 <SEGGER_SYSVIEW_Start+0x16c>)
 8006b34:	2201      	movs	r2, #1
 8006b36:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006b38:	f3ef 8311 	mrs	r3, BASEPRI
 8006b3c:	f04f 0120 	mov.w	r1, #32
 8006b40:	f381 8811 	msr	BASEPRI, r1
 8006b44:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8006b46:	4b54      	ldr	r3, [pc, #336]	; (8006c98 <SEGGER_SYSVIEW_Start+0x16c>)
 8006b48:	785b      	ldrb	r3, [r3, #1]
 8006b4a:	220a      	movs	r2, #10
 8006b4c:	4953      	ldr	r1, [pc, #332]	; (8006c9c <SEGGER_SYSVIEW_Start+0x170>)
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f7f9 fb3e 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8006b5a:	f7fe fbf5 	bl	8005348 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006b5e:	200a      	movs	r0, #10
 8006b60:	f7ff fe28 	bl	80067b4 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006b64:	f3ef 8311 	mrs	r3, BASEPRI
 8006b68:	f04f 0120 	mov.w	r1, #32
 8006b6c:	f381 8811 	msr	BASEPRI, r1
 8006b70:	60bb      	str	r3, [r7, #8]
 8006b72:	484b      	ldr	r0, [pc, #300]	; (8006ca0 <SEGGER_SYSVIEW_Start+0x174>)
 8006b74:	f7ff f855 	bl	8005c22 <_PreparePacket>
 8006b78:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b82:	4b45      	ldr	r3, [pc, #276]	; (8006c98 <SEGGER_SYSVIEW_Start+0x16c>)
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b88:	e00b      	b.n	8006ba2 <SEGGER_SYSVIEW_Start+0x76>
 8006b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b8c:	b2da      	uxtb	r2, r3
 8006b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b90:	1c59      	adds	r1, r3, #1
 8006b92:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006b94:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b98:	b2d2      	uxtb	r2, r2
 8006b9a:	701a      	strb	r2, [r3, #0]
 8006b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b9e:	09db      	lsrs	r3, r3, #7
 8006ba0:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba4:	2b7f      	cmp	r3, #127	; 0x7f
 8006ba6:	d8f0      	bhi.n	8006b8a <SEGGER_SYSVIEW_Start+0x5e>
 8006ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006baa:	1c5a      	adds	r2, r3, #1
 8006bac:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006bae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006bb0:	b2d2      	uxtb	r2, r2
 8006bb2:	701a      	strb	r2, [r3, #0]
 8006bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bb6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	627b      	str	r3, [r7, #36]	; 0x24
 8006bbc:	4b36      	ldr	r3, [pc, #216]	; (8006c98 <SEGGER_SYSVIEW_Start+0x16c>)
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	623b      	str	r3, [r7, #32]
 8006bc2:	e00b      	b.n	8006bdc <SEGGER_SYSVIEW_Start+0xb0>
 8006bc4:	6a3b      	ldr	r3, [r7, #32]
 8006bc6:	b2da      	uxtb	r2, r3
 8006bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bca:	1c59      	adds	r1, r3, #1
 8006bcc:	6279      	str	r1, [r7, #36]	; 0x24
 8006bce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006bd2:	b2d2      	uxtb	r2, r2
 8006bd4:	701a      	strb	r2, [r3, #0]
 8006bd6:	6a3b      	ldr	r3, [r7, #32]
 8006bd8:	09db      	lsrs	r3, r3, #7
 8006bda:	623b      	str	r3, [r7, #32]
 8006bdc:	6a3b      	ldr	r3, [r7, #32]
 8006bde:	2b7f      	cmp	r3, #127	; 0x7f
 8006be0:	d8f0      	bhi.n	8006bc4 <SEGGER_SYSVIEW_Start+0x98>
 8006be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be4:	1c5a      	adds	r2, r3, #1
 8006be6:	627a      	str	r2, [r7, #36]	; 0x24
 8006be8:	6a3a      	ldr	r2, [r7, #32]
 8006bea:	b2d2      	uxtb	r2, r2
 8006bec:	701a      	strb	r2, [r3, #0]
 8006bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	61fb      	str	r3, [r7, #28]
 8006bf6:	4b28      	ldr	r3, [pc, #160]	; (8006c98 <SEGGER_SYSVIEW_Start+0x16c>)
 8006bf8:	691b      	ldr	r3, [r3, #16]
 8006bfa:	61bb      	str	r3, [r7, #24]
 8006bfc:	e00b      	b.n	8006c16 <SEGGER_SYSVIEW_Start+0xea>
 8006bfe:	69bb      	ldr	r3, [r7, #24]
 8006c00:	b2da      	uxtb	r2, r3
 8006c02:	69fb      	ldr	r3, [r7, #28]
 8006c04:	1c59      	adds	r1, r3, #1
 8006c06:	61f9      	str	r1, [r7, #28]
 8006c08:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c0c:	b2d2      	uxtb	r2, r2
 8006c0e:	701a      	strb	r2, [r3, #0]
 8006c10:	69bb      	ldr	r3, [r7, #24]
 8006c12:	09db      	lsrs	r3, r3, #7
 8006c14:	61bb      	str	r3, [r7, #24]
 8006c16:	69bb      	ldr	r3, [r7, #24]
 8006c18:	2b7f      	cmp	r3, #127	; 0x7f
 8006c1a:	d8f0      	bhi.n	8006bfe <SEGGER_SYSVIEW_Start+0xd2>
 8006c1c:	69fb      	ldr	r3, [r7, #28]
 8006c1e:	1c5a      	adds	r2, r3, #1
 8006c20:	61fa      	str	r2, [r7, #28]
 8006c22:	69ba      	ldr	r2, [r7, #24]
 8006c24:	b2d2      	uxtb	r2, r2
 8006c26:	701a      	strb	r2, [r3, #0]
 8006c28:	69fb      	ldr	r3, [r7, #28]
 8006c2a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	617b      	str	r3, [r7, #20]
 8006c30:	2300      	movs	r3, #0
 8006c32:	613b      	str	r3, [r7, #16]
 8006c34:	e00b      	b.n	8006c4e <SEGGER_SYSVIEW_Start+0x122>
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	b2da      	uxtb	r2, r3
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	1c59      	adds	r1, r3, #1
 8006c3e:	6179      	str	r1, [r7, #20]
 8006c40:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c44:	b2d2      	uxtb	r2, r2
 8006c46:	701a      	strb	r2, [r3, #0]
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	09db      	lsrs	r3, r3, #7
 8006c4c:	613b      	str	r3, [r7, #16]
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	2b7f      	cmp	r3, #127	; 0x7f
 8006c52:	d8f0      	bhi.n	8006c36 <SEGGER_SYSVIEW_Start+0x10a>
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	1c5a      	adds	r2, r3, #1
 8006c58:	617a      	str	r2, [r7, #20]
 8006c5a:	693a      	ldr	r2, [r7, #16]
 8006c5c:	b2d2      	uxtb	r2, r2
 8006c5e:	701a      	strb	r2, [r3, #0]
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006c64:	2218      	movs	r2, #24
 8006c66:	6839      	ldr	r1, [r7, #0]
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f7ff f8cd 	bl	8005e08 <_SendPacket>
      RECORD_END();
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006c74:	4b08      	ldr	r3, [pc, #32]	; (8006c98 <SEGGER_SYSVIEW_Start+0x16c>)
 8006c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d002      	beq.n	8006c82 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006c7c:	4b06      	ldr	r3, [pc, #24]	; (8006c98 <SEGGER_SYSVIEW_Start+0x16c>)
 8006c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c80:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006c82:	f000 f9eb 	bl	800705c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006c86:	f000 f9b1 	bl	8006fec <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006c8a:	f000 fc83 	bl	8007594 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006c8e:	bf00      	nop
 8006c90:	3730      	adds	r7, #48	; 0x30
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}
 8006c96:	bf00      	nop
 8006c98:	2001a6c8 	.word	0x2001a6c8
 8006c9c:	080081c4 	.word	0x080081c4
 8006ca0:	2001a6f8 	.word	0x2001a6f8

08006ca4 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b082      	sub	sp, #8
 8006ca8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006caa:	f3ef 8311 	mrs	r3, BASEPRI
 8006cae:	f04f 0120 	mov.w	r1, #32
 8006cb2:	f381 8811 	msr	BASEPRI, r1
 8006cb6:	607b      	str	r3, [r7, #4]
 8006cb8:	480b      	ldr	r0, [pc, #44]	; (8006ce8 <SEGGER_SYSVIEW_Stop+0x44>)
 8006cba:	f7fe ffb2 	bl	8005c22 <_PreparePacket>
 8006cbe:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006cc0:	4b0a      	ldr	r3, [pc, #40]	; (8006cec <SEGGER_SYSVIEW_Stop+0x48>)
 8006cc2:	781b      	ldrb	r3, [r3, #0]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d007      	beq.n	8006cd8 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006cc8:	220b      	movs	r2, #11
 8006cca:	6839      	ldr	r1, [r7, #0]
 8006ccc:	6838      	ldr	r0, [r7, #0]
 8006cce:	f7ff f89b 	bl	8005e08 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8006cd2:	4b06      	ldr	r3, [pc, #24]	; (8006cec <SEGGER_SYSVIEW_Stop+0x48>)
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f383 8811 	msr	BASEPRI, r3
}
 8006cde:	bf00      	nop
 8006ce0:	3708      	adds	r7, #8
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}
 8006ce6:	bf00      	nop
 8006ce8:	2001a6f8 	.word	0x2001a6f8
 8006cec:	2001a6c8 	.word	0x2001a6c8

08006cf0 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b08c      	sub	sp, #48	; 0x30
 8006cf4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006cf6:	f3ef 8311 	mrs	r3, BASEPRI
 8006cfa:	f04f 0120 	mov.w	r1, #32
 8006cfe:	f381 8811 	msr	BASEPRI, r1
 8006d02:	60fb      	str	r3, [r7, #12]
 8006d04:	4845      	ldr	r0, [pc, #276]	; (8006e1c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8006d06:	f7fe ff8c 	bl	8005c22 <_PreparePacket>
 8006d0a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d14:	4b42      	ldr	r3, [pc, #264]	; (8006e20 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d1a:	e00b      	b.n	8006d34 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d1e:	b2da      	uxtb	r2, r3
 8006d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d22:	1c59      	adds	r1, r3, #1
 8006d24:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006d26:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d2a:	b2d2      	uxtb	r2, r2
 8006d2c:	701a      	strb	r2, [r3, #0]
 8006d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d30:	09db      	lsrs	r3, r3, #7
 8006d32:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d36:	2b7f      	cmp	r3, #127	; 0x7f
 8006d38:	d8f0      	bhi.n	8006d1c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8006d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d3c:	1c5a      	adds	r2, r3, #1
 8006d3e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006d40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d42:	b2d2      	uxtb	r2, r2
 8006d44:	701a      	strb	r2, [r3, #0]
 8006d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d48:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	627b      	str	r3, [r7, #36]	; 0x24
 8006d4e:	4b34      	ldr	r3, [pc, #208]	; (8006e20 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006d50:	689b      	ldr	r3, [r3, #8]
 8006d52:	623b      	str	r3, [r7, #32]
 8006d54:	e00b      	b.n	8006d6e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8006d56:	6a3b      	ldr	r3, [r7, #32]
 8006d58:	b2da      	uxtb	r2, r3
 8006d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d5c:	1c59      	adds	r1, r3, #1
 8006d5e:	6279      	str	r1, [r7, #36]	; 0x24
 8006d60:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d64:	b2d2      	uxtb	r2, r2
 8006d66:	701a      	strb	r2, [r3, #0]
 8006d68:	6a3b      	ldr	r3, [r7, #32]
 8006d6a:	09db      	lsrs	r3, r3, #7
 8006d6c:	623b      	str	r3, [r7, #32]
 8006d6e:	6a3b      	ldr	r3, [r7, #32]
 8006d70:	2b7f      	cmp	r3, #127	; 0x7f
 8006d72:	d8f0      	bhi.n	8006d56 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d76:	1c5a      	adds	r2, r3, #1
 8006d78:	627a      	str	r2, [r7, #36]	; 0x24
 8006d7a:	6a3a      	ldr	r2, [r7, #32]
 8006d7c:	b2d2      	uxtb	r2, r2
 8006d7e:	701a      	strb	r2, [r3, #0]
 8006d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d82:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	61fb      	str	r3, [r7, #28]
 8006d88:	4b25      	ldr	r3, [pc, #148]	; (8006e20 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006d8a:	691b      	ldr	r3, [r3, #16]
 8006d8c:	61bb      	str	r3, [r7, #24]
 8006d8e:	e00b      	b.n	8006da8 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006d90:	69bb      	ldr	r3, [r7, #24]
 8006d92:	b2da      	uxtb	r2, r3
 8006d94:	69fb      	ldr	r3, [r7, #28]
 8006d96:	1c59      	adds	r1, r3, #1
 8006d98:	61f9      	str	r1, [r7, #28]
 8006d9a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d9e:	b2d2      	uxtb	r2, r2
 8006da0:	701a      	strb	r2, [r3, #0]
 8006da2:	69bb      	ldr	r3, [r7, #24]
 8006da4:	09db      	lsrs	r3, r3, #7
 8006da6:	61bb      	str	r3, [r7, #24]
 8006da8:	69bb      	ldr	r3, [r7, #24]
 8006daa:	2b7f      	cmp	r3, #127	; 0x7f
 8006dac:	d8f0      	bhi.n	8006d90 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006dae:	69fb      	ldr	r3, [r7, #28]
 8006db0:	1c5a      	adds	r2, r3, #1
 8006db2:	61fa      	str	r2, [r7, #28]
 8006db4:	69ba      	ldr	r2, [r7, #24]
 8006db6:	b2d2      	uxtb	r2, r2
 8006db8:	701a      	strb	r2, [r3, #0]
 8006dba:	69fb      	ldr	r3, [r7, #28]
 8006dbc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	617b      	str	r3, [r7, #20]
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	613b      	str	r3, [r7, #16]
 8006dc6:	e00b      	b.n	8006de0 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	b2da      	uxtb	r2, r3
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	1c59      	adds	r1, r3, #1
 8006dd0:	6179      	str	r1, [r7, #20]
 8006dd2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006dd6:	b2d2      	uxtb	r2, r2
 8006dd8:	701a      	strb	r2, [r3, #0]
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	09db      	lsrs	r3, r3, #7
 8006dde:	613b      	str	r3, [r7, #16]
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	2b7f      	cmp	r3, #127	; 0x7f
 8006de4:	d8f0      	bhi.n	8006dc8 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	1c5a      	adds	r2, r3, #1
 8006dea:	617a      	str	r2, [r7, #20]
 8006dec:	693a      	ldr	r2, [r7, #16]
 8006dee:	b2d2      	uxtb	r2, r2
 8006df0:	701a      	strb	r2, [r3, #0]
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006df6:	2218      	movs	r2, #24
 8006df8:	6879      	ldr	r1, [r7, #4]
 8006dfa:	68b8      	ldr	r0, [r7, #8]
 8006dfc:	f7ff f804 	bl	8005e08 <_SendPacket>
  RECORD_END();
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006e06:	4b06      	ldr	r3, [pc, #24]	; (8006e20 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d002      	beq.n	8006e14 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006e0e:	4b04      	ldr	r3, [pc, #16]	; (8006e20 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e12:	4798      	blx	r3
  }
}
 8006e14:	bf00      	nop
 8006e16:	3730      	adds	r7, #48	; 0x30
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}
 8006e1c:	2001a6f8 	.word	0x2001a6f8
 8006e20:	2001a6c8 	.word	0x2001a6c8

08006e24 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b092      	sub	sp, #72	; 0x48
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006e2c:	f3ef 8311 	mrs	r3, BASEPRI
 8006e30:	f04f 0120 	mov.w	r1, #32
 8006e34:	f381 8811 	msr	BASEPRI, r1
 8006e38:	617b      	str	r3, [r7, #20]
 8006e3a:	486a      	ldr	r0, [pc, #424]	; (8006fe4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006e3c:	f7fe fef1 	bl	8005c22 <_PreparePacket>
 8006e40:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	647b      	str	r3, [r7, #68]	; 0x44
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681a      	ldr	r2, [r3, #0]
 8006e4e:	4b66      	ldr	r3, [pc, #408]	; (8006fe8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006e50:	691b      	ldr	r3, [r3, #16]
 8006e52:	1ad3      	subs	r3, r2, r3
 8006e54:	643b      	str	r3, [r7, #64]	; 0x40
 8006e56:	e00b      	b.n	8006e70 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006e58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e5a:	b2da      	uxtb	r2, r3
 8006e5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e5e:	1c59      	adds	r1, r3, #1
 8006e60:	6479      	str	r1, [r7, #68]	; 0x44
 8006e62:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e66:	b2d2      	uxtb	r2, r2
 8006e68:	701a      	strb	r2, [r3, #0]
 8006e6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e6c:	09db      	lsrs	r3, r3, #7
 8006e6e:	643b      	str	r3, [r7, #64]	; 0x40
 8006e70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e72:	2b7f      	cmp	r3, #127	; 0x7f
 8006e74:	d8f0      	bhi.n	8006e58 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8006e76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e78:	1c5a      	adds	r2, r3, #1
 8006e7a:	647a      	str	r2, [r7, #68]	; 0x44
 8006e7c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006e7e:	b2d2      	uxtb	r2, r2
 8006e80:	701a      	strb	r2, [r3, #0]
 8006e82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e84:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	689b      	ldr	r3, [r3, #8]
 8006e8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e90:	e00b      	b.n	8006eaa <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e94:	b2da      	uxtb	r2, r3
 8006e96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e98:	1c59      	adds	r1, r3, #1
 8006e9a:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006e9c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ea0:	b2d2      	uxtb	r2, r2
 8006ea2:	701a      	strb	r2, [r3, #0]
 8006ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ea6:	09db      	lsrs	r3, r3, #7
 8006ea8:	63bb      	str	r3, [r7, #56]	; 0x38
 8006eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eac:	2b7f      	cmp	r3, #127	; 0x7f
 8006eae:	d8f0      	bhi.n	8006e92 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006eb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006eb2:	1c5a      	adds	r2, r3, #1
 8006eb4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006eb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006eb8:	b2d2      	uxtb	r2, r2
 8006eba:	701a      	strb	r2, [r3, #0]
 8006ebc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ebe:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	2220      	movs	r2, #32
 8006ec6:	4619      	mov	r1, r3
 8006ec8:	68f8      	ldr	r0, [r7, #12]
 8006eca:	f7fe fe5d 	bl	8005b88 <_EncodeStr>
 8006ece:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006ed0:	2209      	movs	r2, #9
 8006ed2:	68f9      	ldr	r1, [r7, #12]
 8006ed4:	6938      	ldr	r0, [r7, #16]
 8006ed6:	f7fe ff97 	bl	8005e08 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	637b      	str	r3, [r7, #52]	; 0x34
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681a      	ldr	r2, [r3, #0]
 8006ee6:	4b40      	ldr	r3, [pc, #256]	; (8006fe8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006ee8:	691b      	ldr	r3, [r3, #16]
 8006eea:	1ad3      	subs	r3, r2, r3
 8006eec:	633b      	str	r3, [r7, #48]	; 0x30
 8006eee:	e00b      	b.n	8006f08 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef2:	b2da      	uxtb	r2, r3
 8006ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ef6:	1c59      	adds	r1, r3, #1
 8006ef8:	6379      	str	r1, [r7, #52]	; 0x34
 8006efa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006efe:	b2d2      	uxtb	r2, r2
 8006f00:	701a      	strb	r2, [r3, #0]
 8006f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f04:	09db      	lsrs	r3, r3, #7
 8006f06:	633b      	str	r3, [r7, #48]	; 0x30
 8006f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f0a:	2b7f      	cmp	r3, #127	; 0x7f
 8006f0c:	d8f0      	bhi.n	8006ef0 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f10:	1c5a      	adds	r2, r3, #1
 8006f12:	637a      	str	r2, [r7, #52]	; 0x34
 8006f14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f16:	b2d2      	uxtb	r2, r2
 8006f18:	701a      	strb	r2, [r3, #0]
 8006f1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f1c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	68db      	ldr	r3, [r3, #12]
 8006f26:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f28:	e00b      	b.n	8006f42 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f2c:	b2da      	uxtb	r2, r3
 8006f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f30:	1c59      	adds	r1, r3, #1
 8006f32:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006f34:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f38:	b2d2      	uxtb	r2, r2
 8006f3a:	701a      	strb	r2, [r3, #0]
 8006f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f3e:	09db      	lsrs	r3, r3, #7
 8006f40:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f44:	2b7f      	cmp	r3, #127	; 0x7f
 8006f46:	d8f0      	bhi.n	8006f2a <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f4a:	1c5a      	adds	r2, r3, #1
 8006f4c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f50:	b2d2      	uxtb	r2, r2
 8006f52:	701a      	strb	r2, [r3, #0]
 8006f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f56:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	627b      	str	r3, [r7, #36]	; 0x24
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	691b      	ldr	r3, [r3, #16]
 8006f60:	623b      	str	r3, [r7, #32]
 8006f62:	e00b      	b.n	8006f7c <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006f64:	6a3b      	ldr	r3, [r7, #32]
 8006f66:	b2da      	uxtb	r2, r3
 8006f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f6a:	1c59      	adds	r1, r3, #1
 8006f6c:	6279      	str	r1, [r7, #36]	; 0x24
 8006f6e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f72:	b2d2      	uxtb	r2, r2
 8006f74:	701a      	strb	r2, [r3, #0]
 8006f76:	6a3b      	ldr	r3, [r7, #32]
 8006f78:	09db      	lsrs	r3, r3, #7
 8006f7a:	623b      	str	r3, [r7, #32]
 8006f7c:	6a3b      	ldr	r3, [r7, #32]
 8006f7e:	2b7f      	cmp	r3, #127	; 0x7f
 8006f80:	d8f0      	bhi.n	8006f64 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f84:	1c5a      	adds	r2, r3, #1
 8006f86:	627a      	str	r2, [r7, #36]	; 0x24
 8006f88:	6a3a      	ldr	r2, [r7, #32]
 8006f8a:	b2d2      	uxtb	r2, r2
 8006f8c:	701a      	strb	r2, [r3, #0]
 8006f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f90:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	61fb      	str	r3, [r7, #28]
 8006f96:	2300      	movs	r3, #0
 8006f98:	61bb      	str	r3, [r7, #24]
 8006f9a:	e00b      	b.n	8006fb4 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006f9c:	69bb      	ldr	r3, [r7, #24]
 8006f9e:	b2da      	uxtb	r2, r3
 8006fa0:	69fb      	ldr	r3, [r7, #28]
 8006fa2:	1c59      	adds	r1, r3, #1
 8006fa4:	61f9      	str	r1, [r7, #28]
 8006fa6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006faa:	b2d2      	uxtb	r2, r2
 8006fac:	701a      	strb	r2, [r3, #0]
 8006fae:	69bb      	ldr	r3, [r7, #24]
 8006fb0:	09db      	lsrs	r3, r3, #7
 8006fb2:	61bb      	str	r3, [r7, #24]
 8006fb4:	69bb      	ldr	r3, [r7, #24]
 8006fb6:	2b7f      	cmp	r3, #127	; 0x7f
 8006fb8:	d8f0      	bhi.n	8006f9c <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8006fba:	69fb      	ldr	r3, [r7, #28]
 8006fbc:	1c5a      	adds	r2, r3, #1
 8006fbe:	61fa      	str	r2, [r7, #28]
 8006fc0:	69ba      	ldr	r2, [r7, #24]
 8006fc2:	b2d2      	uxtb	r2, r2
 8006fc4:	701a      	strb	r2, [r3, #0]
 8006fc6:	69fb      	ldr	r3, [r7, #28]
 8006fc8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006fca:	2215      	movs	r2, #21
 8006fcc:	68f9      	ldr	r1, [r7, #12]
 8006fce:	6938      	ldr	r0, [r7, #16]
 8006fd0:	f7fe ff1a 	bl	8005e08 <_SendPacket>
  RECORD_END();
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	f383 8811 	msr	BASEPRI, r3
}
 8006fda:	bf00      	nop
 8006fdc:	3748      	adds	r7, #72	; 0x48
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}
 8006fe2:	bf00      	nop
 8006fe4:	2001a6f8 	.word	0x2001a6f8
 8006fe8:	2001a6c8 	.word	0x2001a6c8

08006fec <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006fec:	b580      	push	{r7, lr}
 8006fee:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006ff0:	4b07      	ldr	r3, [pc, #28]	; (8007010 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006ff2:	6a1b      	ldr	r3, [r3, #32]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d008      	beq.n	800700a <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006ff8:	4b05      	ldr	r3, [pc, #20]	; (8007010 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006ffa:	6a1b      	ldr	r3, [r3, #32]
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d003      	beq.n	800700a <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8007002:	4b03      	ldr	r3, [pc, #12]	; (8007010 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007004:	6a1b      	ldr	r3, [r3, #32]
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	4798      	blx	r3
  }
}
 800700a:	bf00      	nop
 800700c:	bd80      	pop	{r7, pc}
 800700e:	bf00      	nop
 8007010:	2001a6c8 	.word	0x2001a6c8

08007014 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8007014:	b580      	push	{r7, lr}
 8007016:	b086      	sub	sp, #24
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800701c:	f3ef 8311 	mrs	r3, BASEPRI
 8007020:	f04f 0120 	mov.w	r1, #32
 8007024:	f381 8811 	msr	BASEPRI, r1
 8007028:	617b      	str	r3, [r7, #20]
 800702a:	480b      	ldr	r0, [pc, #44]	; (8007058 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800702c:	f7fe fdf9 	bl	8005c22 <_PreparePacket>
 8007030:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007032:	2280      	movs	r2, #128	; 0x80
 8007034:	6879      	ldr	r1, [r7, #4]
 8007036:	6938      	ldr	r0, [r7, #16]
 8007038:	f7fe fda6 	bl	8005b88 <_EncodeStr>
 800703c:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800703e:	220e      	movs	r2, #14
 8007040:	68f9      	ldr	r1, [r7, #12]
 8007042:	6938      	ldr	r0, [r7, #16]
 8007044:	f7fe fee0 	bl	8005e08 <_SendPacket>
  RECORD_END();
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	f383 8811 	msr	BASEPRI, r3
}
 800704e:	bf00      	nop
 8007050:	3718      	adds	r7, #24
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}
 8007056:	bf00      	nop
 8007058:	2001a6f8 	.word	0x2001a6f8

0800705c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800705c:	b590      	push	{r4, r7, lr}
 800705e:	b083      	sub	sp, #12
 8007060:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8007062:	4b15      	ldr	r3, [pc, #84]	; (80070b8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007064:	6a1b      	ldr	r3, [r3, #32]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d01a      	beq.n	80070a0 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800706a:	4b13      	ldr	r3, [pc, #76]	; (80070b8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800706c:	6a1b      	ldr	r3, [r3, #32]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d015      	beq.n	80070a0 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8007074:	4b10      	ldr	r3, [pc, #64]	; (80070b8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007076:	6a1b      	ldr	r3, [r3, #32]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4798      	blx	r3
 800707c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8007080:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8007082:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007086:	f04f 0200 	mov.w	r2, #0
 800708a:	f04f 0300 	mov.w	r3, #0
 800708e:	000a      	movs	r2, r1
 8007090:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8007092:	4613      	mov	r3, r2
 8007094:	461a      	mov	r2, r3
 8007096:	4621      	mov	r1, r4
 8007098:	200d      	movs	r0, #13
 800709a:	f7ff fbe5 	bl	8006868 <SEGGER_SYSVIEW_RecordU32x2>
 800709e:	e006      	b.n	80070ae <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80070a0:	4b06      	ldr	r3, [pc, #24]	; (80070bc <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4619      	mov	r1, r3
 80070a6:	200c      	movs	r0, #12
 80070a8:	f7ff fba2 	bl	80067f0 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80070ac:	bf00      	nop
 80070ae:	bf00      	nop
 80070b0:	370c      	adds	r7, #12
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd90      	pop	{r4, r7, pc}
 80070b6:	bf00      	nop
 80070b8:	2001a6c8 	.word	0x2001a6c8
 80070bc:	e0001004 	.word	0xe0001004

080070c0 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b086      	sub	sp, #24
 80070c4:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80070c6:	f3ef 8311 	mrs	r3, BASEPRI
 80070ca:	f04f 0120 	mov.w	r1, #32
 80070ce:	f381 8811 	msr	BASEPRI, r1
 80070d2:	60fb      	str	r3, [r7, #12]
 80070d4:	4819      	ldr	r0, [pc, #100]	; (800713c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80070d6:	f7fe fda4 	bl	8005c22 <_PreparePacket>
 80070da:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80070e0:	4b17      	ldr	r3, [pc, #92]	; (8007140 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070e8:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	617b      	str	r3, [r7, #20]
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	613b      	str	r3, [r7, #16]
 80070f2:	e00b      	b.n	800710c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	b2da      	uxtb	r2, r3
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	1c59      	adds	r1, r3, #1
 80070fc:	6179      	str	r1, [r7, #20]
 80070fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007102:	b2d2      	uxtb	r2, r2
 8007104:	701a      	strb	r2, [r3, #0]
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	09db      	lsrs	r3, r3, #7
 800710a:	613b      	str	r3, [r7, #16]
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	2b7f      	cmp	r3, #127	; 0x7f
 8007110:	d8f0      	bhi.n	80070f4 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	1c5a      	adds	r2, r3, #1
 8007116:	617a      	str	r2, [r7, #20]
 8007118:	693a      	ldr	r2, [r7, #16]
 800711a:	b2d2      	uxtb	r2, r2
 800711c:	701a      	strb	r2, [r3, #0]
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8007122:	2202      	movs	r2, #2
 8007124:	6879      	ldr	r1, [r7, #4]
 8007126:	68b8      	ldr	r0, [r7, #8]
 8007128:	f7fe fe6e 	bl	8005e08 <_SendPacket>
  RECORD_END();
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f383 8811 	msr	BASEPRI, r3
}
 8007132:	bf00      	nop
 8007134:	3718      	adds	r7, #24
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}
 800713a:	bf00      	nop
 800713c:	2001a6f8 	.word	0x2001a6f8
 8007140:	e000ed04 	.word	0xe000ed04

08007144 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8007144:	b580      	push	{r7, lr}
 8007146:	b082      	sub	sp, #8
 8007148:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800714a:	f3ef 8311 	mrs	r3, BASEPRI
 800714e:	f04f 0120 	mov.w	r1, #32
 8007152:	f381 8811 	msr	BASEPRI, r1
 8007156:	607b      	str	r3, [r7, #4]
 8007158:	4807      	ldr	r0, [pc, #28]	; (8007178 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800715a:	f7fe fd62 	bl	8005c22 <_PreparePacket>
 800715e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8007160:	2203      	movs	r2, #3
 8007162:	6839      	ldr	r1, [r7, #0]
 8007164:	6838      	ldr	r0, [r7, #0]
 8007166:	f7fe fe4f 	bl	8005e08 <_SendPacket>
  RECORD_END();
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f383 8811 	msr	BASEPRI, r3
}
 8007170:	bf00      	nop
 8007172:	3708      	adds	r7, #8
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}
 8007178:	2001a6f8 	.word	0x2001a6f8

0800717c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800717c:	b580      	push	{r7, lr}
 800717e:	b082      	sub	sp, #8
 8007180:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007182:	f3ef 8311 	mrs	r3, BASEPRI
 8007186:	f04f 0120 	mov.w	r1, #32
 800718a:	f381 8811 	msr	BASEPRI, r1
 800718e:	607b      	str	r3, [r7, #4]
 8007190:	4807      	ldr	r0, [pc, #28]	; (80071b0 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8007192:	f7fe fd46 	bl	8005c22 <_PreparePacket>
 8007196:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8007198:	2212      	movs	r2, #18
 800719a:	6839      	ldr	r1, [r7, #0]
 800719c:	6838      	ldr	r0, [r7, #0]
 800719e:	f7fe fe33 	bl	8005e08 <_SendPacket>
  RECORD_END();
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f383 8811 	msr	BASEPRI, r3
}
 80071a8:	bf00      	nop
 80071aa:	3708      	adds	r7, #8
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}
 80071b0:	2001a6f8 	.word	0x2001a6f8

080071b4 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b082      	sub	sp, #8
 80071b8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80071ba:	f3ef 8311 	mrs	r3, BASEPRI
 80071be:	f04f 0120 	mov.w	r1, #32
 80071c2:	f381 8811 	msr	BASEPRI, r1
 80071c6:	607b      	str	r3, [r7, #4]
 80071c8:	4807      	ldr	r0, [pc, #28]	; (80071e8 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80071ca:	f7fe fd2a 	bl	8005c22 <_PreparePacket>
 80071ce:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80071d0:	2211      	movs	r2, #17
 80071d2:	6839      	ldr	r1, [r7, #0]
 80071d4:	6838      	ldr	r0, [r7, #0]
 80071d6:	f7fe fe17 	bl	8005e08 <_SendPacket>
  RECORD_END();
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f383 8811 	msr	BASEPRI, r3
}
 80071e0:	bf00      	nop
 80071e2:	3708      	adds	r7, #8
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}
 80071e8:	2001a6f8 	.word	0x2001a6f8

080071ec <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b088      	sub	sp, #32
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80071f4:	f3ef 8311 	mrs	r3, BASEPRI
 80071f8:	f04f 0120 	mov.w	r1, #32
 80071fc:	f381 8811 	msr	BASEPRI, r1
 8007200:	617b      	str	r3, [r7, #20]
 8007202:	4819      	ldr	r0, [pc, #100]	; (8007268 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8007204:	f7fe fd0d 	bl	8005c22 <_PreparePacket>
 8007208:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800720e:	4b17      	ldr	r3, [pc, #92]	; (800726c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8007210:	691b      	ldr	r3, [r3, #16]
 8007212:	687a      	ldr	r2, [r7, #4]
 8007214:	1ad3      	subs	r3, r2, r3
 8007216:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	61fb      	str	r3, [r7, #28]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	61bb      	str	r3, [r7, #24]
 8007220:	e00b      	b.n	800723a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8007222:	69bb      	ldr	r3, [r7, #24]
 8007224:	b2da      	uxtb	r2, r3
 8007226:	69fb      	ldr	r3, [r7, #28]
 8007228:	1c59      	adds	r1, r3, #1
 800722a:	61f9      	str	r1, [r7, #28]
 800722c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007230:	b2d2      	uxtb	r2, r2
 8007232:	701a      	strb	r2, [r3, #0]
 8007234:	69bb      	ldr	r3, [r7, #24]
 8007236:	09db      	lsrs	r3, r3, #7
 8007238:	61bb      	str	r3, [r7, #24]
 800723a:	69bb      	ldr	r3, [r7, #24]
 800723c:	2b7f      	cmp	r3, #127	; 0x7f
 800723e:	d8f0      	bhi.n	8007222 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8007240:	69fb      	ldr	r3, [r7, #28]
 8007242:	1c5a      	adds	r2, r3, #1
 8007244:	61fa      	str	r2, [r7, #28]
 8007246:	69ba      	ldr	r2, [r7, #24]
 8007248:	b2d2      	uxtb	r2, r2
 800724a:	701a      	strb	r2, [r3, #0]
 800724c:	69fb      	ldr	r3, [r7, #28]
 800724e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8007250:	2208      	movs	r2, #8
 8007252:	68f9      	ldr	r1, [r7, #12]
 8007254:	6938      	ldr	r0, [r7, #16]
 8007256:	f7fe fdd7 	bl	8005e08 <_SendPacket>
  RECORD_END();
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	f383 8811 	msr	BASEPRI, r3
}
 8007260:	bf00      	nop
 8007262:	3720      	adds	r7, #32
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}
 8007268:	2001a6f8 	.word	0x2001a6f8
 800726c:	2001a6c8 	.word	0x2001a6c8

08007270 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8007270:	b580      	push	{r7, lr}
 8007272:	b088      	sub	sp, #32
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007278:	f3ef 8311 	mrs	r3, BASEPRI
 800727c:	f04f 0120 	mov.w	r1, #32
 8007280:	f381 8811 	msr	BASEPRI, r1
 8007284:	617b      	str	r3, [r7, #20]
 8007286:	4819      	ldr	r0, [pc, #100]	; (80072ec <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8007288:	f7fe fccb 	bl	8005c22 <_PreparePacket>
 800728c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007292:	4b17      	ldr	r3, [pc, #92]	; (80072f0 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8007294:	691b      	ldr	r3, [r3, #16]
 8007296:	687a      	ldr	r2, [r7, #4]
 8007298:	1ad3      	subs	r3, r2, r3
 800729a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	61fb      	str	r3, [r7, #28]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	61bb      	str	r3, [r7, #24]
 80072a4:	e00b      	b.n	80072be <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80072a6:	69bb      	ldr	r3, [r7, #24]
 80072a8:	b2da      	uxtb	r2, r3
 80072aa:	69fb      	ldr	r3, [r7, #28]
 80072ac:	1c59      	adds	r1, r3, #1
 80072ae:	61f9      	str	r1, [r7, #28]
 80072b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80072b4:	b2d2      	uxtb	r2, r2
 80072b6:	701a      	strb	r2, [r3, #0]
 80072b8:	69bb      	ldr	r3, [r7, #24]
 80072ba:	09db      	lsrs	r3, r3, #7
 80072bc:	61bb      	str	r3, [r7, #24]
 80072be:	69bb      	ldr	r3, [r7, #24]
 80072c0:	2b7f      	cmp	r3, #127	; 0x7f
 80072c2:	d8f0      	bhi.n	80072a6 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80072c4:	69fb      	ldr	r3, [r7, #28]
 80072c6:	1c5a      	adds	r2, r3, #1
 80072c8:	61fa      	str	r2, [r7, #28]
 80072ca:	69ba      	ldr	r2, [r7, #24]
 80072cc:	b2d2      	uxtb	r2, r2
 80072ce:	701a      	strb	r2, [r3, #0]
 80072d0:	69fb      	ldr	r3, [r7, #28]
 80072d2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80072d4:	2204      	movs	r2, #4
 80072d6:	68f9      	ldr	r1, [r7, #12]
 80072d8:	6938      	ldr	r0, [r7, #16]
 80072da:	f7fe fd95 	bl	8005e08 <_SendPacket>
  RECORD_END();
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	f383 8811 	msr	BASEPRI, r3
}
 80072e4:	bf00      	nop
 80072e6:	3720      	adds	r7, #32
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}
 80072ec:	2001a6f8 	.word	0x2001a6f8
 80072f0:	2001a6c8 	.word	0x2001a6c8

080072f4 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b088      	sub	sp, #32
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80072fc:	f3ef 8311 	mrs	r3, BASEPRI
 8007300:	f04f 0120 	mov.w	r1, #32
 8007304:	f381 8811 	msr	BASEPRI, r1
 8007308:	617b      	str	r3, [r7, #20]
 800730a:	4819      	ldr	r0, [pc, #100]	; (8007370 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800730c:	f7fe fc89 	bl	8005c22 <_PreparePacket>
 8007310:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007316:	4b17      	ldr	r3, [pc, #92]	; (8007374 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8007318:	691b      	ldr	r3, [r3, #16]
 800731a:	687a      	ldr	r2, [r7, #4]
 800731c:	1ad3      	subs	r3, r2, r3
 800731e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	61fb      	str	r3, [r7, #28]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	61bb      	str	r3, [r7, #24]
 8007328:	e00b      	b.n	8007342 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800732a:	69bb      	ldr	r3, [r7, #24]
 800732c:	b2da      	uxtb	r2, r3
 800732e:	69fb      	ldr	r3, [r7, #28]
 8007330:	1c59      	adds	r1, r3, #1
 8007332:	61f9      	str	r1, [r7, #28]
 8007334:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007338:	b2d2      	uxtb	r2, r2
 800733a:	701a      	strb	r2, [r3, #0]
 800733c:	69bb      	ldr	r3, [r7, #24]
 800733e:	09db      	lsrs	r3, r3, #7
 8007340:	61bb      	str	r3, [r7, #24]
 8007342:	69bb      	ldr	r3, [r7, #24]
 8007344:	2b7f      	cmp	r3, #127	; 0x7f
 8007346:	d8f0      	bhi.n	800732a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8007348:	69fb      	ldr	r3, [r7, #28]
 800734a:	1c5a      	adds	r2, r3, #1
 800734c:	61fa      	str	r2, [r7, #28]
 800734e:	69ba      	ldr	r2, [r7, #24]
 8007350:	b2d2      	uxtb	r2, r2
 8007352:	701a      	strb	r2, [r3, #0]
 8007354:	69fb      	ldr	r3, [r7, #28]
 8007356:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8007358:	2206      	movs	r2, #6
 800735a:	68f9      	ldr	r1, [r7, #12]
 800735c:	6938      	ldr	r0, [r7, #16]
 800735e:	f7fe fd53 	bl	8005e08 <_SendPacket>
  RECORD_END();
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	f383 8811 	msr	BASEPRI, r3
}
 8007368:	bf00      	nop
 800736a:	3720      	adds	r7, #32
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}
 8007370:	2001a6f8 	.word	0x2001a6f8
 8007374:	2001a6c8 	.word	0x2001a6c8

08007378 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8007378:	b580      	push	{r7, lr}
 800737a:	b08a      	sub	sp, #40	; 0x28
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
 8007380:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8007382:	f3ef 8311 	mrs	r3, BASEPRI
 8007386:	f04f 0120 	mov.w	r1, #32
 800738a:	f381 8811 	msr	BASEPRI, r1
 800738e:	617b      	str	r3, [r7, #20]
 8007390:	4827      	ldr	r0, [pc, #156]	; (8007430 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8007392:	f7fe fc46 	bl	8005c22 <_PreparePacket>
 8007396:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800739c:	4b25      	ldr	r3, [pc, #148]	; (8007434 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800739e:	691b      	ldr	r3, [r3, #16]
 80073a0:	687a      	ldr	r2, [r7, #4]
 80073a2:	1ad3      	subs	r3, r2, r3
 80073a4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	627b      	str	r3, [r7, #36]	; 0x24
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	623b      	str	r3, [r7, #32]
 80073ae:	e00b      	b.n	80073c8 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 80073b0:	6a3b      	ldr	r3, [r7, #32]
 80073b2:	b2da      	uxtb	r2, r3
 80073b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b6:	1c59      	adds	r1, r3, #1
 80073b8:	6279      	str	r1, [r7, #36]	; 0x24
 80073ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80073be:	b2d2      	uxtb	r2, r2
 80073c0:	701a      	strb	r2, [r3, #0]
 80073c2:	6a3b      	ldr	r3, [r7, #32]
 80073c4:	09db      	lsrs	r3, r3, #7
 80073c6:	623b      	str	r3, [r7, #32]
 80073c8:	6a3b      	ldr	r3, [r7, #32]
 80073ca:	2b7f      	cmp	r3, #127	; 0x7f
 80073cc:	d8f0      	bhi.n	80073b0 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 80073ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d0:	1c5a      	adds	r2, r3, #1
 80073d2:	627a      	str	r2, [r7, #36]	; 0x24
 80073d4:	6a3a      	ldr	r2, [r7, #32]
 80073d6:	b2d2      	uxtb	r2, r2
 80073d8:	701a      	strb	r2, [r3, #0]
 80073da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073dc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	61fb      	str	r3, [r7, #28]
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	61bb      	str	r3, [r7, #24]
 80073e6:	e00b      	b.n	8007400 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80073e8:	69bb      	ldr	r3, [r7, #24]
 80073ea:	b2da      	uxtb	r2, r3
 80073ec:	69fb      	ldr	r3, [r7, #28]
 80073ee:	1c59      	adds	r1, r3, #1
 80073f0:	61f9      	str	r1, [r7, #28]
 80073f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80073f6:	b2d2      	uxtb	r2, r2
 80073f8:	701a      	strb	r2, [r3, #0]
 80073fa:	69bb      	ldr	r3, [r7, #24]
 80073fc:	09db      	lsrs	r3, r3, #7
 80073fe:	61bb      	str	r3, [r7, #24]
 8007400:	69bb      	ldr	r3, [r7, #24]
 8007402:	2b7f      	cmp	r3, #127	; 0x7f
 8007404:	d8f0      	bhi.n	80073e8 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8007406:	69fb      	ldr	r3, [r7, #28]
 8007408:	1c5a      	adds	r2, r3, #1
 800740a:	61fa      	str	r2, [r7, #28]
 800740c:	69ba      	ldr	r2, [r7, #24]
 800740e:	b2d2      	uxtb	r2, r2
 8007410:	701a      	strb	r2, [r3, #0]
 8007412:	69fb      	ldr	r3, [r7, #28]
 8007414:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8007416:	2207      	movs	r2, #7
 8007418:	68f9      	ldr	r1, [r7, #12]
 800741a:	6938      	ldr	r0, [r7, #16]
 800741c:	f7fe fcf4 	bl	8005e08 <_SendPacket>
  RECORD_END();
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	f383 8811 	msr	BASEPRI, r3
}
 8007426:	bf00      	nop
 8007428:	3728      	adds	r7, #40	; 0x28
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}
 800742e:	bf00      	nop
 8007430:	2001a6f8 	.word	0x2001a6f8
 8007434:	2001a6c8 	.word	0x2001a6c8

08007438 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8007438:	b480      	push	{r7}
 800743a:	b083      	sub	sp, #12
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8007440:	4b04      	ldr	r3, [pc, #16]	; (8007454 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8007442:	691b      	ldr	r3, [r3, #16]
 8007444:	687a      	ldr	r2, [r7, #4]
 8007446:	1ad3      	subs	r3, r2, r3
}
 8007448:	4618      	mov	r0, r3
 800744a:	370c      	adds	r7, #12
 800744c:	46bd      	mov	sp, r7
 800744e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007452:	4770      	bx	lr
 8007454:	2001a6c8 	.word	0x2001a6c8

08007458 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8007458:	b580      	push	{r7, lr}
 800745a:	b08c      	sub	sp, #48	; 0x30
 800745c:	af00      	add	r7, sp, #0
 800745e:	4603      	mov	r3, r0
 8007460:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8007462:	4b3b      	ldr	r3, [pc, #236]	; (8007550 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d06d      	beq.n	8007546 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800746a:	4b39      	ldr	r3, [pc, #228]	; (8007550 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8007470:	2300      	movs	r3, #0
 8007472:	62bb      	str	r3, [r7, #40]	; 0x28
 8007474:	e008      	b.n	8007488 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8007476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007478:	691b      	ldr	r3, [r3, #16]
 800747a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800747c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800747e:	2b00      	cmp	r3, #0
 8007480:	d007      	beq.n	8007492 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8007482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007484:	3301      	adds	r3, #1
 8007486:	62bb      	str	r3, [r7, #40]	; 0x28
 8007488:	79fb      	ldrb	r3, [r7, #7]
 800748a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800748c:	429a      	cmp	r2, r3
 800748e:	d3f2      	bcc.n	8007476 <SEGGER_SYSVIEW_SendModule+0x1e>
 8007490:	e000      	b.n	8007494 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8007492:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8007494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007496:	2b00      	cmp	r3, #0
 8007498:	d055      	beq.n	8007546 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800749a:	f3ef 8311 	mrs	r3, BASEPRI
 800749e:	f04f 0120 	mov.w	r1, #32
 80074a2:	f381 8811 	msr	BASEPRI, r1
 80074a6:	617b      	str	r3, [r7, #20]
 80074a8:	482a      	ldr	r0, [pc, #168]	; (8007554 <SEGGER_SYSVIEW_SendModule+0xfc>)
 80074aa:	f7fe fbba 	bl	8005c22 <_PreparePacket>
 80074ae:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	627b      	str	r3, [r7, #36]	; 0x24
 80074b8:	79fb      	ldrb	r3, [r7, #7]
 80074ba:	623b      	str	r3, [r7, #32]
 80074bc:	e00b      	b.n	80074d6 <SEGGER_SYSVIEW_SendModule+0x7e>
 80074be:	6a3b      	ldr	r3, [r7, #32]
 80074c0:	b2da      	uxtb	r2, r3
 80074c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c4:	1c59      	adds	r1, r3, #1
 80074c6:	6279      	str	r1, [r7, #36]	; 0x24
 80074c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80074cc:	b2d2      	uxtb	r2, r2
 80074ce:	701a      	strb	r2, [r3, #0]
 80074d0:	6a3b      	ldr	r3, [r7, #32]
 80074d2:	09db      	lsrs	r3, r3, #7
 80074d4:	623b      	str	r3, [r7, #32]
 80074d6:	6a3b      	ldr	r3, [r7, #32]
 80074d8:	2b7f      	cmp	r3, #127	; 0x7f
 80074da:	d8f0      	bhi.n	80074be <SEGGER_SYSVIEW_SendModule+0x66>
 80074dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074de:	1c5a      	adds	r2, r3, #1
 80074e0:	627a      	str	r2, [r7, #36]	; 0x24
 80074e2:	6a3a      	ldr	r2, [r7, #32]
 80074e4:	b2d2      	uxtb	r2, r2
 80074e6:	701a      	strb	r2, [r3, #0]
 80074e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ea:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	61fb      	str	r3, [r7, #28]
 80074f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074f2:	689b      	ldr	r3, [r3, #8]
 80074f4:	61bb      	str	r3, [r7, #24]
 80074f6:	e00b      	b.n	8007510 <SEGGER_SYSVIEW_SendModule+0xb8>
 80074f8:	69bb      	ldr	r3, [r7, #24]
 80074fa:	b2da      	uxtb	r2, r3
 80074fc:	69fb      	ldr	r3, [r7, #28]
 80074fe:	1c59      	adds	r1, r3, #1
 8007500:	61f9      	str	r1, [r7, #28]
 8007502:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007506:	b2d2      	uxtb	r2, r2
 8007508:	701a      	strb	r2, [r3, #0]
 800750a:	69bb      	ldr	r3, [r7, #24]
 800750c:	09db      	lsrs	r3, r3, #7
 800750e:	61bb      	str	r3, [r7, #24]
 8007510:	69bb      	ldr	r3, [r7, #24]
 8007512:	2b7f      	cmp	r3, #127	; 0x7f
 8007514:	d8f0      	bhi.n	80074f8 <SEGGER_SYSVIEW_SendModule+0xa0>
 8007516:	69fb      	ldr	r3, [r7, #28]
 8007518:	1c5a      	adds	r2, r3, #1
 800751a:	61fa      	str	r2, [r7, #28]
 800751c:	69ba      	ldr	r2, [r7, #24]
 800751e:	b2d2      	uxtb	r2, r2
 8007520:	701a      	strb	r2, [r3, #0]
 8007522:	69fb      	ldr	r3, [r7, #28]
 8007524:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	2280      	movs	r2, #128	; 0x80
 800752c:	4619      	mov	r1, r3
 800752e:	68f8      	ldr	r0, [r7, #12]
 8007530:	f7fe fb2a 	bl	8005b88 <_EncodeStr>
 8007534:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8007536:	2216      	movs	r2, #22
 8007538:	68f9      	ldr	r1, [r7, #12]
 800753a:	6938      	ldr	r0, [r7, #16]
 800753c:	f7fe fc64 	bl	8005e08 <_SendPacket>
      RECORD_END();
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8007546:	bf00      	nop
 8007548:	3730      	adds	r7, #48	; 0x30
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}
 800754e:	bf00      	nop
 8007550:	2001a6f0 	.word	0x2001a6f0
 8007554:	2001a6f8 	.word	0x2001a6f8

08007558 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8007558:	b580      	push	{r7, lr}
 800755a:	b082      	sub	sp, #8
 800755c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800755e:	4b0c      	ldr	r3, [pc, #48]	; (8007590 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d00f      	beq.n	8007586 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8007566:	4b0a      	ldr	r3, [pc, #40]	; (8007590 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	68db      	ldr	r3, [r3, #12]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d002      	beq.n	800757a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	68db      	ldr	r3, [r3, #12]
 8007578:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	691b      	ldr	r3, [r3, #16]
 800757e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d1f2      	bne.n	800756c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8007586:	bf00      	nop
 8007588:	3708      	adds	r7, #8
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}
 800758e:	bf00      	nop
 8007590:	2001a6f0 	.word	0x2001a6f0

08007594 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8007594:	b580      	push	{r7, lr}
 8007596:	b086      	sub	sp, #24
 8007598:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800759a:	f3ef 8311 	mrs	r3, BASEPRI
 800759e:	f04f 0120 	mov.w	r1, #32
 80075a2:	f381 8811 	msr	BASEPRI, r1
 80075a6:	60fb      	str	r3, [r7, #12]
 80075a8:	4817      	ldr	r0, [pc, #92]	; (8007608 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80075aa:	f7fe fb3a 	bl	8005c22 <_PreparePacket>
 80075ae:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	617b      	str	r3, [r7, #20]
 80075b8:	4b14      	ldr	r3, [pc, #80]	; (800760c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80075ba:	781b      	ldrb	r3, [r3, #0]
 80075bc:	613b      	str	r3, [r7, #16]
 80075be:	e00b      	b.n	80075d8 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80075c0:	693b      	ldr	r3, [r7, #16]
 80075c2:	b2da      	uxtb	r2, r3
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	1c59      	adds	r1, r3, #1
 80075c8:	6179      	str	r1, [r7, #20]
 80075ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80075ce:	b2d2      	uxtb	r2, r2
 80075d0:	701a      	strb	r2, [r3, #0]
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	09db      	lsrs	r3, r3, #7
 80075d6:	613b      	str	r3, [r7, #16]
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	2b7f      	cmp	r3, #127	; 0x7f
 80075dc:	d8f0      	bhi.n	80075c0 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	1c5a      	adds	r2, r3, #1
 80075e2:	617a      	str	r2, [r7, #20]
 80075e4:	693a      	ldr	r2, [r7, #16]
 80075e6:	b2d2      	uxtb	r2, r2
 80075e8:	701a      	strb	r2, [r3, #0]
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80075ee:	221b      	movs	r2, #27
 80075f0:	6879      	ldr	r1, [r7, #4]
 80075f2:	68b8      	ldr	r0, [r7, #8]
 80075f4:	f7fe fc08 	bl	8005e08 <_SendPacket>
  RECORD_END();
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	f383 8811 	msr	BASEPRI, r3
}
 80075fe:	bf00      	nop
 8007600:	3718      	adds	r7, #24
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}
 8007606:	bf00      	nop
 8007608:	2001a6f8 	.word	0x2001a6f8
 800760c:	2001a6f4 	.word	0x2001a6f4

08007610 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8007610:	b40f      	push	{r0, r1, r2, r3}
 8007612:	b580      	push	{r7, lr}
 8007614:	b082      	sub	sp, #8
 8007616:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8007618:	f107 0314 	add.w	r3, r7, #20
 800761c:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 800761e:	1d3b      	adds	r3, r7, #4
 8007620:	461a      	mov	r2, r3
 8007622:	2100      	movs	r1, #0
 8007624:	6938      	ldr	r0, [r7, #16]
 8007626:	f7fe fe79 	bl	800631c <_VPrintTarget>
  va_end(ParamList);
}
 800762a:	bf00      	nop
 800762c:	3708      	adds	r7, #8
 800762e:	46bd      	mov	sp, r7
 8007630:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007634:	b004      	add	sp, #16
 8007636:	4770      	bx	lr

08007638 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8007638:	b580      	push	{r7, lr}
 800763a:	b08a      	sub	sp, #40	; 0x28
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007640:	f3ef 8311 	mrs	r3, BASEPRI
 8007644:	f04f 0120 	mov.w	r1, #32
 8007648:	f381 8811 	msr	BASEPRI, r1
 800764c:	617b      	str	r3, [r7, #20]
 800764e:	4827      	ldr	r0, [pc, #156]	; (80076ec <SEGGER_SYSVIEW_Warn+0xb4>)
 8007650:	f7fe fae7 	bl	8005c22 <_PreparePacket>
 8007654:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007656:	2280      	movs	r2, #128	; 0x80
 8007658:	6879      	ldr	r1, [r7, #4]
 800765a:	6938      	ldr	r0, [r7, #16]
 800765c:	f7fe fa94 	bl	8005b88 <_EncodeStr>
 8007660:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	627b      	str	r3, [r7, #36]	; 0x24
 8007666:	2301      	movs	r3, #1
 8007668:	623b      	str	r3, [r7, #32]
 800766a:	e00b      	b.n	8007684 <SEGGER_SYSVIEW_Warn+0x4c>
 800766c:	6a3b      	ldr	r3, [r7, #32]
 800766e:	b2da      	uxtb	r2, r3
 8007670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007672:	1c59      	adds	r1, r3, #1
 8007674:	6279      	str	r1, [r7, #36]	; 0x24
 8007676:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800767a:	b2d2      	uxtb	r2, r2
 800767c:	701a      	strb	r2, [r3, #0]
 800767e:	6a3b      	ldr	r3, [r7, #32]
 8007680:	09db      	lsrs	r3, r3, #7
 8007682:	623b      	str	r3, [r7, #32]
 8007684:	6a3b      	ldr	r3, [r7, #32]
 8007686:	2b7f      	cmp	r3, #127	; 0x7f
 8007688:	d8f0      	bhi.n	800766c <SEGGER_SYSVIEW_Warn+0x34>
 800768a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800768c:	1c5a      	adds	r2, r3, #1
 800768e:	627a      	str	r2, [r7, #36]	; 0x24
 8007690:	6a3a      	ldr	r2, [r7, #32]
 8007692:	b2d2      	uxtb	r2, r2
 8007694:	701a      	strb	r2, [r3, #0]
 8007696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007698:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	61fb      	str	r3, [r7, #28]
 800769e:	2300      	movs	r3, #0
 80076a0:	61bb      	str	r3, [r7, #24]
 80076a2:	e00b      	b.n	80076bc <SEGGER_SYSVIEW_Warn+0x84>
 80076a4:	69bb      	ldr	r3, [r7, #24]
 80076a6:	b2da      	uxtb	r2, r3
 80076a8:	69fb      	ldr	r3, [r7, #28]
 80076aa:	1c59      	adds	r1, r3, #1
 80076ac:	61f9      	str	r1, [r7, #28]
 80076ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80076b2:	b2d2      	uxtb	r2, r2
 80076b4:	701a      	strb	r2, [r3, #0]
 80076b6:	69bb      	ldr	r3, [r7, #24]
 80076b8:	09db      	lsrs	r3, r3, #7
 80076ba:	61bb      	str	r3, [r7, #24]
 80076bc:	69bb      	ldr	r3, [r7, #24]
 80076be:	2b7f      	cmp	r3, #127	; 0x7f
 80076c0:	d8f0      	bhi.n	80076a4 <SEGGER_SYSVIEW_Warn+0x6c>
 80076c2:	69fb      	ldr	r3, [r7, #28]
 80076c4:	1c5a      	adds	r2, r3, #1
 80076c6:	61fa      	str	r2, [r7, #28]
 80076c8:	69ba      	ldr	r2, [r7, #24]
 80076ca:	b2d2      	uxtb	r2, r2
 80076cc:	701a      	strb	r2, [r3, #0]
 80076ce:	69fb      	ldr	r3, [r7, #28]
 80076d0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80076d2:	221a      	movs	r2, #26
 80076d4:	68f9      	ldr	r1, [r7, #12]
 80076d6:	6938      	ldr	r0, [r7, #16]
 80076d8:	f7fe fb96 	bl	8005e08 <_SendPacket>
  RECORD_END();
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	f383 8811 	msr	BASEPRI, r3
}
 80076e2:	bf00      	nop
 80076e4:	3728      	adds	r7, #40	; 0x28
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}
 80076ea:	bf00      	nop
 80076ec:	2001a6f8 	.word	0x2001a6f8

080076f0 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 80076f0:	b580      	push	{r7, lr}
 80076f2:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80076f4:	4b13      	ldr	r3, [pc, #76]	; (8007744 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80076f6:	7e1b      	ldrb	r3, [r3, #24]
 80076f8:	4619      	mov	r1, r3
 80076fa:	4a13      	ldr	r2, [pc, #76]	; (8007748 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80076fc:	460b      	mov	r3, r1
 80076fe:	005b      	lsls	r3, r3, #1
 8007700:	440b      	add	r3, r1
 8007702:	00db      	lsls	r3, r3, #3
 8007704:	4413      	add	r3, r2
 8007706:	336c      	adds	r3, #108	; 0x6c
 8007708:	681a      	ldr	r2, [r3, #0]
 800770a:	4b0e      	ldr	r3, [pc, #56]	; (8007744 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800770c:	7e1b      	ldrb	r3, [r3, #24]
 800770e:	4618      	mov	r0, r3
 8007710:	490d      	ldr	r1, [pc, #52]	; (8007748 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8007712:	4603      	mov	r3, r0
 8007714:	005b      	lsls	r3, r3, #1
 8007716:	4403      	add	r3, r0
 8007718:	00db      	lsls	r3, r3, #3
 800771a:	440b      	add	r3, r1
 800771c:	3370      	adds	r3, #112	; 0x70
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	429a      	cmp	r2, r3
 8007722:	d00b      	beq.n	800773c <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8007724:	4b07      	ldr	r3, [pc, #28]	; (8007744 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007726:	789b      	ldrb	r3, [r3, #2]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d107      	bne.n	800773c <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800772c:	4b05      	ldr	r3, [pc, #20]	; (8007744 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800772e:	2201      	movs	r2, #1
 8007730:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8007732:	f7fe fa83 	bl	8005c3c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8007736:	4b03      	ldr	r3, [pc, #12]	; (8007744 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007738:	2200      	movs	r2, #0
 800773a:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 800773c:	4b01      	ldr	r3, [pc, #4]	; (8007744 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800773e:	781b      	ldrb	r3, [r3, #0]
}
 8007740:	4618      	mov	r0, r3
 8007742:	bd80      	pop	{r7, pc}
 8007744:	2001a6c8 	.word	0x2001a6c8
 8007748:	2001a8b8 	.word	0x2001a8b8

0800774c <__libc_init_array>:
 800774c:	b570      	push	{r4, r5, r6, lr}
 800774e:	4d0d      	ldr	r5, [pc, #52]	; (8007784 <__libc_init_array+0x38>)
 8007750:	4c0d      	ldr	r4, [pc, #52]	; (8007788 <__libc_init_array+0x3c>)
 8007752:	1b64      	subs	r4, r4, r5
 8007754:	10a4      	asrs	r4, r4, #2
 8007756:	2600      	movs	r6, #0
 8007758:	42a6      	cmp	r6, r4
 800775a:	d109      	bne.n	8007770 <__libc_init_array+0x24>
 800775c:	4d0b      	ldr	r5, [pc, #44]	; (800778c <__libc_init_array+0x40>)
 800775e:	4c0c      	ldr	r4, [pc, #48]	; (8007790 <__libc_init_array+0x44>)
 8007760:	f000 fc7e 	bl	8008060 <_init>
 8007764:	1b64      	subs	r4, r4, r5
 8007766:	10a4      	asrs	r4, r4, #2
 8007768:	2600      	movs	r6, #0
 800776a:	42a6      	cmp	r6, r4
 800776c:	d105      	bne.n	800777a <__libc_init_array+0x2e>
 800776e:	bd70      	pop	{r4, r5, r6, pc}
 8007770:	f855 3b04 	ldr.w	r3, [r5], #4
 8007774:	4798      	blx	r3
 8007776:	3601      	adds	r6, #1
 8007778:	e7ee      	b.n	8007758 <__libc_init_array+0xc>
 800777a:	f855 3b04 	ldr.w	r3, [r5], #4
 800777e:	4798      	blx	r3
 8007780:	3601      	adds	r6, #1
 8007782:	e7f2      	b.n	800776a <__libc_init_array+0x1e>
 8007784:	0800821c 	.word	0x0800821c
 8007788:	0800821c 	.word	0x0800821c
 800778c:	0800821c 	.word	0x0800821c
 8007790:	08008220 	.word	0x08008220

08007794 <memcmp>:
 8007794:	b530      	push	{r4, r5, lr}
 8007796:	3901      	subs	r1, #1
 8007798:	2400      	movs	r4, #0
 800779a:	42a2      	cmp	r2, r4
 800779c:	d101      	bne.n	80077a2 <memcmp+0xe>
 800779e:	2000      	movs	r0, #0
 80077a0:	e005      	b.n	80077ae <memcmp+0x1a>
 80077a2:	5d03      	ldrb	r3, [r0, r4]
 80077a4:	3401      	adds	r4, #1
 80077a6:	5d0d      	ldrb	r5, [r1, r4]
 80077a8:	42ab      	cmp	r3, r5
 80077aa:	d0f6      	beq.n	800779a <memcmp+0x6>
 80077ac:	1b58      	subs	r0, r3, r5
 80077ae:	bd30      	pop	{r4, r5, pc}

080077b0 <memcpy>:
 80077b0:	440a      	add	r2, r1
 80077b2:	4291      	cmp	r1, r2
 80077b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80077b8:	d100      	bne.n	80077bc <memcpy+0xc>
 80077ba:	4770      	bx	lr
 80077bc:	b510      	push	{r4, lr}
 80077be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80077c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80077c6:	4291      	cmp	r1, r2
 80077c8:	d1f9      	bne.n	80077be <memcpy+0xe>
 80077ca:	bd10      	pop	{r4, pc}

080077cc <memset>:
 80077cc:	4402      	add	r2, r0
 80077ce:	4603      	mov	r3, r0
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d100      	bne.n	80077d6 <memset+0xa>
 80077d4:	4770      	bx	lr
 80077d6:	f803 1b01 	strb.w	r1, [r3], #1
 80077da:	e7f9      	b.n	80077d0 <memset+0x4>

080077dc <sniprintf>:
 80077dc:	b40c      	push	{r2, r3}
 80077de:	b530      	push	{r4, r5, lr}
 80077e0:	4b17      	ldr	r3, [pc, #92]	; (8007840 <sniprintf+0x64>)
 80077e2:	1e0c      	subs	r4, r1, #0
 80077e4:	681d      	ldr	r5, [r3, #0]
 80077e6:	b09d      	sub	sp, #116	; 0x74
 80077e8:	da08      	bge.n	80077fc <sniprintf+0x20>
 80077ea:	238b      	movs	r3, #139	; 0x8b
 80077ec:	602b      	str	r3, [r5, #0]
 80077ee:	f04f 30ff 	mov.w	r0, #4294967295
 80077f2:	b01d      	add	sp, #116	; 0x74
 80077f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80077f8:	b002      	add	sp, #8
 80077fa:	4770      	bx	lr
 80077fc:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007800:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007804:	bf14      	ite	ne
 8007806:	f104 33ff 	addne.w	r3, r4, #4294967295
 800780a:	4623      	moveq	r3, r4
 800780c:	9304      	str	r3, [sp, #16]
 800780e:	9307      	str	r3, [sp, #28]
 8007810:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007814:	9002      	str	r0, [sp, #8]
 8007816:	9006      	str	r0, [sp, #24]
 8007818:	f8ad 3016 	strh.w	r3, [sp, #22]
 800781c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800781e:	ab21      	add	r3, sp, #132	; 0x84
 8007820:	a902      	add	r1, sp, #8
 8007822:	4628      	mov	r0, r5
 8007824:	9301      	str	r3, [sp, #4]
 8007826:	f000 f869 	bl	80078fc <_svfiprintf_r>
 800782a:	1c43      	adds	r3, r0, #1
 800782c:	bfbc      	itt	lt
 800782e:	238b      	movlt	r3, #139	; 0x8b
 8007830:	602b      	strlt	r3, [r5, #0]
 8007832:	2c00      	cmp	r4, #0
 8007834:	d0dd      	beq.n	80077f2 <sniprintf+0x16>
 8007836:	9b02      	ldr	r3, [sp, #8]
 8007838:	2200      	movs	r2, #0
 800783a:	701a      	strb	r2, [r3, #0]
 800783c:	e7d9      	b.n	80077f2 <sniprintf+0x16>
 800783e:	bf00      	nop
 8007840:	2000001c 	.word	0x2000001c

08007844 <__ssputs_r>:
 8007844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007848:	688e      	ldr	r6, [r1, #8]
 800784a:	429e      	cmp	r6, r3
 800784c:	4682      	mov	sl, r0
 800784e:	460c      	mov	r4, r1
 8007850:	4690      	mov	r8, r2
 8007852:	461f      	mov	r7, r3
 8007854:	d838      	bhi.n	80078c8 <__ssputs_r+0x84>
 8007856:	898a      	ldrh	r2, [r1, #12]
 8007858:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800785c:	d032      	beq.n	80078c4 <__ssputs_r+0x80>
 800785e:	6825      	ldr	r5, [r4, #0]
 8007860:	6909      	ldr	r1, [r1, #16]
 8007862:	eba5 0901 	sub.w	r9, r5, r1
 8007866:	6965      	ldr	r5, [r4, #20]
 8007868:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800786c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007870:	3301      	adds	r3, #1
 8007872:	444b      	add	r3, r9
 8007874:	106d      	asrs	r5, r5, #1
 8007876:	429d      	cmp	r5, r3
 8007878:	bf38      	it	cc
 800787a:	461d      	movcc	r5, r3
 800787c:	0553      	lsls	r3, r2, #21
 800787e:	d531      	bpl.n	80078e4 <__ssputs_r+0xa0>
 8007880:	4629      	mov	r1, r5
 8007882:	f000 fb39 	bl	8007ef8 <_malloc_r>
 8007886:	4606      	mov	r6, r0
 8007888:	b950      	cbnz	r0, 80078a0 <__ssputs_r+0x5c>
 800788a:	230c      	movs	r3, #12
 800788c:	f8ca 3000 	str.w	r3, [sl]
 8007890:	89a3      	ldrh	r3, [r4, #12]
 8007892:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007896:	81a3      	strh	r3, [r4, #12]
 8007898:	f04f 30ff 	mov.w	r0, #4294967295
 800789c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078a0:	6921      	ldr	r1, [r4, #16]
 80078a2:	464a      	mov	r2, r9
 80078a4:	f7ff ff84 	bl	80077b0 <memcpy>
 80078a8:	89a3      	ldrh	r3, [r4, #12]
 80078aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80078ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078b2:	81a3      	strh	r3, [r4, #12]
 80078b4:	6126      	str	r6, [r4, #16]
 80078b6:	6165      	str	r5, [r4, #20]
 80078b8:	444e      	add	r6, r9
 80078ba:	eba5 0509 	sub.w	r5, r5, r9
 80078be:	6026      	str	r6, [r4, #0]
 80078c0:	60a5      	str	r5, [r4, #8]
 80078c2:	463e      	mov	r6, r7
 80078c4:	42be      	cmp	r6, r7
 80078c6:	d900      	bls.n	80078ca <__ssputs_r+0x86>
 80078c8:	463e      	mov	r6, r7
 80078ca:	4632      	mov	r2, r6
 80078cc:	6820      	ldr	r0, [r4, #0]
 80078ce:	4641      	mov	r1, r8
 80078d0:	f000 faa8 	bl	8007e24 <memmove>
 80078d4:	68a3      	ldr	r3, [r4, #8]
 80078d6:	6822      	ldr	r2, [r4, #0]
 80078d8:	1b9b      	subs	r3, r3, r6
 80078da:	4432      	add	r2, r6
 80078dc:	60a3      	str	r3, [r4, #8]
 80078de:	6022      	str	r2, [r4, #0]
 80078e0:	2000      	movs	r0, #0
 80078e2:	e7db      	b.n	800789c <__ssputs_r+0x58>
 80078e4:	462a      	mov	r2, r5
 80078e6:	f000 fb61 	bl	8007fac <_realloc_r>
 80078ea:	4606      	mov	r6, r0
 80078ec:	2800      	cmp	r0, #0
 80078ee:	d1e1      	bne.n	80078b4 <__ssputs_r+0x70>
 80078f0:	6921      	ldr	r1, [r4, #16]
 80078f2:	4650      	mov	r0, sl
 80078f4:	f000 fab0 	bl	8007e58 <_free_r>
 80078f8:	e7c7      	b.n	800788a <__ssputs_r+0x46>
	...

080078fc <_svfiprintf_r>:
 80078fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007900:	4698      	mov	r8, r3
 8007902:	898b      	ldrh	r3, [r1, #12]
 8007904:	061b      	lsls	r3, r3, #24
 8007906:	b09d      	sub	sp, #116	; 0x74
 8007908:	4607      	mov	r7, r0
 800790a:	460d      	mov	r5, r1
 800790c:	4614      	mov	r4, r2
 800790e:	d50e      	bpl.n	800792e <_svfiprintf_r+0x32>
 8007910:	690b      	ldr	r3, [r1, #16]
 8007912:	b963      	cbnz	r3, 800792e <_svfiprintf_r+0x32>
 8007914:	2140      	movs	r1, #64	; 0x40
 8007916:	f000 faef 	bl	8007ef8 <_malloc_r>
 800791a:	6028      	str	r0, [r5, #0]
 800791c:	6128      	str	r0, [r5, #16]
 800791e:	b920      	cbnz	r0, 800792a <_svfiprintf_r+0x2e>
 8007920:	230c      	movs	r3, #12
 8007922:	603b      	str	r3, [r7, #0]
 8007924:	f04f 30ff 	mov.w	r0, #4294967295
 8007928:	e0d1      	b.n	8007ace <_svfiprintf_r+0x1d2>
 800792a:	2340      	movs	r3, #64	; 0x40
 800792c:	616b      	str	r3, [r5, #20]
 800792e:	2300      	movs	r3, #0
 8007930:	9309      	str	r3, [sp, #36]	; 0x24
 8007932:	2320      	movs	r3, #32
 8007934:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007938:	f8cd 800c 	str.w	r8, [sp, #12]
 800793c:	2330      	movs	r3, #48	; 0x30
 800793e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007ae8 <_svfiprintf_r+0x1ec>
 8007942:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007946:	f04f 0901 	mov.w	r9, #1
 800794a:	4623      	mov	r3, r4
 800794c:	469a      	mov	sl, r3
 800794e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007952:	b10a      	cbz	r2, 8007958 <_svfiprintf_r+0x5c>
 8007954:	2a25      	cmp	r2, #37	; 0x25
 8007956:	d1f9      	bne.n	800794c <_svfiprintf_r+0x50>
 8007958:	ebba 0b04 	subs.w	fp, sl, r4
 800795c:	d00b      	beq.n	8007976 <_svfiprintf_r+0x7a>
 800795e:	465b      	mov	r3, fp
 8007960:	4622      	mov	r2, r4
 8007962:	4629      	mov	r1, r5
 8007964:	4638      	mov	r0, r7
 8007966:	f7ff ff6d 	bl	8007844 <__ssputs_r>
 800796a:	3001      	adds	r0, #1
 800796c:	f000 80aa 	beq.w	8007ac4 <_svfiprintf_r+0x1c8>
 8007970:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007972:	445a      	add	r2, fp
 8007974:	9209      	str	r2, [sp, #36]	; 0x24
 8007976:	f89a 3000 	ldrb.w	r3, [sl]
 800797a:	2b00      	cmp	r3, #0
 800797c:	f000 80a2 	beq.w	8007ac4 <_svfiprintf_r+0x1c8>
 8007980:	2300      	movs	r3, #0
 8007982:	f04f 32ff 	mov.w	r2, #4294967295
 8007986:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800798a:	f10a 0a01 	add.w	sl, sl, #1
 800798e:	9304      	str	r3, [sp, #16]
 8007990:	9307      	str	r3, [sp, #28]
 8007992:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007996:	931a      	str	r3, [sp, #104]	; 0x68
 8007998:	4654      	mov	r4, sl
 800799a:	2205      	movs	r2, #5
 800799c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079a0:	4851      	ldr	r0, [pc, #324]	; (8007ae8 <_svfiprintf_r+0x1ec>)
 80079a2:	f7f8 fc65 	bl	8000270 <memchr>
 80079a6:	9a04      	ldr	r2, [sp, #16]
 80079a8:	b9d8      	cbnz	r0, 80079e2 <_svfiprintf_r+0xe6>
 80079aa:	06d0      	lsls	r0, r2, #27
 80079ac:	bf44      	itt	mi
 80079ae:	2320      	movmi	r3, #32
 80079b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80079b4:	0711      	lsls	r1, r2, #28
 80079b6:	bf44      	itt	mi
 80079b8:	232b      	movmi	r3, #43	; 0x2b
 80079ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80079be:	f89a 3000 	ldrb.w	r3, [sl]
 80079c2:	2b2a      	cmp	r3, #42	; 0x2a
 80079c4:	d015      	beq.n	80079f2 <_svfiprintf_r+0xf6>
 80079c6:	9a07      	ldr	r2, [sp, #28]
 80079c8:	4654      	mov	r4, sl
 80079ca:	2000      	movs	r0, #0
 80079cc:	f04f 0c0a 	mov.w	ip, #10
 80079d0:	4621      	mov	r1, r4
 80079d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80079d6:	3b30      	subs	r3, #48	; 0x30
 80079d8:	2b09      	cmp	r3, #9
 80079da:	d94e      	bls.n	8007a7a <_svfiprintf_r+0x17e>
 80079dc:	b1b0      	cbz	r0, 8007a0c <_svfiprintf_r+0x110>
 80079de:	9207      	str	r2, [sp, #28]
 80079e0:	e014      	b.n	8007a0c <_svfiprintf_r+0x110>
 80079e2:	eba0 0308 	sub.w	r3, r0, r8
 80079e6:	fa09 f303 	lsl.w	r3, r9, r3
 80079ea:	4313      	orrs	r3, r2
 80079ec:	9304      	str	r3, [sp, #16]
 80079ee:	46a2      	mov	sl, r4
 80079f0:	e7d2      	b.n	8007998 <_svfiprintf_r+0x9c>
 80079f2:	9b03      	ldr	r3, [sp, #12]
 80079f4:	1d19      	adds	r1, r3, #4
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	9103      	str	r1, [sp, #12]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	bfbb      	ittet	lt
 80079fe:	425b      	neglt	r3, r3
 8007a00:	f042 0202 	orrlt.w	r2, r2, #2
 8007a04:	9307      	strge	r3, [sp, #28]
 8007a06:	9307      	strlt	r3, [sp, #28]
 8007a08:	bfb8      	it	lt
 8007a0a:	9204      	strlt	r2, [sp, #16]
 8007a0c:	7823      	ldrb	r3, [r4, #0]
 8007a0e:	2b2e      	cmp	r3, #46	; 0x2e
 8007a10:	d10c      	bne.n	8007a2c <_svfiprintf_r+0x130>
 8007a12:	7863      	ldrb	r3, [r4, #1]
 8007a14:	2b2a      	cmp	r3, #42	; 0x2a
 8007a16:	d135      	bne.n	8007a84 <_svfiprintf_r+0x188>
 8007a18:	9b03      	ldr	r3, [sp, #12]
 8007a1a:	1d1a      	adds	r2, r3, #4
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	9203      	str	r2, [sp, #12]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	bfb8      	it	lt
 8007a24:	f04f 33ff 	movlt.w	r3, #4294967295
 8007a28:	3402      	adds	r4, #2
 8007a2a:	9305      	str	r3, [sp, #20]
 8007a2c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007af8 <_svfiprintf_r+0x1fc>
 8007a30:	7821      	ldrb	r1, [r4, #0]
 8007a32:	2203      	movs	r2, #3
 8007a34:	4650      	mov	r0, sl
 8007a36:	f7f8 fc1b 	bl	8000270 <memchr>
 8007a3a:	b140      	cbz	r0, 8007a4e <_svfiprintf_r+0x152>
 8007a3c:	2340      	movs	r3, #64	; 0x40
 8007a3e:	eba0 000a 	sub.w	r0, r0, sl
 8007a42:	fa03 f000 	lsl.w	r0, r3, r0
 8007a46:	9b04      	ldr	r3, [sp, #16]
 8007a48:	4303      	orrs	r3, r0
 8007a4a:	3401      	adds	r4, #1
 8007a4c:	9304      	str	r3, [sp, #16]
 8007a4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a52:	4826      	ldr	r0, [pc, #152]	; (8007aec <_svfiprintf_r+0x1f0>)
 8007a54:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007a58:	2206      	movs	r2, #6
 8007a5a:	f7f8 fc09 	bl	8000270 <memchr>
 8007a5e:	2800      	cmp	r0, #0
 8007a60:	d038      	beq.n	8007ad4 <_svfiprintf_r+0x1d8>
 8007a62:	4b23      	ldr	r3, [pc, #140]	; (8007af0 <_svfiprintf_r+0x1f4>)
 8007a64:	bb1b      	cbnz	r3, 8007aae <_svfiprintf_r+0x1b2>
 8007a66:	9b03      	ldr	r3, [sp, #12]
 8007a68:	3307      	adds	r3, #7
 8007a6a:	f023 0307 	bic.w	r3, r3, #7
 8007a6e:	3308      	adds	r3, #8
 8007a70:	9303      	str	r3, [sp, #12]
 8007a72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a74:	4433      	add	r3, r6
 8007a76:	9309      	str	r3, [sp, #36]	; 0x24
 8007a78:	e767      	b.n	800794a <_svfiprintf_r+0x4e>
 8007a7a:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a7e:	460c      	mov	r4, r1
 8007a80:	2001      	movs	r0, #1
 8007a82:	e7a5      	b.n	80079d0 <_svfiprintf_r+0xd4>
 8007a84:	2300      	movs	r3, #0
 8007a86:	3401      	adds	r4, #1
 8007a88:	9305      	str	r3, [sp, #20]
 8007a8a:	4619      	mov	r1, r3
 8007a8c:	f04f 0c0a 	mov.w	ip, #10
 8007a90:	4620      	mov	r0, r4
 8007a92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a96:	3a30      	subs	r2, #48	; 0x30
 8007a98:	2a09      	cmp	r2, #9
 8007a9a:	d903      	bls.n	8007aa4 <_svfiprintf_r+0x1a8>
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d0c5      	beq.n	8007a2c <_svfiprintf_r+0x130>
 8007aa0:	9105      	str	r1, [sp, #20]
 8007aa2:	e7c3      	b.n	8007a2c <_svfiprintf_r+0x130>
 8007aa4:	fb0c 2101 	mla	r1, ip, r1, r2
 8007aa8:	4604      	mov	r4, r0
 8007aaa:	2301      	movs	r3, #1
 8007aac:	e7f0      	b.n	8007a90 <_svfiprintf_r+0x194>
 8007aae:	ab03      	add	r3, sp, #12
 8007ab0:	9300      	str	r3, [sp, #0]
 8007ab2:	462a      	mov	r2, r5
 8007ab4:	4b0f      	ldr	r3, [pc, #60]	; (8007af4 <_svfiprintf_r+0x1f8>)
 8007ab6:	a904      	add	r1, sp, #16
 8007ab8:	4638      	mov	r0, r7
 8007aba:	f3af 8000 	nop.w
 8007abe:	1c42      	adds	r2, r0, #1
 8007ac0:	4606      	mov	r6, r0
 8007ac2:	d1d6      	bne.n	8007a72 <_svfiprintf_r+0x176>
 8007ac4:	89ab      	ldrh	r3, [r5, #12]
 8007ac6:	065b      	lsls	r3, r3, #25
 8007ac8:	f53f af2c 	bmi.w	8007924 <_svfiprintf_r+0x28>
 8007acc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ace:	b01d      	add	sp, #116	; 0x74
 8007ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ad4:	ab03      	add	r3, sp, #12
 8007ad6:	9300      	str	r3, [sp, #0]
 8007ad8:	462a      	mov	r2, r5
 8007ada:	4b06      	ldr	r3, [pc, #24]	; (8007af4 <_svfiprintf_r+0x1f8>)
 8007adc:	a904      	add	r1, sp, #16
 8007ade:	4638      	mov	r0, r7
 8007ae0:	f000 f87a 	bl	8007bd8 <_printf_i>
 8007ae4:	e7eb      	b.n	8007abe <_svfiprintf_r+0x1c2>
 8007ae6:	bf00      	nop
 8007ae8:	080081e0 	.word	0x080081e0
 8007aec:	080081ea 	.word	0x080081ea
 8007af0:	00000000 	.word	0x00000000
 8007af4:	08007845 	.word	0x08007845
 8007af8:	080081e6 	.word	0x080081e6

08007afc <_printf_common>:
 8007afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b00:	4616      	mov	r6, r2
 8007b02:	4699      	mov	r9, r3
 8007b04:	688a      	ldr	r2, [r1, #8]
 8007b06:	690b      	ldr	r3, [r1, #16]
 8007b08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	bfb8      	it	lt
 8007b10:	4613      	movlt	r3, r2
 8007b12:	6033      	str	r3, [r6, #0]
 8007b14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007b18:	4607      	mov	r7, r0
 8007b1a:	460c      	mov	r4, r1
 8007b1c:	b10a      	cbz	r2, 8007b22 <_printf_common+0x26>
 8007b1e:	3301      	adds	r3, #1
 8007b20:	6033      	str	r3, [r6, #0]
 8007b22:	6823      	ldr	r3, [r4, #0]
 8007b24:	0699      	lsls	r1, r3, #26
 8007b26:	bf42      	ittt	mi
 8007b28:	6833      	ldrmi	r3, [r6, #0]
 8007b2a:	3302      	addmi	r3, #2
 8007b2c:	6033      	strmi	r3, [r6, #0]
 8007b2e:	6825      	ldr	r5, [r4, #0]
 8007b30:	f015 0506 	ands.w	r5, r5, #6
 8007b34:	d106      	bne.n	8007b44 <_printf_common+0x48>
 8007b36:	f104 0a19 	add.w	sl, r4, #25
 8007b3a:	68e3      	ldr	r3, [r4, #12]
 8007b3c:	6832      	ldr	r2, [r6, #0]
 8007b3e:	1a9b      	subs	r3, r3, r2
 8007b40:	42ab      	cmp	r3, r5
 8007b42:	dc26      	bgt.n	8007b92 <_printf_common+0x96>
 8007b44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007b48:	1e13      	subs	r3, r2, #0
 8007b4a:	6822      	ldr	r2, [r4, #0]
 8007b4c:	bf18      	it	ne
 8007b4e:	2301      	movne	r3, #1
 8007b50:	0692      	lsls	r2, r2, #26
 8007b52:	d42b      	bmi.n	8007bac <_printf_common+0xb0>
 8007b54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007b58:	4649      	mov	r1, r9
 8007b5a:	4638      	mov	r0, r7
 8007b5c:	47c0      	blx	r8
 8007b5e:	3001      	adds	r0, #1
 8007b60:	d01e      	beq.n	8007ba0 <_printf_common+0xa4>
 8007b62:	6823      	ldr	r3, [r4, #0]
 8007b64:	68e5      	ldr	r5, [r4, #12]
 8007b66:	6832      	ldr	r2, [r6, #0]
 8007b68:	f003 0306 	and.w	r3, r3, #6
 8007b6c:	2b04      	cmp	r3, #4
 8007b6e:	bf08      	it	eq
 8007b70:	1aad      	subeq	r5, r5, r2
 8007b72:	68a3      	ldr	r3, [r4, #8]
 8007b74:	6922      	ldr	r2, [r4, #16]
 8007b76:	bf0c      	ite	eq
 8007b78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b7c:	2500      	movne	r5, #0
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	bfc4      	itt	gt
 8007b82:	1a9b      	subgt	r3, r3, r2
 8007b84:	18ed      	addgt	r5, r5, r3
 8007b86:	2600      	movs	r6, #0
 8007b88:	341a      	adds	r4, #26
 8007b8a:	42b5      	cmp	r5, r6
 8007b8c:	d11a      	bne.n	8007bc4 <_printf_common+0xc8>
 8007b8e:	2000      	movs	r0, #0
 8007b90:	e008      	b.n	8007ba4 <_printf_common+0xa8>
 8007b92:	2301      	movs	r3, #1
 8007b94:	4652      	mov	r2, sl
 8007b96:	4649      	mov	r1, r9
 8007b98:	4638      	mov	r0, r7
 8007b9a:	47c0      	blx	r8
 8007b9c:	3001      	adds	r0, #1
 8007b9e:	d103      	bne.n	8007ba8 <_printf_common+0xac>
 8007ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ba8:	3501      	adds	r5, #1
 8007baa:	e7c6      	b.n	8007b3a <_printf_common+0x3e>
 8007bac:	18e1      	adds	r1, r4, r3
 8007bae:	1c5a      	adds	r2, r3, #1
 8007bb0:	2030      	movs	r0, #48	; 0x30
 8007bb2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007bb6:	4422      	add	r2, r4
 8007bb8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007bbc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007bc0:	3302      	adds	r3, #2
 8007bc2:	e7c7      	b.n	8007b54 <_printf_common+0x58>
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	4622      	mov	r2, r4
 8007bc8:	4649      	mov	r1, r9
 8007bca:	4638      	mov	r0, r7
 8007bcc:	47c0      	blx	r8
 8007bce:	3001      	adds	r0, #1
 8007bd0:	d0e6      	beq.n	8007ba0 <_printf_common+0xa4>
 8007bd2:	3601      	adds	r6, #1
 8007bd4:	e7d9      	b.n	8007b8a <_printf_common+0x8e>
	...

08007bd8 <_printf_i>:
 8007bd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007bdc:	460c      	mov	r4, r1
 8007bde:	4691      	mov	r9, r2
 8007be0:	7e27      	ldrb	r7, [r4, #24]
 8007be2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007be4:	2f78      	cmp	r7, #120	; 0x78
 8007be6:	4680      	mov	r8, r0
 8007be8:	469a      	mov	sl, r3
 8007bea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007bee:	d807      	bhi.n	8007c00 <_printf_i+0x28>
 8007bf0:	2f62      	cmp	r7, #98	; 0x62
 8007bf2:	d80a      	bhi.n	8007c0a <_printf_i+0x32>
 8007bf4:	2f00      	cmp	r7, #0
 8007bf6:	f000 80d8 	beq.w	8007daa <_printf_i+0x1d2>
 8007bfa:	2f58      	cmp	r7, #88	; 0x58
 8007bfc:	f000 80a3 	beq.w	8007d46 <_printf_i+0x16e>
 8007c00:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007c04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007c08:	e03a      	b.n	8007c80 <_printf_i+0xa8>
 8007c0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007c0e:	2b15      	cmp	r3, #21
 8007c10:	d8f6      	bhi.n	8007c00 <_printf_i+0x28>
 8007c12:	a001      	add	r0, pc, #4	; (adr r0, 8007c18 <_printf_i+0x40>)
 8007c14:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007c18:	08007c71 	.word	0x08007c71
 8007c1c:	08007c85 	.word	0x08007c85
 8007c20:	08007c01 	.word	0x08007c01
 8007c24:	08007c01 	.word	0x08007c01
 8007c28:	08007c01 	.word	0x08007c01
 8007c2c:	08007c01 	.word	0x08007c01
 8007c30:	08007c85 	.word	0x08007c85
 8007c34:	08007c01 	.word	0x08007c01
 8007c38:	08007c01 	.word	0x08007c01
 8007c3c:	08007c01 	.word	0x08007c01
 8007c40:	08007c01 	.word	0x08007c01
 8007c44:	08007d91 	.word	0x08007d91
 8007c48:	08007cb5 	.word	0x08007cb5
 8007c4c:	08007d73 	.word	0x08007d73
 8007c50:	08007c01 	.word	0x08007c01
 8007c54:	08007c01 	.word	0x08007c01
 8007c58:	08007db3 	.word	0x08007db3
 8007c5c:	08007c01 	.word	0x08007c01
 8007c60:	08007cb5 	.word	0x08007cb5
 8007c64:	08007c01 	.word	0x08007c01
 8007c68:	08007c01 	.word	0x08007c01
 8007c6c:	08007d7b 	.word	0x08007d7b
 8007c70:	680b      	ldr	r3, [r1, #0]
 8007c72:	1d1a      	adds	r2, r3, #4
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	600a      	str	r2, [r1, #0]
 8007c78:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007c7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007c80:	2301      	movs	r3, #1
 8007c82:	e0a3      	b.n	8007dcc <_printf_i+0x1f4>
 8007c84:	6825      	ldr	r5, [r4, #0]
 8007c86:	6808      	ldr	r0, [r1, #0]
 8007c88:	062e      	lsls	r6, r5, #24
 8007c8a:	f100 0304 	add.w	r3, r0, #4
 8007c8e:	d50a      	bpl.n	8007ca6 <_printf_i+0xce>
 8007c90:	6805      	ldr	r5, [r0, #0]
 8007c92:	600b      	str	r3, [r1, #0]
 8007c94:	2d00      	cmp	r5, #0
 8007c96:	da03      	bge.n	8007ca0 <_printf_i+0xc8>
 8007c98:	232d      	movs	r3, #45	; 0x2d
 8007c9a:	426d      	negs	r5, r5
 8007c9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ca0:	485e      	ldr	r0, [pc, #376]	; (8007e1c <_printf_i+0x244>)
 8007ca2:	230a      	movs	r3, #10
 8007ca4:	e019      	b.n	8007cda <_printf_i+0x102>
 8007ca6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007caa:	6805      	ldr	r5, [r0, #0]
 8007cac:	600b      	str	r3, [r1, #0]
 8007cae:	bf18      	it	ne
 8007cb0:	b22d      	sxthne	r5, r5
 8007cb2:	e7ef      	b.n	8007c94 <_printf_i+0xbc>
 8007cb4:	680b      	ldr	r3, [r1, #0]
 8007cb6:	6825      	ldr	r5, [r4, #0]
 8007cb8:	1d18      	adds	r0, r3, #4
 8007cba:	6008      	str	r0, [r1, #0]
 8007cbc:	0628      	lsls	r0, r5, #24
 8007cbe:	d501      	bpl.n	8007cc4 <_printf_i+0xec>
 8007cc0:	681d      	ldr	r5, [r3, #0]
 8007cc2:	e002      	b.n	8007cca <_printf_i+0xf2>
 8007cc4:	0669      	lsls	r1, r5, #25
 8007cc6:	d5fb      	bpl.n	8007cc0 <_printf_i+0xe8>
 8007cc8:	881d      	ldrh	r5, [r3, #0]
 8007cca:	4854      	ldr	r0, [pc, #336]	; (8007e1c <_printf_i+0x244>)
 8007ccc:	2f6f      	cmp	r7, #111	; 0x6f
 8007cce:	bf0c      	ite	eq
 8007cd0:	2308      	moveq	r3, #8
 8007cd2:	230a      	movne	r3, #10
 8007cd4:	2100      	movs	r1, #0
 8007cd6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007cda:	6866      	ldr	r6, [r4, #4]
 8007cdc:	60a6      	str	r6, [r4, #8]
 8007cde:	2e00      	cmp	r6, #0
 8007ce0:	bfa2      	ittt	ge
 8007ce2:	6821      	ldrge	r1, [r4, #0]
 8007ce4:	f021 0104 	bicge.w	r1, r1, #4
 8007ce8:	6021      	strge	r1, [r4, #0]
 8007cea:	b90d      	cbnz	r5, 8007cf0 <_printf_i+0x118>
 8007cec:	2e00      	cmp	r6, #0
 8007cee:	d04d      	beq.n	8007d8c <_printf_i+0x1b4>
 8007cf0:	4616      	mov	r6, r2
 8007cf2:	fbb5 f1f3 	udiv	r1, r5, r3
 8007cf6:	fb03 5711 	mls	r7, r3, r1, r5
 8007cfa:	5dc7      	ldrb	r7, [r0, r7]
 8007cfc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007d00:	462f      	mov	r7, r5
 8007d02:	42bb      	cmp	r3, r7
 8007d04:	460d      	mov	r5, r1
 8007d06:	d9f4      	bls.n	8007cf2 <_printf_i+0x11a>
 8007d08:	2b08      	cmp	r3, #8
 8007d0a:	d10b      	bne.n	8007d24 <_printf_i+0x14c>
 8007d0c:	6823      	ldr	r3, [r4, #0]
 8007d0e:	07df      	lsls	r7, r3, #31
 8007d10:	d508      	bpl.n	8007d24 <_printf_i+0x14c>
 8007d12:	6923      	ldr	r3, [r4, #16]
 8007d14:	6861      	ldr	r1, [r4, #4]
 8007d16:	4299      	cmp	r1, r3
 8007d18:	bfde      	ittt	le
 8007d1a:	2330      	movle	r3, #48	; 0x30
 8007d1c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007d20:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007d24:	1b92      	subs	r2, r2, r6
 8007d26:	6122      	str	r2, [r4, #16]
 8007d28:	f8cd a000 	str.w	sl, [sp]
 8007d2c:	464b      	mov	r3, r9
 8007d2e:	aa03      	add	r2, sp, #12
 8007d30:	4621      	mov	r1, r4
 8007d32:	4640      	mov	r0, r8
 8007d34:	f7ff fee2 	bl	8007afc <_printf_common>
 8007d38:	3001      	adds	r0, #1
 8007d3a:	d14c      	bne.n	8007dd6 <_printf_i+0x1fe>
 8007d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d40:	b004      	add	sp, #16
 8007d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d46:	4835      	ldr	r0, [pc, #212]	; (8007e1c <_printf_i+0x244>)
 8007d48:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007d4c:	6823      	ldr	r3, [r4, #0]
 8007d4e:	680e      	ldr	r6, [r1, #0]
 8007d50:	061f      	lsls	r7, r3, #24
 8007d52:	f856 5b04 	ldr.w	r5, [r6], #4
 8007d56:	600e      	str	r6, [r1, #0]
 8007d58:	d514      	bpl.n	8007d84 <_printf_i+0x1ac>
 8007d5a:	07d9      	lsls	r1, r3, #31
 8007d5c:	bf44      	itt	mi
 8007d5e:	f043 0320 	orrmi.w	r3, r3, #32
 8007d62:	6023      	strmi	r3, [r4, #0]
 8007d64:	b91d      	cbnz	r5, 8007d6e <_printf_i+0x196>
 8007d66:	6823      	ldr	r3, [r4, #0]
 8007d68:	f023 0320 	bic.w	r3, r3, #32
 8007d6c:	6023      	str	r3, [r4, #0]
 8007d6e:	2310      	movs	r3, #16
 8007d70:	e7b0      	b.n	8007cd4 <_printf_i+0xfc>
 8007d72:	6823      	ldr	r3, [r4, #0]
 8007d74:	f043 0320 	orr.w	r3, r3, #32
 8007d78:	6023      	str	r3, [r4, #0]
 8007d7a:	2378      	movs	r3, #120	; 0x78
 8007d7c:	4828      	ldr	r0, [pc, #160]	; (8007e20 <_printf_i+0x248>)
 8007d7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007d82:	e7e3      	b.n	8007d4c <_printf_i+0x174>
 8007d84:	065e      	lsls	r6, r3, #25
 8007d86:	bf48      	it	mi
 8007d88:	b2ad      	uxthmi	r5, r5
 8007d8a:	e7e6      	b.n	8007d5a <_printf_i+0x182>
 8007d8c:	4616      	mov	r6, r2
 8007d8e:	e7bb      	b.n	8007d08 <_printf_i+0x130>
 8007d90:	680b      	ldr	r3, [r1, #0]
 8007d92:	6826      	ldr	r6, [r4, #0]
 8007d94:	6960      	ldr	r0, [r4, #20]
 8007d96:	1d1d      	adds	r5, r3, #4
 8007d98:	600d      	str	r5, [r1, #0]
 8007d9a:	0635      	lsls	r5, r6, #24
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	d501      	bpl.n	8007da4 <_printf_i+0x1cc>
 8007da0:	6018      	str	r0, [r3, #0]
 8007da2:	e002      	b.n	8007daa <_printf_i+0x1d2>
 8007da4:	0671      	lsls	r1, r6, #25
 8007da6:	d5fb      	bpl.n	8007da0 <_printf_i+0x1c8>
 8007da8:	8018      	strh	r0, [r3, #0]
 8007daa:	2300      	movs	r3, #0
 8007dac:	6123      	str	r3, [r4, #16]
 8007dae:	4616      	mov	r6, r2
 8007db0:	e7ba      	b.n	8007d28 <_printf_i+0x150>
 8007db2:	680b      	ldr	r3, [r1, #0]
 8007db4:	1d1a      	adds	r2, r3, #4
 8007db6:	600a      	str	r2, [r1, #0]
 8007db8:	681e      	ldr	r6, [r3, #0]
 8007dba:	6862      	ldr	r2, [r4, #4]
 8007dbc:	2100      	movs	r1, #0
 8007dbe:	4630      	mov	r0, r6
 8007dc0:	f7f8 fa56 	bl	8000270 <memchr>
 8007dc4:	b108      	cbz	r0, 8007dca <_printf_i+0x1f2>
 8007dc6:	1b80      	subs	r0, r0, r6
 8007dc8:	6060      	str	r0, [r4, #4]
 8007dca:	6863      	ldr	r3, [r4, #4]
 8007dcc:	6123      	str	r3, [r4, #16]
 8007dce:	2300      	movs	r3, #0
 8007dd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007dd4:	e7a8      	b.n	8007d28 <_printf_i+0x150>
 8007dd6:	6923      	ldr	r3, [r4, #16]
 8007dd8:	4632      	mov	r2, r6
 8007dda:	4649      	mov	r1, r9
 8007ddc:	4640      	mov	r0, r8
 8007dde:	47d0      	blx	sl
 8007de0:	3001      	adds	r0, #1
 8007de2:	d0ab      	beq.n	8007d3c <_printf_i+0x164>
 8007de4:	6823      	ldr	r3, [r4, #0]
 8007de6:	079b      	lsls	r3, r3, #30
 8007de8:	d413      	bmi.n	8007e12 <_printf_i+0x23a>
 8007dea:	68e0      	ldr	r0, [r4, #12]
 8007dec:	9b03      	ldr	r3, [sp, #12]
 8007dee:	4298      	cmp	r0, r3
 8007df0:	bfb8      	it	lt
 8007df2:	4618      	movlt	r0, r3
 8007df4:	e7a4      	b.n	8007d40 <_printf_i+0x168>
 8007df6:	2301      	movs	r3, #1
 8007df8:	4632      	mov	r2, r6
 8007dfa:	4649      	mov	r1, r9
 8007dfc:	4640      	mov	r0, r8
 8007dfe:	47d0      	blx	sl
 8007e00:	3001      	adds	r0, #1
 8007e02:	d09b      	beq.n	8007d3c <_printf_i+0x164>
 8007e04:	3501      	adds	r5, #1
 8007e06:	68e3      	ldr	r3, [r4, #12]
 8007e08:	9903      	ldr	r1, [sp, #12]
 8007e0a:	1a5b      	subs	r3, r3, r1
 8007e0c:	42ab      	cmp	r3, r5
 8007e0e:	dcf2      	bgt.n	8007df6 <_printf_i+0x21e>
 8007e10:	e7eb      	b.n	8007dea <_printf_i+0x212>
 8007e12:	2500      	movs	r5, #0
 8007e14:	f104 0619 	add.w	r6, r4, #25
 8007e18:	e7f5      	b.n	8007e06 <_printf_i+0x22e>
 8007e1a:	bf00      	nop
 8007e1c:	080081f1 	.word	0x080081f1
 8007e20:	08008202 	.word	0x08008202

08007e24 <memmove>:
 8007e24:	4288      	cmp	r0, r1
 8007e26:	b510      	push	{r4, lr}
 8007e28:	eb01 0402 	add.w	r4, r1, r2
 8007e2c:	d902      	bls.n	8007e34 <memmove+0x10>
 8007e2e:	4284      	cmp	r4, r0
 8007e30:	4623      	mov	r3, r4
 8007e32:	d807      	bhi.n	8007e44 <memmove+0x20>
 8007e34:	1e43      	subs	r3, r0, #1
 8007e36:	42a1      	cmp	r1, r4
 8007e38:	d008      	beq.n	8007e4c <memmove+0x28>
 8007e3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007e3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007e42:	e7f8      	b.n	8007e36 <memmove+0x12>
 8007e44:	4402      	add	r2, r0
 8007e46:	4601      	mov	r1, r0
 8007e48:	428a      	cmp	r2, r1
 8007e4a:	d100      	bne.n	8007e4e <memmove+0x2a>
 8007e4c:	bd10      	pop	{r4, pc}
 8007e4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007e52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007e56:	e7f7      	b.n	8007e48 <memmove+0x24>

08007e58 <_free_r>:
 8007e58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007e5a:	2900      	cmp	r1, #0
 8007e5c:	d048      	beq.n	8007ef0 <_free_r+0x98>
 8007e5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e62:	9001      	str	r0, [sp, #4]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	f1a1 0404 	sub.w	r4, r1, #4
 8007e6a:	bfb8      	it	lt
 8007e6c:	18e4      	addlt	r4, r4, r3
 8007e6e:	f000 f8d3 	bl	8008018 <__malloc_lock>
 8007e72:	4a20      	ldr	r2, [pc, #128]	; (8007ef4 <_free_r+0x9c>)
 8007e74:	9801      	ldr	r0, [sp, #4]
 8007e76:	6813      	ldr	r3, [r2, #0]
 8007e78:	4615      	mov	r5, r2
 8007e7a:	b933      	cbnz	r3, 8007e8a <_free_r+0x32>
 8007e7c:	6063      	str	r3, [r4, #4]
 8007e7e:	6014      	str	r4, [r2, #0]
 8007e80:	b003      	add	sp, #12
 8007e82:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007e86:	f000 b8cd 	b.w	8008024 <__malloc_unlock>
 8007e8a:	42a3      	cmp	r3, r4
 8007e8c:	d90b      	bls.n	8007ea6 <_free_r+0x4e>
 8007e8e:	6821      	ldr	r1, [r4, #0]
 8007e90:	1862      	adds	r2, r4, r1
 8007e92:	4293      	cmp	r3, r2
 8007e94:	bf04      	itt	eq
 8007e96:	681a      	ldreq	r2, [r3, #0]
 8007e98:	685b      	ldreq	r3, [r3, #4]
 8007e9a:	6063      	str	r3, [r4, #4]
 8007e9c:	bf04      	itt	eq
 8007e9e:	1852      	addeq	r2, r2, r1
 8007ea0:	6022      	streq	r2, [r4, #0]
 8007ea2:	602c      	str	r4, [r5, #0]
 8007ea4:	e7ec      	b.n	8007e80 <_free_r+0x28>
 8007ea6:	461a      	mov	r2, r3
 8007ea8:	685b      	ldr	r3, [r3, #4]
 8007eaa:	b10b      	cbz	r3, 8007eb0 <_free_r+0x58>
 8007eac:	42a3      	cmp	r3, r4
 8007eae:	d9fa      	bls.n	8007ea6 <_free_r+0x4e>
 8007eb0:	6811      	ldr	r1, [r2, #0]
 8007eb2:	1855      	adds	r5, r2, r1
 8007eb4:	42a5      	cmp	r5, r4
 8007eb6:	d10b      	bne.n	8007ed0 <_free_r+0x78>
 8007eb8:	6824      	ldr	r4, [r4, #0]
 8007eba:	4421      	add	r1, r4
 8007ebc:	1854      	adds	r4, r2, r1
 8007ebe:	42a3      	cmp	r3, r4
 8007ec0:	6011      	str	r1, [r2, #0]
 8007ec2:	d1dd      	bne.n	8007e80 <_free_r+0x28>
 8007ec4:	681c      	ldr	r4, [r3, #0]
 8007ec6:	685b      	ldr	r3, [r3, #4]
 8007ec8:	6053      	str	r3, [r2, #4]
 8007eca:	4421      	add	r1, r4
 8007ecc:	6011      	str	r1, [r2, #0]
 8007ece:	e7d7      	b.n	8007e80 <_free_r+0x28>
 8007ed0:	d902      	bls.n	8007ed8 <_free_r+0x80>
 8007ed2:	230c      	movs	r3, #12
 8007ed4:	6003      	str	r3, [r0, #0]
 8007ed6:	e7d3      	b.n	8007e80 <_free_r+0x28>
 8007ed8:	6825      	ldr	r5, [r4, #0]
 8007eda:	1961      	adds	r1, r4, r5
 8007edc:	428b      	cmp	r3, r1
 8007ede:	bf04      	itt	eq
 8007ee0:	6819      	ldreq	r1, [r3, #0]
 8007ee2:	685b      	ldreq	r3, [r3, #4]
 8007ee4:	6063      	str	r3, [r4, #4]
 8007ee6:	bf04      	itt	eq
 8007ee8:	1949      	addeq	r1, r1, r5
 8007eea:	6021      	streq	r1, [r4, #0]
 8007eec:	6054      	str	r4, [r2, #4]
 8007eee:	e7c7      	b.n	8007e80 <_free_r+0x28>
 8007ef0:	b003      	add	sp, #12
 8007ef2:	bd30      	pop	{r4, r5, pc}
 8007ef4:	2001a7dc 	.word	0x2001a7dc

08007ef8 <_malloc_r>:
 8007ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007efa:	1ccd      	adds	r5, r1, #3
 8007efc:	f025 0503 	bic.w	r5, r5, #3
 8007f00:	3508      	adds	r5, #8
 8007f02:	2d0c      	cmp	r5, #12
 8007f04:	bf38      	it	cc
 8007f06:	250c      	movcc	r5, #12
 8007f08:	2d00      	cmp	r5, #0
 8007f0a:	4606      	mov	r6, r0
 8007f0c:	db01      	blt.n	8007f12 <_malloc_r+0x1a>
 8007f0e:	42a9      	cmp	r1, r5
 8007f10:	d903      	bls.n	8007f1a <_malloc_r+0x22>
 8007f12:	230c      	movs	r3, #12
 8007f14:	6033      	str	r3, [r6, #0]
 8007f16:	2000      	movs	r0, #0
 8007f18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f1a:	f000 f87d 	bl	8008018 <__malloc_lock>
 8007f1e:	4921      	ldr	r1, [pc, #132]	; (8007fa4 <_malloc_r+0xac>)
 8007f20:	680a      	ldr	r2, [r1, #0]
 8007f22:	4614      	mov	r4, r2
 8007f24:	b99c      	cbnz	r4, 8007f4e <_malloc_r+0x56>
 8007f26:	4f20      	ldr	r7, [pc, #128]	; (8007fa8 <_malloc_r+0xb0>)
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	b923      	cbnz	r3, 8007f36 <_malloc_r+0x3e>
 8007f2c:	4621      	mov	r1, r4
 8007f2e:	4630      	mov	r0, r6
 8007f30:	f000 f862 	bl	8007ff8 <_sbrk_r>
 8007f34:	6038      	str	r0, [r7, #0]
 8007f36:	4629      	mov	r1, r5
 8007f38:	4630      	mov	r0, r6
 8007f3a:	f000 f85d 	bl	8007ff8 <_sbrk_r>
 8007f3e:	1c43      	adds	r3, r0, #1
 8007f40:	d123      	bne.n	8007f8a <_malloc_r+0x92>
 8007f42:	230c      	movs	r3, #12
 8007f44:	6033      	str	r3, [r6, #0]
 8007f46:	4630      	mov	r0, r6
 8007f48:	f000 f86c 	bl	8008024 <__malloc_unlock>
 8007f4c:	e7e3      	b.n	8007f16 <_malloc_r+0x1e>
 8007f4e:	6823      	ldr	r3, [r4, #0]
 8007f50:	1b5b      	subs	r3, r3, r5
 8007f52:	d417      	bmi.n	8007f84 <_malloc_r+0x8c>
 8007f54:	2b0b      	cmp	r3, #11
 8007f56:	d903      	bls.n	8007f60 <_malloc_r+0x68>
 8007f58:	6023      	str	r3, [r4, #0]
 8007f5a:	441c      	add	r4, r3
 8007f5c:	6025      	str	r5, [r4, #0]
 8007f5e:	e004      	b.n	8007f6a <_malloc_r+0x72>
 8007f60:	6863      	ldr	r3, [r4, #4]
 8007f62:	42a2      	cmp	r2, r4
 8007f64:	bf0c      	ite	eq
 8007f66:	600b      	streq	r3, [r1, #0]
 8007f68:	6053      	strne	r3, [r2, #4]
 8007f6a:	4630      	mov	r0, r6
 8007f6c:	f000 f85a 	bl	8008024 <__malloc_unlock>
 8007f70:	f104 000b 	add.w	r0, r4, #11
 8007f74:	1d23      	adds	r3, r4, #4
 8007f76:	f020 0007 	bic.w	r0, r0, #7
 8007f7a:	1ac2      	subs	r2, r0, r3
 8007f7c:	d0cc      	beq.n	8007f18 <_malloc_r+0x20>
 8007f7e:	1a1b      	subs	r3, r3, r0
 8007f80:	50a3      	str	r3, [r4, r2]
 8007f82:	e7c9      	b.n	8007f18 <_malloc_r+0x20>
 8007f84:	4622      	mov	r2, r4
 8007f86:	6864      	ldr	r4, [r4, #4]
 8007f88:	e7cc      	b.n	8007f24 <_malloc_r+0x2c>
 8007f8a:	1cc4      	adds	r4, r0, #3
 8007f8c:	f024 0403 	bic.w	r4, r4, #3
 8007f90:	42a0      	cmp	r0, r4
 8007f92:	d0e3      	beq.n	8007f5c <_malloc_r+0x64>
 8007f94:	1a21      	subs	r1, r4, r0
 8007f96:	4630      	mov	r0, r6
 8007f98:	f000 f82e 	bl	8007ff8 <_sbrk_r>
 8007f9c:	3001      	adds	r0, #1
 8007f9e:	d1dd      	bne.n	8007f5c <_malloc_r+0x64>
 8007fa0:	e7cf      	b.n	8007f42 <_malloc_r+0x4a>
 8007fa2:	bf00      	nop
 8007fa4:	2001a7dc 	.word	0x2001a7dc
 8007fa8:	2001a7e0 	.word	0x2001a7e0

08007fac <_realloc_r>:
 8007fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fae:	4607      	mov	r7, r0
 8007fb0:	4614      	mov	r4, r2
 8007fb2:	460e      	mov	r6, r1
 8007fb4:	b921      	cbnz	r1, 8007fc0 <_realloc_r+0x14>
 8007fb6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007fba:	4611      	mov	r1, r2
 8007fbc:	f7ff bf9c 	b.w	8007ef8 <_malloc_r>
 8007fc0:	b922      	cbnz	r2, 8007fcc <_realloc_r+0x20>
 8007fc2:	f7ff ff49 	bl	8007e58 <_free_r>
 8007fc6:	4625      	mov	r5, r4
 8007fc8:	4628      	mov	r0, r5
 8007fca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fcc:	f000 f830 	bl	8008030 <_malloc_usable_size_r>
 8007fd0:	42a0      	cmp	r0, r4
 8007fd2:	d20f      	bcs.n	8007ff4 <_realloc_r+0x48>
 8007fd4:	4621      	mov	r1, r4
 8007fd6:	4638      	mov	r0, r7
 8007fd8:	f7ff ff8e 	bl	8007ef8 <_malloc_r>
 8007fdc:	4605      	mov	r5, r0
 8007fde:	2800      	cmp	r0, #0
 8007fe0:	d0f2      	beq.n	8007fc8 <_realloc_r+0x1c>
 8007fe2:	4631      	mov	r1, r6
 8007fe4:	4622      	mov	r2, r4
 8007fe6:	f7ff fbe3 	bl	80077b0 <memcpy>
 8007fea:	4631      	mov	r1, r6
 8007fec:	4638      	mov	r0, r7
 8007fee:	f7ff ff33 	bl	8007e58 <_free_r>
 8007ff2:	e7e9      	b.n	8007fc8 <_realloc_r+0x1c>
 8007ff4:	4635      	mov	r5, r6
 8007ff6:	e7e7      	b.n	8007fc8 <_realloc_r+0x1c>

08007ff8 <_sbrk_r>:
 8007ff8:	b538      	push	{r3, r4, r5, lr}
 8007ffa:	4d06      	ldr	r5, [pc, #24]	; (8008014 <_sbrk_r+0x1c>)
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	4604      	mov	r4, r0
 8008000:	4608      	mov	r0, r1
 8008002:	602b      	str	r3, [r5, #0]
 8008004:	f000 f81e 	bl	8008044 <_sbrk>
 8008008:	1c43      	adds	r3, r0, #1
 800800a:	d102      	bne.n	8008012 <_sbrk_r+0x1a>
 800800c:	682b      	ldr	r3, [r5, #0]
 800800e:	b103      	cbz	r3, 8008012 <_sbrk_r+0x1a>
 8008010:	6023      	str	r3, [r4, #0]
 8008012:	bd38      	pop	{r3, r4, r5, pc}
 8008014:	2001a960 	.word	0x2001a960

08008018 <__malloc_lock>:
 8008018:	4801      	ldr	r0, [pc, #4]	; (8008020 <__malloc_lock+0x8>)
 800801a:	f000 b811 	b.w	8008040 <__retarget_lock_acquire_recursive>
 800801e:	bf00      	nop
 8008020:	2001a968 	.word	0x2001a968

08008024 <__malloc_unlock>:
 8008024:	4801      	ldr	r0, [pc, #4]	; (800802c <__malloc_unlock+0x8>)
 8008026:	f000 b80c 	b.w	8008042 <__retarget_lock_release_recursive>
 800802a:	bf00      	nop
 800802c:	2001a968 	.word	0x2001a968

08008030 <_malloc_usable_size_r>:
 8008030:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008034:	1f18      	subs	r0, r3, #4
 8008036:	2b00      	cmp	r3, #0
 8008038:	bfbc      	itt	lt
 800803a:	580b      	ldrlt	r3, [r1, r0]
 800803c:	18c0      	addlt	r0, r0, r3
 800803e:	4770      	bx	lr

08008040 <__retarget_lock_acquire_recursive>:
 8008040:	4770      	bx	lr

08008042 <__retarget_lock_release_recursive>:
 8008042:	4770      	bx	lr

08008044 <_sbrk>:
 8008044:	4b04      	ldr	r3, [pc, #16]	; (8008058 <_sbrk+0x14>)
 8008046:	6819      	ldr	r1, [r3, #0]
 8008048:	4602      	mov	r2, r0
 800804a:	b909      	cbnz	r1, 8008050 <_sbrk+0xc>
 800804c:	4903      	ldr	r1, [pc, #12]	; (800805c <_sbrk+0x18>)
 800804e:	6019      	str	r1, [r3, #0]
 8008050:	6818      	ldr	r0, [r3, #0]
 8008052:	4402      	add	r2, r0
 8008054:	601a      	str	r2, [r3, #0]
 8008056:	4770      	bx	lr
 8008058:	2001a7e4 	.word	0x2001a7e4
 800805c:	2001a970 	.word	0x2001a970

08008060 <_init>:
 8008060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008062:	bf00      	nop
 8008064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008066:	bc08      	pop	{r3}
 8008068:	469e      	mov	lr, r3
 800806a:	4770      	bx	lr

0800806c <_fini>:
 800806c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800806e:	bf00      	nop
 8008070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008072:	bc08      	pop	{r3}
 8008074:	469e      	mov	lr, r3
 8008076:	4770      	bx	lr
