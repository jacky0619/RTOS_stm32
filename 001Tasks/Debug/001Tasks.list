
001Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ecc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  0800505c  0800505c  0001505c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005130  08005130  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08005130  08005130  00015130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005138  08005138  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005138  08005138  00015138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800513c  0800513c  0001513c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005140  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012e2c  20000078  080051b8  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20012ea4  080051b8  00022ea4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012b62  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a6d  00000000  00000000  00032c0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f28  00000000  00000000  00035678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e00  00000000  00000000  000365a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022e59  00000000  00000000  000373a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000105b9  00000000  00000000  0005a1f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d24f2  00000000  00000000  0006a7b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013cca4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000451c  00000000  00000000  0013ccf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005044 	.word	0x08005044

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08005044 	.word	0x08005044

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b088      	sub	sp, #32
 80004cc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ce:	f000 fbc1 	bl	8000c54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d2:	f000 f845 	bl	8000560 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d6:	f000 f8ad 	bl	8000634 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  //xTaskCreate(pxTaskCode, pcName, usStackDepth, pvParameters, uxPriority, pxCreatedTask)//alt+?
    status = xTaskCreate(task1_handler, "Task-1", 200, "Hello world from Task-1", 2, &task1_handle);
 80004da:	f107 0308 	add.w	r3, r7, #8
 80004de:	9301      	str	r3, [sp, #4]
 80004e0:	2302      	movs	r3, #2
 80004e2:	9300      	str	r3, [sp, #0]
 80004e4:	4b18      	ldr	r3, [pc, #96]	; (8000548 <main+0x80>)
 80004e6:	22c8      	movs	r2, #200	; 0xc8
 80004e8:	4918      	ldr	r1, [pc, #96]	; (800054c <main+0x84>)
 80004ea:	4819      	ldr	r0, [pc, #100]	; (8000550 <main+0x88>)
 80004ec:	f002 fb30 	bl	8002b50 <xTaskCreate>
 80004f0:	6178      	str	r0, [r7, #20]
    configASSERT(status == pdPASS);
 80004f2:	697b      	ldr	r3, [r7, #20]
 80004f4:	2b01      	cmp	r3, #1
 80004f6:	d00a      	beq.n	800050e <main+0x46>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80004f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80004fc:	f383 8811 	msr	BASEPRI, r3
 8000500:	f3bf 8f6f 	isb	sy
 8000504:	f3bf 8f4f 	dsb	sy
 8000508:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800050a:	bf00      	nop
 800050c:	e7fe      	b.n	800050c <main+0x44>

    status = xTaskCreate(task2_handler, "Task-2", 200, "Hello world from Task-2", 2, &task2_handle);
 800050e:	1d3b      	adds	r3, r7, #4
 8000510:	9301      	str	r3, [sp, #4]
 8000512:	2302      	movs	r3, #2
 8000514:	9300      	str	r3, [sp, #0]
 8000516:	4b0f      	ldr	r3, [pc, #60]	; (8000554 <main+0x8c>)
 8000518:	22c8      	movs	r2, #200	; 0xc8
 800051a:	490f      	ldr	r1, [pc, #60]	; (8000558 <main+0x90>)
 800051c:	480f      	ldr	r0, [pc, #60]	; (800055c <main+0x94>)
 800051e:	f002 fb17 	bl	8002b50 <xTaskCreate>
 8000522:	6178      	str	r0, [r7, #20]
    configASSERT(status == pdPASS);
 8000524:	697b      	ldr	r3, [r7, #20]
 8000526:	2b01      	cmp	r3, #1
 8000528:	d00a      	beq.n	8000540 <main+0x78>
        __asm volatile
 800052a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800052e:	f383 8811 	msr	BASEPRI, r3
 8000532:	f3bf 8f6f 	isb	sy
 8000536:	f3bf 8f4f 	dsb	sy
 800053a:	60fb      	str	r3, [r7, #12]
    }
 800053c:	bf00      	nop
 800053e:	e7fe      	b.n	800053e <main+0x76>

    //start the FreeRTOS scheduler
    vTaskStartScheduler();
 8000540:	f002 fc3e 	bl	8002dc0 <vTaskStartScheduler>
    //if the control comes here, then the launch of the scheduler has failed due to insufficient memory in heap.
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000544:	e7fe      	b.n	8000544 <main+0x7c>
 8000546:	bf00      	nop
 8000548:	0800505c 	.word	0x0800505c
 800054c:	08005074 	.word	0x08005074
 8000550:	080008f5 	.word	0x080008f5
 8000554:	0800507c 	.word	0x0800507c
 8000558:	08005094 	.word	0x08005094
 800055c:	08000919 	.word	0x08000919

08000560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b094      	sub	sp, #80	; 0x50
 8000564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000566:	f107 0320 	add.w	r3, r7, #32
 800056a:	2230      	movs	r2, #48	; 0x30
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f004 f88c 	bl	800468c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000574:	f107 030c 	add.w	r3, r7, #12
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]
 8000582:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000584:	2300      	movs	r3, #0
 8000586:	60bb      	str	r3, [r7, #8]
 8000588:	4b28      	ldr	r3, [pc, #160]	; (800062c <SystemClock_Config+0xcc>)
 800058a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800058c:	4a27      	ldr	r2, [pc, #156]	; (800062c <SystemClock_Config+0xcc>)
 800058e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000592:	6413      	str	r3, [r2, #64]	; 0x40
 8000594:	4b25      	ldr	r3, [pc, #148]	; (800062c <SystemClock_Config+0xcc>)
 8000596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800059c:	60bb      	str	r3, [r7, #8]
 800059e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a0:	2300      	movs	r3, #0
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	4b22      	ldr	r3, [pc, #136]	; (8000630 <SystemClock_Config+0xd0>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a21      	ldr	r2, [pc, #132]	; (8000630 <SystemClock_Config+0xd0>)
 80005aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ae:	6013      	str	r3, [r2, #0]
 80005b0:	4b1f      	ldr	r3, [pc, #124]	; (8000630 <SystemClock_Config+0xd0>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005b8:	607b      	str	r3, [r7, #4]
 80005ba:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005bc:	2302      	movs	r3, #2
 80005be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c0:	2301      	movs	r3, #1
 80005c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c4:	2310      	movs	r3, #16
 80005c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c8:	2302      	movs	r3, #2
 80005ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005cc:	2300      	movs	r3, #0
 80005ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005d0:	2308      	movs	r3, #8
 80005d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80005d4:	2332      	movs	r3, #50	; 0x32
 80005d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005d8:	2304      	movs	r3, #4
 80005da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005dc:	2307      	movs	r3, #7
 80005de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e0:	f107 0320 	add.w	r3, r7, #32
 80005e4:	4618      	mov	r0, r3
 80005e6:	f000 fe0f 	bl	8001208 <HAL_RCC_OscConfig>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005f0:	f000 f9b6 	bl	8000960 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f4:	230f      	movs	r3, #15
 80005f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f8:	2302      	movs	r3, #2
 80005fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fc:	2300      	movs	r3, #0
 80005fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000600:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000604:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000606:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800060a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800060c:	f107 030c 	add.w	r3, r7, #12
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f001 f870 	bl	80016f8 <HAL_RCC_ClockConfig>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800061e:	f000 f99f 	bl	8000960 <Error_Handler>
  }
}
 8000622:	bf00      	nop
 8000624:	3750      	adds	r7, #80	; 0x50
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40023800 	.word	0x40023800
 8000630:	40007000 	.word	0x40007000

08000634 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b08c      	sub	sp, #48	; 0x30
 8000638:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063a:	f107 031c 	add.w	r3, r7, #28
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
 8000642:	605a      	str	r2, [r3, #4]
 8000644:	609a      	str	r2, [r3, #8]
 8000646:	60da      	str	r2, [r3, #12]
 8000648:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800064a:	2300      	movs	r3, #0
 800064c:	61bb      	str	r3, [r7, #24]
 800064e:	4ba1      	ldr	r3, [pc, #644]	; (80008d4 <MX_GPIO_Init+0x2a0>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	4aa0      	ldr	r2, [pc, #640]	; (80008d4 <MX_GPIO_Init+0x2a0>)
 8000654:	f043 0310 	orr.w	r3, r3, #16
 8000658:	6313      	str	r3, [r2, #48]	; 0x30
 800065a:	4b9e      	ldr	r3, [pc, #632]	; (80008d4 <MX_GPIO_Init+0x2a0>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	f003 0310 	and.w	r3, r3, #16
 8000662:	61bb      	str	r3, [r7, #24]
 8000664:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000666:	2300      	movs	r3, #0
 8000668:	617b      	str	r3, [r7, #20]
 800066a:	4b9a      	ldr	r3, [pc, #616]	; (80008d4 <MX_GPIO_Init+0x2a0>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	4a99      	ldr	r2, [pc, #612]	; (80008d4 <MX_GPIO_Init+0x2a0>)
 8000670:	f043 0304 	orr.w	r3, r3, #4
 8000674:	6313      	str	r3, [r2, #48]	; 0x30
 8000676:	4b97      	ldr	r3, [pc, #604]	; (80008d4 <MX_GPIO_Init+0x2a0>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	f003 0304 	and.w	r3, r3, #4
 800067e:	617b      	str	r3, [r7, #20]
 8000680:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000682:	2300      	movs	r3, #0
 8000684:	613b      	str	r3, [r7, #16]
 8000686:	4b93      	ldr	r3, [pc, #588]	; (80008d4 <MX_GPIO_Init+0x2a0>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	4a92      	ldr	r2, [pc, #584]	; (80008d4 <MX_GPIO_Init+0x2a0>)
 800068c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000690:	6313      	str	r3, [r2, #48]	; 0x30
 8000692:	4b90      	ldr	r3, [pc, #576]	; (80008d4 <MX_GPIO_Init+0x2a0>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800069a:	613b      	str	r3, [r7, #16]
 800069c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800069e:	2300      	movs	r3, #0
 80006a0:	60fb      	str	r3, [r7, #12]
 80006a2:	4b8c      	ldr	r3, [pc, #560]	; (80008d4 <MX_GPIO_Init+0x2a0>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	4a8b      	ldr	r2, [pc, #556]	; (80008d4 <MX_GPIO_Init+0x2a0>)
 80006a8:	f043 0301 	orr.w	r3, r3, #1
 80006ac:	6313      	str	r3, [r2, #48]	; 0x30
 80006ae:	4b89      	ldr	r3, [pc, #548]	; (80008d4 <MX_GPIO_Init+0x2a0>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	f003 0301 	and.w	r3, r3, #1
 80006b6:	60fb      	str	r3, [r7, #12]
 80006b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	60bb      	str	r3, [r7, #8]
 80006be:	4b85      	ldr	r3, [pc, #532]	; (80008d4 <MX_GPIO_Init+0x2a0>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	4a84      	ldr	r2, [pc, #528]	; (80008d4 <MX_GPIO_Init+0x2a0>)
 80006c4:	f043 0302 	orr.w	r3, r3, #2
 80006c8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ca:	4b82      	ldr	r3, [pc, #520]	; (80008d4 <MX_GPIO_Init+0x2a0>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	f003 0302 	and.w	r3, r3, #2
 80006d2:	60bb      	str	r3, [r7, #8]
 80006d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	607b      	str	r3, [r7, #4]
 80006da:	4b7e      	ldr	r3, [pc, #504]	; (80008d4 <MX_GPIO_Init+0x2a0>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	4a7d      	ldr	r2, [pc, #500]	; (80008d4 <MX_GPIO_Init+0x2a0>)
 80006e0:	f043 0308 	orr.w	r3, r3, #8
 80006e4:	6313      	str	r3, [r2, #48]	; 0x30
 80006e6:	4b7b      	ldr	r3, [pc, #492]	; (80008d4 <MX_GPIO_Init+0x2a0>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	f003 0308 	and.w	r3, r3, #8
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80006f2:	2200      	movs	r2, #0
 80006f4:	2108      	movs	r1, #8
 80006f6:	4878      	ldr	r0, [pc, #480]	; (80008d8 <MX_GPIO_Init+0x2a4>)
 80006f8:	f000 fd6c 	bl	80011d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80006fc:	2201      	movs	r2, #1
 80006fe:	2101      	movs	r1, #1
 8000700:	4876      	ldr	r0, [pc, #472]	; (80008dc <MX_GPIO_Init+0x2a8>)
 8000702:	f000 fd67 	bl	80011d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000706:	2200      	movs	r2, #0
 8000708:	f24f 0110 	movw	r1, #61456	; 0xf010
 800070c:	4874      	ldr	r0, [pc, #464]	; (80008e0 <MX_GPIO_Init+0x2ac>)
 800070e:	f000 fd61 	bl	80011d4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000712:	2308      	movs	r3, #8
 8000714:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000716:	2301      	movs	r3, #1
 8000718:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071a:	2300      	movs	r3, #0
 800071c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071e:	2300      	movs	r3, #0
 8000720:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000722:	f107 031c 	add.w	r3, r7, #28
 8000726:	4619      	mov	r1, r3
 8000728:	486b      	ldr	r0, [pc, #428]	; (80008d8 <MX_GPIO_Init+0x2a4>)
 800072a:	f000 fbb7 	bl	8000e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800072e:	2301      	movs	r3, #1
 8000730:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000732:	2301      	movs	r3, #1
 8000734:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000736:	2300      	movs	r3, #0
 8000738:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073a:	2300      	movs	r3, #0
 800073c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800073e:	f107 031c 	add.w	r3, r7, #28
 8000742:	4619      	mov	r1, r3
 8000744:	4865      	ldr	r0, [pc, #404]	; (80008dc <MX_GPIO_Init+0x2a8>)
 8000746:	f000 fba9 	bl	8000e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800074a:	2308      	movs	r3, #8
 800074c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800074e:	2302      	movs	r3, #2
 8000750:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000752:	2300      	movs	r3, #0
 8000754:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000756:	2300      	movs	r3, #0
 8000758:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800075a:	2305      	movs	r3, #5
 800075c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800075e:	f107 031c 	add.w	r3, r7, #28
 8000762:	4619      	mov	r1, r3
 8000764:	485d      	ldr	r0, [pc, #372]	; (80008dc <MX_GPIO_Init+0x2a8>)
 8000766:	f000 fb99 	bl	8000e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800076a:	2301      	movs	r3, #1
 800076c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800076e:	4b5d      	ldr	r3, [pc, #372]	; (80008e4 <MX_GPIO_Init+0x2b0>)
 8000770:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000772:	2300      	movs	r3, #0
 8000774:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000776:	f107 031c 	add.w	r3, r7, #28
 800077a:	4619      	mov	r1, r3
 800077c:	485a      	ldr	r0, [pc, #360]	; (80008e8 <MX_GPIO_Init+0x2b4>)
 800077e:	f000 fb8d 	bl	8000e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000782:	2310      	movs	r3, #16
 8000784:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000786:	2302      	movs	r3, #2
 8000788:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078a:	2300      	movs	r3, #0
 800078c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078e:	2300      	movs	r3, #0
 8000790:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000792:	2306      	movs	r3, #6
 8000794:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000796:	f107 031c 	add.w	r3, r7, #28
 800079a:	4619      	mov	r1, r3
 800079c:	4852      	ldr	r0, [pc, #328]	; (80008e8 <MX_GPIO_Init+0x2b4>)
 800079e:	f000 fb7d 	bl	8000e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80007a2:	23e0      	movs	r3, #224	; 0xe0
 80007a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a6:	2302      	movs	r3, #2
 80007a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007aa:	2300      	movs	r3, #0
 80007ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ae:	2300      	movs	r3, #0
 80007b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80007b2:	2305      	movs	r3, #5
 80007b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b6:	f107 031c 	add.w	r3, r7, #28
 80007ba:	4619      	mov	r1, r3
 80007bc:	484a      	ldr	r0, [pc, #296]	; (80008e8 <MX_GPIO_Init+0x2b4>)
 80007be:	f000 fb6d 	bl	8000e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80007c2:	2304      	movs	r3, #4
 80007c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007c6:	2300      	movs	r3, #0
 80007c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	2300      	movs	r3, #0
 80007cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80007ce:	f107 031c 	add.w	r3, r7, #28
 80007d2:	4619      	mov	r1, r3
 80007d4:	4845      	ldr	r0, [pc, #276]	; (80008ec <MX_GPIO_Init+0x2b8>)
 80007d6:	f000 fb61 	bl	8000e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80007da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e0:	2302      	movs	r3, #2
 80007e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e4:	2300      	movs	r3, #0
 80007e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e8:	2300      	movs	r3, #0
 80007ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80007ec:	2305      	movs	r3, #5
 80007ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80007f0:	f107 031c 	add.w	r3, r7, #28
 80007f4:	4619      	mov	r1, r3
 80007f6:	483d      	ldr	r0, [pc, #244]	; (80008ec <MX_GPIO_Init+0x2b8>)
 80007f8:	f000 fb50 	bl	8000e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007fc:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000800:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000802:	2301      	movs	r3, #1
 8000804:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000806:	2300      	movs	r3, #0
 8000808:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080a:	2300      	movs	r3, #0
 800080c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800080e:	f107 031c 	add.w	r3, r7, #28
 8000812:	4619      	mov	r1, r3
 8000814:	4832      	ldr	r0, [pc, #200]	; (80008e0 <MX_GPIO_Init+0x2ac>)
 8000816:	f000 fb41 	bl	8000e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800081a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800081e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000820:	2302      	movs	r3, #2
 8000822:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000828:	2300      	movs	r3, #0
 800082a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800082c:	2306      	movs	r3, #6
 800082e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000830:	f107 031c 	add.w	r3, r7, #28
 8000834:	4619      	mov	r1, r3
 8000836:	4829      	ldr	r0, [pc, #164]	; (80008dc <MX_GPIO_Init+0x2a8>)
 8000838:	f000 fb30 	bl	8000e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800083c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000840:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000842:	2300      	movs	r3, #0
 8000844:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800084a:	f107 031c 	add.w	r3, r7, #28
 800084e:	4619      	mov	r1, r3
 8000850:	4825      	ldr	r0, [pc, #148]	; (80008e8 <MX_GPIO_Init+0x2b4>)
 8000852:	f000 fb23 	bl	8000e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000856:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800085a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085c:	2302      	movs	r3, #2
 800085e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000864:	2300      	movs	r3, #0
 8000866:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000868:	230a      	movs	r3, #10
 800086a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086c:	f107 031c 	add.w	r3, r7, #28
 8000870:	4619      	mov	r1, r3
 8000872:	481d      	ldr	r0, [pc, #116]	; (80008e8 <MX_GPIO_Init+0x2b4>)
 8000874:	f000 fb12 	bl	8000e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000878:	2320      	movs	r3, #32
 800087a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800087c:	2300      	movs	r3, #0
 800087e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000884:	f107 031c 	add.w	r3, r7, #28
 8000888:	4619      	mov	r1, r3
 800088a:	4815      	ldr	r0, [pc, #84]	; (80008e0 <MX_GPIO_Init+0x2ac>)
 800088c:	f000 fb06 	bl	8000e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000890:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000894:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000896:	2312      	movs	r3, #18
 8000898:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800089a:	2301      	movs	r3, #1
 800089c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089e:	2300      	movs	r3, #0
 80008a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008a2:	2304      	movs	r3, #4
 80008a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a6:	f107 031c 	add.w	r3, r7, #28
 80008aa:	4619      	mov	r1, r3
 80008ac:	480f      	ldr	r0, [pc, #60]	; (80008ec <MX_GPIO_Init+0x2b8>)
 80008ae:	f000 faf5 	bl	8000e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80008b2:	2302      	movs	r3, #2
 80008b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008b6:	4b0e      	ldr	r3, [pc, #56]	; (80008f0 <MX_GPIO_Init+0x2bc>)
 80008b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80008be:	f107 031c 	add.w	r3, r7, #28
 80008c2:	4619      	mov	r1, r3
 80008c4:	4804      	ldr	r0, [pc, #16]	; (80008d8 <MX_GPIO_Init+0x2a4>)
 80008c6:	f000 fae9 	bl	8000e9c <HAL_GPIO_Init>

}
 80008ca:	bf00      	nop
 80008cc:	3730      	adds	r7, #48	; 0x30
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40023800 	.word	0x40023800
 80008d8:	40021000 	.word	0x40021000
 80008dc:	40020800 	.word	0x40020800
 80008e0:	40020c00 	.word	0x40020c00
 80008e4:	10110000 	.word	0x10110000
 80008e8:	40020000 	.word	0x40020000
 80008ec:	40020400 	.word	0x40020400
 80008f0:	10120000 	.word	0x10120000

080008f4 <task1_handler>:

/* USER CODE BEGIN 4 */
static void task1_handler(void* parameters){
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
	while(1)
	{
		printf("%s\n",(char*) parameters);
 80008fc:	6878      	ldr	r0, [r7, #4]
 80008fe:	f003 ff3b 	bl	8004778 <puts>
		taskYIELD();
 8000902:	4b04      	ldr	r3, [pc, #16]	; (8000914 <task1_handler+0x20>)
 8000904:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	f3bf 8f4f 	dsb	sy
 800090e:	f3bf 8f6f 	isb	sy
		printf("%s\n",(char*) parameters);
 8000912:	e7f3      	b.n	80008fc <task1_handler+0x8>
 8000914:	e000ed04 	.word	0xe000ed04

08000918 <task2_handler>:
	}

}

static void task2_handler(void* parameters){
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		printf("%s\n",(char*) parameters);
 8000920:	6878      	ldr	r0, [r7, #4]
 8000922:	f003 ff29 	bl	8004778 <puts>
		taskYIELD();
 8000926:	4b04      	ldr	r3, [pc, #16]	; (8000938 <task2_handler+0x20>)
 8000928:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	f3bf 8f4f 	dsb	sy
 8000932:	f3bf 8f6f 	isb	sy
		printf("%s\n",(char*) parameters);
 8000936:	e7f3      	b.n	8000920 <task2_handler+0x8>
 8000938:	e000ed04 	.word	0xe000ed04

0800093c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a04      	ldr	r2, [pc, #16]	; (800095c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d101      	bne.n	8000952 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800094e:	f000 f9a3 	bl	8000c98 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000952:	bf00      	nop
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40001000 	.word	0x40001000

08000960 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000964:	b672      	cpsid	i
}
 8000966:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000968:	e7fe      	b.n	8000968 <Error_Handler+0x8>
	...

0800096c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	607b      	str	r3, [r7, #4]
 8000976:	4b10      	ldr	r3, [pc, #64]	; (80009b8 <HAL_MspInit+0x4c>)
 8000978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800097a:	4a0f      	ldr	r2, [pc, #60]	; (80009b8 <HAL_MspInit+0x4c>)
 800097c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000980:	6453      	str	r3, [r2, #68]	; 0x44
 8000982:	4b0d      	ldr	r3, [pc, #52]	; (80009b8 <HAL_MspInit+0x4c>)
 8000984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000986:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800098a:	607b      	str	r3, [r7, #4]
 800098c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	603b      	str	r3, [r7, #0]
 8000992:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <HAL_MspInit+0x4c>)
 8000994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000996:	4a08      	ldr	r2, [pc, #32]	; (80009b8 <HAL_MspInit+0x4c>)
 8000998:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800099c:	6413      	str	r3, [r2, #64]	; 0x40
 800099e:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <HAL_MspInit+0x4c>)
 80009a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009a6:	603b      	str	r3, [r7, #0]
 80009a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009aa:	bf00      	nop
 80009ac:	370c      	adds	r7, #12
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	40023800 	.word	0x40023800

080009bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b08c      	sub	sp, #48	; 0x30
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80009c4:	2300      	movs	r3, #0
 80009c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80009c8:	2300      	movs	r3, #0
 80009ca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80009cc:	2200      	movs	r2, #0
 80009ce:	6879      	ldr	r1, [r7, #4]
 80009d0:	2036      	movs	r0, #54	; 0x36
 80009d2:	f000 fa39 	bl	8000e48 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80009d6:	2036      	movs	r0, #54	; 0x36
 80009d8:	f000 fa52 	bl	8000e80 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80009dc:	2300      	movs	r3, #0
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	4b1f      	ldr	r3, [pc, #124]	; (8000a60 <HAL_InitTick+0xa4>)
 80009e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e4:	4a1e      	ldr	r2, [pc, #120]	; (8000a60 <HAL_InitTick+0xa4>)
 80009e6:	f043 0310 	orr.w	r3, r3, #16
 80009ea:	6413      	str	r3, [r2, #64]	; 0x40
 80009ec:	4b1c      	ldr	r3, [pc, #112]	; (8000a60 <HAL_InitTick+0xa4>)
 80009ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f0:	f003 0310 	and.w	r3, r3, #16
 80009f4:	60fb      	str	r3, [r7, #12]
 80009f6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009f8:	f107 0210 	add.w	r2, r7, #16
 80009fc:	f107 0314 	add.w	r3, r7, #20
 8000a00:	4611      	mov	r1, r2
 8000a02:	4618      	mov	r0, r3
 8000a04:	f001 f860 	bl	8001ac8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000a08:	f001 f84a 	bl	8001aa0 <HAL_RCC_GetPCLK1Freq>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	005b      	lsls	r3, r3, #1
 8000a10:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a14:	4a13      	ldr	r2, [pc, #76]	; (8000a64 <HAL_InitTick+0xa8>)
 8000a16:	fba2 2303 	umull	r2, r3, r2, r3
 8000a1a:	0c9b      	lsrs	r3, r3, #18
 8000a1c:	3b01      	subs	r3, #1
 8000a1e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000a20:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <HAL_InitTick+0xac>)
 8000a22:	4a12      	ldr	r2, [pc, #72]	; (8000a6c <HAL_InitTick+0xb0>)
 8000a24:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000a26:	4b10      	ldr	r3, [pc, #64]	; (8000a68 <HAL_InitTick+0xac>)
 8000a28:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a2c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a2e:	4a0e      	ldr	r2, [pc, #56]	; (8000a68 <HAL_InitTick+0xac>)
 8000a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a32:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a34:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <HAL_InitTick+0xac>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <HAL_InitTick+0xac>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000a40:	4809      	ldr	r0, [pc, #36]	; (8000a68 <HAL_InitTick+0xac>)
 8000a42:	f001 f873 	bl	8001b2c <HAL_TIM_Base_Init>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d104      	bne.n	8000a56 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000a4c:	4806      	ldr	r0, [pc, #24]	; (8000a68 <HAL_InitTick+0xac>)
 8000a4e:	f001 f8c7 	bl	8001be0 <HAL_TIM_Base_Start_IT>
 8000a52:	4603      	mov	r3, r0
 8000a54:	e000      	b.n	8000a58 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a56:	2301      	movs	r3, #1
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	3730      	adds	r7, #48	; 0x30
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	40023800 	.word	0x40023800
 8000a64:	431bde83 	.word	0x431bde83
 8000a68:	20012e08 	.word	0x20012e08
 8000a6c:	40001000 	.word	0x40001000

08000a70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <NMI_Handler+0x4>

08000a76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a7a:	e7fe      	b.n	8000a7a <HardFault_Handler+0x4>

08000a7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a80:	e7fe      	b.n	8000a80 <MemManage_Handler+0x4>

08000a82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a86:	e7fe      	b.n	8000a86 <BusFault_Handler+0x4>

08000a88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <UsageFault_Handler+0x4>

08000a8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr

08000a9c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000aa0:	4802      	ldr	r0, [pc, #8]	; (8000aac <TIM6_DAC_IRQHandler+0x10>)
 8000aa2:	f001 f90d 	bl	8001cc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	20012e08 	.word	0x20012e08

08000ab0 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000aba:	4b0f      	ldr	r3, [pc, #60]	; (8000af8 <ITM_SendChar+0x48>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4a0e      	ldr	r2, [pc, #56]	; (8000af8 <ITM_SendChar+0x48>)
 8000ac0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ac4:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000ac6:	4b0d      	ldr	r3, [pc, #52]	; (8000afc <ITM_SendChar+0x4c>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4a0c      	ldr	r2, [pc, #48]	; (8000afc <ITM_SendChar+0x4c>)
 8000acc:	f043 0301 	orr.w	r3, r3, #1
 8000ad0:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000ad2:	bf00      	nop
 8000ad4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f003 0301 	and.w	r3, r3, #1
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d0f8      	beq.n	8000ad4 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000ae2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000ae6:	79fb      	ldrb	r3, [r7, #7]
 8000ae8:	6013      	str	r3, [r2, #0]
}
 8000aea:	bf00      	nop
 8000aec:	370c      	adds	r7, #12
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	e000edfc 	.word	0xe000edfc
 8000afc:	e0000e00 	.word	0xe0000e00

08000b00 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b086      	sub	sp, #24
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	60f8      	str	r0, [r7, #12]
 8000b08:	60b9      	str	r1, [r7, #8]
 8000b0a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]
 8000b10:	e00a      	b.n	8000b28 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b12:	f3af 8000 	nop.w
 8000b16:	4601      	mov	r1, r0
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	1c5a      	adds	r2, r3, #1
 8000b1c:	60ba      	str	r2, [r7, #8]
 8000b1e:	b2ca      	uxtb	r2, r1
 8000b20:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	3301      	adds	r3, #1
 8000b26:	617b      	str	r3, [r7, #20]
 8000b28:	697a      	ldr	r2, [r7, #20]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	429a      	cmp	r2, r3
 8000b2e:	dbf0      	blt.n	8000b12 <_read+0x12>
	}

return len;
 8000b30:	687b      	ldr	r3, [r7, #4]
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3718      	adds	r7, #24
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}

08000b3a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	b086      	sub	sp, #24
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	60f8      	str	r0, [r7, #12]
 8000b42:	60b9      	str	r1, [r7, #8]
 8000b44:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b46:	2300      	movs	r3, #0
 8000b48:	617b      	str	r3, [r7, #20]
 8000b4a:	e009      	b.n	8000b60 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	1c5a      	adds	r2, r3, #1
 8000b50:	60ba      	str	r2, [r7, #8]
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	4618      	mov	r0, r3
 8000b56:	f7ff ffab 	bl	8000ab0 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	3301      	adds	r3, #1
 8000b5e:	617b      	str	r3, [r7, #20]
 8000b60:	697a      	ldr	r2, [r7, #20]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	dbf1      	blt.n	8000b4c <_write+0x12>
	}
	return len;
 8000b68:	687b      	ldr	r3, [r7, #4]
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3718      	adds	r7, #24
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}

08000b72 <_close>:

int _close(int file)
{
 8000b72:	b480      	push	{r7}
 8000b74:	b083      	sub	sp, #12
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	6078      	str	r0, [r7, #4]
	return -1;
 8000b7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	370c      	adds	r7, #12
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr

08000b8a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	b083      	sub	sp, #12
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	6078      	str	r0, [r7, #4]
 8000b92:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b9a:	605a      	str	r2, [r3, #4]
	return 0;
 8000b9c:	2300      	movs	r3, #0
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	370c      	adds	r7, #12
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr

08000baa <_isatty>:

int _isatty(int file)
{
 8000baa:	b480      	push	{r7}
 8000bac:	b083      	sub	sp, #12
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	6078      	str	r0, [r7, #4]
	return 1;
 8000bb2:	2301      	movs	r3, #1
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	370c      	adds	r7, #12
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr

08000bc0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b085      	sub	sp, #20
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	60f8      	str	r0, [r7, #12]
 8000bc8:	60b9      	str	r1, [r7, #8]
 8000bca:	607a      	str	r2, [r7, #4]
	return 0;
 8000bcc:	2300      	movs	r3, #0
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3714      	adds	r7, #20
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
	...

08000bdc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000be0:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <SystemInit+0x20>)
 8000be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000be6:	4a05      	ldr	r2, [pc, #20]	; (8000bfc <SystemInit+0x20>)
 8000be8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	e000ed00 	.word	0xe000ed00

08000c00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c38 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c04:	480d      	ldr	r0, [pc, #52]	; (8000c3c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c06:	490e      	ldr	r1, [pc, #56]	; (8000c40 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c08:	4a0e      	ldr	r2, [pc, #56]	; (8000c44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c0c:	e002      	b.n	8000c14 <LoopCopyDataInit>

08000c0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c12:	3304      	adds	r3, #4

08000c14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c18:	d3f9      	bcc.n	8000c0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c1a:	4a0b      	ldr	r2, [pc, #44]	; (8000c48 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c1c:	4c0b      	ldr	r4, [pc, #44]	; (8000c4c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c20:	e001      	b.n	8000c26 <LoopFillZerobss>

08000c22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c24:	3204      	adds	r2, #4

08000c26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c28:	d3fb      	bcc.n	8000c22 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c2a:	f7ff ffd7 	bl	8000bdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c2e:	f003 fcfb 	bl	8004628 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c32:	f7ff fc49 	bl	80004c8 <main>
  bx  lr    
 8000c36:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c40:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000c44:	08005140 	.word	0x08005140
  ldr r2, =_sbss
 8000c48:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000c4c:	20012ea4 	.word	0x20012ea4

08000c50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c50:	e7fe      	b.n	8000c50 <ADC_IRQHandler>
	...

08000c54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c58:	4b0e      	ldr	r3, [pc, #56]	; (8000c94 <HAL_Init+0x40>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a0d      	ldr	r2, [pc, #52]	; (8000c94 <HAL_Init+0x40>)
 8000c5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c64:	4b0b      	ldr	r3, [pc, #44]	; (8000c94 <HAL_Init+0x40>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a0a      	ldr	r2, [pc, #40]	; (8000c94 <HAL_Init+0x40>)
 8000c6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c70:	4b08      	ldr	r3, [pc, #32]	; (8000c94 <HAL_Init+0x40>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a07      	ldr	r2, [pc, #28]	; (8000c94 <HAL_Init+0x40>)
 8000c76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c7c:	2003      	movs	r0, #3
 8000c7e:	f000 f8d8 	bl	8000e32 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c82:	2000      	movs	r0, #0
 8000c84:	f7ff fe9a 	bl	80009bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c88:	f7ff fe70 	bl	800096c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c8c:	2300      	movs	r3, #0
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40023c00 	.word	0x40023c00

08000c98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c9c:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <HAL_IncTick+0x20>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <HAL_IncTick+0x24>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	4a04      	ldr	r2, [pc, #16]	; (8000cbc <HAL_IncTick+0x24>)
 8000caa:	6013      	str	r3, [r2, #0]
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	20000008 	.word	0x20000008
 8000cbc:	20012e50 	.word	0x20012e50

08000cc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cc4:	4b03      	ldr	r3, [pc, #12]	; (8000cd4 <HAL_GetTick+0x14>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	20012e50 	.word	0x20012e50

08000cd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b085      	sub	sp, #20
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	f003 0307 	and.w	r3, r3, #7
 8000ce6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ce8:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__NVIC_SetPriorityGrouping+0x44>)
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cee:	68ba      	ldr	r2, [r7, #8]
 8000cf0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d0a:	4a04      	ldr	r2, [pc, #16]	; (8000d1c <__NVIC_SetPriorityGrouping+0x44>)
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	60d3      	str	r3, [r2, #12]
}
 8000d10:	bf00      	nop
 8000d12:	3714      	adds	r7, #20
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	e000ed00 	.word	0xe000ed00

08000d20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d24:	4b04      	ldr	r3, [pc, #16]	; (8000d38 <__NVIC_GetPriorityGrouping+0x18>)
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	0a1b      	lsrs	r3, r3, #8
 8000d2a:	f003 0307 	and.w	r3, r3, #7
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr
 8000d38:	e000ed00 	.word	0xe000ed00

08000d3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	db0b      	blt.n	8000d66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d4e:	79fb      	ldrb	r3, [r7, #7]
 8000d50:	f003 021f 	and.w	r2, r3, #31
 8000d54:	4907      	ldr	r1, [pc, #28]	; (8000d74 <__NVIC_EnableIRQ+0x38>)
 8000d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5a:	095b      	lsrs	r3, r3, #5
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d66:	bf00      	nop
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	e000e100 	.word	0xe000e100

08000d78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	6039      	str	r1, [r7, #0]
 8000d82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	db0a      	blt.n	8000da2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	b2da      	uxtb	r2, r3
 8000d90:	490c      	ldr	r1, [pc, #48]	; (8000dc4 <__NVIC_SetPriority+0x4c>)
 8000d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d96:	0112      	lsls	r2, r2, #4
 8000d98:	b2d2      	uxtb	r2, r2
 8000d9a:	440b      	add	r3, r1
 8000d9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000da0:	e00a      	b.n	8000db8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	b2da      	uxtb	r2, r3
 8000da6:	4908      	ldr	r1, [pc, #32]	; (8000dc8 <__NVIC_SetPriority+0x50>)
 8000da8:	79fb      	ldrb	r3, [r7, #7]
 8000daa:	f003 030f 	and.w	r3, r3, #15
 8000dae:	3b04      	subs	r3, #4
 8000db0:	0112      	lsls	r2, r2, #4
 8000db2:	b2d2      	uxtb	r2, r2
 8000db4:	440b      	add	r3, r1
 8000db6:	761a      	strb	r2, [r3, #24]
}
 8000db8:	bf00      	nop
 8000dba:	370c      	adds	r7, #12
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	e000e100 	.word	0xe000e100
 8000dc8:	e000ed00 	.word	0xe000ed00

08000dcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b089      	sub	sp, #36	; 0x24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	60f8      	str	r0, [r7, #12]
 8000dd4:	60b9      	str	r1, [r7, #8]
 8000dd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	f003 0307 	and.w	r3, r3, #7
 8000dde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	f1c3 0307 	rsb	r3, r3, #7
 8000de6:	2b04      	cmp	r3, #4
 8000de8:	bf28      	it	cs
 8000dea:	2304      	movcs	r3, #4
 8000dec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	3304      	adds	r3, #4
 8000df2:	2b06      	cmp	r3, #6
 8000df4:	d902      	bls.n	8000dfc <NVIC_EncodePriority+0x30>
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	3b03      	subs	r3, #3
 8000dfa:	e000      	b.n	8000dfe <NVIC_EncodePriority+0x32>
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e00:	f04f 32ff 	mov.w	r2, #4294967295
 8000e04:	69bb      	ldr	r3, [r7, #24]
 8000e06:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0a:	43da      	mvns	r2, r3
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	401a      	ands	r2, r3
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e14:	f04f 31ff 	mov.w	r1, #4294967295
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e1e:	43d9      	mvns	r1, r3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e24:	4313      	orrs	r3, r2
         );
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3724      	adds	r7, #36	; 0x24
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr

08000e32 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b082      	sub	sp, #8
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e3a:	6878      	ldr	r0, [r7, #4]
 8000e3c:	f7ff ff4c 	bl	8000cd8 <__NVIC_SetPriorityGrouping>
}
 8000e40:	bf00      	nop
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b086      	sub	sp, #24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	60b9      	str	r1, [r7, #8]
 8000e52:	607a      	str	r2, [r7, #4]
 8000e54:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e56:	2300      	movs	r3, #0
 8000e58:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e5a:	f7ff ff61 	bl	8000d20 <__NVIC_GetPriorityGrouping>
 8000e5e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e60:	687a      	ldr	r2, [r7, #4]
 8000e62:	68b9      	ldr	r1, [r7, #8]
 8000e64:	6978      	ldr	r0, [r7, #20]
 8000e66:	f7ff ffb1 	bl	8000dcc <NVIC_EncodePriority>
 8000e6a:	4602      	mov	r2, r0
 8000e6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e70:	4611      	mov	r1, r2
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff ff80 	bl	8000d78 <__NVIC_SetPriority>
}
 8000e78:	bf00      	nop
 8000e7a:	3718      	adds	r7, #24
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f7ff ff54 	bl	8000d3c <__NVIC_EnableIRQ>
}
 8000e94:	bf00      	nop
 8000e96:	3708      	adds	r7, #8
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b089      	sub	sp, #36	; 0x24
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	61fb      	str	r3, [r7, #28]
 8000eb6:	e16b      	b.n	8001190 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000eb8:	2201      	movs	r2, #1
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	697a      	ldr	r2, [r7, #20]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ecc:	693a      	ldr	r2, [r7, #16]
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	f040 815a 	bne.w	800118a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	f003 0303 	and.w	r3, r3, #3
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d005      	beq.n	8000eee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eea:	2b02      	cmp	r3, #2
 8000eec:	d130      	bne.n	8000f50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	689b      	ldr	r3, [r3, #8]
 8000ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	2203      	movs	r2, #3
 8000efa:	fa02 f303 	lsl.w	r3, r2, r3
 8000efe:	43db      	mvns	r3, r3
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	4013      	ands	r3, r2
 8000f04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	68da      	ldr	r2, [r3, #12]
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f12:	69ba      	ldr	r2, [r7, #24]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	69ba      	ldr	r2, [r7, #24]
 8000f1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f24:	2201      	movs	r2, #1
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	43db      	mvns	r3, r3
 8000f2e:	69ba      	ldr	r2, [r7, #24]
 8000f30:	4013      	ands	r3, r2
 8000f32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	091b      	lsrs	r3, r3, #4
 8000f3a:	f003 0201 	and.w	r2, r3, #1
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f003 0303 	and.w	r3, r3, #3
 8000f58:	2b03      	cmp	r3, #3
 8000f5a:	d017      	beq.n	8000f8c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	2203      	movs	r2, #3
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	4013      	ands	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	689a      	ldr	r2, [r3, #8]
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	4313      	orrs	r3, r2
 8000f84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f003 0303 	and.w	r3, r3, #3
 8000f94:	2b02      	cmp	r3, #2
 8000f96:	d123      	bne.n	8000fe0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	08da      	lsrs	r2, r3, #3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	3208      	adds	r2, #8
 8000fa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	f003 0307 	and.w	r3, r3, #7
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	220f      	movs	r2, #15
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	691a      	ldr	r2, [r3, #16]
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	f003 0307 	and.w	r3, r3, #7
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	08da      	lsrs	r2, r3, #3
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	3208      	adds	r2, #8
 8000fda:	69b9      	ldr	r1, [r7, #24]
 8000fdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	2203      	movs	r2, #3
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f003 0203 	and.w	r2, r3, #3
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	4313      	orrs	r3, r2
 800100c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800101c:	2b00      	cmp	r3, #0
 800101e:	f000 80b4 	beq.w	800118a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	60fb      	str	r3, [r7, #12]
 8001026:	4b60      	ldr	r3, [pc, #384]	; (80011a8 <HAL_GPIO_Init+0x30c>)
 8001028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102a:	4a5f      	ldr	r2, [pc, #380]	; (80011a8 <HAL_GPIO_Init+0x30c>)
 800102c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001030:	6453      	str	r3, [r2, #68]	; 0x44
 8001032:	4b5d      	ldr	r3, [pc, #372]	; (80011a8 <HAL_GPIO_Init+0x30c>)
 8001034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001036:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800103e:	4a5b      	ldr	r2, [pc, #364]	; (80011ac <HAL_GPIO_Init+0x310>)
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	089b      	lsrs	r3, r3, #2
 8001044:	3302      	adds	r3, #2
 8001046:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800104a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	f003 0303 	and.w	r3, r3, #3
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	220f      	movs	r2, #15
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	43db      	mvns	r3, r3
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	4013      	ands	r3, r2
 8001060:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a52      	ldr	r2, [pc, #328]	; (80011b0 <HAL_GPIO_Init+0x314>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d02b      	beq.n	80010c2 <HAL_GPIO_Init+0x226>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a51      	ldr	r2, [pc, #324]	; (80011b4 <HAL_GPIO_Init+0x318>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d025      	beq.n	80010be <HAL_GPIO_Init+0x222>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a50      	ldr	r2, [pc, #320]	; (80011b8 <HAL_GPIO_Init+0x31c>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d01f      	beq.n	80010ba <HAL_GPIO_Init+0x21e>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a4f      	ldr	r2, [pc, #316]	; (80011bc <HAL_GPIO_Init+0x320>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d019      	beq.n	80010b6 <HAL_GPIO_Init+0x21a>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a4e      	ldr	r2, [pc, #312]	; (80011c0 <HAL_GPIO_Init+0x324>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d013      	beq.n	80010b2 <HAL_GPIO_Init+0x216>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a4d      	ldr	r2, [pc, #308]	; (80011c4 <HAL_GPIO_Init+0x328>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d00d      	beq.n	80010ae <HAL_GPIO_Init+0x212>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a4c      	ldr	r2, [pc, #304]	; (80011c8 <HAL_GPIO_Init+0x32c>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d007      	beq.n	80010aa <HAL_GPIO_Init+0x20e>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a4b      	ldr	r2, [pc, #300]	; (80011cc <HAL_GPIO_Init+0x330>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d101      	bne.n	80010a6 <HAL_GPIO_Init+0x20a>
 80010a2:	2307      	movs	r3, #7
 80010a4:	e00e      	b.n	80010c4 <HAL_GPIO_Init+0x228>
 80010a6:	2308      	movs	r3, #8
 80010a8:	e00c      	b.n	80010c4 <HAL_GPIO_Init+0x228>
 80010aa:	2306      	movs	r3, #6
 80010ac:	e00a      	b.n	80010c4 <HAL_GPIO_Init+0x228>
 80010ae:	2305      	movs	r3, #5
 80010b0:	e008      	b.n	80010c4 <HAL_GPIO_Init+0x228>
 80010b2:	2304      	movs	r3, #4
 80010b4:	e006      	b.n	80010c4 <HAL_GPIO_Init+0x228>
 80010b6:	2303      	movs	r3, #3
 80010b8:	e004      	b.n	80010c4 <HAL_GPIO_Init+0x228>
 80010ba:	2302      	movs	r3, #2
 80010bc:	e002      	b.n	80010c4 <HAL_GPIO_Init+0x228>
 80010be:	2301      	movs	r3, #1
 80010c0:	e000      	b.n	80010c4 <HAL_GPIO_Init+0x228>
 80010c2:	2300      	movs	r3, #0
 80010c4:	69fa      	ldr	r2, [r7, #28]
 80010c6:	f002 0203 	and.w	r2, r2, #3
 80010ca:	0092      	lsls	r2, r2, #2
 80010cc:	4093      	lsls	r3, r2
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010d4:	4935      	ldr	r1, [pc, #212]	; (80011ac <HAL_GPIO_Init+0x310>)
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	089b      	lsrs	r3, r3, #2
 80010da:	3302      	adds	r3, #2
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010e2:	4b3b      	ldr	r3, [pc, #236]	; (80011d0 <HAL_GPIO_Init+0x334>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	43db      	mvns	r3, r3
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	4013      	ands	r3, r2
 80010f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d003      	beq.n	8001106 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	4313      	orrs	r3, r2
 8001104:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001106:	4a32      	ldr	r2, [pc, #200]	; (80011d0 <HAL_GPIO_Init+0x334>)
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800110c:	4b30      	ldr	r3, [pc, #192]	; (80011d0 <HAL_GPIO_Init+0x334>)
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	43db      	mvns	r3, r3
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	4013      	ands	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001124:	2b00      	cmp	r3, #0
 8001126:	d003      	beq.n	8001130 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	4313      	orrs	r3, r2
 800112e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001130:	4a27      	ldr	r2, [pc, #156]	; (80011d0 <HAL_GPIO_Init+0x334>)
 8001132:	69bb      	ldr	r3, [r7, #24]
 8001134:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001136:	4b26      	ldr	r3, [pc, #152]	; (80011d0 <HAL_GPIO_Init+0x334>)
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	43db      	mvns	r3, r3
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	4013      	ands	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800114e:	2b00      	cmp	r3, #0
 8001150:	d003      	beq.n	800115a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	4313      	orrs	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800115a:	4a1d      	ldr	r2, [pc, #116]	; (80011d0 <HAL_GPIO_Init+0x334>)
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001160:	4b1b      	ldr	r3, [pc, #108]	; (80011d0 <HAL_GPIO_Init+0x334>)
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	43db      	mvns	r3, r3
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	4013      	ands	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001178:	2b00      	cmp	r3, #0
 800117a:	d003      	beq.n	8001184 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	4313      	orrs	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001184:	4a12      	ldr	r2, [pc, #72]	; (80011d0 <HAL_GPIO_Init+0x334>)
 8001186:	69bb      	ldr	r3, [r7, #24]
 8001188:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	3301      	adds	r3, #1
 800118e:	61fb      	str	r3, [r7, #28]
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	2b0f      	cmp	r3, #15
 8001194:	f67f ae90 	bls.w	8000eb8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001198:	bf00      	nop
 800119a:	bf00      	nop
 800119c:	3724      	adds	r7, #36	; 0x24
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	40023800 	.word	0x40023800
 80011ac:	40013800 	.word	0x40013800
 80011b0:	40020000 	.word	0x40020000
 80011b4:	40020400 	.word	0x40020400
 80011b8:	40020800 	.word	0x40020800
 80011bc:	40020c00 	.word	0x40020c00
 80011c0:	40021000 	.word	0x40021000
 80011c4:	40021400 	.word	0x40021400
 80011c8:	40021800 	.word	0x40021800
 80011cc:	40021c00 	.word	0x40021c00
 80011d0:	40013c00 	.word	0x40013c00

080011d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	460b      	mov	r3, r1
 80011de:	807b      	strh	r3, [r7, #2]
 80011e0:	4613      	mov	r3, r2
 80011e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011e4:	787b      	ldrb	r3, [r7, #1]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d003      	beq.n	80011f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011ea:	887a      	ldrh	r2, [r7, #2]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011f0:	e003      	b.n	80011fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011f2:	887b      	ldrh	r3, [r7, #2]
 80011f4:	041a      	lsls	r2, r3, #16
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	619a      	str	r2, [r3, #24]
}
 80011fa:	bf00      	nop
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
	...

08001208 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d101      	bne.n	800121a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e264      	b.n	80016e4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f003 0301 	and.w	r3, r3, #1
 8001222:	2b00      	cmp	r3, #0
 8001224:	d075      	beq.n	8001312 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001226:	4ba3      	ldr	r3, [pc, #652]	; (80014b4 <HAL_RCC_OscConfig+0x2ac>)
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	f003 030c 	and.w	r3, r3, #12
 800122e:	2b04      	cmp	r3, #4
 8001230:	d00c      	beq.n	800124c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001232:	4ba0      	ldr	r3, [pc, #640]	; (80014b4 <HAL_RCC_OscConfig+0x2ac>)
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800123a:	2b08      	cmp	r3, #8
 800123c:	d112      	bne.n	8001264 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800123e:	4b9d      	ldr	r3, [pc, #628]	; (80014b4 <HAL_RCC_OscConfig+0x2ac>)
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001246:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800124a:	d10b      	bne.n	8001264 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800124c:	4b99      	ldr	r3, [pc, #612]	; (80014b4 <HAL_RCC_OscConfig+0x2ac>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001254:	2b00      	cmp	r3, #0
 8001256:	d05b      	beq.n	8001310 <HAL_RCC_OscConfig+0x108>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d157      	bne.n	8001310 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001260:	2301      	movs	r3, #1
 8001262:	e23f      	b.n	80016e4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800126c:	d106      	bne.n	800127c <HAL_RCC_OscConfig+0x74>
 800126e:	4b91      	ldr	r3, [pc, #580]	; (80014b4 <HAL_RCC_OscConfig+0x2ac>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a90      	ldr	r2, [pc, #576]	; (80014b4 <HAL_RCC_OscConfig+0x2ac>)
 8001274:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001278:	6013      	str	r3, [r2, #0]
 800127a:	e01d      	b.n	80012b8 <HAL_RCC_OscConfig+0xb0>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001284:	d10c      	bne.n	80012a0 <HAL_RCC_OscConfig+0x98>
 8001286:	4b8b      	ldr	r3, [pc, #556]	; (80014b4 <HAL_RCC_OscConfig+0x2ac>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a8a      	ldr	r2, [pc, #552]	; (80014b4 <HAL_RCC_OscConfig+0x2ac>)
 800128c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001290:	6013      	str	r3, [r2, #0]
 8001292:	4b88      	ldr	r3, [pc, #544]	; (80014b4 <HAL_RCC_OscConfig+0x2ac>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a87      	ldr	r2, [pc, #540]	; (80014b4 <HAL_RCC_OscConfig+0x2ac>)
 8001298:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800129c:	6013      	str	r3, [r2, #0]
 800129e:	e00b      	b.n	80012b8 <HAL_RCC_OscConfig+0xb0>
 80012a0:	4b84      	ldr	r3, [pc, #528]	; (80014b4 <HAL_RCC_OscConfig+0x2ac>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a83      	ldr	r2, [pc, #524]	; (80014b4 <HAL_RCC_OscConfig+0x2ac>)
 80012a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012aa:	6013      	str	r3, [r2, #0]
 80012ac:	4b81      	ldr	r3, [pc, #516]	; (80014b4 <HAL_RCC_OscConfig+0x2ac>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a80      	ldr	r2, [pc, #512]	; (80014b4 <HAL_RCC_OscConfig+0x2ac>)
 80012b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d013      	beq.n	80012e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c0:	f7ff fcfe 	bl	8000cc0 <HAL_GetTick>
 80012c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012c6:	e008      	b.n	80012da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012c8:	f7ff fcfa 	bl	8000cc0 <HAL_GetTick>
 80012cc:	4602      	mov	r2, r0
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	2b64      	cmp	r3, #100	; 0x64
 80012d4:	d901      	bls.n	80012da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012d6:	2303      	movs	r3, #3
 80012d8:	e204      	b.n	80016e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012da:	4b76      	ldr	r3, [pc, #472]	; (80014b4 <HAL_RCC_OscConfig+0x2ac>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d0f0      	beq.n	80012c8 <HAL_RCC_OscConfig+0xc0>
 80012e6:	e014      	b.n	8001312 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e8:	f7ff fcea 	bl	8000cc0 <HAL_GetTick>
 80012ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ee:	e008      	b.n	8001302 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012f0:	f7ff fce6 	bl	8000cc0 <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	2b64      	cmp	r3, #100	; 0x64
 80012fc:	d901      	bls.n	8001302 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012fe:	2303      	movs	r3, #3
 8001300:	e1f0      	b.n	80016e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001302:	4b6c      	ldr	r3, [pc, #432]	; (80014b4 <HAL_RCC_OscConfig+0x2ac>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d1f0      	bne.n	80012f0 <HAL_RCC_OscConfig+0xe8>
 800130e:	e000      	b.n	8001312 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001310:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	2b00      	cmp	r3, #0
 800131c:	d063      	beq.n	80013e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800131e:	4b65      	ldr	r3, [pc, #404]	; (80014b4 <HAL_RCC_OscConfig+0x2ac>)
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	f003 030c 	and.w	r3, r3, #12
 8001326:	2b00      	cmp	r3, #0
 8001328:	d00b      	beq.n	8001342 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800132a:	4b62      	ldr	r3, [pc, #392]	; (80014b4 <HAL_RCC_OscConfig+0x2ac>)
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001332:	2b08      	cmp	r3, #8
 8001334:	d11c      	bne.n	8001370 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001336:	4b5f      	ldr	r3, [pc, #380]	; (80014b4 <HAL_RCC_OscConfig+0x2ac>)
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d116      	bne.n	8001370 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001342:	4b5c      	ldr	r3, [pc, #368]	; (80014b4 <HAL_RCC_OscConfig+0x2ac>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	2b00      	cmp	r3, #0
 800134c:	d005      	beq.n	800135a <HAL_RCC_OscConfig+0x152>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	68db      	ldr	r3, [r3, #12]
 8001352:	2b01      	cmp	r3, #1
 8001354:	d001      	beq.n	800135a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e1c4      	b.n	80016e4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800135a:	4b56      	ldr	r3, [pc, #344]	; (80014b4 <HAL_RCC_OscConfig+0x2ac>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	691b      	ldr	r3, [r3, #16]
 8001366:	00db      	lsls	r3, r3, #3
 8001368:	4952      	ldr	r1, [pc, #328]	; (80014b4 <HAL_RCC_OscConfig+0x2ac>)
 800136a:	4313      	orrs	r3, r2
 800136c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800136e:	e03a      	b.n	80013e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d020      	beq.n	80013ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001378:	4b4f      	ldr	r3, [pc, #316]	; (80014b8 <HAL_RCC_OscConfig+0x2b0>)
 800137a:	2201      	movs	r2, #1
 800137c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800137e:	f7ff fc9f 	bl	8000cc0 <HAL_GetTick>
 8001382:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001384:	e008      	b.n	8001398 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001386:	f7ff fc9b 	bl	8000cc0 <HAL_GetTick>
 800138a:	4602      	mov	r2, r0
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	2b02      	cmp	r3, #2
 8001392:	d901      	bls.n	8001398 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001394:	2303      	movs	r3, #3
 8001396:	e1a5      	b.n	80016e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001398:	4b46      	ldr	r3, [pc, #280]	; (80014b4 <HAL_RCC_OscConfig+0x2ac>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f003 0302 	and.w	r3, r3, #2
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d0f0      	beq.n	8001386 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013a4:	4b43      	ldr	r3, [pc, #268]	; (80014b4 <HAL_RCC_OscConfig+0x2ac>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	691b      	ldr	r3, [r3, #16]
 80013b0:	00db      	lsls	r3, r3, #3
 80013b2:	4940      	ldr	r1, [pc, #256]	; (80014b4 <HAL_RCC_OscConfig+0x2ac>)
 80013b4:	4313      	orrs	r3, r2
 80013b6:	600b      	str	r3, [r1, #0]
 80013b8:	e015      	b.n	80013e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013ba:	4b3f      	ldr	r3, [pc, #252]	; (80014b8 <HAL_RCC_OscConfig+0x2b0>)
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013c0:	f7ff fc7e 	bl	8000cc0 <HAL_GetTick>
 80013c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013c6:	e008      	b.n	80013da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013c8:	f7ff fc7a 	bl	8000cc0 <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d901      	bls.n	80013da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	e184      	b.n	80016e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013da:	4b36      	ldr	r3, [pc, #216]	; (80014b4 <HAL_RCC_OscConfig+0x2ac>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 0302 	and.w	r3, r3, #2
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d1f0      	bne.n	80013c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 0308 	and.w	r3, r3, #8
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d030      	beq.n	8001454 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	695b      	ldr	r3, [r3, #20]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d016      	beq.n	8001428 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013fa:	4b30      	ldr	r3, [pc, #192]	; (80014bc <HAL_RCC_OscConfig+0x2b4>)
 80013fc:	2201      	movs	r2, #1
 80013fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001400:	f7ff fc5e 	bl	8000cc0 <HAL_GetTick>
 8001404:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001406:	e008      	b.n	800141a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001408:	f7ff fc5a 	bl	8000cc0 <HAL_GetTick>
 800140c:	4602      	mov	r2, r0
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	2b02      	cmp	r3, #2
 8001414:	d901      	bls.n	800141a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e164      	b.n	80016e4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800141a:	4b26      	ldr	r3, [pc, #152]	; (80014b4 <HAL_RCC_OscConfig+0x2ac>)
 800141c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800141e:	f003 0302 	and.w	r3, r3, #2
 8001422:	2b00      	cmp	r3, #0
 8001424:	d0f0      	beq.n	8001408 <HAL_RCC_OscConfig+0x200>
 8001426:	e015      	b.n	8001454 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001428:	4b24      	ldr	r3, [pc, #144]	; (80014bc <HAL_RCC_OscConfig+0x2b4>)
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800142e:	f7ff fc47 	bl	8000cc0 <HAL_GetTick>
 8001432:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001434:	e008      	b.n	8001448 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001436:	f7ff fc43 	bl	8000cc0 <HAL_GetTick>
 800143a:	4602      	mov	r2, r0
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	2b02      	cmp	r3, #2
 8001442:	d901      	bls.n	8001448 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001444:	2303      	movs	r3, #3
 8001446:	e14d      	b.n	80016e4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001448:	4b1a      	ldr	r3, [pc, #104]	; (80014b4 <HAL_RCC_OscConfig+0x2ac>)
 800144a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800144c:	f003 0302 	and.w	r3, r3, #2
 8001450:	2b00      	cmp	r3, #0
 8001452:	d1f0      	bne.n	8001436 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 0304 	and.w	r3, r3, #4
 800145c:	2b00      	cmp	r3, #0
 800145e:	f000 80a0 	beq.w	80015a2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001462:	2300      	movs	r3, #0
 8001464:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001466:	4b13      	ldr	r3, [pc, #76]	; (80014b4 <HAL_RCC_OscConfig+0x2ac>)
 8001468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d10f      	bne.n	8001492 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	60bb      	str	r3, [r7, #8]
 8001476:	4b0f      	ldr	r3, [pc, #60]	; (80014b4 <HAL_RCC_OscConfig+0x2ac>)
 8001478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147a:	4a0e      	ldr	r2, [pc, #56]	; (80014b4 <HAL_RCC_OscConfig+0x2ac>)
 800147c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001480:	6413      	str	r3, [r2, #64]	; 0x40
 8001482:	4b0c      	ldr	r3, [pc, #48]	; (80014b4 <HAL_RCC_OscConfig+0x2ac>)
 8001484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800148a:	60bb      	str	r3, [r7, #8]
 800148c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800148e:	2301      	movs	r3, #1
 8001490:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001492:	4b0b      	ldr	r3, [pc, #44]	; (80014c0 <HAL_RCC_OscConfig+0x2b8>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800149a:	2b00      	cmp	r3, #0
 800149c:	d121      	bne.n	80014e2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800149e:	4b08      	ldr	r3, [pc, #32]	; (80014c0 <HAL_RCC_OscConfig+0x2b8>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a07      	ldr	r2, [pc, #28]	; (80014c0 <HAL_RCC_OscConfig+0x2b8>)
 80014a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014aa:	f7ff fc09 	bl	8000cc0 <HAL_GetTick>
 80014ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014b0:	e011      	b.n	80014d6 <HAL_RCC_OscConfig+0x2ce>
 80014b2:	bf00      	nop
 80014b4:	40023800 	.word	0x40023800
 80014b8:	42470000 	.word	0x42470000
 80014bc:	42470e80 	.word	0x42470e80
 80014c0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014c4:	f7ff fbfc 	bl	8000cc0 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d901      	bls.n	80014d6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e106      	b.n	80016e4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014d6:	4b85      	ldr	r3, [pc, #532]	; (80016ec <HAL_RCC_OscConfig+0x4e4>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d0f0      	beq.n	80014c4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d106      	bne.n	80014f8 <HAL_RCC_OscConfig+0x2f0>
 80014ea:	4b81      	ldr	r3, [pc, #516]	; (80016f0 <HAL_RCC_OscConfig+0x4e8>)
 80014ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ee:	4a80      	ldr	r2, [pc, #512]	; (80016f0 <HAL_RCC_OscConfig+0x4e8>)
 80014f0:	f043 0301 	orr.w	r3, r3, #1
 80014f4:	6713      	str	r3, [r2, #112]	; 0x70
 80014f6:	e01c      	b.n	8001532 <HAL_RCC_OscConfig+0x32a>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	2b05      	cmp	r3, #5
 80014fe:	d10c      	bne.n	800151a <HAL_RCC_OscConfig+0x312>
 8001500:	4b7b      	ldr	r3, [pc, #492]	; (80016f0 <HAL_RCC_OscConfig+0x4e8>)
 8001502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001504:	4a7a      	ldr	r2, [pc, #488]	; (80016f0 <HAL_RCC_OscConfig+0x4e8>)
 8001506:	f043 0304 	orr.w	r3, r3, #4
 800150a:	6713      	str	r3, [r2, #112]	; 0x70
 800150c:	4b78      	ldr	r3, [pc, #480]	; (80016f0 <HAL_RCC_OscConfig+0x4e8>)
 800150e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001510:	4a77      	ldr	r2, [pc, #476]	; (80016f0 <HAL_RCC_OscConfig+0x4e8>)
 8001512:	f043 0301 	orr.w	r3, r3, #1
 8001516:	6713      	str	r3, [r2, #112]	; 0x70
 8001518:	e00b      	b.n	8001532 <HAL_RCC_OscConfig+0x32a>
 800151a:	4b75      	ldr	r3, [pc, #468]	; (80016f0 <HAL_RCC_OscConfig+0x4e8>)
 800151c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800151e:	4a74      	ldr	r2, [pc, #464]	; (80016f0 <HAL_RCC_OscConfig+0x4e8>)
 8001520:	f023 0301 	bic.w	r3, r3, #1
 8001524:	6713      	str	r3, [r2, #112]	; 0x70
 8001526:	4b72      	ldr	r3, [pc, #456]	; (80016f0 <HAL_RCC_OscConfig+0x4e8>)
 8001528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800152a:	4a71      	ldr	r2, [pc, #452]	; (80016f0 <HAL_RCC_OscConfig+0x4e8>)
 800152c:	f023 0304 	bic.w	r3, r3, #4
 8001530:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d015      	beq.n	8001566 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800153a:	f7ff fbc1 	bl	8000cc0 <HAL_GetTick>
 800153e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001540:	e00a      	b.n	8001558 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001542:	f7ff fbbd 	bl	8000cc0 <HAL_GetTick>
 8001546:	4602      	mov	r2, r0
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001550:	4293      	cmp	r3, r2
 8001552:	d901      	bls.n	8001558 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001554:	2303      	movs	r3, #3
 8001556:	e0c5      	b.n	80016e4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001558:	4b65      	ldr	r3, [pc, #404]	; (80016f0 <HAL_RCC_OscConfig+0x4e8>)
 800155a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800155c:	f003 0302 	and.w	r3, r3, #2
 8001560:	2b00      	cmp	r3, #0
 8001562:	d0ee      	beq.n	8001542 <HAL_RCC_OscConfig+0x33a>
 8001564:	e014      	b.n	8001590 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001566:	f7ff fbab 	bl	8000cc0 <HAL_GetTick>
 800156a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800156c:	e00a      	b.n	8001584 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800156e:	f7ff fba7 	bl	8000cc0 <HAL_GetTick>
 8001572:	4602      	mov	r2, r0
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	f241 3288 	movw	r2, #5000	; 0x1388
 800157c:	4293      	cmp	r3, r2
 800157e:	d901      	bls.n	8001584 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001580:	2303      	movs	r3, #3
 8001582:	e0af      	b.n	80016e4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001584:	4b5a      	ldr	r3, [pc, #360]	; (80016f0 <HAL_RCC_OscConfig+0x4e8>)
 8001586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001588:	f003 0302 	and.w	r3, r3, #2
 800158c:	2b00      	cmp	r3, #0
 800158e:	d1ee      	bne.n	800156e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001590:	7dfb      	ldrb	r3, [r7, #23]
 8001592:	2b01      	cmp	r3, #1
 8001594:	d105      	bne.n	80015a2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001596:	4b56      	ldr	r3, [pc, #344]	; (80016f0 <HAL_RCC_OscConfig+0x4e8>)
 8001598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159a:	4a55      	ldr	r2, [pc, #340]	; (80016f0 <HAL_RCC_OscConfig+0x4e8>)
 800159c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015a0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	699b      	ldr	r3, [r3, #24]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	f000 809b 	beq.w	80016e2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015ac:	4b50      	ldr	r3, [pc, #320]	; (80016f0 <HAL_RCC_OscConfig+0x4e8>)
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	f003 030c 	and.w	r3, r3, #12
 80015b4:	2b08      	cmp	r3, #8
 80015b6:	d05c      	beq.n	8001672 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	699b      	ldr	r3, [r3, #24]
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d141      	bne.n	8001644 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015c0:	4b4c      	ldr	r3, [pc, #304]	; (80016f4 <HAL_RCC_OscConfig+0x4ec>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c6:	f7ff fb7b 	bl	8000cc0 <HAL_GetTick>
 80015ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015cc:	e008      	b.n	80015e0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015ce:	f7ff fb77 	bl	8000cc0 <HAL_GetTick>
 80015d2:	4602      	mov	r2, r0
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d901      	bls.n	80015e0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80015dc:	2303      	movs	r3, #3
 80015de:	e081      	b.n	80016e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015e0:	4b43      	ldr	r3, [pc, #268]	; (80016f0 <HAL_RCC_OscConfig+0x4e8>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d1f0      	bne.n	80015ce <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	69da      	ldr	r2, [r3, #28]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6a1b      	ldr	r3, [r3, #32]
 80015f4:	431a      	orrs	r2, r3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015fa:	019b      	lsls	r3, r3, #6
 80015fc:	431a      	orrs	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001602:	085b      	lsrs	r3, r3, #1
 8001604:	3b01      	subs	r3, #1
 8001606:	041b      	lsls	r3, r3, #16
 8001608:	431a      	orrs	r2, r3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800160e:	061b      	lsls	r3, r3, #24
 8001610:	4937      	ldr	r1, [pc, #220]	; (80016f0 <HAL_RCC_OscConfig+0x4e8>)
 8001612:	4313      	orrs	r3, r2
 8001614:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001616:	4b37      	ldr	r3, [pc, #220]	; (80016f4 <HAL_RCC_OscConfig+0x4ec>)
 8001618:	2201      	movs	r2, #1
 800161a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800161c:	f7ff fb50 	bl	8000cc0 <HAL_GetTick>
 8001620:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001622:	e008      	b.n	8001636 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001624:	f7ff fb4c 	bl	8000cc0 <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	2b02      	cmp	r3, #2
 8001630:	d901      	bls.n	8001636 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e056      	b.n	80016e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001636:	4b2e      	ldr	r3, [pc, #184]	; (80016f0 <HAL_RCC_OscConfig+0x4e8>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d0f0      	beq.n	8001624 <HAL_RCC_OscConfig+0x41c>
 8001642:	e04e      	b.n	80016e2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001644:	4b2b      	ldr	r3, [pc, #172]	; (80016f4 <HAL_RCC_OscConfig+0x4ec>)
 8001646:	2200      	movs	r2, #0
 8001648:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800164a:	f7ff fb39 	bl	8000cc0 <HAL_GetTick>
 800164e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001650:	e008      	b.n	8001664 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001652:	f7ff fb35 	bl	8000cc0 <HAL_GetTick>
 8001656:	4602      	mov	r2, r0
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	2b02      	cmp	r3, #2
 800165e:	d901      	bls.n	8001664 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001660:	2303      	movs	r3, #3
 8001662:	e03f      	b.n	80016e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001664:	4b22      	ldr	r3, [pc, #136]	; (80016f0 <HAL_RCC_OscConfig+0x4e8>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d1f0      	bne.n	8001652 <HAL_RCC_OscConfig+0x44a>
 8001670:	e037      	b.n	80016e2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	699b      	ldr	r3, [r3, #24]
 8001676:	2b01      	cmp	r3, #1
 8001678:	d101      	bne.n	800167e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e032      	b.n	80016e4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800167e:	4b1c      	ldr	r3, [pc, #112]	; (80016f0 <HAL_RCC_OscConfig+0x4e8>)
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	699b      	ldr	r3, [r3, #24]
 8001688:	2b01      	cmp	r3, #1
 800168a:	d028      	beq.n	80016de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001696:	429a      	cmp	r2, r3
 8001698:	d121      	bne.n	80016de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d11a      	bne.n	80016de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016a8:	68fa      	ldr	r2, [r7, #12]
 80016aa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016ae:	4013      	ands	r3, r2
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016b4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d111      	bne.n	80016de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c4:	085b      	lsrs	r3, r3, #1
 80016c6:	3b01      	subs	r3, #1
 80016c8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d107      	bne.n	80016de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016da:	429a      	cmp	r2, r3
 80016dc:	d001      	beq.n	80016e2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e000      	b.n	80016e4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80016e2:	2300      	movs	r3, #0
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3718      	adds	r7, #24
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	40007000 	.word	0x40007000
 80016f0:	40023800 	.word	0x40023800
 80016f4:	42470060 	.word	0x42470060

080016f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d101      	bne.n	800170c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e0cc      	b.n	80018a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800170c:	4b68      	ldr	r3, [pc, #416]	; (80018b0 <HAL_RCC_ClockConfig+0x1b8>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 0307 	and.w	r3, r3, #7
 8001714:	683a      	ldr	r2, [r7, #0]
 8001716:	429a      	cmp	r2, r3
 8001718:	d90c      	bls.n	8001734 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800171a:	4b65      	ldr	r3, [pc, #404]	; (80018b0 <HAL_RCC_ClockConfig+0x1b8>)
 800171c:	683a      	ldr	r2, [r7, #0]
 800171e:	b2d2      	uxtb	r2, r2
 8001720:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001722:	4b63      	ldr	r3, [pc, #396]	; (80018b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0307 	and.w	r3, r3, #7
 800172a:	683a      	ldr	r2, [r7, #0]
 800172c:	429a      	cmp	r2, r3
 800172e:	d001      	beq.n	8001734 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e0b8      	b.n	80018a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0302 	and.w	r3, r3, #2
 800173c:	2b00      	cmp	r3, #0
 800173e:	d020      	beq.n	8001782 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 0304 	and.w	r3, r3, #4
 8001748:	2b00      	cmp	r3, #0
 800174a:	d005      	beq.n	8001758 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800174c:	4b59      	ldr	r3, [pc, #356]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	4a58      	ldr	r2, [pc, #352]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001752:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001756:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0308 	and.w	r3, r3, #8
 8001760:	2b00      	cmp	r3, #0
 8001762:	d005      	beq.n	8001770 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001764:	4b53      	ldr	r3, [pc, #332]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	4a52      	ldr	r2, [pc, #328]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 800176a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800176e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001770:	4b50      	ldr	r3, [pc, #320]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	494d      	ldr	r1, [pc, #308]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 800177e:	4313      	orrs	r3, r2
 8001780:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	2b00      	cmp	r3, #0
 800178c:	d044      	beq.n	8001818 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	2b01      	cmp	r3, #1
 8001794:	d107      	bne.n	80017a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001796:	4b47      	ldr	r3, [pc, #284]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d119      	bne.n	80017d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e07f      	b.n	80018a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d003      	beq.n	80017b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017b2:	2b03      	cmp	r3, #3
 80017b4:	d107      	bne.n	80017c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017b6:	4b3f      	ldr	r3, [pc, #252]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d109      	bne.n	80017d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e06f      	b.n	80018a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017c6:	4b3b      	ldr	r3, [pc, #236]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0302 	and.w	r3, r3, #2
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d101      	bne.n	80017d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e067      	b.n	80018a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017d6:	4b37      	ldr	r3, [pc, #220]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	f023 0203 	bic.w	r2, r3, #3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	4934      	ldr	r1, [pc, #208]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 80017e4:	4313      	orrs	r3, r2
 80017e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017e8:	f7ff fa6a 	bl	8000cc0 <HAL_GetTick>
 80017ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ee:	e00a      	b.n	8001806 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017f0:	f7ff fa66 	bl	8000cc0 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80017fe:	4293      	cmp	r3, r2
 8001800:	d901      	bls.n	8001806 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e04f      	b.n	80018a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001806:	4b2b      	ldr	r3, [pc, #172]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	f003 020c 	and.w	r2, r3, #12
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	429a      	cmp	r2, r3
 8001816:	d1eb      	bne.n	80017f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001818:	4b25      	ldr	r3, [pc, #148]	; (80018b0 <HAL_RCC_ClockConfig+0x1b8>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0307 	and.w	r3, r3, #7
 8001820:	683a      	ldr	r2, [r7, #0]
 8001822:	429a      	cmp	r2, r3
 8001824:	d20c      	bcs.n	8001840 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001826:	4b22      	ldr	r3, [pc, #136]	; (80018b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001828:	683a      	ldr	r2, [r7, #0]
 800182a:	b2d2      	uxtb	r2, r2
 800182c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800182e:	4b20      	ldr	r3, [pc, #128]	; (80018b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0307 	and.w	r3, r3, #7
 8001836:	683a      	ldr	r2, [r7, #0]
 8001838:	429a      	cmp	r2, r3
 800183a:	d001      	beq.n	8001840 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e032      	b.n	80018a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0304 	and.w	r3, r3, #4
 8001848:	2b00      	cmp	r3, #0
 800184a:	d008      	beq.n	800185e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800184c:	4b19      	ldr	r3, [pc, #100]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	4916      	ldr	r1, [pc, #88]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 800185a:	4313      	orrs	r3, r2
 800185c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0308 	and.w	r3, r3, #8
 8001866:	2b00      	cmp	r3, #0
 8001868:	d009      	beq.n	800187e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800186a:	4b12      	ldr	r3, [pc, #72]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	691b      	ldr	r3, [r3, #16]
 8001876:	00db      	lsls	r3, r3, #3
 8001878:	490e      	ldr	r1, [pc, #56]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 800187a:	4313      	orrs	r3, r2
 800187c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800187e:	f000 f821 	bl	80018c4 <HAL_RCC_GetSysClockFreq>
 8001882:	4602      	mov	r2, r0
 8001884:	4b0b      	ldr	r3, [pc, #44]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	091b      	lsrs	r3, r3, #4
 800188a:	f003 030f 	and.w	r3, r3, #15
 800188e:	490a      	ldr	r1, [pc, #40]	; (80018b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001890:	5ccb      	ldrb	r3, [r1, r3]
 8001892:	fa22 f303 	lsr.w	r3, r2, r3
 8001896:	4a09      	ldr	r2, [pc, #36]	; (80018bc <HAL_RCC_ClockConfig+0x1c4>)
 8001898:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800189a:	4b09      	ldr	r3, [pc, #36]	; (80018c0 <HAL_RCC_ClockConfig+0x1c8>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4618      	mov	r0, r3
 80018a0:	f7ff f88c 	bl	80009bc <HAL_InitTick>

  return HAL_OK;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3710      	adds	r7, #16
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	40023c00 	.word	0x40023c00
 80018b4:	40023800 	.word	0x40023800
 80018b8:	080050b4 	.word	0x080050b4
 80018bc:	20000000 	.word	0x20000000
 80018c0:	20000004 	.word	0x20000004

080018c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018c4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80018c8:	b084      	sub	sp, #16
 80018ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80018cc:	2300      	movs	r3, #0
 80018ce:	607b      	str	r3, [r7, #4]
 80018d0:	2300      	movs	r3, #0
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	2300      	movs	r3, #0
 80018d6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80018d8:	2300      	movs	r3, #0
 80018da:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018dc:	4b67      	ldr	r3, [pc, #412]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	f003 030c 	and.w	r3, r3, #12
 80018e4:	2b08      	cmp	r3, #8
 80018e6:	d00d      	beq.n	8001904 <HAL_RCC_GetSysClockFreq+0x40>
 80018e8:	2b08      	cmp	r3, #8
 80018ea:	f200 80bd 	bhi.w	8001a68 <HAL_RCC_GetSysClockFreq+0x1a4>
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d002      	beq.n	80018f8 <HAL_RCC_GetSysClockFreq+0x34>
 80018f2:	2b04      	cmp	r3, #4
 80018f4:	d003      	beq.n	80018fe <HAL_RCC_GetSysClockFreq+0x3a>
 80018f6:	e0b7      	b.n	8001a68 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018f8:	4b61      	ldr	r3, [pc, #388]	; (8001a80 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80018fa:	60bb      	str	r3, [r7, #8]
       break;
 80018fc:	e0b7      	b.n	8001a6e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018fe:	4b61      	ldr	r3, [pc, #388]	; (8001a84 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001900:	60bb      	str	r3, [r7, #8]
      break;
 8001902:	e0b4      	b.n	8001a6e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001904:	4b5d      	ldr	r3, [pc, #372]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800190c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800190e:	4b5b      	ldr	r3, [pc, #364]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d04d      	beq.n	80019b6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800191a:	4b58      	ldr	r3, [pc, #352]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	099b      	lsrs	r3, r3, #6
 8001920:	461a      	mov	r2, r3
 8001922:	f04f 0300 	mov.w	r3, #0
 8001926:	f240 10ff 	movw	r0, #511	; 0x1ff
 800192a:	f04f 0100 	mov.w	r1, #0
 800192e:	ea02 0800 	and.w	r8, r2, r0
 8001932:	ea03 0901 	and.w	r9, r3, r1
 8001936:	4640      	mov	r0, r8
 8001938:	4649      	mov	r1, r9
 800193a:	f04f 0200 	mov.w	r2, #0
 800193e:	f04f 0300 	mov.w	r3, #0
 8001942:	014b      	lsls	r3, r1, #5
 8001944:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001948:	0142      	lsls	r2, r0, #5
 800194a:	4610      	mov	r0, r2
 800194c:	4619      	mov	r1, r3
 800194e:	ebb0 0008 	subs.w	r0, r0, r8
 8001952:	eb61 0109 	sbc.w	r1, r1, r9
 8001956:	f04f 0200 	mov.w	r2, #0
 800195a:	f04f 0300 	mov.w	r3, #0
 800195e:	018b      	lsls	r3, r1, #6
 8001960:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001964:	0182      	lsls	r2, r0, #6
 8001966:	1a12      	subs	r2, r2, r0
 8001968:	eb63 0301 	sbc.w	r3, r3, r1
 800196c:	f04f 0000 	mov.w	r0, #0
 8001970:	f04f 0100 	mov.w	r1, #0
 8001974:	00d9      	lsls	r1, r3, #3
 8001976:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800197a:	00d0      	lsls	r0, r2, #3
 800197c:	4602      	mov	r2, r0
 800197e:	460b      	mov	r3, r1
 8001980:	eb12 0208 	adds.w	r2, r2, r8
 8001984:	eb43 0309 	adc.w	r3, r3, r9
 8001988:	f04f 0000 	mov.w	r0, #0
 800198c:	f04f 0100 	mov.w	r1, #0
 8001990:	0259      	lsls	r1, r3, #9
 8001992:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001996:	0250      	lsls	r0, r2, #9
 8001998:	4602      	mov	r2, r0
 800199a:	460b      	mov	r3, r1
 800199c:	4610      	mov	r0, r2
 800199e:	4619      	mov	r1, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	461a      	mov	r2, r3
 80019a4:	f04f 0300 	mov.w	r3, #0
 80019a8:	f7fe fc12 	bl	80001d0 <__aeabi_uldivmod>
 80019ac:	4602      	mov	r2, r0
 80019ae:	460b      	mov	r3, r1
 80019b0:	4613      	mov	r3, r2
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	e04a      	b.n	8001a4c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019b6:	4b31      	ldr	r3, [pc, #196]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	099b      	lsrs	r3, r3, #6
 80019bc:	461a      	mov	r2, r3
 80019be:	f04f 0300 	mov.w	r3, #0
 80019c2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80019c6:	f04f 0100 	mov.w	r1, #0
 80019ca:	ea02 0400 	and.w	r4, r2, r0
 80019ce:	ea03 0501 	and.w	r5, r3, r1
 80019d2:	4620      	mov	r0, r4
 80019d4:	4629      	mov	r1, r5
 80019d6:	f04f 0200 	mov.w	r2, #0
 80019da:	f04f 0300 	mov.w	r3, #0
 80019de:	014b      	lsls	r3, r1, #5
 80019e0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80019e4:	0142      	lsls	r2, r0, #5
 80019e6:	4610      	mov	r0, r2
 80019e8:	4619      	mov	r1, r3
 80019ea:	1b00      	subs	r0, r0, r4
 80019ec:	eb61 0105 	sbc.w	r1, r1, r5
 80019f0:	f04f 0200 	mov.w	r2, #0
 80019f4:	f04f 0300 	mov.w	r3, #0
 80019f8:	018b      	lsls	r3, r1, #6
 80019fa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80019fe:	0182      	lsls	r2, r0, #6
 8001a00:	1a12      	subs	r2, r2, r0
 8001a02:	eb63 0301 	sbc.w	r3, r3, r1
 8001a06:	f04f 0000 	mov.w	r0, #0
 8001a0a:	f04f 0100 	mov.w	r1, #0
 8001a0e:	00d9      	lsls	r1, r3, #3
 8001a10:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001a14:	00d0      	lsls	r0, r2, #3
 8001a16:	4602      	mov	r2, r0
 8001a18:	460b      	mov	r3, r1
 8001a1a:	1912      	adds	r2, r2, r4
 8001a1c:	eb45 0303 	adc.w	r3, r5, r3
 8001a20:	f04f 0000 	mov.w	r0, #0
 8001a24:	f04f 0100 	mov.w	r1, #0
 8001a28:	0299      	lsls	r1, r3, #10
 8001a2a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001a2e:	0290      	lsls	r0, r2, #10
 8001a30:	4602      	mov	r2, r0
 8001a32:	460b      	mov	r3, r1
 8001a34:	4610      	mov	r0, r2
 8001a36:	4619      	mov	r1, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	f04f 0300 	mov.w	r3, #0
 8001a40:	f7fe fbc6 	bl	80001d0 <__aeabi_uldivmod>
 8001a44:	4602      	mov	r2, r0
 8001a46:	460b      	mov	r3, r1
 8001a48:	4613      	mov	r3, r2
 8001a4a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a4c:	4b0b      	ldr	r3, [pc, #44]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	0c1b      	lsrs	r3, r3, #16
 8001a52:	f003 0303 	and.w	r3, r3, #3
 8001a56:	3301      	adds	r3, #1
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001a5c:	68fa      	ldr	r2, [r7, #12]
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a64:	60bb      	str	r3, [r7, #8]
      break;
 8001a66:	e002      	b.n	8001a6e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a68:	4b05      	ldr	r3, [pc, #20]	; (8001a80 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001a6a:	60bb      	str	r3, [r7, #8]
      break;
 8001a6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a6e:	68bb      	ldr	r3, [r7, #8]
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3710      	adds	r7, #16
 8001a74:	46bd      	mov	sp, r7
 8001a76:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001a7a:	bf00      	nop
 8001a7c:	40023800 	.word	0x40023800
 8001a80:	00f42400 	.word	0x00f42400
 8001a84:	007a1200 	.word	0x007a1200

08001a88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a8c:	4b03      	ldr	r3, [pc, #12]	; (8001a9c <HAL_RCC_GetHCLKFreq+0x14>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	20000000 	.word	0x20000000

08001aa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001aa4:	f7ff fff0 	bl	8001a88 <HAL_RCC_GetHCLKFreq>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	4b05      	ldr	r3, [pc, #20]	; (8001ac0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	0a9b      	lsrs	r3, r3, #10
 8001ab0:	f003 0307 	and.w	r3, r3, #7
 8001ab4:	4903      	ldr	r1, [pc, #12]	; (8001ac4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ab6:	5ccb      	ldrb	r3, [r1, r3]
 8001ab8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	40023800 	.word	0x40023800
 8001ac4:	080050c4 	.word	0x080050c4

08001ac8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	220f      	movs	r2, #15
 8001ad6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ad8:	4b12      	ldr	r3, [pc, #72]	; (8001b24 <HAL_RCC_GetClockConfig+0x5c>)
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	f003 0203 	and.w	r2, r3, #3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ae4:	4b0f      	ldr	r3, [pc, #60]	; (8001b24 <HAL_RCC_GetClockConfig+0x5c>)
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001af0:	4b0c      	ldr	r3, [pc, #48]	; (8001b24 <HAL_RCC_GetClockConfig+0x5c>)
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001afc:	4b09      	ldr	r3, [pc, #36]	; (8001b24 <HAL_RCC_GetClockConfig+0x5c>)
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	08db      	lsrs	r3, r3, #3
 8001b02:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b0a:	4b07      	ldr	r3, [pc, #28]	; (8001b28 <HAL_RCC_GetClockConfig+0x60>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0207 	and.w	r2, r3, #7
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	601a      	str	r2, [r3, #0]
}
 8001b16:	bf00      	nop
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	40023800 	.word	0x40023800
 8001b28:	40023c00 	.word	0x40023c00

08001b2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d101      	bne.n	8001b3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e041      	b.n	8001bc2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d106      	bne.n	8001b58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f000 f839 	bl	8001bca <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2202      	movs	r2, #2
 8001b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	3304      	adds	r3, #4
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4610      	mov	r0, r2
 8001b6c:	f000 f9d8 	bl	8001f20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2201      	movs	r2, #1
 8001b74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2201      	movs	r2, #1
 8001b84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2201      	movs	r2, #1
 8001b94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2201      	movs	r2, #1
 8001bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	b083      	sub	sp, #12
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001bd2:	bf00      	nop
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
	...

08001be0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b085      	sub	sp, #20
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d001      	beq.n	8001bf8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e04e      	b.n	8001c96 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2202      	movs	r2, #2
 8001bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	68da      	ldr	r2, [r3, #12]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f042 0201 	orr.w	r2, r2, #1
 8001c0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a23      	ldr	r2, [pc, #140]	; (8001ca4 <HAL_TIM_Base_Start_IT+0xc4>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d022      	beq.n	8001c60 <HAL_TIM_Base_Start_IT+0x80>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c22:	d01d      	beq.n	8001c60 <HAL_TIM_Base_Start_IT+0x80>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a1f      	ldr	r2, [pc, #124]	; (8001ca8 <HAL_TIM_Base_Start_IT+0xc8>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d018      	beq.n	8001c60 <HAL_TIM_Base_Start_IT+0x80>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a1e      	ldr	r2, [pc, #120]	; (8001cac <HAL_TIM_Base_Start_IT+0xcc>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d013      	beq.n	8001c60 <HAL_TIM_Base_Start_IT+0x80>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a1c      	ldr	r2, [pc, #112]	; (8001cb0 <HAL_TIM_Base_Start_IT+0xd0>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d00e      	beq.n	8001c60 <HAL_TIM_Base_Start_IT+0x80>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a1b      	ldr	r2, [pc, #108]	; (8001cb4 <HAL_TIM_Base_Start_IT+0xd4>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d009      	beq.n	8001c60 <HAL_TIM_Base_Start_IT+0x80>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a19      	ldr	r2, [pc, #100]	; (8001cb8 <HAL_TIM_Base_Start_IT+0xd8>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d004      	beq.n	8001c60 <HAL_TIM_Base_Start_IT+0x80>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a18      	ldr	r2, [pc, #96]	; (8001cbc <HAL_TIM_Base_Start_IT+0xdc>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d111      	bne.n	8001c84 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	f003 0307 	and.w	r3, r3, #7
 8001c6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2b06      	cmp	r3, #6
 8001c70:	d010      	beq.n	8001c94 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f042 0201 	orr.w	r2, r2, #1
 8001c80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c82:	e007      	b.n	8001c94 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f042 0201 	orr.w	r2, r2, #1
 8001c92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3714      	adds	r7, #20
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	40010000 	.word	0x40010000
 8001ca8:	40000400 	.word	0x40000400
 8001cac:	40000800 	.word	0x40000800
 8001cb0:	40000c00 	.word	0x40000c00
 8001cb4:	40010400 	.word	0x40010400
 8001cb8:	40014000 	.word	0x40014000
 8001cbc:	40001800 	.word	0x40001800

08001cc0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	691b      	ldr	r3, [r3, #16]
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d122      	bne.n	8001d1c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	f003 0302 	and.w	r3, r3, #2
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d11b      	bne.n	8001d1c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f06f 0202 	mvn.w	r2, #2
 8001cec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	699b      	ldr	r3, [r3, #24]
 8001cfa:	f003 0303 	and.w	r3, r3, #3
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d003      	beq.n	8001d0a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f000 f8ee 	bl	8001ee4 <HAL_TIM_IC_CaptureCallback>
 8001d08:	e005      	b.n	8001d16 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f000 f8e0 	bl	8001ed0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f000 f8f1 	bl	8001ef8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	f003 0304 	and.w	r3, r3, #4
 8001d26:	2b04      	cmp	r3, #4
 8001d28:	d122      	bne.n	8001d70 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	f003 0304 	and.w	r3, r3, #4
 8001d34:	2b04      	cmp	r3, #4
 8001d36:	d11b      	bne.n	8001d70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f06f 0204 	mvn.w	r2, #4
 8001d40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2202      	movs	r2, #2
 8001d46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	699b      	ldr	r3, [r3, #24]
 8001d4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d003      	beq.n	8001d5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f000 f8c4 	bl	8001ee4 <HAL_TIM_IC_CaptureCallback>
 8001d5c:	e005      	b.n	8001d6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f000 f8b6 	bl	8001ed0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f000 f8c7 	bl	8001ef8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	691b      	ldr	r3, [r3, #16]
 8001d76:	f003 0308 	and.w	r3, r3, #8
 8001d7a:	2b08      	cmp	r3, #8
 8001d7c:	d122      	bne.n	8001dc4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	f003 0308 	and.w	r3, r3, #8
 8001d88:	2b08      	cmp	r3, #8
 8001d8a:	d11b      	bne.n	8001dc4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f06f 0208 	mvn.w	r2, #8
 8001d94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2204      	movs	r2, #4
 8001d9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	69db      	ldr	r3, [r3, #28]
 8001da2:	f003 0303 	and.w	r3, r3, #3
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d003      	beq.n	8001db2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f000 f89a 	bl	8001ee4 <HAL_TIM_IC_CaptureCallback>
 8001db0:	e005      	b.n	8001dbe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 f88c 	bl	8001ed0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f000 f89d 	bl	8001ef8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	691b      	ldr	r3, [r3, #16]
 8001dca:	f003 0310 	and.w	r3, r3, #16
 8001dce:	2b10      	cmp	r3, #16
 8001dd0:	d122      	bne.n	8001e18 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	f003 0310 	and.w	r3, r3, #16
 8001ddc:	2b10      	cmp	r3, #16
 8001dde:	d11b      	bne.n	8001e18 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f06f 0210 	mvn.w	r2, #16
 8001de8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2208      	movs	r2, #8
 8001dee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	69db      	ldr	r3, [r3, #28]
 8001df6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d003      	beq.n	8001e06 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f000 f870 	bl	8001ee4 <HAL_TIM_IC_CaptureCallback>
 8001e04:	e005      	b.n	8001e12 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 f862 	bl	8001ed0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f000 f873 	bl	8001ef8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	691b      	ldr	r3, [r3, #16]
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d10e      	bne.n	8001e44 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	f003 0301 	and.w	r3, r3, #1
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d107      	bne.n	8001e44 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f06f 0201 	mvn.w	r2, #1
 8001e3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f7fe fd7c 	bl	800093c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	691b      	ldr	r3, [r3, #16]
 8001e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e4e:	2b80      	cmp	r3, #128	; 0x80
 8001e50:	d10e      	bne.n	8001e70 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e5c:	2b80      	cmp	r3, #128	; 0x80
 8001e5e:	d107      	bne.n	8001e70 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f000 f902 	bl	8002074 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	691b      	ldr	r3, [r3, #16]
 8001e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e7a:	2b40      	cmp	r3, #64	; 0x40
 8001e7c:	d10e      	bne.n	8001e9c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e88:	2b40      	cmp	r3, #64	; 0x40
 8001e8a:	d107      	bne.n	8001e9c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f000 f838 	bl	8001f0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	f003 0320 	and.w	r3, r3, #32
 8001ea6:	2b20      	cmp	r3, #32
 8001ea8:	d10e      	bne.n	8001ec8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	f003 0320 	and.w	r3, r3, #32
 8001eb4:	2b20      	cmp	r3, #32
 8001eb6:	d107      	bne.n	8001ec8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f06f 0220 	mvn.w	r2, #32
 8001ec0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f000 f8cc 	bl	8002060 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ec8:	bf00      	nop
 8001eca:	3708      	adds	r7, #8
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ed8:	bf00      	nop
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001eec:	bf00      	nop
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b085      	sub	sp, #20
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	4a40      	ldr	r2, [pc, #256]	; (8002034 <TIM_Base_SetConfig+0x114>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d013      	beq.n	8001f60 <TIM_Base_SetConfig+0x40>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f3e:	d00f      	beq.n	8001f60 <TIM_Base_SetConfig+0x40>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	4a3d      	ldr	r2, [pc, #244]	; (8002038 <TIM_Base_SetConfig+0x118>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d00b      	beq.n	8001f60 <TIM_Base_SetConfig+0x40>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4a3c      	ldr	r2, [pc, #240]	; (800203c <TIM_Base_SetConfig+0x11c>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d007      	beq.n	8001f60 <TIM_Base_SetConfig+0x40>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	4a3b      	ldr	r2, [pc, #236]	; (8002040 <TIM_Base_SetConfig+0x120>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d003      	beq.n	8001f60 <TIM_Base_SetConfig+0x40>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	4a3a      	ldr	r2, [pc, #232]	; (8002044 <TIM_Base_SetConfig+0x124>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d108      	bne.n	8001f72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	68fa      	ldr	r2, [r7, #12]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a2f      	ldr	r2, [pc, #188]	; (8002034 <TIM_Base_SetConfig+0x114>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d02b      	beq.n	8001fd2 <TIM_Base_SetConfig+0xb2>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f80:	d027      	beq.n	8001fd2 <TIM_Base_SetConfig+0xb2>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a2c      	ldr	r2, [pc, #176]	; (8002038 <TIM_Base_SetConfig+0x118>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d023      	beq.n	8001fd2 <TIM_Base_SetConfig+0xb2>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a2b      	ldr	r2, [pc, #172]	; (800203c <TIM_Base_SetConfig+0x11c>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d01f      	beq.n	8001fd2 <TIM_Base_SetConfig+0xb2>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a2a      	ldr	r2, [pc, #168]	; (8002040 <TIM_Base_SetConfig+0x120>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d01b      	beq.n	8001fd2 <TIM_Base_SetConfig+0xb2>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a29      	ldr	r2, [pc, #164]	; (8002044 <TIM_Base_SetConfig+0x124>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d017      	beq.n	8001fd2 <TIM_Base_SetConfig+0xb2>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a28      	ldr	r2, [pc, #160]	; (8002048 <TIM_Base_SetConfig+0x128>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d013      	beq.n	8001fd2 <TIM_Base_SetConfig+0xb2>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a27      	ldr	r2, [pc, #156]	; (800204c <TIM_Base_SetConfig+0x12c>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d00f      	beq.n	8001fd2 <TIM_Base_SetConfig+0xb2>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a26      	ldr	r2, [pc, #152]	; (8002050 <TIM_Base_SetConfig+0x130>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d00b      	beq.n	8001fd2 <TIM_Base_SetConfig+0xb2>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a25      	ldr	r2, [pc, #148]	; (8002054 <TIM_Base_SetConfig+0x134>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d007      	beq.n	8001fd2 <TIM_Base_SetConfig+0xb2>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a24      	ldr	r2, [pc, #144]	; (8002058 <TIM_Base_SetConfig+0x138>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d003      	beq.n	8001fd2 <TIM_Base_SetConfig+0xb2>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a23      	ldr	r2, [pc, #140]	; (800205c <TIM_Base_SetConfig+0x13c>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d108      	bne.n	8001fe4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	68fa      	ldr	r2, [r7, #12]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	695b      	ldr	r3, [r3, #20]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	68fa      	ldr	r2, [r7, #12]
 8001ff6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	689a      	ldr	r2, [r3, #8]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	4a0a      	ldr	r2, [pc, #40]	; (8002034 <TIM_Base_SetConfig+0x114>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d003      	beq.n	8002018 <TIM_Base_SetConfig+0xf8>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	4a0c      	ldr	r2, [pc, #48]	; (8002044 <TIM_Base_SetConfig+0x124>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d103      	bne.n	8002020 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	691a      	ldr	r2, [r3, #16]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2201      	movs	r2, #1
 8002024:	615a      	str	r2, [r3, #20]
}
 8002026:	bf00      	nop
 8002028:	3714      	adds	r7, #20
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	40010000 	.word	0x40010000
 8002038:	40000400 	.word	0x40000400
 800203c:	40000800 	.word	0x40000800
 8002040:	40000c00 	.word	0x40000c00
 8002044:	40010400 	.word	0x40010400
 8002048:	40014000 	.word	0x40014000
 800204c:	40014400 	.word	0x40014400
 8002050:	40014800 	.word	0x40014800
 8002054:	40001800 	.word	0x40001800
 8002058:	40001c00 	.word	0x40001c00
 800205c:	40002000 	.word	0x40002000

08002060 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002068:	bf00      	nop
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800207c:	bf00      	nop
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f103 0208 	add.w	r2, r3, #8
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f04f 32ff 	mov.w	r2, #4294967295
 80020a0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f103 0208 	add.w	r2, r3, #8
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f103 0208 	add.w	r2, r3, #8
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80020bc:	bf00      	nop
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80020d6:	bf00      	nop
 80020d8:	370c      	adds	r7, #12
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr

080020e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80020e2:	b480      	push	{r7}
 80020e4:	b085      	sub	sp, #20
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
 80020ea:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	68fa      	ldr	r2, [r7, #12]
 80020f6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	689a      	ldr	r2, [r3, #8]
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	683a      	ldr	r2, [r7, #0]
 8002106:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	683a      	ldr	r2, [r7, #0]
 800210c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	1c5a      	adds	r2, r3, #1
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	601a      	str	r2, [r3, #0]
}
 800211e:	bf00      	nop
 8002120:	3714      	adds	r7, #20
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr

0800212a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800212a:	b480      	push	{r7}
 800212c:	b085      	sub	sp, #20
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
 8002132:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002140:	d103      	bne.n	800214a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	60fb      	str	r3, [r7, #12]
 8002148:	e00c      	b.n	8002164 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	3308      	adds	r3, #8
 800214e:	60fb      	str	r3, [r7, #12]
 8002150:	e002      	b.n	8002158 <vListInsert+0x2e>
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	60fb      	str	r3, [r7, #12]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	68ba      	ldr	r2, [r7, #8]
 8002160:	429a      	cmp	r2, r3
 8002162:	d2f6      	bcs.n	8002152 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	685a      	ldr	r2, [r3, #4]
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	683a      	ldr	r2, [r7, #0]
 8002172:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	68fa      	ldr	r2, [r7, #12]
 8002178:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	683a      	ldr	r2, [r7, #0]
 800217e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	1c5a      	adds	r2, r3, #1
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	601a      	str	r2, [r3, #0]
}
 8002190:	bf00      	nop
 8002192:	3714      	adds	r7, #20
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800219c:	b480      	push	{r7}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	691b      	ldr	r3, [r3, #16]
 80021a8:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	6892      	ldr	r2, [r2, #8]
 80021b2:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	6852      	ldr	r2, [r2, #4]
 80021bc:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d103      	bne.n	80021d0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689a      	ldr	r2, [r3, #8]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	1e5a      	subs	r2, r3, #1
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3714      	adds	r7, #20
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d10a      	bne.n	800221a <xQueueGenericReset+0x2a>
        __asm volatile
 8002204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002208:	f383 8811 	msr	BASEPRI, r3
 800220c:	f3bf 8f6f 	isb	sy
 8002210:	f3bf 8f4f 	dsb	sy
 8002214:	60bb      	str	r3, [r7, #8]
    }
 8002216:	bf00      	nop
 8002218:	e7fe      	b.n	8002218 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 800221a:	f001 fee5 	bl	8003fe8 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002226:	68f9      	ldr	r1, [r7, #12]
 8002228:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800222a:	fb01 f303 	mul.w	r3, r1, r3
 800222e:	441a      	add	r2, r3
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2200      	movs	r2, #0
 8002238:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800224a:	3b01      	subs	r3, #1
 800224c:	68f9      	ldr	r1, [r7, #12]
 800224e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002250:	fb01 f303 	mul.w	r3, r1, r3
 8002254:	441a      	add	r2, r3
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	22ff      	movs	r2, #255	; 0xff
 800225e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	22ff      	movs	r2, #255	; 0xff
 8002266:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d109      	bne.n	8002284 <xQueueGenericReset+0x94>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	691b      	ldr	r3, [r3, #16]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d00f      	beq.n	8002298 <xQueueGenericReset+0xa8>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	3310      	adds	r3, #16
 800227c:	4618      	mov	r0, r3
 800227e:	f000 ffdf 	bl	8003240 <xTaskRemoveFromEventList>
 8002282:	e009      	b.n	8002298 <xQueueGenericReset+0xa8>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	3310      	adds	r3, #16
 8002288:	4618      	mov	r0, r3
 800228a:	f7ff fefd 	bl	8002088 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	3324      	adds	r3, #36	; 0x24
 8002292:	4618      	mov	r0, r3
 8002294:	f7ff fef8 	bl	8002088 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8002298:	f001 fed6 	bl	8004048 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 800229c:	2301      	movs	r3, #1
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3710      	adds	r7, #16
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b08c      	sub	sp, #48	; 0x30
 80022aa:	af02      	add	r7, sp, #8
 80022ac:	60f8      	str	r0, [r7, #12]
 80022ae:	60b9      	str	r1, [r7, #8]
 80022b0:	4613      	mov	r3, r2
 80022b2:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d10a      	bne.n	80022d0 <xQueueGenericCreate+0x2a>
        __asm volatile
 80022ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022be:	f383 8811 	msr	BASEPRI, r3
 80022c2:	f3bf 8f6f 	isb	sy
 80022c6:	f3bf 8f4f 	dsb	sy
 80022ca:	61bb      	str	r3, [r7, #24]
    }
 80022cc:	bf00      	nop
 80022ce:	e7fe      	b.n	80022ce <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	68ba      	ldr	r2, [r7, #8]
 80022d4:	fb02 f303 	mul.w	r3, r2, r3
 80022d8:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d006      	beq.n	80022ee <xQueueGenericCreate+0x48>
 80022e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80022e8:	68fa      	ldr	r2, [r7, #12]
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d101      	bne.n	80022f2 <xQueueGenericCreate+0x4c>
 80022ee:	2301      	movs	r3, #1
 80022f0:	e000      	b.n	80022f4 <xQueueGenericCreate+0x4e>
 80022f2:	2300      	movs	r3, #0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d10a      	bne.n	800230e <xQueueGenericCreate+0x68>
        __asm volatile
 80022f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022fc:	f383 8811 	msr	BASEPRI, r3
 8002300:	f3bf 8f6f 	isb	sy
 8002304:	f3bf 8f4f 	dsb	sy
 8002308:	617b      	str	r3, [r7, #20]
    }
 800230a:	bf00      	nop
 800230c:	e7fe      	b.n	800230c <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 800230e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002310:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002314:	d90a      	bls.n	800232c <xQueueGenericCreate+0x86>
        __asm volatile
 8002316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800231a:	f383 8811 	msr	BASEPRI, r3
 800231e:	f3bf 8f6f 	isb	sy
 8002322:	f3bf 8f4f 	dsb	sy
 8002326:	613b      	str	r3, [r7, #16]
    }
 8002328:	bf00      	nop
 800232a:	e7fe      	b.n	800232a <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800232c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232e:	3350      	adds	r3, #80	; 0x50
 8002330:	4618      	mov	r0, r3
 8002332:	f001 ff7b 	bl	800422c <pvPortMalloc>
 8002336:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8002338:	6a3b      	ldr	r3, [r7, #32]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d00d      	beq.n	800235a <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800233e:	6a3b      	ldr	r3, [r7, #32]
 8002340:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	3350      	adds	r3, #80	; 0x50
 8002346:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002348:	79fa      	ldrb	r2, [r7, #7]
 800234a:	6a3b      	ldr	r3, [r7, #32]
 800234c:	9300      	str	r3, [sp, #0]
 800234e:	4613      	mov	r3, r2
 8002350:	69fa      	ldr	r2, [r7, #28]
 8002352:	68b9      	ldr	r1, [r7, #8]
 8002354:	68f8      	ldr	r0, [r7, #12]
 8002356:	f000 f805 	bl	8002364 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800235a:	6a3b      	ldr	r3, [r7, #32]
    }
 800235c:	4618      	mov	r0, r3
 800235e:	3728      	adds	r7, #40	; 0x28
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}

08002364 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	607a      	str	r2, [r7, #4]
 8002370:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d103      	bne.n	8002380 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002378:	69bb      	ldr	r3, [r7, #24]
 800237a:	69ba      	ldr	r2, [r7, #24]
 800237c:	601a      	str	r2, [r3, #0]
 800237e:	e002      	b.n	8002386 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	68fa      	ldr	r2, [r7, #12]
 800238a:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	68ba      	ldr	r2, [r7, #8]
 8002390:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002392:	2101      	movs	r1, #1
 8002394:	69b8      	ldr	r0, [r7, #24]
 8002396:	f7ff ff2b 	bl	80021f0 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	78fa      	ldrb	r2, [r7, #3]
 800239e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80023a2:	bf00      	nop
 80023a4:	3710      	adds	r7, #16
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
	...

080023ac <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b08e      	sub	sp, #56	; 0x38
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	60f8      	str	r0, [r7, #12]
 80023b4:	60b9      	str	r1, [r7, #8]
 80023b6:	607a      	str	r2, [r7, #4]
 80023b8:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80023ba:	2300      	movs	r3, #0
 80023bc:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80023c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d10a      	bne.n	80023de <xQueueGenericSend+0x32>
        __asm volatile
 80023c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023cc:	f383 8811 	msr	BASEPRI, r3
 80023d0:	f3bf 8f6f 	isb	sy
 80023d4:	f3bf 8f4f 	dsb	sy
 80023d8:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80023da:	bf00      	nop
 80023dc:	e7fe      	b.n	80023dc <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d103      	bne.n	80023ec <xQueueGenericSend+0x40>
 80023e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d101      	bne.n	80023f0 <xQueueGenericSend+0x44>
 80023ec:	2301      	movs	r3, #1
 80023ee:	e000      	b.n	80023f2 <xQueueGenericSend+0x46>
 80023f0:	2300      	movs	r3, #0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d10a      	bne.n	800240c <xQueueGenericSend+0x60>
        __asm volatile
 80023f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023fa:	f383 8811 	msr	BASEPRI, r3
 80023fe:	f3bf 8f6f 	isb	sy
 8002402:	f3bf 8f4f 	dsb	sy
 8002406:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002408:	bf00      	nop
 800240a:	e7fe      	b.n	800240a <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	2b02      	cmp	r3, #2
 8002410:	d103      	bne.n	800241a <xQueueGenericSend+0x6e>
 8002412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002416:	2b01      	cmp	r3, #1
 8002418:	d101      	bne.n	800241e <xQueueGenericSend+0x72>
 800241a:	2301      	movs	r3, #1
 800241c:	e000      	b.n	8002420 <xQueueGenericSend+0x74>
 800241e:	2300      	movs	r3, #0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d10a      	bne.n	800243a <xQueueGenericSend+0x8e>
        __asm volatile
 8002424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002428:	f383 8811 	msr	BASEPRI, r3
 800242c:	f3bf 8f6f 	isb	sy
 8002430:	f3bf 8f4f 	dsb	sy
 8002434:	623b      	str	r3, [r7, #32]
    }
 8002436:	bf00      	nop
 8002438:	e7fe      	b.n	8002438 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800243a:	f001 f897 	bl	800356c <xTaskGetSchedulerState>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d102      	bne.n	800244a <xQueueGenericSend+0x9e>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d101      	bne.n	800244e <xQueueGenericSend+0xa2>
 800244a:	2301      	movs	r3, #1
 800244c:	e000      	b.n	8002450 <xQueueGenericSend+0xa4>
 800244e:	2300      	movs	r3, #0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d10a      	bne.n	800246a <xQueueGenericSend+0xbe>
        __asm volatile
 8002454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002458:	f383 8811 	msr	BASEPRI, r3
 800245c:	f3bf 8f6f 	isb	sy
 8002460:	f3bf 8f4f 	dsb	sy
 8002464:	61fb      	str	r3, [r7, #28]
    }
 8002466:	bf00      	nop
 8002468:	e7fe      	b.n	8002468 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800246a:	f001 fdbd 	bl	8003fe8 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800246e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002470:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002476:	429a      	cmp	r2, r3
 8002478:	d302      	bcc.n	8002480 <xQueueGenericSend+0xd4>
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	2b02      	cmp	r3, #2
 800247e:	d112      	bne.n	80024a6 <xQueueGenericSend+0xfa>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002480:	683a      	ldr	r2, [r7, #0]
 8002482:	68b9      	ldr	r1, [r7, #8]
 8002484:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002486:	f000 f9f5 	bl	8002874 <prvCopyDataToQueue>
 800248a:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800248c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800248e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002490:	2b00      	cmp	r3, #0
 8002492:	d004      	beq.n	800249e <xQueueGenericSend+0xf2>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002496:	3324      	adds	r3, #36	; 0x24
 8002498:	4618      	mov	r0, r3
 800249a:	f000 fed1 	bl	8003240 <xTaskRemoveFromEventList>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800249e:	f001 fdd3 	bl	8004048 <vPortExitCritical>
                return pdPASS;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e062      	b.n	800256c <xQueueGenericSend+0x1c0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d103      	bne.n	80024b4 <xQueueGenericSend+0x108>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80024ac:	f001 fdcc 	bl	8004048 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 80024b0:	2300      	movs	r3, #0
 80024b2:	e05b      	b.n	800256c <xQueueGenericSend+0x1c0>
                }
                else if( xEntryTimeSet == pdFALSE )
 80024b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d106      	bne.n	80024c8 <xQueueGenericSend+0x11c>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80024ba:	f107 0314 	add.w	r3, r7, #20
 80024be:	4618      	mov	r0, r3
 80024c0:	f000 ff20 	bl	8003304 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80024c4:	2301      	movs	r3, #1
 80024c6:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80024c8:	f001 fdbe 	bl	8004048 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80024cc:	f000 fcca 	bl	8002e64 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80024d0:	f001 fd8a 	bl	8003fe8 <vPortEnterCritical>
 80024d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80024da:	b25b      	sxtb	r3, r3
 80024dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024e0:	d103      	bne.n	80024ea <xQueueGenericSend+0x13e>
 80024e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024e4:	2200      	movs	r2, #0
 80024e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80024f0:	b25b      	sxtb	r3, r3
 80024f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024f6:	d103      	bne.n	8002500 <xQueueGenericSend+0x154>
 80024f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002500:	f001 fda2 	bl	8004048 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002504:	1d3a      	adds	r2, r7, #4
 8002506:	f107 0314 	add.w	r3, r7, #20
 800250a:	4611      	mov	r1, r2
 800250c:	4618      	mov	r0, r3
 800250e:	f000 ff0f 	bl	8003330 <xTaskCheckForTimeOut>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d123      	bne.n	8002560 <xQueueGenericSend+0x1b4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002518:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800251a:	f000 faa3 	bl	8002a64 <prvIsQueueFull>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d017      	beq.n	8002554 <xQueueGenericSend+0x1a8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002526:	3310      	adds	r3, #16
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	4611      	mov	r1, r2
 800252c:	4618      	mov	r0, r3
 800252e:	f000 fe37 	bl	80031a0 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002532:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002534:	f000 fa2e 	bl	8002994 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8002538:	f000 fca2 	bl	8002e80 <xTaskResumeAll>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d193      	bne.n	800246a <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8002542:	4b0c      	ldr	r3, [pc, #48]	; (8002574 <xQueueGenericSend+0x1c8>)
 8002544:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002548:	601a      	str	r2, [r3, #0]
 800254a:	f3bf 8f4f 	dsb	sy
 800254e:	f3bf 8f6f 	isb	sy
 8002552:	e78a      	b.n	800246a <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002554:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002556:	f000 fa1d 	bl	8002994 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800255a:	f000 fc91 	bl	8002e80 <xTaskResumeAll>
 800255e:	e784      	b.n	800246a <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002560:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002562:	f000 fa17 	bl	8002994 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002566:	f000 fc8b 	bl	8002e80 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 800256a:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800256c:	4618      	mov	r0, r3
 800256e:	3738      	adds	r7, #56	; 0x38
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	e000ed04 	.word	0xe000ed04

08002578 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b090      	sub	sp, #64	; 0x40
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	607a      	str	r2, [r7, #4]
 8002584:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 800258a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800258c:	2b00      	cmp	r3, #0
 800258e:	d10a      	bne.n	80025a6 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8002590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002594:	f383 8811 	msr	BASEPRI, r3
 8002598:	f3bf 8f6f 	isb	sy
 800259c:	f3bf 8f4f 	dsb	sy
 80025a0:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80025a2:	bf00      	nop
 80025a4:	e7fe      	b.n	80025a4 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d103      	bne.n	80025b4 <xQueueGenericSendFromISR+0x3c>
 80025ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d101      	bne.n	80025b8 <xQueueGenericSendFromISR+0x40>
 80025b4:	2301      	movs	r3, #1
 80025b6:	e000      	b.n	80025ba <xQueueGenericSendFromISR+0x42>
 80025b8:	2300      	movs	r3, #0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d10a      	bne.n	80025d4 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 80025be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025c2:	f383 8811 	msr	BASEPRI, r3
 80025c6:	f3bf 8f6f 	isb	sy
 80025ca:	f3bf 8f4f 	dsb	sy
 80025ce:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80025d0:	bf00      	nop
 80025d2:	e7fe      	b.n	80025d2 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d103      	bne.n	80025e2 <xQueueGenericSendFromISR+0x6a>
 80025da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d101      	bne.n	80025e6 <xQueueGenericSendFromISR+0x6e>
 80025e2:	2301      	movs	r3, #1
 80025e4:	e000      	b.n	80025e8 <xQueueGenericSendFromISR+0x70>
 80025e6:	2300      	movs	r3, #0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d10a      	bne.n	8002602 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 80025ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025f0:	f383 8811 	msr	BASEPRI, r3
 80025f4:	f3bf 8f6f 	isb	sy
 80025f8:	f3bf 8f4f 	dsb	sy
 80025fc:	623b      	str	r3, [r7, #32]
    }
 80025fe:	bf00      	nop
 8002600:	e7fe      	b.n	8002600 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002602:	f001 fdd3 	bl	80041ac <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8002606:	f3ef 8211 	mrs	r2, BASEPRI
 800260a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800260e:	f383 8811 	msr	BASEPRI, r3
 8002612:	f3bf 8f6f 	isb	sy
 8002616:	f3bf 8f4f 	dsb	sy
 800261a:	61fa      	str	r2, [r7, #28]
 800261c:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 800261e:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002620:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002624:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800262a:	429a      	cmp	r2, r3
 800262c:	d302      	bcc.n	8002634 <xQueueGenericSendFromISR+0xbc>
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	2b02      	cmp	r3, #2
 8002632:	d13e      	bne.n	80026b2 <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8002634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002636:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800263a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800263e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002642:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002644:	683a      	ldr	r2, [r7, #0]
 8002646:	68b9      	ldr	r1, [r7, #8]
 8002648:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800264a:	f000 f913 	bl	8002874 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800264e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002656:	d112      	bne.n	800267e <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800265a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265c:	2b00      	cmp	r3, #0
 800265e:	d025      	beq.n	80026ac <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002662:	3324      	adds	r3, #36	; 0x24
 8002664:	4618      	mov	r0, r3
 8002666:	f000 fdeb 	bl	8003240 <xTaskRemoveFromEventList>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d01d      	beq.n	80026ac <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d01a      	beq.n	80026ac <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2201      	movs	r2, #1
 800267a:	601a      	str	r2, [r3, #0]
 800267c:	e016      	b.n	80026ac <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 800267e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002682:	2b7f      	cmp	r3, #127	; 0x7f
 8002684:	d10a      	bne.n	800269c <xQueueGenericSendFromISR+0x124>
        __asm volatile
 8002686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800268a:	f383 8811 	msr	BASEPRI, r3
 800268e:	f3bf 8f6f 	isb	sy
 8002692:	f3bf 8f4f 	dsb	sy
 8002696:	617b      	str	r3, [r7, #20]
    }
 8002698:	bf00      	nop
 800269a:	e7fe      	b.n	800269a <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800269c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80026a0:	3301      	adds	r3, #1
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	b25a      	sxtb	r2, r3
 80026a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 80026ac:	2301      	movs	r3, #1
 80026ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 80026b0:	e001      	b.n	80026b6 <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 80026b2:	2300      	movs	r3, #0
 80026b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026b8:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80026c0:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80026c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3740      	adds	r7, #64	; 0x40
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b08c      	sub	sp, #48	; 0x30
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80026d8:	2300      	movs	r3, #0
 80026da:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80026e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d10a      	bne.n	80026fc <xQueueReceive+0x30>
        __asm volatile
 80026e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026ea:	f383 8811 	msr	BASEPRI, r3
 80026ee:	f3bf 8f6f 	isb	sy
 80026f2:	f3bf 8f4f 	dsb	sy
 80026f6:	623b      	str	r3, [r7, #32]
    }
 80026f8:	bf00      	nop
 80026fa:	e7fe      	b.n	80026fa <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d103      	bne.n	800270a <xQueueReceive+0x3e>
 8002702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002706:	2b00      	cmp	r3, #0
 8002708:	d101      	bne.n	800270e <xQueueReceive+0x42>
 800270a:	2301      	movs	r3, #1
 800270c:	e000      	b.n	8002710 <xQueueReceive+0x44>
 800270e:	2300      	movs	r3, #0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d10a      	bne.n	800272a <xQueueReceive+0x5e>
        __asm volatile
 8002714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002718:	f383 8811 	msr	BASEPRI, r3
 800271c:	f3bf 8f6f 	isb	sy
 8002720:	f3bf 8f4f 	dsb	sy
 8002724:	61fb      	str	r3, [r7, #28]
    }
 8002726:	bf00      	nop
 8002728:	e7fe      	b.n	8002728 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800272a:	f000 ff1f 	bl	800356c <xTaskGetSchedulerState>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d102      	bne.n	800273a <xQueueReceive+0x6e>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d101      	bne.n	800273e <xQueueReceive+0x72>
 800273a:	2301      	movs	r3, #1
 800273c:	e000      	b.n	8002740 <xQueueReceive+0x74>
 800273e:	2300      	movs	r3, #0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d10a      	bne.n	800275a <xQueueReceive+0x8e>
        __asm volatile
 8002744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002748:	f383 8811 	msr	BASEPRI, r3
 800274c:	f3bf 8f6f 	isb	sy
 8002750:	f3bf 8f4f 	dsb	sy
 8002754:	61bb      	str	r3, [r7, #24]
    }
 8002756:	bf00      	nop
 8002758:	e7fe      	b.n	8002758 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800275a:	f001 fc45 	bl	8003fe8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800275e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002762:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002766:	2b00      	cmp	r3, #0
 8002768:	d014      	beq.n	8002794 <xQueueReceive+0xc8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800276a:	68b9      	ldr	r1, [r7, #8]
 800276c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800276e:	f000 f8eb 	bl	8002948 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002774:	1e5a      	subs	r2, r3, #1
 8002776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002778:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800277a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d004      	beq.n	800278c <xQueueReceive+0xc0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002784:	3310      	adds	r3, #16
 8002786:	4618      	mov	r0, r3
 8002788:	f000 fd5a 	bl	8003240 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800278c:	f001 fc5c 	bl	8004048 <vPortExitCritical>
                return pdPASS;
 8002790:	2301      	movs	r3, #1
 8002792:	e069      	b.n	8002868 <xQueueReceive+0x19c>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d103      	bne.n	80027a2 <xQueueReceive+0xd6>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800279a:	f001 fc55 	bl	8004048 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800279e:	2300      	movs	r3, #0
 80027a0:	e062      	b.n	8002868 <xQueueReceive+0x19c>
                }
                else if( xEntryTimeSet == pdFALSE )
 80027a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d106      	bne.n	80027b6 <xQueueReceive+0xea>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80027a8:	f107 0310 	add.w	r3, r7, #16
 80027ac:	4618      	mov	r0, r3
 80027ae:	f000 fda9 	bl	8003304 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80027b2:	2301      	movs	r3, #1
 80027b4:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80027b6:	f001 fc47 	bl	8004048 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80027ba:	f000 fb53 	bl	8002e64 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80027be:	f001 fc13 	bl	8003fe8 <vPortEnterCritical>
 80027c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80027c8:	b25b      	sxtb	r3, r3
 80027ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ce:	d103      	bne.n	80027d8 <xQueueReceive+0x10c>
 80027d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027de:	b25b      	sxtb	r3, r3
 80027e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027e4:	d103      	bne.n	80027ee <xQueueReceive+0x122>
 80027e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80027ee:	f001 fc2b 	bl	8004048 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80027f2:	1d3a      	adds	r2, r7, #4
 80027f4:	f107 0310 	add.w	r3, r7, #16
 80027f8:	4611      	mov	r1, r2
 80027fa:	4618      	mov	r0, r3
 80027fc:	f000 fd98 	bl	8003330 <xTaskCheckForTimeOut>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d123      	bne.n	800284e <xQueueReceive+0x182>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002806:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002808:	f000 f916 	bl	8002a38 <prvIsQueueEmpty>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d017      	beq.n	8002842 <xQueueReceive+0x176>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002814:	3324      	adds	r3, #36	; 0x24
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	4611      	mov	r1, r2
 800281a:	4618      	mov	r0, r3
 800281c:	f000 fcc0 	bl	80031a0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002820:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002822:	f000 f8b7 	bl	8002994 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002826:	f000 fb2b 	bl	8002e80 <xTaskResumeAll>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d194      	bne.n	800275a <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002830:	4b0f      	ldr	r3, [pc, #60]	; (8002870 <xQueueReceive+0x1a4>)
 8002832:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002836:	601a      	str	r2, [r3, #0]
 8002838:	f3bf 8f4f 	dsb	sy
 800283c:	f3bf 8f6f 	isb	sy
 8002840:	e78b      	b.n	800275a <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002842:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002844:	f000 f8a6 	bl	8002994 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002848:	f000 fb1a 	bl	8002e80 <xTaskResumeAll>
 800284c:	e785      	b.n	800275a <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800284e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002850:	f000 f8a0 	bl	8002994 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002854:	f000 fb14 	bl	8002e80 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002858:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800285a:	f000 f8ed 	bl	8002a38 <prvIsQueueEmpty>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	f43f af7a 	beq.w	800275a <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8002866:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002868:	4618      	mov	r0, r3
 800286a:	3730      	adds	r7, #48	; 0x30
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	e000ed04 	.word	0xe000ed04

08002874 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b086      	sub	sp, #24
 8002878:	af00      	add	r7, sp, #0
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	60b9      	str	r1, [r7, #8]
 800287e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002880:	2300      	movs	r3, #0
 8002882:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002888:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288e:	2b00      	cmp	r3, #0
 8002890:	d10d      	bne.n	80028ae <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d14d      	bne.n	8002936 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	4618      	mov	r0, r3
 80028a0:	f000 fe82 	bl	80035a8 <xTaskPriorityDisinherit>
 80028a4:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2200      	movs	r2, #0
 80028aa:	609a      	str	r2, [r3, #8]
 80028ac:	e043      	b.n	8002936 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d119      	bne.n	80028e8 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	6858      	ldr	r0, [r3, #4]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028bc:	461a      	mov	r2, r3
 80028be:	68b9      	ldr	r1, [r7, #8]
 80028c0:	f001 fed6 	bl	8004670 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	685a      	ldr	r2, [r3, #4]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028cc:	441a      	add	r2, r3
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	685a      	ldr	r2, [r3, #4]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	429a      	cmp	r2, r3
 80028dc:	d32b      	bcc.n	8002936 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	605a      	str	r2, [r3, #4]
 80028e6:	e026      	b.n	8002936 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	68d8      	ldr	r0, [r3, #12]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f0:	461a      	mov	r2, r3
 80028f2:	68b9      	ldr	r1, [r7, #8]
 80028f4:	f001 febc 	bl	8004670 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	68da      	ldr	r2, [r3, #12]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002900:	425b      	negs	r3, r3
 8002902:	441a      	add	r2, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	68da      	ldr	r2, [r3, #12]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	429a      	cmp	r2, r3
 8002912:	d207      	bcs.n	8002924 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	689a      	ldr	r2, [r3, #8]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291c:	425b      	negs	r3, r3
 800291e:	441a      	add	r2, r3
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2b02      	cmp	r3, #2
 8002928:	d105      	bne.n	8002936 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d002      	beq.n	8002936 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	3b01      	subs	r3, #1
 8002934:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	1c5a      	adds	r2, r3, #1
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 800293e:	697b      	ldr	r3, [r7, #20]
}
 8002940:	4618      	mov	r0, r3
 8002942:	3718      	adds	r7, #24
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002956:	2b00      	cmp	r3, #0
 8002958:	d018      	beq.n	800298c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	68da      	ldr	r2, [r3, #12]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002962:	441a      	add	r2, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	68da      	ldr	r2, [r3, #12]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	429a      	cmp	r2, r3
 8002972:	d303      	bcc.n	800297c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	68d9      	ldr	r1, [r3, #12]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002984:	461a      	mov	r2, r3
 8002986:	6838      	ldr	r0, [r7, #0]
 8002988:	f001 fe72 	bl	8004670 <memcpy>
    }
}
 800298c:	bf00      	nop
 800298e:	3708      	adds	r7, #8
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800299c:	f001 fb24 	bl	8003fe8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80029a6:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80029a8:	e011      	b.n	80029ce <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d012      	beq.n	80029d8 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	3324      	adds	r3, #36	; 0x24
 80029b6:	4618      	mov	r0, r3
 80029b8:	f000 fc42 	bl	8003240 <xTaskRemoveFromEventList>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d001      	beq.n	80029c6 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80029c2:	f000 fd1b 	bl	80033fc <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80029c6:	7bfb      	ldrb	r3, [r7, #15]
 80029c8:	3b01      	subs	r3, #1
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80029ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	dce9      	bgt.n	80029aa <prvUnlockQueue+0x16>
 80029d6:	e000      	b.n	80029da <prvUnlockQueue+0x46>
                        break;
 80029d8:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	22ff      	movs	r2, #255	; 0xff
 80029de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80029e2:	f001 fb31 	bl	8004048 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80029e6:	f001 faff 	bl	8003fe8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80029f0:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80029f2:	e011      	b.n	8002a18 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	691b      	ldr	r3, [r3, #16]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d012      	beq.n	8002a22 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	3310      	adds	r3, #16
 8002a00:	4618      	mov	r0, r3
 8002a02:	f000 fc1d 	bl	8003240 <xTaskRemoveFromEventList>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d001      	beq.n	8002a10 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002a0c:	f000 fcf6 	bl	80033fc <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002a10:	7bbb      	ldrb	r3, [r7, #14]
 8002a12:	3b01      	subs	r3, #1
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002a18:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	dce9      	bgt.n	80029f4 <prvUnlockQueue+0x60>
 8002a20:	e000      	b.n	8002a24 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002a22:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	22ff      	movs	r2, #255	; 0xff
 8002a28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002a2c:	f001 fb0c 	bl	8004048 <vPortExitCritical>
}
 8002a30:	bf00      	nop
 8002a32:	3710      	adds	r7, #16
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002a40:	f001 fad2 	bl	8003fe8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d102      	bne.n	8002a52 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	60fb      	str	r3, [r7, #12]
 8002a50:	e001      	b.n	8002a56 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002a52:	2300      	movs	r3, #0
 8002a54:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002a56:	f001 faf7 	bl	8004048 <vPortExitCritical>

    return xReturn;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3710      	adds	r7, #16
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002a6c:	f001 fabc 	bl	8003fe8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d102      	bne.n	8002a82 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	60fb      	str	r3, [r7, #12]
 8002a80:	e001      	b.n	8002a86 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002a82:	2300      	movs	r3, #0
 8002a84:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002a86:	f001 fadf 	bl	8004048 <vPortExitCritical>

    return xReturn;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3710      	adds	r7, #16
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002a94:	b480      	push	{r7}
 8002a96:	b085      	sub	sp, #20
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	60fb      	str	r3, [r7, #12]
 8002aa2:	e014      	b.n	8002ace <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002aa4:	4a0f      	ldr	r2, [pc, #60]	; (8002ae4 <vQueueAddToRegistry+0x50>)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d10b      	bne.n	8002ac8 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002ab0:	490c      	ldr	r1, [pc, #48]	; (8002ae4 <vQueueAddToRegistry+0x50>)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	683a      	ldr	r2, [r7, #0]
 8002ab6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8002aba:	4a0a      	ldr	r2, [pc, #40]	; (8002ae4 <vQueueAddToRegistry+0x50>)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	4413      	add	r3, r2
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 8002ac6:	e006      	b.n	8002ad6 <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	3301      	adds	r3, #1
 8002acc:	60fb      	str	r3, [r7, #12]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2b07      	cmp	r3, #7
 8002ad2:	d9e7      	bls.n	8002aa4 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002ad4:	bf00      	nop
 8002ad6:	bf00      	nop
 8002ad8:	3714      	adds	r7, #20
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	20012e54 	.word	0x20012e54

08002ae8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b086      	sub	sp, #24
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002af8:	f001 fa76 	bl	8003fe8 <vPortEnterCritical>
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b02:	b25b      	sxtb	r3, r3
 8002b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b08:	d103      	bne.n	8002b12 <vQueueWaitForMessageRestricted+0x2a>
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b18:	b25b      	sxtb	r3, r3
 8002b1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b1e:	d103      	bne.n	8002b28 <vQueueWaitForMessageRestricted+0x40>
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b28:	f001 fa8e 	bl	8004048 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d106      	bne.n	8002b42 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	3324      	adds	r3, #36	; 0x24
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	68b9      	ldr	r1, [r7, #8]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f000 fb53 	bl	80031e8 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002b42:	6978      	ldr	r0, [r7, #20]
 8002b44:	f7ff ff26 	bl	8002994 <prvUnlockQueue>
    }
 8002b48:	bf00      	nop
 8002b4a:	3718      	adds	r7, #24
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b08c      	sub	sp, #48	; 0x30
 8002b54:	af04      	add	r7, sp, #16
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	603b      	str	r3, [r7, #0]
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002b60:	88fb      	ldrh	r3, [r7, #6]
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	4618      	mov	r0, r3
 8002b66:	f001 fb61 	bl	800422c <pvPortMalloc>
 8002b6a:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00e      	beq.n	8002b90 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002b72:	2058      	movs	r0, #88	; 0x58
 8002b74:	f001 fb5a 	bl	800422c <pvPortMalloc>
 8002b78:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d003      	beq.n	8002b88 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	697a      	ldr	r2, [r7, #20]
 8002b84:	631a      	str	r2, [r3, #48]	; 0x30
 8002b86:	e005      	b.n	8002b94 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002b88:	6978      	ldr	r0, [r7, #20]
 8002b8a:	f001 fc2f 	bl	80043ec <vPortFree>
 8002b8e:	e001      	b.n	8002b94 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002b90:	2300      	movs	r3, #0
 8002b92:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d013      	beq.n	8002bc2 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002b9a:	88fa      	ldrh	r2, [r7, #6]
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	9303      	str	r3, [sp, #12]
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	9302      	str	r3, [sp, #8]
 8002ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ba6:	9301      	str	r3, [sp, #4]
 8002ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002baa:	9300      	str	r3, [sp, #0]
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	68b9      	ldr	r1, [r7, #8]
 8002bb0:	68f8      	ldr	r0, [r7, #12]
 8002bb2:	f000 f80e 	bl	8002bd2 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002bb6:	69f8      	ldr	r0, [r7, #28]
 8002bb8:	f000 f8a2 	bl	8002d00 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	61bb      	str	r3, [r7, #24]
 8002bc0:	e002      	b.n	8002bc8 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8002bc6:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002bc8:	69bb      	ldr	r3, [r7, #24]
    }
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3720      	adds	r7, #32
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}

08002bd2 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002bd2:	b580      	push	{r7, lr}
 8002bd4:	b088      	sub	sp, #32
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	60f8      	str	r0, [r7, #12]
 8002bda:	60b9      	str	r1, [r7, #8]
 8002bdc:	607a      	str	r2, [r7, #4]
 8002bde:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	461a      	mov	r2, r3
 8002bea:	21a5      	movs	r1, #165	; 0xa5
 8002bec:	f001 fd4e 	bl	800468c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	4413      	add	r3, r2
 8002c00:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	f023 0307 	bic.w	r3, r3, #7
 8002c08:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	f003 0307 	and.w	r3, r3, #7
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d00a      	beq.n	8002c2a <prvInitialiseNewTask+0x58>
        __asm volatile
 8002c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c18:	f383 8811 	msr	BASEPRI, r3
 8002c1c:	f3bf 8f6f 	isb	sy
 8002c20:	f3bf 8f4f 	dsb	sy
 8002c24:	617b      	str	r3, [r7, #20]
    }
 8002c26:	bf00      	nop
 8002c28:	e7fe      	b.n	8002c28 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d01f      	beq.n	8002c70 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002c30:	2300      	movs	r3, #0
 8002c32:	61fb      	str	r3, [r7, #28]
 8002c34:	e012      	b.n	8002c5c <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002c36:	68ba      	ldr	r2, [r7, #8]
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	7819      	ldrb	r1, [r3, #0]
 8002c3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	4413      	add	r3, r2
 8002c44:	3334      	adds	r3, #52	; 0x34
 8002c46:	460a      	mov	r2, r1
 8002c48:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002c4a:	68ba      	ldr	r2, [r7, #8]
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	4413      	add	r3, r2
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d006      	beq.n	8002c64 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	3301      	adds	r3, #1
 8002c5a:	61fb      	str	r3, [r7, #28]
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	2b09      	cmp	r3, #9
 8002c60:	d9e9      	bls.n	8002c36 <prvInitialiseNewTask+0x64>
 8002c62:	e000      	b.n	8002c66 <prvInitialiseNewTask+0x94>
            {
                break;
 8002c64:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002c6e:	e003      	b.n	8002c78 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c7a:	2b04      	cmp	r3, #4
 8002c7c:	d901      	bls.n	8002c82 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002c7e:	2304      	movs	r3, #4
 8002c80:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c86:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c8c:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c90:	2200      	movs	r2, #0
 8002c92:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c96:	3304      	adds	r3, #4
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7ff fa15 	bl	80020c8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca0:	3318      	adds	r3, #24
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7ff fa10 	bl	80020c8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002caa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cac:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cb0:	f1c3 0205 	rsb	r2, r3, #5
 8002cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb6:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cbc:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc0:	3350      	adds	r3, #80	; 0x50
 8002cc2:	2204      	movs	r2, #4
 8002cc4:	2100      	movs	r1, #0
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f001 fce0 	bl	800468c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cce:	3354      	adds	r3, #84	; 0x54
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	2100      	movs	r1, #0
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f001 fcd9 	bl	800468c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002cda:	683a      	ldr	r2, [r7, #0]
 8002cdc:	68f9      	ldr	r1, [r7, #12]
 8002cde:	69b8      	ldr	r0, [r7, #24]
 8002ce0:	f001 f854 	bl	8003d8c <pxPortInitialiseStack>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ce8:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d002      	beq.n	8002cf6 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cf2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cf4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002cf6:	bf00      	nop
 8002cf8:	3720      	adds	r7, #32
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
	...

08002d00 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002d08:	f001 f96e 	bl	8003fe8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002d0c:	4b26      	ldr	r3, [pc, #152]	; (8002da8 <prvAddNewTaskToReadyList+0xa8>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	3301      	adds	r3, #1
 8002d12:	4a25      	ldr	r2, [pc, #148]	; (8002da8 <prvAddNewTaskToReadyList+0xa8>)
 8002d14:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002d16:	4b25      	ldr	r3, [pc, #148]	; (8002dac <prvAddNewTaskToReadyList+0xac>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d109      	bne.n	8002d32 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002d1e:	4a23      	ldr	r2, [pc, #140]	; (8002dac <prvAddNewTaskToReadyList+0xac>)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002d24:	4b20      	ldr	r3, [pc, #128]	; (8002da8 <prvAddNewTaskToReadyList+0xa8>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d110      	bne.n	8002d4e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002d2c:	f000 fb84 	bl	8003438 <prvInitialiseTaskLists>
 8002d30:	e00d      	b.n	8002d4e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002d32:	4b1f      	ldr	r3, [pc, #124]	; (8002db0 <prvAddNewTaskToReadyList+0xb0>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d109      	bne.n	8002d4e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002d3a:	4b1c      	ldr	r3, [pc, #112]	; (8002dac <prvAddNewTaskToReadyList+0xac>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d802      	bhi.n	8002d4e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002d48:	4a18      	ldr	r2, [pc, #96]	; (8002dac <prvAddNewTaskToReadyList+0xac>)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002d4e:	4b19      	ldr	r3, [pc, #100]	; (8002db4 <prvAddNewTaskToReadyList+0xb4>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	3301      	adds	r3, #1
 8002d54:	4a17      	ldr	r2, [pc, #92]	; (8002db4 <prvAddNewTaskToReadyList+0xb4>)
 8002d56:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002d58:	4b16      	ldr	r3, [pc, #88]	; (8002db4 <prvAddNewTaskToReadyList+0xb4>)
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d64:	2201      	movs	r2, #1
 8002d66:	409a      	lsls	r2, r3
 8002d68:	4b13      	ldr	r3, [pc, #76]	; (8002db8 <prvAddNewTaskToReadyList+0xb8>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	4a12      	ldr	r2, [pc, #72]	; (8002db8 <prvAddNewTaskToReadyList+0xb8>)
 8002d70:	6013      	str	r3, [r2, #0]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d76:	4613      	mov	r3, r2
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	4413      	add	r3, r2
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	4a0f      	ldr	r2, [pc, #60]	; (8002dbc <prvAddNewTaskToReadyList+0xbc>)
 8002d80:	441a      	add	r2, r3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	3304      	adds	r3, #4
 8002d86:	4619      	mov	r1, r3
 8002d88:	4610      	mov	r0, r2
 8002d8a:	f7ff f9aa 	bl	80020e2 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002d8e:	f001 f95b 	bl	8004048 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002d92:	4b07      	ldr	r3, [pc, #28]	; (8002db0 <prvAddNewTaskToReadyList+0xb0>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <prvAddNewTaskToReadyList+0x9e>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002d9a:	4b04      	ldr	r3, [pc, #16]	; (8002dac <prvAddNewTaskToReadyList+0xac>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002d9e:	bf00      	nop
 8002da0:	3708      	adds	r7, #8
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	2000016c 	.word	0x2000016c
 8002dac:	20000094 	.word	0x20000094
 8002db0:	20000178 	.word	0x20000178
 8002db4:	20000188 	.word	0x20000188
 8002db8:	20000174 	.word	0x20000174
 8002dbc:	20000098 	.word	0x20000098

08002dc0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b086      	sub	sp, #24
 8002dc4:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002dc6:	4b20      	ldr	r3, [pc, #128]	; (8002e48 <vTaskStartScheduler+0x88>)
 8002dc8:	9301      	str	r3, [sp, #4]
 8002dca:	2300      	movs	r3, #0
 8002dcc:	9300      	str	r3, [sp, #0]
 8002dce:	2300      	movs	r3, #0
 8002dd0:	2282      	movs	r2, #130	; 0x82
 8002dd2:	491e      	ldr	r1, [pc, #120]	; (8002e4c <vTaskStartScheduler+0x8c>)
 8002dd4:	481e      	ldr	r0, [pc, #120]	; (8002e50 <vTaskStartScheduler+0x90>)
 8002dd6:	f7ff febb 	bl	8002b50 <xTaskCreate>
 8002dda:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d102      	bne.n	8002de8 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8002de2:	f000 fcc1 	bl	8003768 <xTimerCreateTimerTask>
 8002de6:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d116      	bne.n	8002e1c <vTaskStartScheduler+0x5c>
        __asm volatile
 8002dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002df2:	f383 8811 	msr	BASEPRI, r3
 8002df6:	f3bf 8f6f 	isb	sy
 8002dfa:	f3bf 8f4f 	dsb	sy
 8002dfe:	60bb      	str	r3, [r7, #8]
    }
 8002e00:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002e02:	4b14      	ldr	r3, [pc, #80]	; (8002e54 <vTaskStartScheduler+0x94>)
 8002e04:	f04f 32ff 	mov.w	r2, #4294967295
 8002e08:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002e0a:	4b13      	ldr	r3, [pc, #76]	; (8002e58 <vTaskStartScheduler+0x98>)
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002e10:	4b12      	ldr	r3, [pc, #72]	; (8002e5c <vTaskStartScheduler+0x9c>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002e16:	f001 f845 	bl	8003ea4 <xPortStartScheduler>
 8002e1a:	e00e      	b.n	8002e3a <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e22:	d10a      	bne.n	8002e3a <vTaskStartScheduler+0x7a>
        __asm volatile
 8002e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e28:	f383 8811 	msr	BASEPRI, r3
 8002e2c:	f3bf 8f6f 	isb	sy
 8002e30:	f3bf 8f4f 	dsb	sy
 8002e34:	607b      	str	r3, [r7, #4]
    }
 8002e36:	bf00      	nop
 8002e38:	e7fe      	b.n	8002e38 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002e3a:	4b09      	ldr	r3, [pc, #36]	; (8002e60 <vTaskStartScheduler+0xa0>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
}
 8002e3e:	bf00      	nop
 8002e40:	3710      	adds	r7, #16
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	20000190 	.word	0x20000190
 8002e4c:	0800509c 	.word	0x0800509c
 8002e50:	08003415 	.word	0x08003415
 8002e54:	2000018c 	.word	0x2000018c
 8002e58:	20000178 	.word	0x20000178
 8002e5c:	20000170 	.word	0x20000170
 8002e60:	2000000c 	.word	0x2000000c

08002e64 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002e64:	b480      	push	{r7}
 8002e66:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002e68:	4b04      	ldr	r3, [pc, #16]	; (8002e7c <vTaskSuspendAll+0x18>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	4a03      	ldr	r2, [pc, #12]	; (8002e7c <vTaskSuspendAll+0x18>)
 8002e70:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002e72:	bf00      	nop
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr
 8002e7c:	20000194 	.word	0x20000194

08002e80 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002e86:	2300      	movs	r3, #0
 8002e88:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	607b      	str	r3, [r7, #4]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002e8e:	4b3b      	ldr	r3, [pc, #236]	; (8002f7c <xTaskResumeAll+0xfc>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d10a      	bne.n	8002eac <xTaskResumeAll+0x2c>
        __asm volatile
 8002e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e9a:	f383 8811 	msr	BASEPRI, r3
 8002e9e:	f3bf 8f6f 	isb	sy
 8002ea2:	f3bf 8f4f 	dsb	sy
 8002ea6:	603b      	str	r3, [r7, #0]
    }
 8002ea8:	bf00      	nop
 8002eaa:	e7fe      	b.n	8002eaa <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002eac:	f001 f89c 	bl	8003fe8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002eb0:	4b32      	ldr	r3, [pc, #200]	; (8002f7c <xTaskResumeAll+0xfc>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	3b01      	subs	r3, #1
 8002eb6:	4a31      	ldr	r2, [pc, #196]	; (8002f7c <xTaskResumeAll+0xfc>)
 8002eb8:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002eba:	4b30      	ldr	r3, [pc, #192]	; (8002f7c <xTaskResumeAll+0xfc>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d155      	bne.n	8002f6e <xTaskResumeAll+0xee>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002ec2:	4b2f      	ldr	r3, [pc, #188]	; (8002f80 <xTaskResumeAll+0x100>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d051      	beq.n	8002f6e <xTaskResumeAll+0xee>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002eca:	e02e      	b.n	8002f2a <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ecc:	4b2d      	ldr	r3, [pc, #180]	; (8002f84 <xTaskResumeAll+0x104>)
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	3318      	adds	r3, #24
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7ff f95f 	bl	800219c <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	3304      	adds	r3, #4
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7ff f95a 	bl	800219c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eec:	2201      	movs	r2, #1
 8002eee:	409a      	lsls	r2, r3
 8002ef0:	4b25      	ldr	r3, [pc, #148]	; (8002f88 <xTaskResumeAll+0x108>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	4a24      	ldr	r2, [pc, #144]	; (8002f88 <xTaskResumeAll+0x108>)
 8002ef8:	6013      	str	r3, [r2, #0]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002efe:	4613      	mov	r3, r2
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	4413      	add	r3, r2
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	4a21      	ldr	r2, [pc, #132]	; (8002f8c <xTaskResumeAll+0x10c>)
 8002f08:	441a      	add	r2, r3
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	3304      	adds	r3, #4
 8002f0e:	4619      	mov	r1, r3
 8002f10:	4610      	mov	r0, r2
 8002f12:	f7ff f8e6 	bl	80020e2 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f1a:	4b1d      	ldr	r3, [pc, #116]	; (8002f90 <xTaskResumeAll+0x110>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d302      	bcc.n	8002f2a <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 8002f24:	4b1b      	ldr	r3, [pc, #108]	; (8002f94 <xTaskResumeAll+0x114>)
 8002f26:	2201      	movs	r2, #1
 8002f28:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002f2a:	4b16      	ldr	r3, [pc, #88]	; (8002f84 <xTaskResumeAll+0x104>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d1cc      	bne.n	8002ecc <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d001      	beq.n	8002f3c <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002f38:	f000 fafc 	bl	8003534 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002f3c:	4b16      	ldr	r3, [pc, #88]	; (8002f98 <xTaskResumeAll+0x118>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	60bb      	str	r3, [r7, #8]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d010      	beq.n	8002f6a <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002f48:	f000 f838 	bl	8002fbc <xTaskIncrementTick>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d002      	beq.n	8002f58 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 8002f52:	4b10      	ldr	r3, [pc, #64]	; (8002f94 <xTaskResumeAll+0x114>)
 8002f54:	2201      	movs	r2, #1
 8002f56:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	60bb      	str	r3, [r7, #8]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d1f1      	bne.n	8002f48 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 8002f64:	4b0c      	ldr	r3, [pc, #48]	; (8002f98 <xTaskResumeAll+0x118>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002f6a:	4b0a      	ldr	r3, [pc, #40]	; (8002f94 <xTaskResumeAll+0x114>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002f6e:	f001 f86b 	bl	8004048 <vPortExitCritical>

    return xAlreadyYielded;
 8002f72:	687b      	ldr	r3, [r7, #4]
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3710      	adds	r7, #16
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	20000194 	.word	0x20000194
 8002f80:	2000016c 	.word	0x2000016c
 8002f84:	2000012c 	.word	0x2000012c
 8002f88:	20000174 	.word	0x20000174
 8002f8c:	20000098 	.word	0x20000098
 8002f90:	20000094 	.word	0x20000094
 8002f94:	20000180 	.word	0x20000180
 8002f98:	2000017c 	.word	0x2000017c

08002f9c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002fa2:	4b05      	ldr	r3, [pc, #20]	; (8002fb8 <xTaskGetTickCount+0x1c>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002fa8:	687b      	ldr	r3, [r7, #4]
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	370c      	adds	r7, #12
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	20000170 	.word	0x20000170

08002fbc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b086      	sub	sp, #24
 8002fc0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002fc6:	4b3f      	ldr	r3, [pc, #252]	; (80030c4 <xTaskIncrementTick+0x108>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d16f      	bne.n	80030ae <xTaskIncrementTick+0xf2>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002fce:	4b3e      	ldr	r3, [pc, #248]	; (80030c8 <xTaskIncrementTick+0x10c>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002fd6:	4a3c      	ldr	r2, [pc, #240]	; (80030c8 <xTaskIncrementTick+0x10c>)
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d120      	bne.n	8003024 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 8002fe2:	4b3a      	ldr	r3, [pc, #232]	; (80030cc <xTaskIncrementTick+0x110>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d00a      	beq.n	8003002 <xTaskIncrementTick+0x46>
        __asm volatile
 8002fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ff0:	f383 8811 	msr	BASEPRI, r3
 8002ff4:	f3bf 8f6f 	isb	sy
 8002ff8:	f3bf 8f4f 	dsb	sy
 8002ffc:	603b      	str	r3, [r7, #0]
    }
 8002ffe:	bf00      	nop
 8003000:	e7fe      	b.n	8003000 <xTaskIncrementTick+0x44>
 8003002:	4b32      	ldr	r3, [pc, #200]	; (80030cc <xTaskIncrementTick+0x110>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	60fb      	str	r3, [r7, #12]
 8003008:	4b31      	ldr	r3, [pc, #196]	; (80030d0 <xTaskIncrementTick+0x114>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a2f      	ldr	r2, [pc, #188]	; (80030cc <xTaskIncrementTick+0x110>)
 800300e:	6013      	str	r3, [r2, #0]
 8003010:	4a2f      	ldr	r2, [pc, #188]	; (80030d0 <xTaskIncrementTick+0x114>)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6013      	str	r3, [r2, #0]
 8003016:	4b2f      	ldr	r3, [pc, #188]	; (80030d4 <xTaskIncrementTick+0x118>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	3301      	adds	r3, #1
 800301c:	4a2d      	ldr	r2, [pc, #180]	; (80030d4 <xTaskIncrementTick+0x118>)
 800301e:	6013      	str	r3, [r2, #0]
 8003020:	f000 fa88 	bl	8003534 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003024:	4b2c      	ldr	r3, [pc, #176]	; (80030d8 <xTaskIncrementTick+0x11c>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	693a      	ldr	r2, [r7, #16]
 800302a:	429a      	cmp	r2, r3
 800302c:	d344      	bcc.n	80030b8 <xTaskIncrementTick+0xfc>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800302e:	4b27      	ldr	r3, [pc, #156]	; (80030cc <xTaskIncrementTick+0x110>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d104      	bne.n	8003042 <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003038:	4b27      	ldr	r3, [pc, #156]	; (80030d8 <xTaskIncrementTick+0x11c>)
 800303a:	f04f 32ff 	mov.w	r2, #4294967295
 800303e:	601a      	str	r2, [r3, #0]
                    break;
 8003040:	e03a      	b.n	80030b8 <xTaskIncrementTick+0xfc>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003042:	4b22      	ldr	r3, [pc, #136]	; (80030cc <xTaskIncrementTick+0x110>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8003052:	693a      	ldr	r2, [r7, #16]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	429a      	cmp	r2, r3
 8003058:	d203      	bcs.n	8003062 <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800305a:	4a1f      	ldr	r2, [pc, #124]	; (80030d8 <xTaskIncrementTick+0x11c>)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003060:	e02a      	b.n	80030b8 <xTaskIncrementTick+0xfc>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	3304      	adds	r3, #4
 8003066:	4618      	mov	r0, r3
 8003068:	f7ff f898 	bl	800219c <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003070:	2b00      	cmp	r3, #0
 8003072:	d004      	beq.n	800307e <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	3318      	adds	r3, #24
 8003078:	4618      	mov	r0, r3
 800307a:	f7ff f88f 	bl	800219c <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003082:	2201      	movs	r2, #1
 8003084:	409a      	lsls	r2, r3
 8003086:	4b15      	ldr	r3, [pc, #84]	; (80030dc <xTaskIncrementTick+0x120>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4313      	orrs	r3, r2
 800308c:	4a13      	ldr	r2, [pc, #76]	; (80030dc <xTaskIncrementTick+0x120>)
 800308e:	6013      	str	r3, [r2, #0]
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003094:	4613      	mov	r3, r2
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	4413      	add	r3, r2
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	4a10      	ldr	r2, [pc, #64]	; (80030e0 <xTaskIncrementTick+0x124>)
 800309e:	441a      	add	r2, r3
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	3304      	adds	r3, #4
 80030a4:	4619      	mov	r1, r3
 80030a6:	4610      	mov	r0, r2
 80030a8:	f7ff f81b 	bl	80020e2 <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80030ac:	e7bf      	b.n	800302e <xTaskIncrementTick+0x72>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80030ae:	4b0d      	ldr	r3, [pc, #52]	; (80030e4 <xTaskIncrementTick+0x128>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	3301      	adds	r3, #1
 80030b4:	4a0b      	ldr	r2, [pc, #44]	; (80030e4 <xTaskIncrementTick+0x128>)
 80030b6:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80030b8:	697b      	ldr	r3, [r7, #20]
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3718      	adds	r7, #24
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	20000194 	.word	0x20000194
 80030c8:	20000170 	.word	0x20000170
 80030cc:	20000124 	.word	0x20000124
 80030d0:	20000128 	.word	0x20000128
 80030d4:	20000184 	.word	0x20000184
 80030d8:	2000018c 	.word	0x2000018c
 80030dc:	20000174 	.word	0x20000174
 80030e0:	20000098 	.word	0x20000098
 80030e4:	2000017c 	.word	0x2000017c

080030e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80030e8:	b480      	push	{r7}
 80030ea:	b087      	sub	sp, #28
 80030ec:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80030ee:	4b27      	ldr	r3, [pc, #156]	; (800318c <vTaskSwitchContext+0xa4>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d003      	beq.n	80030fe <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80030f6:	4b26      	ldr	r3, [pc, #152]	; (8003190 <vTaskSwitchContext+0xa8>)
 80030f8:	2201      	movs	r2, #1
 80030fa:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80030fc:	e03f      	b.n	800317e <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 80030fe:	4b24      	ldr	r3, [pc, #144]	; (8003190 <vTaskSwitchContext+0xa8>)
 8003100:	2200      	movs	r2, #0
 8003102:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003104:	4b23      	ldr	r3, [pc, #140]	; (8003194 <vTaskSwitchContext+0xac>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	fab3 f383 	clz	r3, r3
 8003110:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003112:	7afb      	ldrb	r3, [r7, #11]
 8003114:	f1c3 031f 	rsb	r3, r3, #31
 8003118:	617b      	str	r3, [r7, #20]
 800311a:	491f      	ldr	r1, [pc, #124]	; (8003198 <vTaskSwitchContext+0xb0>)
 800311c:	697a      	ldr	r2, [r7, #20]
 800311e:	4613      	mov	r3, r2
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	4413      	add	r3, r2
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	440b      	add	r3, r1
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d10a      	bne.n	8003144 <vTaskSwitchContext+0x5c>
        __asm volatile
 800312e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003132:	f383 8811 	msr	BASEPRI, r3
 8003136:	f3bf 8f6f 	isb	sy
 800313a:	f3bf 8f4f 	dsb	sy
 800313e:	607b      	str	r3, [r7, #4]
    }
 8003140:	bf00      	nop
 8003142:	e7fe      	b.n	8003142 <vTaskSwitchContext+0x5a>
 8003144:	697a      	ldr	r2, [r7, #20]
 8003146:	4613      	mov	r3, r2
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	4413      	add	r3, r2
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	4a12      	ldr	r2, [pc, #72]	; (8003198 <vTaskSwitchContext+0xb0>)
 8003150:	4413      	add	r3, r2
 8003152:	613b      	str	r3, [r7, #16]
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	685a      	ldr	r2, [r3, #4]
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	605a      	str	r2, [r3, #4]
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	685a      	ldr	r2, [r3, #4]
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	3308      	adds	r3, #8
 8003166:	429a      	cmp	r2, r3
 8003168:	d104      	bne.n	8003174 <vTaskSwitchContext+0x8c>
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	685a      	ldr	r2, [r3, #4]
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	605a      	str	r2, [r3, #4]
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	4a08      	ldr	r2, [pc, #32]	; (800319c <vTaskSwitchContext+0xb4>)
 800317c:	6013      	str	r3, [r2, #0]
}
 800317e:	bf00      	nop
 8003180:	371c      	adds	r7, #28
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	20000194 	.word	0x20000194
 8003190:	20000180 	.word	0x20000180
 8003194:	20000174 	.word	0x20000174
 8003198:	20000098 	.word	0x20000098
 800319c:	20000094 	.word	0x20000094

080031a0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d10a      	bne.n	80031c6 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80031b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031b4:	f383 8811 	msr	BASEPRI, r3
 80031b8:	f3bf 8f6f 	isb	sy
 80031bc:	f3bf 8f4f 	dsb	sy
 80031c0:	60fb      	str	r3, [r7, #12]
    }
 80031c2:	bf00      	nop
 80031c4:	e7fe      	b.n	80031c4 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80031c6:	4b07      	ldr	r3, [pc, #28]	; (80031e4 <vTaskPlaceOnEventList+0x44>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	3318      	adds	r3, #24
 80031cc:	4619      	mov	r1, r3
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f7fe ffab 	bl	800212a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80031d4:	2101      	movs	r1, #1
 80031d6:	6838      	ldr	r0, [r7, #0]
 80031d8:	f000 fa60 	bl	800369c <prvAddCurrentTaskToDelayedList>
}
 80031dc:	bf00      	nop
 80031de:	3710      	adds	r7, #16
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	20000094 	.word	0x20000094

080031e8 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b086      	sub	sp, #24
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	60b9      	str	r1, [r7, #8]
 80031f2:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d10a      	bne.n	8003210 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80031fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031fe:	f383 8811 	msr	BASEPRI, r3
 8003202:	f3bf 8f6f 	isb	sy
 8003206:	f3bf 8f4f 	dsb	sy
 800320a:	617b      	str	r3, [r7, #20]
    }
 800320c:	bf00      	nop
 800320e:	e7fe      	b.n	800320e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003210:	4b0a      	ldr	r3, [pc, #40]	; (800323c <vTaskPlaceOnEventListRestricted+0x54>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	3318      	adds	r3, #24
 8003216:	4619      	mov	r1, r3
 8003218:	68f8      	ldr	r0, [r7, #12]
 800321a:	f7fe ff62 	bl	80020e2 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d002      	beq.n	800322a <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8003224:	f04f 33ff 	mov.w	r3, #4294967295
 8003228:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800322a:	6879      	ldr	r1, [r7, #4]
 800322c:	68b8      	ldr	r0, [r7, #8]
 800322e:	f000 fa35 	bl	800369c <prvAddCurrentTaskToDelayedList>
    }
 8003232:	bf00      	nop
 8003234:	3718      	adds	r7, #24
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	20000094 	.word	0x20000094

08003240 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b086      	sub	sp, #24
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d10a      	bne.n	800326c <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8003256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800325a:	f383 8811 	msr	BASEPRI, r3
 800325e:	f3bf 8f6f 	isb	sy
 8003262:	f3bf 8f4f 	dsb	sy
 8003266:	60fb      	str	r3, [r7, #12]
    }
 8003268:	bf00      	nop
 800326a:	e7fe      	b.n	800326a <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	3318      	adds	r3, #24
 8003270:	4618      	mov	r0, r3
 8003272:	f7fe ff93 	bl	800219c <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003276:	4b1d      	ldr	r3, [pc, #116]	; (80032ec <xTaskRemoveFromEventList+0xac>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d11c      	bne.n	80032b8 <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	3304      	adds	r3, #4
 8003282:	4618      	mov	r0, r3
 8003284:	f7fe ff8a 	bl	800219c <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800328c:	2201      	movs	r2, #1
 800328e:	409a      	lsls	r2, r3
 8003290:	4b17      	ldr	r3, [pc, #92]	; (80032f0 <xTaskRemoveFromEventList+0xb0>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4313      	orrs	r3, r2
 8003296:	4a16      	ldr	r2, [pc, #88]	; (80032f0 <xTaskRemoveFromEventList+0xb0>)
 8003298:	6013      	str	r3, [r2, #0]
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800329e:	4613      	mov	r3, r2
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	4413      	add	r3, r2
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	4a13      	ldr	r2, [pc, #76]	; (80032f4 <xTaskRemoveFromEventList+0xb4>)
 80032a8:	441a      	add	r2, r3
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	3304      	adds	r3, #4
 80032ae:	4619      	mov	r1, r3
 80032b0:	4610      	mov	r0, r2
 80032b2:	f7fe ff16 	bl	80020e2 <vListInsertEnd>
 80032b6:	e005      	b.n	80032c4 <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	3318      	adds	r3, #24
 80032bc:	4619      	mov	r1, r3
 80032be:	480e      	ldr	r0, [pc, #56]	; (80032f8 <xTaskRemoveFromEventList+0xb8>)
 80032c0:	f7fe ff0f 	bl	80020e2 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032c8:	4b0c      	ldr	r3, [pc, #48]	; (80032fc <xTaskRemoveFromEventList+0xbc>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d905      	bls.n	80032de <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80032d2:	2301      	movs	r3, #1
 80032d4:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80032d6:	4b0a      	ldr	r3, [pc, #40]	; (8003300 <xTaskRemoveFromEventList+0xc0>)
 80032d8:	2201      	movs	r2, #1
 80032da:	601a      	str	r2, [r3, #0]
 80032dc:	e001      	b.n	80032e2 <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 80032de:	2300      	movs	r3, #0
 80032e0:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80032e2:	697b      	ldr	r3, [r7, #20]
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3718      	adds	r7, #24
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	20000194 	.word	0x20000194
 80032f0:	20000174 	.word	0x20000174
 80032f4:	20000098 	.word	0x20000098
 80032f8:	2000012c 	.word	0x2000012c
 80032fc:	20000094 	.word	0x20000094
 8003300:	20000180 	.word	0x20000180

08003304 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800330c:	4b06      	ldr	r3, [pc, #24]	; (8003328 <vTaskInternalSetTimeOutState+0x24>)
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003314:	4b05      	ldr	r3, [pc, #20]	; (800332c <vTaskInternalSetTimeOutState+0x28>)
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	605a      	str	r2, [r3, #4]
}
 800331c:	bf00      	nop
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr
 8003328:	20000184 	.word	0x20000184
 800332c:	20000170 	.word	0x20000170

08003330 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b088      	sub	sp, #32
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d10a      	bne.n	8003356 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003344:	f383 8811 	msr	BASEPRI, r3
 8003348:	f3bf 8f6f 	isb	sy
 800334c:	f3bf 8f4f 	dsb	sy
 8003350:	613b      	str	r3, [r7, #16]
    }
 8003352:	bf00      	nop
 8003354:	e7fe      	b.n	8003354 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d10a      	bne.n	8003372 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 800335c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003360:	f383 8811 	msr	BASEPRI, r3
 8003364:	f3bf 8f6f 	isb	sy
 8003368:	f3bf 8f4f 	dsb	sy
 800336c:	60fb      	str	r3, [r7, #12]
    }
 800336e:	bf00      	nop
 8003370:	e7fe      	b.n	8003370 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003372:	f000 fe39 	bl	8003fe8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003376:	4b1f      	ldr	r3, [pc, #124]	; (80033f4 <xTaskCheckForTimeOut+0xc4>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	69ba      	ldr	r2, [r7, #24]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800338e:	d102      	bne.n	8003396 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003390:	2300      	movs	r3, #0
 8003392:	61fb      	str	r3, [r7, #28]
 8003394:	e026      	b.n	80033e4 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	4b17      	ldr	r3, [pc, #92]	; (80033f8 <xTaskCheckForTimeOut+0xc8>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	429a      	cmp	r2, r3
 80033a0:	d00a      	beq.n	80033b8 <xTaskCheckForTimeOut+0x88>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	69ba      	ldr	r2, [r7, #24]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d305      	bcc.n	80033b8 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80033ac:	2301      	movs	r3, #1
 80033ae:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	2200      	movs	r2, #0
 80033b4:	601a      	str	r2, [r3, #0]
 80033b6:	e015      	b.n	80033e4 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	697a      	ldr	r2, [r7, #20]
 80033be:	429a      	cmp	r2, r3
 80033c0:	d20b      	bcs.n	80033da <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	1ad2      	subs	r2, r2, r3
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f7ff ff98 	bl	8003304 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80033d4:	2300      	movs	r3, #0
 80033d6:	61fb      	str	r3, [r7, #28]
 80033d8:	e004      	b.n	80033e4 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	2200      	movs	r2, #0
 80033de:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80033e0:	2301      	movs	r3, #1
 80033e2:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80033e4:	f000 fe30 	bl	8004048 <vPortExitCritical>

    return xReturn;
 80033e8:	69fb      	ldr	r3, [r7, #28]
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3720      	adds	r7, #32
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	20000170 	.word	0x20000170
 80033f8:	20000184 	.word	0x20000184

080033fc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80033fc:	b480      	push	{r7}
 80033fe:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003400:	4b03      	ldr	r3, [pc, #12]	; (8003410 <vTaskMissedYield+0x14>)
 8003402:	2201      	movs	r2, #1
 8003404:	601a      	str	r2, [r3, #0]
}
 8003406:	bf00      	nop
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr
 8003410:	20000180 	.word	0x20000180

08003414 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800341c:	f000 f84c 	bl	80034b8 <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 8003420:	4b04      	ldr	r3, [pc, #16]	; (8003434 <prvIdleTask+0x20>)
 8003422:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003426:	601a      	str	r2, [r3, #0]
 8003428:	f3bf 8f4f 	dsb	sy
 800342c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003430:	e7f4      	b.n	800341c <prvIdleTask+0x8>
 8003432:	bf00      	nop
 8003434:	e000ed04 	.word	0xe000ed04

08003438 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800343e:	2300      	movs	r3, #0
 8003440:	607b      	str	r3, [r7, #4]
 8003442:	e00c      	b.n	800345e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	4613      	mov	r3, r2
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	4413      	add	r3, r2
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	4a12      	ldr	r2, [pc, #72]	; (8003498 <prvInitialiseTaskLists+0x60>)
 8003450:	4413      	add	r3, r2
 8003452:	4618      	mov	r0, r3
 8003454:	f7fe fe18 	bl	8002088 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	3301      	adds	r3, #1
 800345c:	607b      	str	r3, [r7, #4]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2b04      	cmp	r3, #4
 8003462:	d9ef      	bls.n	8003444 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003464:	480d      	ldr	r0, [pc, #52]	; (800349c <prvInitialiseTaskLists+0x64>)
 8003466:	f7fe fe0f 	bl	8002088 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800346a:	480d      	ldr	r0, [pc, #52]	; (80034a0 <prvInitialiseTaskLists+0x68>)
 800346c:	f7fe fe0c 	bl	8002088 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003470:	480c      	ldr	r0, [pc, #48]	; (80034a4 <prvInitialiseTaskLists+0x6c>)
 8003472:	f7fe fe09 	bl	8002088 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003476:	480c      	ldr	r0, [pc, #48]	; (80034a8 <prvInitialiseTaskLists+0x70>)
 8003478:	f7fe fe06 	bl	8002088 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 800347c:	480b      	ldr	r0, [pc, #44]	; (80034ac <prvInitialiseTaskLists+0x74>)
 800347e:	f7fe fe03 	bl	8002088 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003482:	4b0b      	ldr	r3, [pc, #44]	; (80034b0 <prvInitialiseTaskLists+0x78>)
 8003484:	4a05      	ldr	r2, [pc, #20]	; (800349c <prvInitialiseTaskLists+0x64>)
 8003486:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003488:	4b0a      	ldr	r3, [pc, #40]	; (80034b4 <prvInitialiseTaskLists+0x7c>)
 800348a:	4a05      	ldr	r2, [pc, #20]	; (80034a0 <prvInitialiseTaskLists+0x68>)
 800348c:	601a      	str	r2, [r3, #0]
}
 800348e:	bf00      	nop
 8003490:	3708      	adds	r7, #8
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	20000098 	.word	0x20000098
 800349c:	200000fc 	.word	0x200000fc
 80034a0:	20000110 	.word	0x20000110
 80034a4:	2000012c 	.word	0x2000012c
 80034a8:	20000140 	.word	0x20000140
 80034ac:	20000158 	.word	0x20000158
 80034b0:	20000124 	.word	0x20000124
 80034b4:	20000128 	.word	0x20000128

080034b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80034be:	e019      	b.n	80034f4 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80034c0:	f000 fd92 	bl	8003fe8 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034c4:	4b10      	ldr	r3, [pc, #64]	; (8003508 <prvCheckTasksWaitingTermination+0x50>)
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	3304      	adds	r3, #4
 80034d0:	4618      	mov	r0, r3
 80034d2:	f7fe fe63 	bl	800219c <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80034d6:	4b0d      	ldr	r3, [pc, #52]	; (800350c <prvCheckTasksWaitingTermination+0x54>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	3b01      	subs	r3, #1
 80034dc:	4a0b      	ldr	r2, [pc, #44]	; (800350c <prvCheckTasksWaitingTermination+0x54>)
 80034de:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80034e0:	4b0b      	ldr	r3, [pc, #44]	; (8003510 <prvCheckTasksWaitingTermination+0x58>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	3b01      	subs	r3, #1
 80034e6:	4a0a      	ldr	r2, [pc, #40]	; (8003510 <prvCheckTasksWaitingTermination+0x58>)
 80034e8:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80034ea:	f000 fdad 	bl	8004048 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 f810 	bl	8003514 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80034f4:	4b06      	ldr	r3, [pc, #24]	; (8003510 <prvCheckTasksWaitingTermination+0x58>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d1e1      	bne.n	80034c0 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80034fc:	bf00      	nop
 80034fe:	bf00      	nop
 8003500:	3708      	adds	r7, #8
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	20000140 	.word	0x20000140
 800350c:	2000016c 	.word	0x2000016c
 8003510:	20000154 	.word	0x20000154

08003514 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003520:	4618      	mov	r0, r3
 8003522:	f000 ff63 	bl	80043ec <vPortFree>
                vPortFree( pxTCB );
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f000 ff60 	bl	80043ec <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800352c:	bf00      	nop
 800352e:	3708      	adds	r7, #8
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}

08003534 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003534:	b480      	push	{r7}
 8003536:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003538:	4b0a      	ldr	r3, [pc, #40]	; (8003564 <prvResetNextTaskUnblockTime+0x30>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d104      	bne.n	800354c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003542:	4b09      	ldr	r3, [pc, #36]	; (8003568 <prvResetNextTaskUnblockTime+0x34>)
 8003544:	f04f 32ff 	mov.w	r2, #4294967295
 8003548:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800354a:	e005      	b.n	8003558 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800354c:	4b05      	ldr	r3, [pc, #20]	; (8003564 <prvResetNextTaskUnblockTime+0x30>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a04      	ldr	r2, [pc, #16]	; (8003568 <prvResetNextTaskUnblockTime+0x34>)
 8003556:	6013      	str	r3, [r2, #0]
}
 8003558:	bf00      	nop
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop
 8003564:	20000124 	.word	0x20000124
 8003568:	2000018c 	.word	0x2000018c

0800356c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003572:	4b0b      	ldr	r3, [pc, #44]	; (80035a0 <xTaskGetSchedulerState+0x34>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d102      	bne.n	8003580 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800357a:	2301      	movs	r3, #1
 800357c:	607b      	str	r3, [r7, #4]
 800357e:	e008      	b.n	8003592 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003580:	4b08      	ldr	r3, [pc, #32]	; (80035a4 <xTaskGetSchedulerState+0x38>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d102      	bne.n	800358e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003588:	2302      	movs	r3, #2
 800358a:	607b      	str	r3, [r7, #4]
 800358c:	e001      	b.n	8003592 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800358e:	2300      	movs	r3, #0
 8003590:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003592:	687b      	ldr	r3, [r7, #4]
    }
 8003594:	4618      	mov	r0, r3
 8003596:	370c      	adds	r7, #12
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr
 80035a0:	20000178 	.word	0x20000178
 80035a4:	20000194 	.word	0x20000194

080035a8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b086      	sub	sp, #24
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80035b4:	2300      	movs	r3, #0
 80035b6:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d063      	beq.n	8003686 <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80035be:	4b34      	ldr	r3, [pc, #208]	; (8003690 <xTaskPriorityDisinherit+0xe8>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	693a      	ldr	r2, [r7, #16]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d00a      	beq.n	80035de <xTaskPriorityDisinherit+0x36>
        __asm volatile
 80035c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035cc:	f383 8811 	msr	BASEPRI, r3
 80035d0:	f3bf 8f6f 	isb	sy
 80035d4:	f3bf 8f4f 	dsb	sy
 80035d8:	60fb      	str	r3, [r7, #12]
    }
 80035da:	bf00      	nop
 80035dc:	e7fe      	b.n	80035dc <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d10a      	bne.n	80035fc <xTaskPriorityDisinherit+0x54>
        __asm volatile
 80035e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ea:	f383 8811 	msr	BASEPRI, r3
 80035ee:	f3bf 8f6f 	isb	sy
 80035f2:	f3bf 8f4f 	dsb	sy
 80035f6:	60bb      	str	r3, [r7, #8]
    }
 80035f8:	bf00      	nop
 80035fa:	e7fe      	b.n	80035fa <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003600:	1e5a      	subs	r2, r3, #1
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800360e:	429a      	cmp	r2, r3
 8003610:	d039      	beq.n	8003686 <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003616:	2b00      	cmp	r3, #0
 8003618:	d135      	bne.n	8003686 <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	3304      	adds	r3, #4
 800361e:	4618      	mov	r0, r3
 8003620:	f7fe fdbc 	bl	800219c <uxListRemove>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d10a      	bne.n	8003640 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362e:	2201      	movs	r2, #1
 8003630:	fa02 f303 	lsl.w	r3, r2, r3
 8003634:	43da      	mvns	r2, r3
 8003636:	4b17      	ldr	r3, [pc, #92]	; (8003694 <xTaskPriorityDisinherit+0xec>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4013      	ands	r3, r2
 800363c:	4a15      	ldr	r2, [pc, #84]	; (8003694 <xTaskPriorityDisinherit+0xec>)
 800363e:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800364c:	f1c3 0205 	rsb	r2, r3, #5
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003658:	2201      	movs	r2, #1
 800365a:	409a      	lsls	r2, r3
 800365c:	4b0d      	ldr	r3, [pc, #52]	; (8003694 <xTaskPriorityDisinherit+0xec>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4313      	orrs	r3, r2
 8003662:	4a0c      	ldr	r2, [pc, #48]	; (8003694 <xTaskPriorityDisinherit+0xec>)
 8003664:	6013      	str	r3, [r2, #0]
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800366a:	4613      	mov	r3, r2
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	4413      	add	r3, r2
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	4a09      	ldr	r2, [pc, #36]	; (8003698 <xTaskPriorityDisinherit+0xf0>)
 8003674:	441a      	add	r2, r3
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	3304      	adds	r3, #4
 800367a:	4619      	mov	r1, r3
 800367c:	4610      	mov	r0, r2
 800367e:	f7fe fd30 	bl	80020e2 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003682:	2301      	movs	r3, #1
 8003684:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003686:	697b      	ldr	r3, [r7, #20]
    }
 8003688:	4618      	mov	r0, r3
 800368a:	3718      	adds	r7, #24
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}
 8003690:	20000094 	.word	0x20000094
 8003694:	20000174 	.word	0x20000174
 8003698:	20000098 	.word	0x20000098

0800369c <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80036a6:	4b29      	ldr	r3, [pc, #164]	; (800374c <prvAddCurrentTaskToDelayedList+0xb0>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80036ac:	4b28      	ldr	r3, [pc, #160]	; (8003750 <prvAddCurrentTaskToDelayedList+0xb4>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	3304      	adds	r3, #4
 80036b2:	4618      	mov	r0, r3
 80036b4:	f7fe fd72 	bl	800219c <uxListRemove>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d10b      	bne.n	80036d6 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80036be:	4b24      	ldr	r3, [pc, #144]	; (8003750 <prvAddCurrentTaskToDelayedList+0xb4>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c4:	2201      	movs	r2, #1
 80036c6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ca:	43da      	mvns	r2, r3
 80036cc:	4b21      	ldr	r3, [pc, #132]	; (8003754 <prvAddCurrentTaskToDelayedList+0xb8>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4013      	ands	r3, r2
 80036d2:	4a20      	ldr	r2, [pc, #128]	; (8003754 <prvAddCurrentTaskToDelayedList+0xb8>)
 80036d4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036dc:	d10a      	bne.n	80036f4 <prvAddCurrentTaskToDelayedList+0x58>
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d007      	beq.n	80036f4 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80036e4:	4b1a      	ldr	r3, [pc, #104]	; (8003750 <prvAddCurrentTaskToDelayedList+0xb4>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	3304      	adds	r3, #4
 80036ea:	4619      	mov	r1, r3
 80036ec:	481a      	ldr	r0, [pc, #104]	; (8003758 <prvAddCurrentTaskToDelayedList+0xbc>)
 80036ee:	f7fe fcf8 	bl	80020e2 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80036f2:	e026      	b.n	8003742 <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80036f4:	68fa      	ldr	r2, [r7, #12]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4413      	add	r3, r2
 80036fa:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80036fc:	4b14      	ldr	r3, [pc, #80]	; (8003750 <prvAddCurrentTaskToDelayedList+0xb4>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	68ba      	ldr	r2, [r7, #8]
 8003702:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003704:	68ba      	ldr	r2, [r7, #8]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	429a      	cmp	r2, r3
 800370a:	d209      	bcs.n	8003720 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800370c:	4b13      	ldr	r3, [pc, #76]	; (800375c <prvAddCurrentTaskToDelayedList+0xc0>)
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	4b0f      	ldr	r3, [pc, #60]	; (8003750 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	3304      	adds	r3, #4
 8003716:	4619      	mov	r1, r3
 8003718:	4610      	mov	r0, r2
 800371a:	f7fe fd06 	bl	800212a <vListInsert>
}
 800371e:	e010      	b.n	8003742 <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003720:	4b0f      	ldr	r3, [pc, #60]	; (8003760 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	4b0a      	ldr	r3, [pc, #40]	; (8003750 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	3304      	adds	r3, #4
 800372a:	4619      	mov	r1, r3
 800372c:	4610      	mov	r0, r2
 800372e:	f7fe fcfc 	bl	800212a <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003732:	4b0c      	ldr	r3, [pc, #48]	; (8003764 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	68ba      	ldr	r2, [r7, #8]
 8003738:	429a      	cmp	r2, r3
 800373a:	d202      	bcs.n	8003742 <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 800373c:	4a09      	ldr	r2, [pc, #36]	; (8003764 <prvAddCurrentTaskToDelayedList+0xc8>)
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	6013      	str	r3, [r2, #0]
}
 8003742:	bf00      	nop
 8003744:	3710      	adds	r7, #16
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	20000170 	.word	0x20000170
 8003750:	20000094 	.word	0x20000094
 8003754:	20000174 	.word	0x20000174
 8003758:	20000158 	.word	0x20000158
 800375c:	20000128 	.word	0x20000128
 8003760:	20000124 	.word	0x20000124
 8003764:	2000018c 	.word	0x2000018c

08003768 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800376e:	2300      	movs	r3, #0
 8003770:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003772:	f000 fad5 	bl	8003d20 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003776:	4b11      	ldr	r3, [pc, #68]	; (80037bc <xTimerCreateTimerTask+0x54>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d00b      	beq.n	8003796 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800377e:	4b10      	ldr	r3, [pc, #64]	; (80037c0 <xTimerCreateTimerTask+0x58>)
 8003780:	9301      	str	r3, [sp, #4]
 8003782:	2302      	movs	r3, #2
 8003784:	9300      	str	r3, [sp, #0]
 8003786:	2300      	movs	r3, #0
 8003788:	f44f 7282 	mov.w	r2, #260	; 0x104
 800378c:	490d      	ldr	r1, [pc, #52]	; (80037c4 <xTimerCreateTimerTask+0x5c>)
 800378e:	480e      	ldr	r0, [pc, #56]	; (80037c8 <xTimerCreateTimerTask+0x60>)
 8003790:	f7ff f9de 	bl	8002b50 <xTaskCreate>
 8003794:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d10a      	bne.n	80037b2 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 800379c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037a0:	f383 8811 	msr	BASEPRI, r3
 80037a4:	f3bf 8f6f 	isb	sy
 80037a8:	f3bf 8f4f 	dsb	sy
 80037ac:	603b      	str	r3, [r7, #0]
    }
 80037ae:	bf00      	nop
 80037b0:	e7fe      	b.n	80037b0 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80037b2:	687b      	ldr	r3, [r7, #4]
    }
 80037b4:	4618      	mov	r0, r3
 80037b6:	3708      	adds	r7, #8
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	200001c8 	.word	0x200001c8
 80037c0:	200001cc 	.word	0x200001cc
 80037c4:	080050a4 	.word	0x080050a4
 80037c8:	08003901 	.word	0x08003901

080037cc <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b08a      	sub	sp, #40	; 0x28
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	60b9      	str	r1, [r7, #8]
 80037d6:	607a      	str	r2, [r7, #4]
 80037d8:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80037da:	2300      	movs	r3, #0
 80037dc:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d10a      	bne.n	80037fa <xTimerGenericCommand+0x2e>
        __asm volatile
 80037e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e8:	f383 8811 	msr	BASEPRI, r3
 80037ec:	f3bf 8f6f 	isb	sy
 80037f0:	f3bf 8f4f 	dsb	sy
 80037f4:	623b      	str	r3, [r7, #32]
    }
 80037f6:	bf00      	nop
 80037f8:	e7fe      	b.n	80037f8 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 80037fa:	4b1a      	ldr	r3, [pc, #104]	; (8003864 <xTimerGenericCommand+0x98>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d02a      	beq.n	8003858 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	2b05      	cmp	r3, #5
 8003812:	dc18      	bgt.n	8003846 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003814:	f7ff feaa 	bl	800356c <xTaskGetSchedulerState>
 8003818:	4603      	mov	r3, r0
 800381a:	2b02      	cmp	r3, #2
 800381c:	d109      	bne.n	8003832 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800381e:	4b11      	ldr	r3, [pc, #68]	; (8003864 <xTimerGenericCommand+0x98>)
 8003820:	6818      	ldr	r0, [r3, #0]
 8003822:	f107 0114 	add.w	r1, r7, #20
 8003826:	2300      	movs	r3, #0
 8003828:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800382a:	f7fe fdbf 	bl	80023ac <xQueueGenericSend>
 800382e:	6278      	str	r0, [r7, #36]	; 0x24
 8003830:	e012      	b.n	8003858 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003832:	4b0c      	ldr	r3, [pc, #48]	; (8003864 <xTimerGenericCommand+0x98>)
 8003834:	6818      	ldr	r0, [r3, #0]
 8003836:	f107 0114 	add.w	r1, r7, #20
 800383a:	2300      	movs	r3, #0
 800383c:	2200      	movs	r2, #0
 800383e:	f7fe fdb5 	bl	80023ac <xQueueGenericSend>
 8003842:	6278      	str	r0, [r7, #36]	; 0x24
 8003844:	e008      	b.n	8003858 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003846:	4b07      	ldr	r3, [pc, #28]	; (8003864 <xTimerGenericCommand+0x98>)
 8003848:	6818      	ldr	r0, [r3, #0]
 800384a:	f107 0114 	add.w	r1, r7, #20
 800384e:	2300      	movs	r3, #0
 8003850:	683a      	ldr	r2, [r7, #0]
 8003852:	f7fe fe91 	bl	8002578 <xQueueGenericSendFromISR>
 8003856:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800385a:	4618      	mov	r0, r3
 800385c:	3728      	adds	r7, #40	; 0x28
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	200001c8 	.word	0x200001c8

08003868 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003868:	b580      	push	{r7, lr}
 800386a:	b088      	sub	sp, #32
 800386c:	af02      	add	r7, sp, #8
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003872:	4b22      	ldr	r3, [pc, #136]	; (80038fc <prvProcessExpiredTimer+0x94>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	3304      	adds	r3, #4
 8003880:	4618      	mov	r0, r3
 8003882:	f7fe fc8b 	bl	800219c <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800388c:	f003 0304 	and.w	r3, r3, #4
 8003890:	2b00      	cmp	r3, #0
 8003892:	d022      	beq.n	80038da <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	699a      	ldr	r2, [r3, #24]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	18d1      	adds	r1, r2, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	683a      	ldr	r2, [r7, #0]
 80038a0:	6978      	ldr	r0, [r7, #20]
 80038a2:	f000 f8d1 	bl	8003a48 <prvInsertTimerInActiveList>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d01f      	beq.n	80038ec <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80038ac:	2300      	movs	r3, #0
 80038ae:	9300      	str	r3, [sp, #0]
 80038b0:	2300      	movs	r3, #0
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	2100      	movs	r1, #0
 80038b6:	6978      	ldr	r0, [r7, #20]
 80038b8:	f7ff ff88 	bl	80037cc <xTimerGenericCommand>
 80038bc:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d113      	bne.n	80038ec <prvProcessExpiredTimer+0x84>
        __asm volatile
 80038c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038c8:	f383 8811 	msr	BASEPRI, r3
 80038cc:	f3bf 8f6f 	isb	sy
 80038d0:	f3bf 8f4f 	dsb	sy
 80038d4:	60fb      	str	r3, [r7, #12]
    }
 80038d6:	bf00      	nop
 80038d8:	e7fe      	b.n	80038d8 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80038e0:	f023 0301 	bic.w	r3, r3, #1
 80038e4:	b2da      	uxtb	r2, r3
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	6a1b      	ldr	r3, [r3, #32]
 80038f0:	6978      	ldr	r0, [r7, #20]
 80038f2:	4798      	blx	r3
    }
 80038f4:	bf00      	nop
 80038f6:	3718      	adds	r7, #24
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	200001c0 	.word	0x200001c0

08003900 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003908:	f107 0308 	add.w	r3, r7, #8
 800390c:	4618      	mov	r0, r3
 800390e:	f000 f857 	bl	80039c0 <prvGetNextExpireTime>
 8003912:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	4619      	mov	r1, r3
 8003918:	68f8      	ldr	r0, [r7, #12]
 800391a:	f000 f803 	bl	8003924 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800391e:	f000 f8d5 	bl	8003acc <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003922:	e7f1      	b.n	8003908 <prvTimerTask+0x8>

08003924 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003924:	b580      	push	{r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800392e:	f7ff fa99 	bl	8002e64 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003932:	f107 0308 	add.w	r3, r7, #8
 8003936:	4618      	mov	r0, r3
 8003938:	f000 f866 	bl	8003a08 <prvSampleTimeNow>
 800393c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d130      	bne.n	80039a6 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d10a      	bne.n	8003960 <prvProcessTimerOrBlockTask+0x3c>
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	429a      	cmp	r2, r3
 8003950:	d806      	bhi.n	8003960 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003952:	f7ff fa95 	bl	8002e80 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003956:	68f9      	ldr	r1, [r7, #12]
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f7ff ff85 	bl	8003868 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800395e:	e024      	b.n	80039aa <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d008      	beq.n	8003978 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003966:	4b13      	ldr	r3, [pc, #76]	; (80039b4 <prvProcessTimerOrBlockTask+0x90>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d101      	bne.n	8003974 <prvProcessTimerOrBlockTask+0x50>
 8003970:	2301      	movs	r3, #1
 8003972:	e000      	b.n	8003976 <prvProcessTimerOrBlockTask+0x52>
 8003974:	2300      	movs	r3, #0
 8003976:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003978:	4b0f      	ldr	r3, [pc, #60]	; (80039b8 <prvProcessTimerOrBlockTask+0x94>)
 800397a:	6818      	ldr	r0, [r3, #0]
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	683a      	ldr	r2, [r7, #0]
 8003984:	4619      	mov	r1, r3
 8003986:	f7ff f8af 	bl	8002ae8 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800398a:	f7ff fa79 	bl	8002e80 <xTaskResumeAll>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d10a      	bne.n	80039aa <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003994:	4b09      	ldr	r3, [pc, #36]	; (80039bc <prvProcessTimerOrBlockTask+0x98>)
 8003996:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800399a:	601a      	str	r2, [r3, #0]
 800399c:	f3bf 8f4f 	dsb	sy
 80039a0:	f3bf 8f6f 	isb	sy
    }
 80039a4:	e001      	b.n	80039aa <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80039a6:	f7ff fa6b 	bl	8002e80 <xTaskResumeAll>
    }
 80039aa:	bf00      	nop
 80039ac:	3710      	adds	r7, #16
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	200001c4 	.word	0x200001c4
 80039b8:	200001c8 	.word	0x200001c8
 80039bc:	e000ed04 	.word	0xe000ed04

080039c0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80039c0:	b480      	push	{r7}
 80039c2:	b085      	sub	sp, #20
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80039c8:	4b0e      	ldr	r3, [pc, #56]	; (8003a04 <prvGetNextExpireTime+0x44>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d101      	bne.n	80039d6 <prvGetNextExpireTime+0x16>
 80039d2:	2201      	movs	r2, #1
 80039d4:	e000      	b.n	80039d8 <prvGetNextExpireTime+0x18>
 80039d6:	2200      	movs	r2, #0
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d105      	bne.n	80039f0 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80039e4:	4b07      	ldr	r3, [pc, #28]	; (8003a04 <prvGetNextExpireTime+0x44>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	60fb      	str	r3, [r7, #12]
 80039ee:	e001      	b.n	80039f4 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80039f0:	2300      	movs	r3, #0
 80039f2:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80039f4:	68fb      	ldr	r3, [r7, #12]
    }
 80039f6:	4618      	mov	r0, r3
 80039f8:	3714      	adds	r7, #20
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	200001c0 	.word	0x200001c0

08003a08 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003a10:	f7ff fac4 	bl	8002f9c <xTaskGetTickCount>
 8003a14:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003a16:	4b0b      	ldr	r3, [pc, #44]	; (8003a44 <prvSampleTimeNow+0x3c>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68fa      	ldr	r2, [r7, #12]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d205      	bcs.n	8003a2c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003a20:	f000 f91a 	bl	8003c58 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	601a      	str	r2, [r3, #0]
 8003a2a:	e002      	b.n	8003a32 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003a32:	4a04      	ldr	r2, [pc, #16]	; (8003a44 <prvSampleTimeNow+0x3c>)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003a38:	68fb      	ldr	r3, [r7, #12]
    }
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3710      	adds	r7, #16
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	200001d0 	.word	0x200001d0

08003a48 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b086      	sub	sp, #24
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	60b9      	str	r1, [r7, #8]
 8003a52:	607a      	str	r2, [r7, #4]
 8003a54:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003a56:	2300      	movs	r3, #0
 8003a58:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	68ba      	ldr	r2, [r7, #8]
 8003a5e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	68fa      	ldr	r2, [r7, #12]
 8003a64:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003a66:	68ba      	ldr	r2, [r7, #8]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d812      	bhi.n	8003a94 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	1ad2      	subs	r2, r2, r3
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	699b      	ldr	r3, [r3, #24]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d302      	bcc.n	8003a82 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	617b      	str	r3, [r7, #20]
 8003a80:	e01b      	b.n	8003aba <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003a82:	4b10      	ldr	r3, [pc, #64]	; (8003ac4 <prvInsertTimerInActiveList+0x7c>)
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	3304      	adds	r3, #4
 8003a8a:	4619      	mov	r1, r3
 8003a8c:	4610      	mov	r0, r2
 8003a8e:	f7fe fb4c 	bl	800212a <vListInsert>
 8003a92:	e012      	b.n	8003aba <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d206      	bcs.n	8003aaa <prvInsertTimerInActiveList+0x62>
 8003a9c:	68ba      	ldr	r2, [r7, #8]
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d302      	bcc.n	8003aaa <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	617b      	str	r3, [r7, #20]
 8003aa8:	e007      	b.n	8003aba <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003aaa:	4b07      	ldr	r3, [pc, #28]	; (8003ac8 <prvInsertTimerInActiveList+0x80>)
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	3304      	adds	r3, #4
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	4610      	mov	r0, r2
 8003ab6:	f7fe fb38 	bl	800212a <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003aba:	697b      	ldr	r3, [r7, #20]
    }
 8003abc:	4618      	mov	r0, r3
 8003abe:	3718      	adds	r7, #24
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	200001c4 	.word	0x200001c4
 8003ac8:	200001c0 	.word	0x200001c0

08003acc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b08c      	sub	sp, #48	; 0x30
 8003ad0:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003ad2:	e0ae      	b.n	8003c32 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	f2c0 80aa 	blt.w	8003c30 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae2:	695b      	ldr	r3, [r3, #20]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d004      	beq.n	8003af2 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aea:	3304      	adds	r3, #4
 8003aec:	4618      	mov	r0, r3
 8003aee:	f7fe fb55 	bl	800219c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003af2:	1d3b      	adds	r3, r7, #4
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7ff ff87 	bl	8003a08 <prvSampleTimeNow>
 8003afa:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	2b09      	cmp	r3, #9
 8003b00:	f200 8097 	bhi.w	8003c32 <prvProcessReceivedCommands+0x166>
 8003b04:	a201      	add	r2, pc, #4	; (adr r2, 8003b0c <prvProcessReceivedCommands+0x40>)
 8003b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b0a:	bf00      	nop
 8003b0c:	08003b35 	.word	0x08003b35
 8003b10:	08003b35 	.word	0x08003b35
 8003b14:	08003b35 	.word	0x08003b35
 8003b18:	08003ba9 	.word	0x08003ba9
 8003b1c:	08003bbd 	.word	0x08003bbd
 8003b20:	08003c07 	.word	0x08003c07
 8003b24:	08003b35 	.word	0x08003b35
 8003b28:	08003b35 	.word	0x08003b35
 8003b2c:	08003ba9 	.word	0x08003ba9
 8003b30:	08003bbd 	.word	0x08003bbd
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b3a:	f043 0301 	orr.w	r3, r3, #1
 8003b3e:	b2da      	uxtb	r2, r3
 8003b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003b46:	68fa      	ldr	r2, [r7, #12]
 8003b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4a:	699b      	ldr	r3, [r3, #24]
 8003b4c:	18d1      	adds	r1, r2, r3
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6a3a      	ldr	r2, [r7, #32]
 8003b52:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b54:	f7ff ff78 	bl	8003a48 <prvInsertTimerInActiveList>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d069      	beq.n	8003c32 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b60:	6a1b      	ldr	r3, [r3, #32]
 8003b62:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b64:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b6c:	f003 0304 	and.w	r3, r3, #4
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d05e      	beq.n	8003c32 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003b74:	68fa      	ldr	r2, [r7, #12]
 8003b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b78:	699b      	ldr	r3, [r3, #24]
 8003b7a:	441a      	add	r2, r3
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	9300      	str	r3, [sp, #0]
 8003b80:	2300      	movs	r3, #0
 8003b82:	2100      	movs	r1, #0
 8003b84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b86:	f7ff fe21 	bl	80037cc <xTimerGenericCommand>
 8003b8a:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d14f      	bne.n	8003c32 <prvProcessReceivedCommands+0x166>
        __asm volatile
 8003b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b96:	f383 8811 	msr	BASEPRI, r3
 8003b9a:	f3bf 8f6f 	isb	sy
 8003b9e:	f3bf 8f4f 	dsb	sy
 8003ba2:	61bb      	str	r3, [r7, #24]
    }
 8003ba4:	bf00      	nop
 8003ba6:	e7fe      	b.n	8003ba6 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003baa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003bae:	f023 0301 	bic.w	r3, r3, #1
 8003bb2:	b2da      	uxtb	r2, r3
 8003bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8003bba:	e03a      	b.n	8003c32 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bbe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003bc2:	f043 0301 	orr.w	r3, r3, #1
 8003bc6:	b2da      	uxtb	r2, r3
 8003bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003bce:	68fa      	ldr	r2, [r7, #12]
 8003bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd2:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd6:	699b      	ldr	r3, [r3, #24]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d10a      	bne.n	8003bf2 <prvProcessReceivedCommands+0x126>
        __asm volatile
 8003bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be0:	f383 8811 	msr	BASEPRI, r3
 8003be4:	f3bf 8f6f 	isb	sy
 8003be8:	f3bf 8f4f 	dsb	sy
 8003bec:	617b      	str	r3, [r7, #20]
    }
 8003bee:	bf00      	nop
 8003bf0:	e7fe      	b.n	8003bf0 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf4:	699a      	ldr	r2, [r3, #24]
 8003bf6:	6a3b      	ldr	r3, [r7, #32]
 8003bf8:	18d1      	adds	r1, r2, r3
 8003bfa:	6a3b      	ldr	r3, [r7, #32]
 8003bfc:	6a3a      	ldr	r2, [r7, #32]
 8003bfe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003c00:	f7ff ff22 	bl	8003a48 <prvInsertTimerInActiveList>
                        break;
 8003c04:	e015      	b.n	8003c32 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c0c:	f003 0302 	and.w	r3, r3, #2
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d103      	bne.n	8003c1c <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8003c14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003c16:	f000 fbe9 	bl	80043ec <vPortFree>
 8003c1a:	e00a      	b.n	8003c32 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c22:	f023 0301 	bic.w	r3, r3, #1
 8003c26:	b2da      	uxtb	r2, r3
 8003c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003c2e:	e000      	b.n	8003c32 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8003c30:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003c32:	4b08      	ldr	r3, [pc, #32]	; (8003c54 <prvProcessReceivedCommands+0x188>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f107 0108 	add.w	r1, r7, #8
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f7fe fd45 	bl	80026cc <xQueueReceive>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	f47f af45 	bne.w	8003ad4 <prvProcessReceivedCommands+0x8>
        }
    }
 8003c4a:	bf00      	nop
 8003c4c:	bf00      	nop
 8003c4e:	3728      	adds	r7, #40	; 0x28
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	200001c8 	.word	0x200001c8

08003c58 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b088      	sub	sp, #32
 8003c5c:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003c5e:	e048      	b.n	8003cf2 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003c60:	4b2d      	ldr	r3, [pc, #180]	; (8003d18 <prvSwitchTimerLists+0xc0>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c6a:	4b2b      	ldr	r3, [pc, #172]	; (8003d18 <prvSwitchTimerLists+0xc0>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	3304      	adds	r3, #4
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f7fe fa8f 	bl	800219c <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6a1b      	ldr	r3, [r3, #32]
 8003c82:	68f8      	ldr	r0, [r7, #12]
 8003c84:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c8c:	f003 0304 	and.w	r3, r3, #4
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d02e      	beq.n	8003cf2 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	699b      	ldr	r3, [r3, #24]
 8003c98:	693a      	ldr	r2, [r7, #16]
 8003c9a:	4413      	add	r3, r2
 8003c9c:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8003c9e:	68ba      	ldr	r2, [r7, #8]
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d90e      	bls.n	8003cc4 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	68ba      	ldr	r2, [r7, #8]
 8003caa:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	68fa      	ldr	r2, [r7, #12]
 8003cb0:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003cb2:	4b19      	ldr	r3, [pc, #100]	; (8003d18 <prvSwitchTimerLists+0xc0>)
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	3304      	adds	r3, #4
 8003cba:	4619      	mov	r1, r3
 8003cbc:	4610      	mov	r0, r2
 8003cbe:	f7fe fa34 	bl	800212a <vListInsert>
 8003cc2:	e016      	b.n	8003cf2 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	9300      	str	r3, [sp, #0]
 8003cc8:	2300      	movs	r3, #0
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	2100      	movs	r1, #0
 8003cce:	68f8      	ldr	r0, [r7, #12]
 8003cd0:	f7ff fd7c 	bl	80037cc <xTimerGenericCommand>
 8003cd4:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d10a      	bne.n	8003cf2 <prvSwitchTimerLists+0x9a>
        __asm volatile
 8003cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ce0:	f383 8811 	msr	BASEPRI, r3
 8003ce4:	f3bf 8f6f 	isb	sy
 8003ce8:	f3bf 8f4f 	dsb	sy
 8003cec:	603b      	str	r3, [r7, #0]
    }
 8003cee:	bf00      	nop
 8003cf0:	e7fe      	b.n	8003cf0 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003cf2:	4b09      	ldr	r3, [pc, #36]	; (8003d18 <prvSwitchTimerLists+0xc0>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d1b1      	bne.n	8003c60 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8003cfc:	4b06      	ldr	r3, [pc, #24]	; (8003d18 <prvSwitchTimerLists+0xc0>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8003d02:	4b06      	ldr	r3, [pc, #24]	; (8003d1c <prvSwitchTimerLists+0xc4>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a04      	ldr	r2, [pc, #16]	; (8003d18 <prvSwitchTimerLists+0xc0>)
 8003d08:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003d0a:	4a04      	ldr	r2, [pc, #16]	; (8003d1c <prvSwitchTimerLists+0xc4>)
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	6013      	str	r3, [r2, #0]
    }
 8003d10:	bf00      	nop
 8003d12:	3718      	adds	r7, #24
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	200001c0 	.word	0x200001c0
 8003d1c:	200001c4 	.word	0x200001c4

08003d20 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003d20:	b580      	push	{r7, lr}
 8003d22:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003d24:	f000 f960 	bl	8003fe8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003d28:	4b12      	ldr	r3, [pc, #72]	; (8003d74 <prvCheckForValidListAndQueue+0x54>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d11d      	bne.n	8003d6c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003d30:	4811      	ldr	r0, [pc, #68]	; (8003d78 <prvCheckForValidListAndQueue+0x58>)
 8003d32:	f7fe f9a9 	bl	8002088 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003d36:	4811      	ldr	r0, [pc, #68]	; (8003d7c <prvCheckForValidListAndQueue+0x5c>)
 8003d38:	f7fe f9a6 	bl	8002088 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003d3c:	4b10      	ldr	r3, [pc, #64]	; (8003d80 <prvCheckForValidListAndQueue+0x60>)
 8003d3e:	4a0e      	ldr	r2, [pc, #56]	; (8003d78 <prvCheckForValidListAndQueue+0x58>)
 8003d40:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003d42:	4b10      	ldr	r3, [pc, #64]	; (8003d84 <prvCheckForValidListAndQueue+0x64>)
 8003d44:	4a0d      	ldr	r2, [pc, #52]	; (8003d7c <prvCheckForValidListAndQueue+0x5c>)
 8003d46:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003d48:	2200      	movs	r2, #0
 8003d4a:	210c      	movs	r1, #12
 8003d4c:	200a      	movs	r0, #10
 8003d4e:	f7fe faaa 	bl	80022a6 <xQueueGenericCreate>
 8003d52:	4603      	mov	r3, r0
 8003d54:	4a07      	ldr	r2, [pc, #28]	; (8003d74 <prvCheckForValidListAndQueue+0x54>)
 8003d56:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8003d58:	4b06      	ldr	r3, [pc, #24]	; (8003d74 <prvCheckForValidListAndQueue+0x54>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d005      	beq.n	8003d6c <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003d60:	4b04      	ldr	r3, [pc, #16]	; (8003d74 <prvCheckForValidListAndQueue+0x54>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4908      	ldr	r1, [pc, #32]	; (8003d88 <prvCheckForValidListAndQueue+0x68>)
 8003d66:	4618      	mov	r0, r3
 8003d68:	f7fe fe94 	bl	8002a94 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003d6c:	f000 f96c 	bl	8004048 <vPortExitCritical>
    }
 8003d70:	bf00      	nop
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	200001c8 	.word	0x200001c8
 8003d78:	20000198 	.word	0x20000198
 8003d7c:	200001ac 	.word	0x200001ac
 8003d80:	200001c0 	.word	0x200001c0
 8003d84:	200001c4 	.word	0x200001c4
 8003d88:	080050ac 	.word	0x080050ac

08003d8c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b085      	sub	sp, #20
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	60f8      	str	r0, [r7, #12]
 8003d94:	60b9      	str	r1, [r7, #8]
 8003d96:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	3b04      	subs	r3, #4
 8003d9c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003da4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	3b04      	subs	r3, #4
 8003daa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	f023 0201 	bic.w	r2, r3, #1
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	3b04      	subs	r3, #4
 8003dba:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003dbc:	4a0c      	ldr	r2, [pc, #48]	; (8003df0 <pxPortInitialiseStack+0x64>)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	3b14      	subs	r3, #20
 8003dc6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	3b04      	subs	r3, #4
 8003dd2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f06f 0202 	mvn.w	r2, #2
 8003dda:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	3b20      	subs	r3, #32
 8003de0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003de2:	68fb      	ldr	r3, [r7, #12]
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3714      	adds	r7, #20
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr
 8003df0:	08003df5 	.word	0x08003df5

08003df4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003df4:	b480      	push	{r7}
 8003df6:	b085      	sub	sp, #20
 8003df8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003dfe:	4b12      	ldr	r3, [pc, #72]	; (8003e48 <prvTaskExitError+0x54>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e06:	d00a      	beq.n	8003e1e <prvTaskExitError+0x2a>
        __asm volatile
 8003e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e0c:	f383 8811 	msr	BASEPRI, r3
 8003e10:	f3bf 8f6f 	isb	sy
 8003e14:	f3bf 8f4f 	dsb	sy
 8003e18:	60fb      	str	r3, [r7, #12]
    }
 8003e1a:	bf00      	nop
 8003e1c:	e7fe      	b.n	8003e1c <prvTaskExitError+0x28>
        __asm volatile
 8003e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e22:	f383 8811 	msr	BASEPRI, r3
 8003e26:	f3bf 8f6f 	isb	sy
 8003e2a:	f3bf 8f4f 	dsb	sy
 8003e2e:	60bb      	str	r3, [r7, #8]
    }
 8003e30:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003e32:	bf00      	nop
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d0fc      	beq.n	8003e34 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003e3a:	bf00      	nop
 8003e3c:	bf00      	nop
 8003e3e:	3714      	adds	r7, #20
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr
 8003e48:	20000010 	.word	0x20000010
 8003e4c:	00000000 	.word	0x00000000

08003e50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003e50:	4b07      	ldr	r3, [pc, #28]	; (8003e70 <pxCurrentTCBConst2>)
 8003e52:	6819      	ldr	r1, [r3, #0]
 8003e54:	6808      	ldr	r0, [r1, #0]
 8003e56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e5a:	f380 8809 	msr	PSP, r0
 8003e5e:	f3bf 8f6f 	isb	sy
 8003e62:	f04f 0000 	mov.w	r0, #0
 8003e66:	f380 8811 	msr	BASEPRI, r0
 8003e6a:	4770      	bx	lr
 8003e6c:	f3af 8000 	nop.w

08003e70 <pxCurrentTCBConst2>:
 8003e70:	20000094 	.word	0x20000094
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003e74:	bf00      	nop
 8003e76:	bf00      	nop

08003e78 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003e78:	4808      	ldr	r0, [pc, #32]	; (8003e9c <prvPortStartFirstTask+0x24>)
 8003e7a:	6800      	ldr	r0, [r0, #0]
 8003e7c:	6800      	ldr	r0, [r0, #0]
 8003e7e:	f380 8808 	msr	MSP, r0
 8003e82:	f04f 0000 	mov.w	r0, #0
 8003e86:	f380 8814 	msr	CONTROL, r0
 8003e8a:	b662      	cpsie	i
 8003e8c:	b661      	cpsie	f
 8003e8e:	f3bf 8f4f 	dsb	sy
 8003e92:	f3bf 8f6f 	isb	sy
 8003e96:	df00      	svc	0
 8003e98:	bf00      	nop
 8003e9a:	0000      	.short	0x0000
 8003e9c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003ea0:	bf00      	nop
 8003ea2:	bf00      	nop

08003ea4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b086      	sub	sp, #24
 8003ea8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003eaa:	4b46      	ldr	r3, [pc, #280]	; (8003fc4 <xPortStartScheduler+0x120>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a46      	ldr	r2, [pc, #280]	; (8003fc8 <xPortStartScheduler+0x124>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d10a      	bne.n	8003eca <xPortStartScheduler+0x26>
        __asm volatile
 8003eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb8:	f383 8811 	msr	BASEPRI, r3
 8003ebc:	f3bf 8f6f 	isb	sy
 8003ec0:	f3bf 8f4f 	dsb	sy
 8003ec4:	613b      	str	r3, [r7, #16]
    }
 8003ec6:	bf00      	nop
 8003ec8:	e7fe      	b.n	8003ec8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003eca:	4b3e      	ldr	r3, [pc, #248]	; (8003fc4 <xPortStartScheduler+0x120>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a3f      	ldr	r2, [pc, #252]	; (8003fcc <xPortStartScheduler+0x128>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d10a      	bne.n	8003eea <xPortStartScheduler+0x46>
        __asm volatile
 8003ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ed8:	f383 8811 	msr	BASEPRI, r3
 8003edc:	f3bf 8f6f 	isb	sy
 8003ee0:	f3bf 8f4f 	dsb	sy
 8003ee4:	60fb      	str	r3, [r7, #12]
    }
 8003ee6:	bf00      	nop
 8003ee8:	e7fe      	b.n	8003ee8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003eea:	4b39      	ldr	r3, [pc, #228]	; (8003fd0 <xPortStartScheduler+0x12c>)
 8003eec:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	22ff      	movs	r2, #255	; 0xff
 8003efa:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	781b      	ldrb	r3, [r3, #0]
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003f04:	78fb      	ldrb	r3, [r7, #3]
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003f0c:	b2da      	uxtb	r2, r3
 8003f0e:	4b31      	ldr	r3, [pc, #196]	; (8003fd4 <xPortStartScheduler+0x130>)
 8003f10:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003f12:	4b31      	ldr	r3, [pc, #196]	; (8003fd8 <xPortStartScheduler+0x134>)
 8003f14:	2207      	movs	r2, #7
 8003f16:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f18:	e009      	b.n	8003f2e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8003f1a:	4b2f      	ldr	r3, [pc, #188]	; (8003fd8 <xPortStartScheduler+0x134>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	4a2d      	ldr	r2, [pc, #180]	; (8003fd8 <xPortStartScheduler+0x134>)
 8003f22:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003f24:	78fb      	ldrb	r3, [r7, #3]
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	005b      	lsls	r3, r3, #1
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f2e:	78fb      	ldrb	r3, [r7, #3]
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f36:	2b80      	cmp	r3, #128	; 0x80
 8003f38:	d0ef      	beq.n	8003f1a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003f3a:	4b27      	ldr	r3, [pc, #156]	; (8003fd8 <xPortStartScheduler+0x134>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f1c3 0307 	rsb	r3, r3, #7
 8003f42:	2b04      	cmp	r3, #4
 8003f44:	d00a      	beq.n	8003f5c <xPortStartScheduler+0xb8>
        __asm volatile
 8003f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f4a:	f383 8811 	msr	BASEPRI, r3
 8003f4e:	f3bf 8f6f 	isb	sy
 8003f52:	f3bf 8f4f 	dsb	sy
 8003f56:	60bb      	str	r3, [r7, #8]
    }
 8003f58:	bf00      	nop
 8003f5a:	e7fe      	b.n	8003f5a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003f5c:	4b1e      	ldr	r3, [pc, #120]	; (8003fd8 <xPortStartScheduler+0x134>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	021b      	lsls	r3, r3, #8
 8003f62:	4a1d      	ldr	r2, [pc, #116]	; (8003fd8 <xPortStartScheduler+0x134>)
 8003f64:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003f66:	4b1c      	ldr	r3, [pc, #112]	; (8003fd8 <xPortStartScheduler+0x134>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f6e:	4a1a      	ldr	r2, [pc, #104]	; (8003fd8 <xPortStartScheduler+0x134>)
 8003f70:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	b2da      	uxtb	r2, r3
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003f7a:	4b18      	ldr	r3, [pc, #96]	; (8003fdc <xPortStartScheduler+0x138>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a17      	ldr	r2, [pc, #92]	; (8003fdc <xPortStartScheduler+0x138>)
 8003f80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f84:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003f86:	4b15      	ldr	r3, [pc, #84]	; (8003fdc <xPortStartScheduler+0x138>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a14      	ldr	r2, [pc, #80]	; (8003fdc <xPortStartScheduler+0x138>)
 8003f8c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003f90:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003f92:	f000 f8db 	bl	800414c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003f96:	4b12      	ldr	r3, [pc, #72]	; (8003fe0 <xPortStartScheduler+0x13c>)
 8003f98:	2200      	movs	r2, #0
 8003f9a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003f9c:	f000 f8fa 	bl	8004194 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003fa0:	4b10      	ldr	r3, [pc, #64]	; (8003fe4 <xPortStartScheduler+0x140>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a0f      	ldr	r2, [pc, #60]	; (8003fe4 <xPortStartScheduler+0x140>)
 8003fa6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003faa:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003fac:	f7ff ff64 	bl	8003e78 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003fb0:	f7ff f89a 	bl	80030e8 <vTaskSwitchContext>
    prvTaskExitError();
 8003fb4:	f7ff ff1e 	bl	8003df4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3718      	adds	r7, #24
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	e000ed00 	.word	0xe000ed00
 8003fc8:	410fc271 	.word	0x410fc271
 8003fcc:	410fc270 	.word	0x410fc270
 8003fd0:	e000e400 	.word	0xe000e400
 8003fd4:	200001d4 	.word	0x200001d4
 8003fd8:	200001d8 	.word	0x200001d8
 8003fdc:	e000ed20 	.word	0xe000ed20
 8003fe0:	20000010 	.word	0x20000010
 8003fe4:	e000ef34 	.word	0xe000ef34

08003fe8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
        __asm volatile
 8003fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff2:	f383 8811 	msr	BASEPRI, r3
 8003ff6:	f3bf 8f6f 	isb	sy
 8003ffa:	f3bf 8f4f 	dsb	sy
 8003ffe:	607b      	str	r3, [r7, #4]
    }
 8004000:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004002:	4b0f      	ldr	r3, [pc, #60]	; (8004040 <vPortEnterCritical+0x58>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	3301      	adds	r3, #1
 8004008:	4a0d      	ldr	r2, [pc, #52]	; (8004040 <vPortEnterCritical+0x58>)
 800400a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800400c:	4b0c      	ldr	r3, [pc, #48]	; (8004040 <vPortEnterCritical+0x58>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2b01      	cmp	r3, #1
 8004012:	d10f      	bne.n	8004034 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004014:	4b0b      	ldr	r3, [pc, #44]	; (8004044 <vPortEnterCritical+0x5c>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	b2db      	uxtb	r3, r3
 800401a:	2b00      	cmp	r3, #0
 800401c:	d00a      	beq.n	8004034 <vPortEnterCritical+0x4c>
        __asm volatile
 800401e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004022:	f383 8811 	msr	BASEPRI, r3
 8004026:	f3bf 8f6f 	isb	sy
 800402a:	f3bf 8f4f 	dsb	sy
 800402e:	603b      	str	r3, [r7, #0]
    }
 8004030:	bf00      	nop
 8004032:	e7fe      	b.n	8004032 <vPortEnterCritical+0x4a>
    }
}
 8004034:	bf00      	nop
 8004036:	370c      	adds	r7, #12
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr
 8004040:	20000010 	.word	0x20000010
 8004044:	e000ed04 	.word	0xe000ed04

08004048 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800404e:	4b12      	ldr	r3, [pc, #72]	; (8004098 <vPortExitCritical+0x50>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d10a      	bne.n	800406c <vPortExitCritical+0x24>
        __asm volatile
 8004056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800405a:	f383 8811 	msr	BASEPRI, r3
 800405e:	f3bf 8f6f 	isb	sy
 8004062:	f3bf 8f4f 	dsb	sy
 8004066:	607b      	str	r3, [r7, #4]
    }
 8004068:	bf00      	nop
 800406a:	e7fe      	b.n	800406a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800406c:	4b0a      	ldr	r3, [pc, #40]	; (8004098 <vPortExitCritical+0x50>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	3b01      	subs	r3, #1
 8004072:	4a09      	ldr	r2, [pc, #36]	; (8004098 <vPortExitCritical+0x50>)
 8004074:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004076:	4b08      	ldr	r3, [pc, #32]	; (8004098 <vPortExitCritical+0x50>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d105      	bne.n	800408a <vPortExitCritical+0x42>
 800407e:	2300      	movs	r3, #0
 8004080:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	f383 8811 	msr	BASEPRI, r3
    }
 8004088:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800408a:	bf00      	nop
 800408c:	370c      	adds	r7, #12
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr
 8004096:	bf00      	nop
 8004098:	20000010 	.word	0x20000010
 800409c:	00000000 	.word	0x00000000

080040a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80040a0:	f3ef 8009 	mrs	r0, PSP
 80040a4:	f3bf 8f6f 	isb	sy
 80040a8:	4b15      	ldr	r3, [pc, #84]	; (8004100 <pxCurrentTCBConst>)
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	f01e 0f10 	tst.w	lr, #16
 80040b0:	bf08      	it	eq
 80040b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80040b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040ba:	6010      	str	r0, [r2, #0]
 80040bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80040c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80040c4:	f380 8811 	msr	BASEPRI, r0
 80040c8:	f3bf 8f4f 	dsb	sy
 80040cc:	f3bf 8f6f 	isb	sy
 80040d0:	f7ff f80a 	bl	80030e8 <vTaskSwitchContext>
 80040d4:	f04f 0000 	mov.w	r0, #0
 80040d8:	f380 8811 	msr	BASEPRI, r0
 80040dc:	bc09      	pop	{r0, r3}
 80040de:	6819      	ldr	r1, [r3, #0]
 80040e0:	6808      	ldr	r0, [r1, #0]
 80040e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040e6:	f01e 0f10 	tst.w	lr, #16
 80040ea:	bf08      	it	eq
 80040ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80040f0:	f380 8809 	msr	PSP, r0
 80040f4:	f3bf 8f6f 	isb	sy
 80040f8:	4770      	bx	lr
 80040fa:	bf00      	nop
 80040fc:	f3af 8000 	nop.w

08004100 <pxCurrentTCBConst>:
 8004100:	20000094 	.word	0x20000094
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004104:	bf00      	nop
 8004106:	bf00      	nop

08004108 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
        __asm volatile
 800410e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004112:	f383 8811 	msr	BASEPRI, r3
 8004116:	f3bf 8f6f 	isb	sy
 800411a:	f3bf 8f4f 	dsb	sy
 800411e:	607b      	str	r3, [r7, #4]
    }
 8004120:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004122:	f7fe ff4b 	bl	8002fbc <xTaskIncrementTick>
 8004126:	4603      	mov	r3, r0
 8004128:	2b00      	cmp	r3, #0
 800412a:	d003      	beq.n	8004134 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800412c:	4b06      	ldr	r3, [pc, #24]	; (8004148 <SysTick_Handler+0x40>)
 800412e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004132:	601a      	str	r2, [r3, #0]
 8004134:	2300      	movs	r3, #0
 8004136:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	f383 8811 	msr	BASEPRI, r3
    }
 800413e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8004140:	bf00      	nop
 8004142:	3708      	adds	r7, #8
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}
 8004148:	e000ed04 	.word	0xe000ed04

0800414c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800414c:	b480      	push	{r7}
 800414e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004150:	4b0b      	ldr	r3, [pc, #44]	; (8004180 <vPortSetupTimerInterrupt+0x34>)
 8004152:	2200      	movs	r2, #0
 8004154:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004156:	4b0b      	ldr	r3, [pc, #44]	; (8004184 <vPortSetupTimerInterrupt+0x38>)
 8004158:	2200      	movs	r2, #0
 800415a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800415c:	4b0a      	ldr	r3, [pc, #40]	; (8004188 <vPortSetupTimerInterrupt+0x3c>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a0a      	ldr	r2, [pc, #40]	; (800418c <vPortSetupTimerInterrupt+0x40>)
 8004162:	fba2 2303 	umull	r2, r3, r2, r3
 8004166:	099b      	lsrs	r3, r3, #6
 8004168:	4a09      	ldr	r2, [pc, #36]	; (8004190 <vPortSetupTimerInterrupt+0x44>)
 800416a:	3b01      	subs	r3, #1
 800416c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800416e:	4b04      	ldr	r3, [pc, #16]	; (8004180 <vPortSetupTimerInterrupt+0x34>)
 8004170:	2207      	movs	r2, #7
 8004172:	601a      	str	r2, [r3, #0]
}
 8004174:	bf00      	nop
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr
 800417e:	bf00      	nop
 8004180:	e000e010 	.word	0xe000e010
 8004184:	e000e018 	.word	0xe000e018
 8004188:	20000000 	.word	0x20000000
 800418c:	10624dd3 	.word	0x10624dd3
 8004190:	e000e014 	.word	0xe000e014

08004194 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004194:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80041a4 <vPortEnableVFP+0x10>
 8004198:	6801      	ldr	r1, [r0, #0]
 800419a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800419e:	6001      	str	r1, [r0, #0]
 80041a0:	4770      	bx	lr
 80041a2:	0000      	.short	0x0000
 80041a4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80041a8:	bf00      	nop
 80041aa:	bf00      	nop

080041ac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80041ac:	b480      	push	{r7}
 80041ae:	b085      	sub	sp, #20
 80041b0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80041b2:	f3ef 8305 	mrs	r3, IPSR
 80041b6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2b0f      	cmp	r3, #15
 80041bc:	d914      	bls.n	80041e8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80041be:	4a17      	ldr	r2, [pc, #92]	; (800421c <vPortValidateInterruptPriority+0x70>)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	4413      	add	r3, r2
 80041c4:	781b      	ldrb	r3, [r3, #0]
 80041c6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80041c8:	4b15      	ldr	r3, [pc, #84]	; (8004220 <vPortValidateInterruptPriority+0x74>)
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	7afa      	ldrb	r2, [r7, #11]
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d20a      	bcs.n	80041e8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80041d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d6:	f383 8811 	msr	BASEPRI, r3
 80041da:	f3bf 8f6f 	isb	sy
 80041de:	f3bf 8f4f 	dsb	sy
 80041e2:	607b      	str	r3, [r7, #4]
    }
 80041e4:	bf00      	nop
 80041e6:	e7fe      	b.n	80041e6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80041e8:	4b0e      	ldr	r3, [pc, #56]	; (8004224 <vPortValidateInterruptPriority+0x78>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80041f0:	4b0d      	ldr	r3, [pc, #52]	; (8004228 <vPortValidateInterruptPriority+0x7c>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d90a      	bls.n	800420e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80041f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041fc:	f383 8811 	msr	BASEPRI, r3
 8004200:	f3bf 8f6f 	isb	sy
 8004204:	f3bf 8f4f 	dsb	sy
 8004208:	603b      	str	r3, [r7, #0]
    }
 800420a:	bf00      	nop
 800420c:	e7fe      	b.n	800420c <vPortValidateInterruptPriority+0x60>
    }
 800420e:	bf00      	nop
 8004210:	3714      	adds	r7, #20
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	e000e3f0 	.word	0xe000e3f0
 8004220:	200001d4 	.word	0x200001d4
 8004224:	e000ed0c 	.word	0xe000ed0c
 8004228:	200001d8 	.word	0x200001d8

0800422c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b08a      	sub	sp, #40	; 0x28
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004234:	2300      	movs	r3, #0
 8004236:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004238:	f7fe fe14 	bl	8002e64 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800423c:	4b65      	ldr	r3, [pc, #404]	; (80043d4 <pvPortMalloc+0x1a8>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d101      	bne.n	8004248 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004244:	f000 f934 	bl	80044b0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004248:	4b63      	ldr	r3, [pc, #396]	; (80043d8 <pvPortMalloc+0x1ac>)
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	4013      	ands	r3, r2
 8004250:	2b00      	cmp	r3, #0
 8004252:	f040 80a7 	bne.w	80043a4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d02d      	beq.n	80042b8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800425c:	2208      	movs	r2, #8
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	429a      	cmp	r2, r3
 8004266:	d227      	bcs.n	80042b8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004268:	2208      	movs	r2, #8
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4413      	add	r3, r2
 800426e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f003 0307 	and.w	r3, r3, #7
 8004276:	2b00      	cmp	r3, #0
 8004278:	d021      	beq.n	80042be <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f023 0307 	bic.w	r3, r3, #7
 8004280:	3308      	adds	r3, #8
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	429a      	cmp	r2, r3
 8004286:	d214      	bcs.n	80042b2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f023 0307 	bic.w	r3, r3, #7
 800428e:	3308      	adds	r3, #8
 8004290:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f003 0307 	and.w	r3, r3, #7
 8004298:	2b00      	cmp	r3, #0
 800429a:	d010      	beq.n	80042be <pvPortMalloc+0x92>
        __asm volatile
 800429c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042a0:	f383 8811 	msr	BASEPRI, r3
 80042a4:	f3bf 8f6f 	isb	sy
 80042a8:	f3bf 8f4f 	dsb	sy
 80042ac:	617b      	str	r3, [r7, #20]
    }
 80042ae:	bf00      	nop
 80042b0:	e7fe      	b.n	80042b0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80042b2:	2300      	movs	r3, #0
 80042b4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80042b6:	e002      	b.n	80042be <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80042b8:	2300      	movs	r3, #0
 80042ba:	607b      	str	r3, [r7, #4]
 80042bc:	e000      	b.n	80042c0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80042be:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d06e      	beq.n	80043a4 <pvPortMalloc+0x178>
 80042c6:	4b45      	ldr	r3, [pc, #276]	; (80043dc <pvPortMalloc+0x1b0>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d869      	bhi.n	80043a4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80042d0:	4b43      	ldr	r3, [pc, #268]	; (80043e0 <pvPortMalloc+0x1b4>)
 80042d2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80042d4:	4b42      	ldr	r3, [pc, #264]	; (80043e0 <pvPortMalloc+0x1b4>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80042da:	e004      	b.n	80042e6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80042dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042de:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80042e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80042e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d903      	bls.n	80042f8 <pvPortMalloc+0xcc>
 80042f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d1f1      	bne.n	80042dc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80042f8:	4b36      	ldr	r3, [pc, #216]	; (80043d4 <pvPortMalloc+0x1a8>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042fe:	429a      	cmp	r2, r3
 8004300:	d050      	beq.n	80043a4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004302:	6a3b      	ldr	r3, [r7, #32]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	2208      	movs	r2, #8
 8004308:	4413      	add	r3, r2
 800430a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800430c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	6a3b      	ldr	r3, [r7, #32]
 8004312:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004316:	685a      	ldr	r2, [r3, #4]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	1ad2      	subs	r2, r2, r3
 800431c:	2308      	movs	r3, #8
 800431e:	005b      	lsls	r3, r3, #1
 8004320:	429a      	cmp	r2, r3
 8004322:	d91f      	bls.n	8004364 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004324:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4413      	add	r3, r2
 800432a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800432c:	69bb      	ldr	r3, [r7, #24]
 800432e:	f003 0307 	and.w	r3, r3, #7
 8004332:	2b00      	cmp	r3, #0
 8004334:	d00a      	beq.n	800434c <pvPortMalloc+0x120>
        __asm volatile
 8004336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800433a:	f383 8811 	msr	BASEPRI, r3
 800433e:	f3bf 8f6f 	isb	sy
 8004342:	f3bf 8f4f 	dsb	sy
 8004346:	613b      	str	r3, [r7, #16]
    }
 8004348:	bf00      	nop
 800434a:	e7fe      	b.n	800434a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800434c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434e:	685a      	ldr	r2, [r3, #4]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	1ad2      	subs	r2, r2, r3
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800435e:	69b8      	ldr	r0, [r7, #24]
 8004360:	f000 f908 	bl	8004574 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004364:	4b1d      	ldr	r3, [pc, #116]	; (80043dc <pvPortMalloc+0x1b0>)
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	4a1b      	ldr	r2, [pc, #108]	; (80043dc <pvPortMalloc+0x1b0>)
 8004370:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004372:	4b1a      	ldr	r3, [pc, #104]	; (80043dc <pvPortMalloc+0x1b0>)
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	4b1b      	ldr	r3, [pc, #108]	; (80043e4 <pvPortMalloc+0x1b8>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	429a      	cmp	r2, r3
 800437c:	d203      	bcs.n	8004386 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800437e:	4b17      	ldr	r3, [pc, #92]	; (80043dc <pvPortMalloc+0x1b0>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a18      	ldr	r2, [pc, #96]	; (80043e4 <pvPortMalloc+0x1b8>)
 8004384:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004388:	685a      	ldr	r2, [r3, #4]
 800438a:	4b13      	ldr	r3, [pc, #76]	; (80043d8 <pvPortMalloc+0x1ac>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	431a      	orrs	r2, r3
 8004390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004392:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004396:	2200      	movs	r2, #0
 8004398:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800439a:	4b13      	ldr	r3, [pc, #76]	; (80043e8 <pvPortMalloc+0x1bc>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	3301      	adds	r3, #1
 80043a0:	4a11      	ldr	r2, [pc, #68]	; (80043e8 <pvPortMalloc+0x1bc>)
 80043a2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80043a4:	f7fe fd6c 	bl	8002e80 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	f003 0307 	and.w	r3, r3, #7
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d00a      	beq.n	80043c8 <pvPortMalloc+0x19c>
        __asm volatile
 80043b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b6:	f383 8811 	msr	BASEPRI, r3
 80043ba:	f3bf 8f6f 	isb	sy
 80043be:	f3bf 8f4f 	dsb	sy
 80043c2:	60fb      	str	r3, [r7, #12]
    }
 80043c4:	bf00      	nop
 80043c6:	e7fe      	b.n	80043c6 <pvPortMalloc+0x19a>
    return pvReturn;
 80043c8:	69fb      	ldr	r3, [r7, #28]
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3728      	adds	r7, #40	; 0x28
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop
 80043d4:	20012de4 	.word	0x20012de4
 80043d8:	20012df8 	.word	0x20012df8
 80043dc:	20012de8 	.word	0x20012de8
 80043e0:	20012ddc 	.word	0x20012ddc
 80043e4:	20012dec 	.word	0x20012dec
 80043e8:	20012df0 	.word	0x20012df0

080043ec <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b086      	sub	sp, #24
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d04d      	beq.n	800449a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80043fe:	2308      	movs	r3, #8
 8004400:	425b      	negs	r3, r3
 8004402:	697a      	ldr	r2, [r7, #20]
 8004404:	4413      	add	r3, r2
 8004406:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	685a      	ldr	r2, [r3, #4]
 8004410:	4b24      	ldr	r3, [pc, #144]	; (80044a4 <vPortFree+0xb8>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4013      	ands	r3, r2
 8004416:	2b00      	cmp	r3, #0
 8004418:	d10a      	bne.n	8004430 <vPortFree+0x44>
        __asm volatile
 800441a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800441e:	f383 8811 	msr	BASEPRI, r3
 8004422:	f3bf 8f6f 	isb	sy
 8004426:	f3bf 8f4f 	dsb	sy
 800442a:	60fb      	str	r3, [r7, #12]
    }
 800442c:	bf00      	nop
 800442e:	e7fe      	b.n	800442e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d00a      	beq.n	800444e <vPortFree+0x62>
        __asm volatile
 8004438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800443c:	f383 8811 	msr	BASEPRI, r3
 8004440:	f3bf 8f6f 	isb	sy
 8004444:	f3bf 8f4f 	dsb	sy
 8004448:	60bb      	str	r3, [r7, #8]
    }
 800444a:	bf00      	nop
 800444c:	e7fe      	b.n	800444c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	685a      	ldr	r2, [r3, #4]
 8004452:	4b14      	ldr	r3, [pc, #80]	; (80044a4 <vPortFree+0xb8>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4013      	ands	r3, r2
 8004458:	2b00      	cmp	r3, #0
 800445a:	d01e      	beq.n	800449a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d11a      	bne.n	800449a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	685a      	ldr	r2, [r3, #4]
 8004468:	4b0e      	ldr	r3, [pc, #56]	; (80044a4 <vPortFree+0xb8>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	43db      	mvns	r3, r3
 800446e:	401a      	ands	r2, r3
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004474:	f7fe fcf6 	bl	8002e64 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	685a      	ldr	r2, [r3, #4]
 800447c:	4b0a      	ldr	r3, [pc, #40]	; (80044a8 <vPortFree+0xbc>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4413      	add	r3, r2
 8004482:	4a09      	ldr	r2, [pc, #36]	; (80044a8 <vPortFree+0xbc>)
 8004484:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004486:	6938      	ldr	r0, [r7, #16]
 8004488:	f000 f874 	bl	8004574 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800448c:	4b07      	ldr	r3, [pc, #28]	; (80044ac <vPortFree+0xc0>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	3301      	adds	r3, #1
 8004492:	4a06      	ldr	r2, [pc, #24]	; (80044ac <vPortFree+0xc0>)
 8004494:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004496:	f7fe fcf3 	bl	8002e80 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800449a:	bf00      	nop
 800449c:	3718      	adds	r7, #24
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	20012df8 	.word	0x20012df8
 80044a8:	20012de8 	.word	0x20012de8
 80044ac:	20012df4 	.word	0x20012df4

080044b0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80044b0:	b480      	push	{r7}
 80044b2:	b085      	sub	sp, #20
 80044b4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80044b6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80044ba:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80044bc:	4b27      	ldr	r3, [pc, #156]	; (800455c <prvHeapInit+0xac>)
 80044be:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f003 0307 	and.w	r3, r3, #7
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d00c      	beq.n	80044e4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	3307      	adds	r3, #7
 80044ce:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f023 0307 	bic.w	r3, r3, #7
 80044d6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80044d8:	68ba      	ldr	r2, [r7, #8]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	4a1f      	ldr	r2, [pc, #124]	; (800455c <prvHeapInit+0xac>)
 80044e0:	4413      	add	r3, r2
 80044e2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80044e8:	4a1d      	ldr	r2, [pc, #116]	; (8004560 <prvHeapInit+0xb0>)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80044ee:	4b1c      	ldr	r3, [pc, #112]	; (8004560 <prvHeapInit+0xb0>)
 80044f0:	2200      	movs	r2, #0
 80044f2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	68ba      	ldr	r2, [r7, #8]
 80044f8:	4413      	add	r3, r2
 80044fa:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80044fc:	2208      	movs	r2, #8
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	1a9b      	subs	r3, r3, r2
 8004502:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f023 0307 	bic.w	r3, r3, #7
 800450a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	4a15      	ldr	r2, [pc, #84]	; (8004564 <prvHeapInit+0xb4>)
 8004510:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004512:	4b14      	ldr	r3, [pc, #80]	; (8004564 <prvHeapInit+0xb4>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	2200      	movs	r2, #0
 8004518:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800451a:	4b12      	ldr	r3, [pc, #72]	; (8004564 <prvHeapInit+0xb4>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2200      	movs	r2, #0
 8004520:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	68fa      	ldr	r2, [r7, #12]
 800452a:	1ad2      	subs	r2, r2, r3
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004530:	4b0c      	ldr	r3, [pc, #48]	; (8004564 <prvHeapInit+0xb4>)
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	4a0a      	ldr	r2, [pc, #40]	; (8004568 <prvHeapInit+0xb8>)
 800453e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	4a09      	ldr	r2, [pc, #36]	; (800456c <prvHeapInit+0xbc>)
 8004546:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004548:	4b09      	ldr	r3, [pc, #36]	; (8004570 <prvHeapInit+0xc0>)
 800454a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800454e:	601a      	str	r2, [r3, #0]
}
 8004550:	bf00      	nop
 8004552:	3714      	adds	r7, #20
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr
 800455c:	200001dc 	.word	0x200001dc
 8004560:	20012ddc 	.word	0x20012ddc
 8004564:	20012de4 	.word	0x20012de4
 8004568:	20012dec 	.word	0x20012dec
 800456c:	20012de8 	.word	0x20012de8
 8004570:	20012df8 	.word	0x20012df8

08004574 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004574:	b480      	push	{r7}
 8004576:	b085      	sub	sp, #20
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800457c:	4b28      	ldr	r3, [pc, #160]	; (8004620 <prvInsertBlockIntoFreeList+0xac>)
 800457e:	60fb      	str	r3, [r7, #12]
 8004580:	e002      	b.n	8004588 <prvInsertBlockIntoFreeList+0x14>
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	60fb      	str	r3, [r7, #12]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	429a      	cmp	r2, r3
 8004590:	d8f7      	bhi.n	8004582 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	68ba      	ldr	r2, [r7, #8]
 800459c:	4413      	add	r3, r2
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d108      	bne.n	80045b6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	685a      	ldr	r2, [r3, #4]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	441a      	add	r2, r3
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	68ba      	ldr	r2, [r7, #8]
 80045c0:	441a      	add	r2, r3
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d118      	bne.n	80045fc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	4b15      	ldr	r3, [pc, #84]	; (8004624 <prvInsertBlockIntoFreeList+0xb0>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d00d      	beq.n	80045f2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	685a      	ldr	r2, [r3, #4]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	441a      	add	r2, r3
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	601a      	str	r2, [r3, #0]
 80045f0:	e008      	b.n	8004604 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80045f2:	4b0c      	ldr	r3, [pc, #48]	; (8004624 <prvInsertBlockIntoFreeList+0xb0>)
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	601a      	str	r2, [r3, #0]
 80045fa:	e003      	b.n	8004604 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004604:	68fa      	ldr	r2, [r7, #12]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	429a      	cmp	r2, r3
 800460a:	d002      	beq.n	8004612 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004612:	bf00      	nop
 8004614:	3714      	adds	r7, #20
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr
 800461e:	bf00      	nop
 8004620:	20012ddc 	.word	0x20012ddc
 8004624:	20012de4 	.word	0x20012de4

08004628 <__libc_init_array>:
 8004628:	b570      	push	{r4, r5, r6, lr}
 800462a:	4d0d      	ldr	r5, [pc, #52]	; (8004660 <__libc_init_array+0x38>)
 800462c:	4c0d      	ldr	r4, [pc, #52]	; (8004664 <__libc_init_array+0x3c>)
 800462e:	1b64      	subs	r4, r4, r5
 8004630:	10a4      	asrs	r4, r4, #2
 8004632:	2600      	movs	r6, #0
 8004634:	42a6      	cmp	r6, r4
 8004636:	d109      	bne.n	800464c <__libc_init_array+0x24>
 8004638:	4d0b      	ldr	r5, [pc, #44]	; (8004668 <__libc_init_array+0x40>)
 800463a:	4c0c      	ldr	r4, [pc, #48]	; (800466c <__libc_init_array+0x44>)
 800463c:	f000 fd02 	bl	8005044 <_init>
 8004640:	1b64      	subs	r4, r4, r5
 8004642:	10a4      	asrs	r4, r4, #2
 8004644:	2600      	movs	r6, #0
 8004646:	42a6      	cmp	r6, r4
 8004648:	d105      	bne.n	8004656 <__libc_init_array+0x2e>
 800464a:	bd70      	pop	{r4, r5, r6, pc}
 800464c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004650:	4798      	blx	r3
 8004652:	3601      	adds	r6, #1
 8004654:	e7ee      	b.n	8004634 <__libc_init_array+0xc>
 8004656:	f855 3b04 	ldr.w	r3, [r5], #4
 800465a:	4798      	blx	r3
 800465c:	3601      	adds	r6, #1
 800465e:	e7f2      	b.n	8004646 <__libc_init_array+0x1e>
 8004660:	08005138 	.word	0x08005138
 8004664:	08005138 	.word	0x08005138
 8004668:	08005138 	.word	0x08005138
 800466c:	0800513c 	.word	0x0800513c

08004670 <memcpy>:
 8004670:	440a      	add	r2, r1
 8004672:	4291      	cmp	r1, r2
 8004674:	f100 33ff 	add.w	r3, r0, #4294967295
 8004678:	d100      	bne.n	800467c <memcpy+0xc>
 800467a:	4770      	bx	lr
 800467c:	b510      	push	{r4, lr}
 800467e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004682:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004686:	4291      	cmp	r1, r2
 8004688:	d1f9      	bne.n	800467e <memcpy+0xe>
 800468a:	bd10      	pop	{r4, pc}

0800468c <memset>:
 800468c:	4402      	add	r2, r0
 800468e:	4603      	mov	r3, r0
 8004690:	4293      	cmp	r3, r2
 8004692:	d100      	bne.n	8004696 <memset+0xa>
 8004694:	4770      	bx	lr
 8004696:	f803 1b01 	strb.w	r1, [r3], #1
 800469a:	e7f9      	b.n	8004690 <memset+0x4>

0800469c <_puts_r>:
 800469c:	b570      	push	{r4, r5, r6, lr}
 800469e:	460e      	mov	r6, r1
 80046a0:	4605      	mov	r5, r0
 80046a2:	b118      	cbz	r0, 80046ac <_puts_r+0x10>
 80046a4:	6983      	ldr	r3, [r0, #24]
 80046a6:	b90b      	cbnz	r3, 80046ac <_puts_r+0x10>
 80046a8:	f000 fa48 	bl	8004b3c <__sinit>
 80046ac:	69ab      	ldr	r3, [r5, #24]
 80046ae:	68ac      	ldr	r4, [r5, #8]
 80046b0:	b913      	cbnz	r3, 80046b8 <_puts_r+0x1c>
 80046b2:	4628      	mov	r0, r5
 80046b4:	f000 fa42 	bl	8004b3c <__sinit>
 80046b8:	4b2c      	ldr	r3, [pc, #176]	; (800476c <_puts_r+0xd0>)
 80046ba:	429c      	cmp	r4, r3
 80046bc:	d120      	bne.n	8004700 <_puts_r+0x64>
 80046be:	686c      	ldr	r4, [r5, #4]
 80046c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80046c2:	07db      	lsls	r3, r3, #31
 80046c4:	d405      	bmi.n	80046d2 <_puts_r+0x36>
 80046c6:	89a3      	ldrh	r3, [r4, #12]
 80046c8:	0598      	lsls	r0, r3, #22
 80046ca:	d402      	bmi.n	80046d2 <_puts_r+0x36>
 80046cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80046ce:	f000 fad3 	bl	8004c78 <__retarget_lock_acquire_recursive>
 80046d2:	89a3      	ldrh	r3, [r4, #12]
 80046d4:	0719      	lsls	r1, r3, #28
 80046d6:	d51d      	bpl.n	8004714 <_puts_r+0x78>
 80046d8:	6923      	ldr	r3, [r4, #16]
 80046da:	b1db      	cbz	r3, 8004714 <_puts_r+0x78>
 80046dc:	3e01      	subs	r6, #1
 80046de:	68a3      	ldr	r3, [r4, #8]
 80046e0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80046e4:	3b01      	subs	r3, #1
 80046e6:	60a3      	str	r3, [r4, #8]
 80046e8:	bb39      	cbnz	r1, 800473a <_puts_r+0x9e>
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	da38      	bge.n	8004760 <_puts_r+0xc4>
 80046ee:	4622      	mov	r2, r4
 80046f0:	210a      	movs	r1, #10
 80046f2:	4628      	mov	r0, r5
 80046f4:	f000 f848 	bl	8004788 <__swbuf_r>
 80046f8:	3001      	adds	r0, #1
 80046fa:	d011      	beq.n	8004720 <_puts_r+0x84>
 80046fc:	250a      	movs	r5, #10
 80046fe:	e011      	b.n	8004724 <_puts_r+0x88>
 8004700:	4b1b      	ldr	r3, [pc, #108]	; (8004770 <_puts_r+0xd4>)
 8004702:	429c      	cmp	r4, r3
 8004704:	d101      	bne.n	800470a <_puts_r+0x6e>
 8004706:	68ac      	ldr	r4, [r5, #8]
 8004708:	e7da      	b.n	80046c0 <_puts_r+0x24>
 800470a:	4b1a      	ldr	r3, [pc, #104]	; (8004774 <_puts_r+0xd8>)
 800470c:	429c      	cmp	r4, r3
 800470e:	bf08      	it	eq
 8004710:	68ec      	ldreq	r4, [r5, #12]
 8004712:	e7d5      	b.n	80046c0 <_puts_r+0x24>
 8004714:	4621      	mov	r1, r4
 8004716:	4628      	mov	r0, r5
 8004718:	f000 f888 	bl	800482c <__swsetup_r>
 800471c:	2800      	cmp	r0, #0
 800471e:	d0dd      	beq.n	80046dc <_puts_r+0x40>
 8004720:	f04f 35ff 	mov.w	r5, #4294967295
 8004724:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004726:	07da      	lsls	r2, r3, #31
 8004728:	d405      	bmi.n	8004736 <_puts_r+0x9a>
 800472a:	89a3      	ldrh	r3, [r4, #12]
 800472c:	059b      	lsls	r3, r3, #22
 800472e:	d402      	bmi.n	8004736 <_puts_r+0x9a>
 8004730:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004732:	f000 faa2 	bl	8004c7a <__retarget_lock_release_recursive>
 8004736:	4628      	mov	r0, r5
 8004738:	bd70      	pop	{r4, r5, r6, pc}
 800473a:	2b00      	cmp	r3, #0
 800473c:	da04      	bge.n	8004748 <_puts_r+0xac>
 800473e:	69a2      	ldr	r2, [r4, #24]
 8004740:	429a      	cmp	r2, r3
 8004742:	dc06      	bgt.n	8004752 <_puts_r+0xb6>
 8004744:	290a      	cmp	r1, #10
 8004746:	d004      	beq.n	8004752 <_puts_r+0xb6>
 8004748:	6823      	ldr	r3, [r4, #0]
 800474a:	1c5a      	adds	r2, r3, #1
 800474c:	6022      	str	r2, [r4, #0]
 800474e:	7019      	strb	r1, [r3, #0]
 8004750:	e7c5      	b.n	80046de <_puts_r+0x42>
 8004752:	4622      	mov	r2, r4
 8004754:	4628      	mov	r0, r5
 8004756:	f000 f817 	bl	8004788 <__swbuf_r>
 800475a:	3001      	adds	r0, #1
 800475c:	d1bf      	bne.n	80046de <_puts_r+0x42>
 800475e:	e7df      	b.n	8004720 <_puts_r+0x84>
 8004760:	6823      	ldr	r3, [r4, #0]
 8004762:	250a      	movs	r5, #10
 8004764:	1c5a      	adds	r2, r3, #1
 8004766:	6022      	str	r2, [r4, #0]
 8004768:	701d      	strb	r5, [r3, #0]
 800476a:	e7db      	b.n	8004724 <_puts_r+0x88>
 800476c:	080050f0 	.word	0x080050f0
 8004770:	08005110 	.word	0x08005110
 8004774:	080050d0 	.word	0x080050d0

08004778 <puts>:
 8004778:	4b02      	ldr	r3, [pc, #8]	; (8004784 <puts+0xc>)
 800477a:	4601      	mov	r1, r0
 800477c:	6818      	ldr	r0, [r3, #0]
 800477e:	f7ff bf8d 	b.w	800469c <_puts_r>
 8004782:	bf00      	nop
 8004784:	20000014 	.word	0x20000014

08004788 <__swbuf_r>:
 8004788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800478a:	460e      	mov	r6, r1
 800478c:	4614      	mov	r4, r2
 800478e:	4605      	mov	r5, r0
 8004790:	b118      	cbz	r0, 800479a <__swbuf_r+0x12>
 8004792:	6983      	ldr	r3, [r0, #24]
 8004794:	b90b      	cbnz	r3, 800479a <__swbuf_r+0x12>
 8004796:	f000 f9d1 	bl	8004b3c <__sinit>
 800479a:	4b21      	ldr	r3, [pc, #132]	; (8004820 <__swbuf_r+0x98>)
 800479c:	429c      	cmp	r4, r3
 800479e:	d12b      	bne.n	80047f8 <__swbuf_r+0x70>
 80047a0:	686c      	ldr	r4, [r5, #4]
 80047a2:	69a3      	ldr	r3, [r4, #24]
 80047a4:	60a3      	str	r3, [r4, #8]
 80047a6:	89a3      	ldrh	r3, [r4, #12]
 80047a8:	071a      	lsls	r2, r3, #28
 80047aa:	d52f      	bpl.n	800480c <__swbuf_r+0x84>
 80047ac:	6923      	ldr	r3, [r4, #16]
 80047ae:	b36b      	cbz	r3, 800480c <__swbuf_r+0x84>
 80047b0:	6923      	ldr	r3, [r4, #16]
 80047b2:	6820      	ldr	r0, [r4, #0]
 80047b4:	1ac0      	subs	r0, r0, r3
 80047b6:	6963      	ldr	r3, [r4, #20]
 80047b8:	b2f6      	uxtb	r6, r6
 80047ba:	4283      	cmp	r3, r0
 80047bc:	4637      	mov	r7, r6
 80047be:	dc04      	bgt.n	80047ca <__swbuf_r+0x42>
 80047c0:	4621      	mov	r1, r4
 80047c2:	4628      	mov	r0, r5
 80047c4:	f000 f926 	bl	8004a14 <_fflush_r>
 80047c8:	bb30      	cbnz	r0, 8004818 <__swbuf_r+0x90>
 80047ca:	68a3      	ldr	r3, [r4, #8]
 80047cc:	3b01      	subs	r3, #1
 80047ce:	60a3      	str	r3, [r4, #8]
 80047d0:	6823      	ldr	r3, [r4, #0]
 80047d2:	1c5a      	adds	r2, r3, #1
 80047d4:	6022      	str	r2, [r4, #0]
 80047d6:	701e      	strb	r6, [r3, #0]
 80047d8:	6963      	ldr	r3, [r4, #20]
 80047da:	3001      	adds	r0, #1
 80047dc:	4283      	cmp	r3, r0
 80047de:	d004      	beq.n	80047ea <__swbuf_r+0x62>
 80047e0:	89a3      	ldrh	r3, [r4, #12]
 80047e2:	07db      	lsls	r3, r3, #31
 80047e4:	d506      	bpl.n	80047f4 <__swbuf_r+0x6c>
 80047e6:	2e0a      	cmp	r6, #10
 80047e8:	d104      	bne.n	80047f4 <__swbuf_r+0x6c>
 80047ea:	4621      	mov	r1, r4
 80047ec:	4628      	mov	r0, r5
 80047ee:	f000 f911 	bl	8004a14 <_fflush_r>
 80047f2:	b988      	cbnz	r0, 8004818 <__swbuf_r+0x90>
 80047f4:	4638      	mov	r0, r7
 80047f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047f8:	4b0a      	ldr	r3, [pc, #40]	; (8004824 <__swbuf_r+0x9c>)
 80047fa:	429c      	cmp	r4, r3
 80047fc:	d101      	bne.n	8004802 <__swbuf_r+0x7a>
 80047fe:	68ac      	ldr	r4, [r5, #8]
 8004800:	e7cf      	b.n	80047a2 <__swbuf_r+0x1a>
 8004802:	4b09      	ldr	r3, [pc, #36]	; (8004828 <__swbuf_r+0xa0>)
 8004804:	429c      	cmp	r4, r3
 8004806:	bf08      	it	eq
 8004808:	68ec      	ldreq	r4, [r5, #12]
 800480a:	e7ca      	b.n	80047a2 <__swbuf_r+0x1a>
 800480c:	4621      	mov	r1, r4
 800480e:	4628      	mov	r0, r5
 8004810:	f000 f80c 	bl	800482c <__swsetup_r>
 8004814:	2800      	cmp	r0, #0
 8004816:	d0cb      	beq.n	80047b0 <__swbuf_r+0x28>
 8004818:	f04f 37ff 	mov.w	r7, #4294967295
 800481c:	e7ea      	b.n	80047f4 <__swbuf_r+0x6c>
 800481e:	bf00      	nop
 8004820:	080050f0 	.word	0x080050f0
 8004824:	08005110 	.word	0x08005110
 8004828:	080050d0 	.word	0x080050d0

0800482c <__swsetup_r>:
 800482c:	4b32      	ldr	r3, [pc, #200]	; (80048f8 <__swsetup_r+0xcc>)
 800482e:	b570      	push	{r4, r5, r6, lr}
 8004830:	681d      	ldr	r5, [r3, #0]
 8004832:	4606      	mov	r6, r0
 8004834:	460c      	mov	r4, r1
 8004836:	b125      	cbz	r5, 8004842 <__swsetup_r+0x16>
 8004838:	69ab      	ldr	r3, [r5, #24]
 800483a:	b913      	cbnz	r3, 8004842 <__swsetup_r+0x16>
 800483c:	4628      	mov	r0, r5
 800483e:	f000 f97d 	bl	8004b3c <__sinit>
 8004842:	4b2e      	ldr	r3, [pc, #184]	; (80048fc <__swsetup_r+0xd0>)
 8004844:	429c      	cmp	r4, r3
 8004846:	d10f      	bne.n	8004868 <__swsetup_r+0x3c>
 8004848:	686c      	ldr	r4, [r5, #4]
 800484a:	89a3      	ldrh	r3, [r4, #12]
 800484c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004850:	0719      	lsls	r1, r3, #28
 8004852:	d42c      	bmi.n	80048ae <__swsetup_r+0x82>
 8004854:	06dd      	lsls	r5, r3, #27
 8004856:	d411      	bmi.n	800487c <__swsetup_r+0x50>
 8004858:	2309      	movs	r3, #9
 800485a:	6033      	str	r3, [r6, #0]
 800485c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004860:	81a3      	strh	r3, [r4, #12]
 8004862:	f04f 30ff 	mov.w	r0, #4294967295
 8004866:	e03e      	b.n	80048e6 <__swsetup_r+0xba>
 8004868:	4b25      	ldr	r3, [pc, #148]	; (8004900 <__swsetup_r+0xd4>)
 800486a:	429c      	cmp	r4, r3
 800486c:	d101      	bne.n	8004872 <__swsetup_r+0x46>
 800486e:	68ac      	ldr	r4, [r5, #8]
 8004870:	e7eb      	b.n	800484a <__swsetup_r+0x1e>
 8004872:	4b24      	ldr	r3, [pc, #144]	; (8004904 <__swsetup_r+0xd8>)
 8004874:	429c      	cmp	r4, r3
 8004876:	bf08      	it	eq
 8004878:	68ec      	ldreq	r4, [r5, #12]
 800487a:	e7e6      	b.n	800484a <__swsetup_r+0x1e>
 800487c:	0758      	lsls	r0, r3, #29
 800487e:	d512      	bpl.n	80048a6 <__swsetup_r+0x7a>
 8004880:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004882:	b141      	cbz	r1, 8004896 <__swsetup_r+0x6a>
 8004884:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004888:	4299      	cmp	r1, r3
 800488a:	d002      	beq.n	8004892 <__swsetup_r+0x66>
 800488c:	4630      	mov	r0, r6
 800488e:	f000 fa59 	bl	8004d44 <_free_r>
 8004892:	2300      	movs	r3, #0
 8004894:	6363      	str	r3, [r4, #52]	; 0x34
 8004896:	89a3      	ldrh	r3, [r4, #12]
 8004898:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800489c:	81a3      	strh	r3, [r4, #12]
 800489e:	2300      	movs	r3, #0
 80048a0:	6063      	str	r3, [r4, #4]
 80048a2:	6923      	ldr	r3, [r4, #16]
 80048a4:	6023      	str	r3, [r4, #0]
 80048a6:	89a3      	ldrh	r3, [r4, #12]
 80048a8:	f043 0308 	orr.w	r3, r3, #8
 80048ac:	81a3      	strh	r3, [r4, #12]
 80048ae:	6923      	ldr	r3, [r4, #16]
 80048b0:	b94b      	cbnz	r3, 80048c6 <__swsetup_r+0x9a>
 80048b2:	89a3      	ldrh	r3, [r4, #12]
 80048b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80048b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048bc:	d003      	beq.n	80048c6 <__swsetup_r+0x9a>
 80048be:	4621      	mov	r1, r4
 80048c0:	4630      	mov	r0, r6
 80048c2:	f000 f9ff 	bl	8004cc4 <__smakebuf_r>
 80048c6:	89a0      	ldrh	r0, [r4, #12]
 80048c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80048cc:	f010 0301 	ands.w	r3, r0, #1
 80048d0:	d00a      	beq.n	80048e8 <__swsetup_r+0xbc>
 80048d2:	2300      	movs	r3, #0
 80048d4:	60a3      	str	r3, [r4, #8]
 80048d6:	6963      	ldr	r3, [r4, #20]
 80048d8:	425b      	negs	r3, r3
 80048da:	61a3      	str	r3, [r4, #24]
 80048dc:	6923      	ldr	r3, [r4, #16]
 80048de:	b943      	cbnz	r3, 80048f2 <__swsetup_r+0xc6>
 80048e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80048e4:	d1ba      	bne.n	800485c <__swsetup_r+0x30>
 80048e6:	bd70      	pop	{r4, r5, r6, pc}
 80048e8:	0781      	lsls	r1, r0, #30
 80048ea:	bf58      	it	pl
 80048ec:	6963      	ldrpl	r3, [r4, #20]
 80048ee:	60a3      	str	r3, [r4, #8]
 80048f0:	e7f4      	b.n	80048dc <__swsetup_r+0xb0>
 80048f2:	2000      	movs	r0, #0
 80048f4:	e7f7      	b.n	80048e6 <__swsetup_r+0xba>
 80048f6:	bf00      	nop
 80048f8:	20000014 	.word	0x20000014
 80048fc:	080050f0 	.word	0x080050f0
 8004900:	08005110 	.word	0x08005110
 8004904:	080050d0 	.word	0x080050d0

08004908 <__sflush_r>:
 8004908:	898a      	ldrh	r2, [r1, #12]
 800490a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800490e:	4605      	mov	r5, r0
 8004910:	0710      	lsls	r0, r2, #28
 8004912:	460c      	mov	r4, r1
 8004914:	d458      	bmi.n	80049c8 <__sflush_r+0xc0>
 8004916:	684b      	ldr	r3, [r1, #4]
 8004918:	2b00      	cmp	r3, #0
 800491a:	dc05      	bgt.n	8004928 <__sflush_r+0x20>
 800491c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800491e:	2b00      	cmp	r3, #0
 8004920:	dc02      	bgt.n	8004928 <__sflush_r+0x20>
 8004922:	2000      	movs	r0, #0
 8004924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004928:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800492a:	2e00      	cmp	r6, #0
 800492c:	d0f9      	beq.n	8004922 <__sflush_r+0x1a>
 800492e:	2300      	movs	r3, #0
 8004930:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004934:	682f      	ldr	r7, [r5, #0]
 8004936:	602b      	str	r3, [r5, #0]
 8004938:	d032      	beq.n	80049a0 <__sflush_r+0x98>
 800493a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800493c:	89a3      	ldrh	r3, [r4, #12]
 800493e:	075a      	lsls	r2, r3, #29
 8004940:	d505      	bpl.n	800494e <__sflush_r+0x46>
 8004942:	6863      	ldr	r3, [r4, #4]
 8004944:	1ac0      	subs	r0, r0, r3
 8004946:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004948:	b10b      	cbz	r3, 800494e <__sflush_r+0x46>
 800494a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800494c:	1ac0      	subs	r0, r0, r3
 800494e:	2300      	movs	r3, #0
 8004950:	4602      	mov	r2, r0
 8004952:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004954:	6a21      	ldr	r1, [r4, #32]
 8004956:	4628      	mov	r0, r5
 8004958:	47b0      	blx	r6
 800495a:	1c43      	adds	r3, r0, #1
 800495c:	89a3      	ldrh	r3, [r4, #12]
 800495e:	d106      	bne.n	800496e <__sflush_r+0x66>
 8004960:	6829      	ldr	r1, [r5, #0]
 8004962:	291d      	cmp	r1, #29
 8004964:	d82c      	bhi.n	80049c0 <__sflush_r+0xb8>
 8004966:	4a2a      	ldr	r2, [pc, #168]	; (8004a10 <__sflush_r+0x108>)
 8004968:	40ca      	lsrs	r2, r1
 800496a:	07d6      	lsls	r6, r2, #31
 800496c:	d528      	bpl.n	80049c0 <__sflush_r+0xb8>
 800496e:	2200      	movs	r2, #0
 8004970:	6062      	str	r2, [r4, #4]
 8004972:	04d9      	lsls	r1, r3, #19
 8004974:	6922      	ldr	r2, [r4, #16]
 8004976:	6022      	str	r2, [r4, #0]
 8004978:	d504      	bpl.n	8004984 <__sflush_r+0x7c>
 800497a:	1c42      	adds	r2, r0, #1
 800497c:	d101      	bne.n	8004982 <__sflush_r+0x7a>
 800497e:	682b      	ldr	r3, [r5, #0]
 8004980:	b903      	cbnz	r3, 8004984 <__sflush_r+0x7c>
 8004982:	6560      	str	r0, [r4, #84]	; 0x54
 8004984:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004986:	602f      	str	r7, [r5, #0]
 8004988:	2900      	cmp	r1, #0
 800498a:	d0ca      	beq.n	8004922 <__sflush_r+0x1a>
 800498c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004990:	4299      	cmp	r1, r3
 8004992:	d002      	beq.n	800499a <__sflush_r+0x92>
 8004994:	4628      	mov	r0, r5
 8004996:	f000 f9d5 	bl	8004d44 <_free_r>
 800499a:	2000      	movs	r0, #0
 800499c:	6360      	str	r0, [r4, #52]	; 0x34
 800499e:	e7c1      	b.n	8004924 <__sflush_r+0x1c>
 80049a0:	6a21      	ldr	r1, [r4, #32]
 80049a2:	2301      	movs	r3, #1
 80049a4:	4628      	mov	r0, r5
 80049a6:	47b0      	blx	r6
 80049a8:	1c41      	adds	r1, r0, #1
 80049aa:	d1c7      	bne.n	800493c <__sflush_r+0x34>
 80049ac:	682b      	ldr	r3, [r5, #0]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d0c4      	beq.n	800493c <__sflush_r+0x34>
 80049b2:	2b1d      	cmp	r3, #29
 80049b4:	d001      	beq.n	80049ba <__sflush_r+0xb2>
 80049b6:	2b16      	cmp	r3, #22
 80049b8:	d101      	bne.n	80049be <__sflush_r+0xb6>
 80049ba:	602f      	str	r7, [r5, #0]
 80049bc:	e7b1      	b.n	8004922 <__sflush_r+0x1a>
 80049be:	89a3      	ldrh	r3, [r4, #12]
 80049c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049c4:	81a3      	strh	r3, [r4, #12]
 80049c6:	e7ad      	b.n	8004924 <__sflush_r+0x1c>
 80049c8:	690f      	ldr	r7, [r1, #16]
 80049ca:	2f00      	cmp	r7, #0
 80049cc:	d0a9      	beq.n	8004922 <__sflush_r+0x1a>
 80049ce:	0793      	lsls	r3, r2, #30
 80049d0:	680e      	ldr	r6, [r1, #0]
 80049d2:	bf08      	it	eq
 80049d4:	694b      	ldreq	r3, [r1, #20]
 80049d6:	600f      	str	r7, [r1, #0]
 80049d8:	bf18      	it	ne
 80049da:	2300      	movne	r3, #0
 80049dc:	eba6 0807 	sub.w	r8, r6, r7
 80049e0:	608b      	str	r3, [r1, #8]
 80049e2:	f1b8 0f00 	cmp.w	r8, #0
 80049e6:	dd9c      	ble.n	8004922 <__sflush_r+0x1a>
 80049e8:	6a21      	ldr	r1, [r4, #32]
 80049ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80049ec:	4643      	mov	r3, r8
 80049ee:	463a      	mov	r2, r7
 80049f0:	4628      	mov	r0, r5
 80049f2:	47b0      	blx	r6
 80049f4:	2800      	cmp	r0, #0
 80049f6:	dc06      	bgt.n	8004a06 <__sflush_r+0xfe>
 80049f8:	89a3      	ldrh	r3, [r4, #12]
 80049fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049fe:	81a3      	strh	r3, [r4, #12]
 8004a00:	f04f 30ff 	mov.w	r0, #4294967295
 8004a04:	e78e      	b.n	8004924 <__sflush_r+0x1c>
 8004a06:	4407      	add	r7, r0
 8004a08:	eba8 0800 	sub.w	r8, r8, r0
 8004a0c:	e7e9      	b.n	80049e2 <__sflush_r+0xda>
 8004a0e:	bf00      	nop
 8004a10:	20400001 	.word	0x20400001

08004a14 <_fflush_r>:
 8004a14:	b538      	push	{r3, r4, r5, lr}
 8004a16:	690b      	ldr	r3, [r1, #16]
 8004a18:	4605      	mov	r5, r0
 8004a1a:	460c      	mov	r4, r1
 8004a1c:	b913      	cbnz	r3, 8004a24 <_fflush_r+0x10>
 8004a1e:	2500      	movs	r5, #0
 8004a20:	4628      	mov	r0, r5
 8004a22:	bd38      	pop	{r3, r4, r5, pc}
 8004a24:	b118      	cbz	r0, 8004a2e <_fflush_r+0x1a>
 8004a26:	6983      	ldr	r3, [r0, #24]
 8004a28:	b90b      	cbnz	r3, 8004a2e <_fflush_r+0x1a>
 8004a2a:	f000 f887 	bl	8004b3c <__sinit>
 8004a2e:	4b14      	ldr	r3, [pc, #80]	; (8004a80 <_fflush_r+0x6c>)
 8004a30:	429c      	cmp	r4, r3
 8004a32:	d11b      	bne.n	8004a6c <_fflush_r+0x58>
 8004a34:	686c      	ldr	r4, [r5, #4]
 8004a36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d0ef      	beq.n	8004a1e <_fflush_r+0xa>
 8004a3e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004a40:	07d0      	lsls	r0, r2, #31
 8004a42:	d404      	bmi.n	8004a4e <_fflush_r+0x3a>
 8004a44:	0599      	lsls	r1, r3, #22
 8004a46:	d402      	bmi.n	8004a4e <_fflush_r+0x3a>
 8004a48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a4a:	f000 f915 	bl	8004c78 <__retarget_lock_acquire_recursive>
 8004a4e:	4628      	mov	r0, r5
 8004a50:	4621      	mov	r1, r4
 8004a52:	f7ff ff59 	bl	8004908 <__sflush_r>
 8004a56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a58:	07da      	lsls	r2, r3, #31
 8004a5a:	4605      	mov	r5, r0
 8004a5c:	d4e0      	bmi.n	8004a20 <_fflush_r+0xc>
 8004a5e:	89a3      	ldrh	r3, [r4, #12]
 8004a60:	059b      	lsls	r3, r3, #22
 8004a62:	d4dd      	bmi.n	8004a20 <_fflush_r+0xc>
 8004a64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a66:	f000 f908 	bl	8004c7a <__retarget_lock_release_recursive>
 8004a6a:	e7d9      	b.n	8004a20 <_fflush_r+0xc>
 8004a6c:	4b05      	ldr	r3, [pc, #20]	; (8004a84 <_fflush_r+0x70>)
 8004a6e:	429c      	cmp	r4, r3
 8004a70:	d101      	bne.n	8004a76 <_fflush_r+0x62>
 8004a72:	68ac      	ldr	r4, [r5, #8]
 8004a74:	e7df      	b.n	8004a36 <_fflush_r+0x22>
 8004a76:	4b04      	ldr	r3, [pc, #16]	; (8004a88 <_fflush_r+0x74>)
 8004a78:	429c      	cmp	r4, r3
 8004a7a:	bf08      	it	eq
 8004a7c:	68ec      	ldreq	r4, [r5, #12]
 8004a7e:	e7da      	b.n	8004a36 <_fflush_r+0x22>
 8004a80:	080050f0 	.word	0x080050f0
 8004a84:	08005110 	.word	0x08005110
 8004a88:	080050d0 	.word	0x080050d0

08004a8c <std>:
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	b510      	push	{r4, lr}
 8004a90:	4604      	mov	r4, r0
 8004a92:	e9c0 3300 	strd	r3, r3, [r0]
 8004a96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004a9a:	6083      	str	r3, [r0, #8]
 8004a9c:	8181      	strh	r1, [r0, #12]
 8004a9e:	6643      	str	r3, [r0, #100]	; 0x64
 8004aa0:	81c2      	strh	r2, [r0, #14]
 8004aa2:	6183      	str	r3, [r0, #24]
 8004aa4:	4619      	mov	r1, r3
 8004aa6:	2208      	movs	r2, #8
 8004aa8:	305c      	adds	r0, #92	; 0x5c
 8004aaa:	f7ff fdef 	bl	800468c <memset>
 8004aae:	4b05      	ldr	r3, [pc, #20]	; (8004ac4 <std+0x38>)
 8004ab0:	6263      	str	r3, [r4, #36]	; 0x24
 8004ab2:	4b05      	ldr	r3, [pc, #20]	; (8004ac8 <std+0x3c>)
 8004ab4:	62a3      	str	r3, [r4, #40]	; 0x28
 8004ab6:	4b05      	ldr	r3, [pc, #20]	; (8004acc <std+0x40>)
 8004ab8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004aba:	4b05      	ldr	r3, [pc, #20]	; (8004ad0 <std+0x44>)
 8004abc:	6224      	str	r4, [r4, #32]
 8004abe:	6323      	str	r3, [r4, #48]	; 0x30
 8004ac0:	bd10      	pop	{r4, pc}
 8004ac2:	bf00      	nop
 8004ac4:	08004eb9 	.word	0x08004eb9
 8004ac8:	08004edb 	.word	0x08004edb
 8004acc:	08004f13 	.word	0x08004f13
 8004ad0:	08004f37 	.word	0x08004f37

08004ad4 <_cleanup_r>:
 8004ad4:	4901      	ldr	r1, [pc, #4]	; (8004adc <_cleanup_r+0x8>)
 8004ad6:	f000 b8af 	b.w	8004c38 <_fwalk_reent>
 8004ada:	bf00      	nop
 8004adc:	08004a15 	.word	0x08004a15

08004ae0 <__sfmoreglue>:
 8004ae0:	b570      	push	{r4, r5, r6, lr}
 8004ae2:	1e4a      	subs	r2, r1, #1
 8004ae4:	2568      	movs	r5, #104	; 0x68
 8004ae6:	4355      	muls	r5, r2
 8004ae8:	460e      	mov	r6, r1
 8004aea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004aee:	f000 f979 	bl	8004de4 <_malloc_r>
 8004af2:	4604      	mov	r4, r0
 8004af4:	b140      	cbz	r0, 8004b08 <__sfmoreglue+0x28>
 8004af6:	2100      	movs	r1, #0
 8004af8:	e9c0 1600 	strd	r1, r6, [r0]
 8004afc:	300c      	adds	r0, #12
 8004afe:	60a0      	str	r0, [r4, #8]
 8004b00:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004b04:	f7ff fdc2 	bl	800468c <memset>
 8004b08:	4620      	mov	r0, r4
 8004b0a:	bd70      	pop	{r4, r5, r6, pc}

08004b0c <__sfp_lock_acquire>:
 8004b0c:	4801      	ldr	r0, [pc, #4]	; (8004b14 <__sfp_lock_acquire+0x8>)
 8004b0e:	f000 b8b3 	b.w	8004c78 <__retarget_lock_acquire_recursive>
 8004b12:	bf00      	nop
 8004b14:	20012e9c 	.word	0x20012e9c

08004b18 <__sfp_lock_release>:
 8004b18:	4801      	ldr	r0, [pc, #4]	; (8004b20 <__sfp_lock_release+0x8>)
 8004b1a:	f000 b8ae 	b.w	8004c7a <__retarget_lock_release_recursive>
 8004b1e:	bf00      	nop
 8004b20:	20012e9c 	.word	0x20012e9c

08004b24 <__sinit_lock_acquire>:
 8004b24:	4801      	ldr	r0, [pc, #4]	; (8004b2c <__sinit_lock_acquire+0x8>)
 8004b26:	f000 b8a7 	b.w	8004c78 <__retarget_lock_acquire_recursive>
 8004b2a:	bf00      	nop
 8004b2c:	20012e97 	.word	0x20012e97

08004b30 <__sinit_lock_release>:
 8004b30:	4801      	ldr	r0, [pc, #4]	; (8004b38 <__sinit_lock_release+0x8>)
 8004b32:	f000 b8a2 	b.w	8004c7a <__retarget_lock_release_recursive>
 8004b36:	bf00      	nop
 8004b38:	20012e97 	.word	0x20012e97

08004b3c <__sinit>:
 8004b3c:	b510      	push	{r4, lr}
 8004b3e:	4604      	mov	r4, r0
 8004b40:	f7ff fff0 	bl	8004b24 <__sinit_lock_acquire>
 8004b44:	69a3      	ldr	r3, [r4, #24]
 8004b46:	b11b      	cbz	r3, 8004b50 <__sinit+0x14>
 8004b48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b4c:	f7ff bff0 	b.w	8004b30 <__sinit_lock_release>
 8004b50:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004b54:	6523      	str	r3, [r4, #80]	; 0x50
 8004b56:	4b13      	ldr	r3, [pc, #76]	; (8004ba4 <__sinit+0x68>)
 8004b58:	4a13      	ldr	r2, [pc, #76]	; (8004ba8 <__sinit+0x6c>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	62a2      	str	r2, [r4, #40]	; 0x28
 8004b5e:	42a3      	cmp	r3, r4
 8004b60:	bf04      	itt	eq
 8004b62:	2301      	moveq	r3, #1
 8004b64:	61a3      	streq	r3, [r4, #24]
 8004b66:	4620      	mov	r0, r4
 8004b68:	f000 f820 	bl	8004bac <__sfp>
 8004b6c:	6060      	str	r0, [r4, #4]
 8004b6e:	4620      	mov	r0, r4
 8004b70:	f000 f81c 	bl	8004bac <__sfp>
 8004b74:	60a0      	str	r0, [r4, #8]
 8004b76:	4620      	mov	r0, r4
 8004b78:	f000 f818 	bl	8004bac <__sfp>
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	60e0      	str	r0, [r4, #12]
 8004b80:	2104      	movs	r1, #4
 8004b82:	6860      	ldr	r0, [r4, #4]
 8004b84:	f7ff ff82 	bl	8004a8c <std>
 8004b88:	68a0      	ldr	r0, [r4, #8]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	2109      	movs	r1, #9
 8004b8e:	f7ff ff7d 	bl	8004a8c <std>
 8004b92:	68e0      	ldr	r0, [r4, #12]
 8004b94:	2202      	movs	r2, #2
 8004b96:	2112      	movs	r1, #18
 8004b98:	f7ff ff78 	bl	8004a8c <std>
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	61a3      	str	r3, [r4, #24]
 8004ba0:	e7d2      	b.n	8004b48 <__sinit+0xc>
 8004ba2:	bf00      	nop
 8004ba4:	080050cc 	.word	0x080050cc
 8004ba8:	08004ad5 	.word	0x08004ad5

08004bac <__sfp>:
 8004bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bae:	4607      	mov	r7, r0
 8004bb0:	f7ff ffac 	bl	8004b0c <__sfp_lock_acquire>
 8004bb4:	4b1e      	ldr	r3, [pc, #120]	; (8004c30 <__sfp+0x84>)
 8004bb6:	681e      	ldr	r6, [r3, #0]
 8004bb8:	69b3      	ldr	r3, [r6, #24]
 8004bba:	b913      	cbnz	r3, 8004bc2 <__sfp+0x16>
 8004bbc:	4630      	mov	r0, r6
 8004bbe:	f7ff ffbd 	bl	8004b3c <__sinit>
 8004bc2:	3648      	adds	r6, #72	; 0x48
 8004bc4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004bc8:	3b01      	subs	r3, #1
 8004bca:	d503      	bpl.n	8004bd4 <__sfp+0x28>
 8004bcc:	6833      	ldr	r3, [r6, #0]
 8004bce:	b30b      	cbz	r3, 8004c14 <__sfp+0x68>
 8004bd0:	6836      	ldr	r6, [r6, #0]
 8004bd2:	e7f7      	b.n	8004bc4 <__sfp+0x18>
 8004bd4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004bd8:	b9d5      	cbnz	r5, 8004c10 <__sfp+0x64>
 8004bda:	4b16      	ldr	r3, [pc, #88]	; (8004c34 <__sfp+0x88>)
 8004bdc:	60e3      	str	r3, [r4, #12]
 8004bde:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004be2:	6665      	str	r5, [r4, #100]	; 0x64
 8004be4:	f000 f847 	bl	8004c76 <__retarget_lock_init_recursive>
 8004be8:	f7ff ff96 	bl	8004b18 <__sfp_lock_release>
 8004bec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004bf0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004bf4:	6025      	str	r5, [r4, #0]
 8004bf6:	61a5      	str	r5, [r4, #24]
 8004bf8:	2208      	movs	r2, #8
 8004bfa:	4629      	mov	r1, r5
 8004bfc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004c00:	f7ff fd44 	bl	800468c <memset>
 8004c04:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004c08:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004c0c:	4620      	mov	r0, r4
 8004c0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c10:	3468      	adds	r4, #104	; 0x68
 8004c12:	e7d9      	b.n	8004bc8 <__sfp+0x1c>
 8004c14:	2104      	movs	r1, #4
 8004c16:	4638      	mov	r0, r7
 8004c18:	f7ff ff62 	bl	8004ae0 <__sfmoreglue>
 8004c1c:	4604      	mov	r4, r0
 8004c1e:	6030      	str	r0, [r6, #0]
 8004c20:	2800      	cmp	r0, #0
 8004c22:	d1d5      	bne.n	8004bd0 <__sfp+0x24>
 8004c24:	f7ff ff78 	bl	8004b18 <__sfp_lock_release>
 8004c28:	230c      	movs	r3, #12
 8004c2a:	603b      	str	r3, [r7, #0]
 8004c2c:	e7ee      	b.n	8004c0c <__sfp+0x60>
 8004c2e:	bf00      	nop
 8004c30:	080050cc 	.word	0x080050cc
 8004c34:	ffff0001 	.word	0xffff0001

08004c38 <_fwalk_reent>:
 8004c38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c3c:	4606      	mov	r6, r0
 8004c3e:	4688      	mov	r8, r1
 8004c40:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004c44:	2700      	movs	r7, #0
 8004c46:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004c4a:	f1b9 0901 	subs.w	r9, r9, #1
 8004c4e:	d505      	bpl.n	8004c5c <_fwalk_reent+0x24>
 8004c50:	6824      	ldr	r4, [r4, #0]
 8004c52:	2c00      	cmp	r4, #0
 8004c54:	d1f7      	bne.n	8004c46 <_fwalk_reent+0xe>
 8004c56:	4638      	mov	r0, r7
 8004c58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c5c:	89ab      	ldrh	r3, [r5, #12]
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d907      	bls.n	8004c72 <_fwalk_reent+0x3a>
 8004c62:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004c66:	3301      	adds	r3, #1
 8004c68:	d003      	beq.n	8004c72 <_fwalk_reent+0x3a>
 8004c6a:	4629      	mov	r1, r5
 8004c6c:	4630      	mov	r0, r6
 8004c6e:	47c0      	blx	r8
 8004c70:	4307      	orrs	r7, r0
 8004c72:	3568      	adds	r5, #104	; 0x68
 8004c74:	e7e9      	b.n	8004c4a <_fwalk_reent+0x12>

08004c76 <__retarget_lock_init_recursive>:
 8004c76:	4770      	bx	lr

08004c78 <__retarget_lock_acquire_recursive>:
 8004c78:	4770      	bx	lr

08004c7a <__retarget_lock_release_recursive>:
 8004c7a:	4770      	bx	lr

08004c7c <__swhatbuf_r>:
 8004c7c:	b570      	push	{r4, r5, r6, lr}
 8004c7e:	460e      	mov	r6, r1
 8004c80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c84:	2900      	cmp	r1, #0
 8004c86:	b096      	sub	sp, #88	; 0x58
 8004c88:	4614      	mov	r4, r2
 8004c8a:	461d      	mov	r5, r3
 8004c8c:	da07      	bge.n	8004c9e <__swhatbuf_r+0x22>
 8004c8e:	2300      	movs	r3, #0
 8004c90:	602b      	str	r3, [r5, #0]
 8004c92:	89b3      	ldrh	r3, [r6, #12]
 8004c94:	061a      	lsls	r2, r3, #24
 8004c96:	d410      	bmi.n	8004cba <__swhatbuf_r+0x3e>
 8004c98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c9c:	e00e      	b.n	8004cbc <__swhatbuf_r+0x40>
 8004c9e:	466a      	mov	r2, sp
 8004ca0:	f000 f970 	bl	8004f84 <_fstat_r>
 8004ca4:	2800      	cmp	r0, #0
 8004ca6:	dbf2      	blt.n	8004c8e <__swhatbuf_r+0x12>
 8004ca8:	9a01      	ldr	r2, [sp, #4]
 8004caa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004cae:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004cb2:	425a      	negs	r2, r3
 8004cb4:	415a      	adcs	r2, r3
 8004cb6:	602a      	str	r2, [r5, #0]
 8004cb8:	e7ee      	b.n	8004c98 <__swhatbuf_r+0x1c>
 8004cba:	2340      	movs	r3, #64	; 0x40
 8004cbc:	2000      	movs	r0, #0
 8004cbe:	6023      	str	r3, [r4, #0]
 8004cc0:	b016      	add	sp, #88	; 0x58
 8004cc2:	bd70      	pop	{r4, r5, r6, pc}

08004cc4 <__smakebuf_r>:
 8004cc4:	898b      	ldrh	r3, [r1, #12]
 8004cc6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004cc8:	079d      	lsls	r5, r3, #30
 8004cca:	4606      	mov	r6, r0
 8004ccc:	460c      	mov	r4, r1
 8004cce:	d507      	bpl.n	8004ce0 <__smakebuf_r+0x1c>
 8004cd0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004cd4:	6023      	str	r3, [r4, #0]
 8004cd6:	6123      	str	r3, [r4, #16]
 8004cd8:	2301      	movs	r3, #1
 8004cda:	6163      	str	r3, [r4, #20]
 8004cdc:	b002      	add	sp, #8
 8004cde:	bd70      	pop	{r4, r5, r6, pc}
 8004ce0:	ab01      	add	r3, sp, #4
 8004ce2:	466a      	mov	r2, sp
 8004ce4:	f7ff ffca 	bl	8004c7c <__swhatbuf_r>
 8004ce8:	9900      	ldr	r1, [sp, #0]
 8004cea:	4605      	mov	r5, r0
 8004cec:	4630      	mov	r0, r6
 8004cee:	f000 f879 	bl	8004de4 <_malloc_r>
 8004cf2:	b948      	cbnz	r0, 8004d08 <__smakebuf_r+0x44>
 8004cf4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004cf8:	059a      	lsls	r2, r3, #22
 8004cfa:	d4ef      	bmi.n	8004cdc <__smakebuf_r+0x18>
 8004cfc:	f023 0303 	bic.w	r3, r3, #3
 8004d00:	f043 0302 	orr.w	r3, r3, #2
 8004d04:	81a3      	strh	r3, [r4, #12]
 8004d06:	e7e3      	b.n	8004cd0 <__smakebuf_r+0xc>
 8004d08:	4b0d      	ldr	r3, [pc, #52]	; (8004d40 <__smakebuf_r+0x7c>)
 8004d0a:	62b3      	str	r3, [r6, #40]	; 0x28
 8004d0c:	89a3      	ldrh	r3, [r4, #12]
 8004d0e:	6020      	str	r0, [r4, #0]
 8004d10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d14:	81a3      	strh	r3, [r4, #12]
 8004d16:	9b00      	ldr	r3, [sp, #0]
 8004d18:	6163      	str	r3, [r4, #20]
 8004d1a:	9b01      	ldr	r3, [sp, #4]
 8004d1c:	6120      	str	r0, [r4, #16]
 8004d1e:	b15b      	cbz	r3, 8004d38 <__smakebuf_r+0x74>
 8004d20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d24:	4630      	mov	r0, r6
 8004d26:	f000 f93f 	bl	8004fa8 <_isatty_r>
 8004d2a:	b128      	cbz	r0, 8004d38 <__smakebuf_r+0x74>
 8004d2c:	89a3      	ldrh	r3, [r4, #12]
 8004d2e:	f023 0303 	bic.w	r3, r3, #3
 8004d32:	f043 0301 	orr.w	r3, r3, #1
 8004d36:	81a3      	strh	r3, [r4, #12]
 8004d38:	89a0      	ldrh	r0, [r4, #12]
 8004d3a:	4305      	orrs	r5, r0
 8004d3c:	81a5      	strh	r5, [r4, #12]
 8004d3e:	e7cd      	b.n	8004cdc <__smakebuf_r+0x18>
 8004d40:	08004ad5 	.word	0x08004ad5

08004d44 <_free_r>:
 8004d44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004d46:	2900      	cmp	r1, #0
 8004d48:	d048      	beq.n	8004ddc <_free_r+0x98>
 8004d4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d4e:	9001      	str	r0, [sp, #4]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	f1a1 0404 	sub.w	r4, r1, #4
 8004d56:	bfb8      	it	lt
 8004d58:	18e4      	addlt	r4, r4, r3
 8004d5a:	f000 f947 	bl	8004fec <__malloc_lock>
 8004d5e:	4a20      	ldr	r2, [pc, #128]	; (8004de0 <_free_r+0x9c>)
 8004d60:	9801      	ldr	r0, [sp, #4]
 8004d62:	6813      	ldr	r3, [r2, #0]
 8004d64:	4615      	mov	r5, r2
 8004d66:	b933      	cbnz	r3, 8004d76 <_free_r+0x32>
 8004d68:	6063      	str	r3, [r4, #4]
 8004d6a:	6014      	str	r4, [r2, #0]
 8004d6c:	b003      	add	sp, #12
 8004d6e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d72:	f000 b941 	b.w	8004ff8 <__malloc_unlock>
 8004d76:	42a3      	cmp	r3, r4
 8004d78:	d90b      	bls.n	8004d92 <_free_r+0x4e>
 8004d7a:	6821      	ldr	r1, [r4, #0]
 8004d7c:	1862      	adds	r2, r4, r1
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	bf04      	itt	eq
 8004d82:	681a      	ldreq	r2, [r3, #0]
 8004d84:	685b      	ldreq	r3, [r3, #4]
 8004d86:	6063      	str	r3, [r4, #4]
 8004d88:	bf04      	itt	eq
 8004d8a:	1852      	addeq	r2, r2, r1
 8004d8c:	6022      	streq	r2, [r4, #0]
 8004d8e:	602c      	str	r4, [r5, #0]
 8004d90:	e7ec      	b.n	8004d6c <_free_r+0x28>
 8004d92:	461a      	mov	r2, r3
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	b10b      	cbz	r3, 8004d9c <_free_r+0x58>
 8004d98:	42a3      	cmp	r3, r4
 8004d9a:	d9fa      	bls.n	8004d92 <_free_r+0x4e>
 8004d9c:	6811      	ldr	r1, [r2, #0]
 8004d9e:	1855      	adds	r5, r2, r1
 8004da0:	42a5      	cmp	r5, r4
 8004da2:	d10b      	bne.n	8004dbc <_free_r+0x78>
 8004da4:	6824      	ldr	r4, [r4, #0]
 8004da6:	4421      	add	r1, r4
 8004da8:	1854      	adds	r4, r2, r1
 8004daa:	42a3      	cmp	r3, r4
 8004dac:	6011      	str	r1, [r2, #0]
 8004dae:	d1dd      	bne.n	8004d6c <_free_r+0x28>
 8004db0:	681c      	ldr	r4, [r3, #0]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	6053      	str	r3, [r2, #4]
 8004db6:	4421      	add	r1, r4
 8004db8:	6011      	str	r1, [r2, #0]
 8004dba:	e7d7      	b.n	8004d6c <_free_r+0x28>
 8004dbc:	d902      	bls.n	8004dc4 <_free_r+0x80>
 8004dbe:	230c      	movs	r3, #12
 8004dc0:	6003      	str	r3, [r0, #0]
 8004dc2:	e7d3      	b.n	8004d6c <_free_r+0x28>
 8004dc4:	6825      	ldr	r5, [r4, #0]
 8004dc6:	1961      	adds	r1, r4, r5
 8004dc8:	428b      	cmp	r3, r1
 8004dca:	bf04      	itt	eq
 8004dcc:	6819      	ldreq	r1, [r3, #0]
 8004dce:	685b      	ldreq	r3, [r3, #4]
 8004dd0:	6063      	str	r3, [r4, #4]
 8004dd2:	bf04      	itt	eq
 8004dd4:	1949      	addeq	r1, r1, r5
 8004dd6:	6021      	streq	r1, [r4, #0]
 8004dd8:	6054      	str	r4, [r2, #4]
 8004dda:	e7c7      	b.n	8004d6c <_free_r+0x28>
 8004ddc:	b003      	add	sp, #12
 8004dde:	bd30      	pop	{r4, r5, pc}
 8004de0:	20012dfc 	.word	0x20012dfc

08004de4 <_malloc_r>:
 8004de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004de6:	1ccd      	adds	r5, r1, #3
 8004de8:	f025 0503 	bic.w	r5, r5, #3
 8004dec:	3508      	adds	r5, #8
 8004dee:	2d0c      	cmp	r5, #12
 8004df0:	bf38      	it	cc
 8004df2:	250c      	movcc	r5, #12
 8004df4:	2d00      	cmp	r5, #0
 8004df6:	4606      	mov	r6, r0
 8004df8:	db01      	blt.n	8004dfe <_malloc_r+0x1a>
 8004dfa:	42a9      	cmp	r1, r5
 8004dfc:	d903      	bls.n	8004e06 <_malloc_r+0x22>
 8004dfe:	230c      	movs	r3, #12
 8004e00:	6033      	str	r3, [r6, #0]
 8004e02:	2000      	movs	r0, #0
 8004e04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e06:	f000 f8f1 	bl	8004fec <__malloc_lock>
 8004e0a:	4921      	ldr	r1, [pc, #132]	; (8004e90 <_malloc_r+0xac>)
 8004e0c:	680a      	ldr	r2, [r1, #0]
 8004e0e:	4614      	mov	r4, r2
 8004e10:	b99c      	cbnz	r4, 8004e3a <_malloc_r+0x56>
 8004e12:	4f20      	ldr	r7, [pc, #128]	; (8004e94 <_malloc_r+0xb0>)
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	b923      	cbnz	r3, 8004e22 <_malloc_r+0x3e>
 8004e18:	4621      	mov	r1, r4
 8004e1a:	4630      	mov	r0, r6
 8004e1c:	f000 f83c 	bl	8004e98 <_sbrk_r>
 8004e20:	6038      	str	r0, [r7, #0]
 8004e22:	4629      	mov	r1, r5
 8004e24:	4630      	mov	r0, r6
 8004e26:	f000 f837 	bl	8004e98 <_sbrk_r>
 8004e2a:	1c43      	adds	r3, r0, #1
 8004e2c:	d123      	bne.n	8004e76 <_malloc_r+0x92>
 8004e2e:	230c      	movs	r3, #12
 8004e30:	6033      	str	r3, [r6, #0]
 8004e32:	4630      	mov	r0, r6
 8004e34:	f000 f8e0 	bl	8004ff8 <__malloc_unlock>
 8004e38:	e7e3      	b.n	8004e02 <_malloc_r+0x1e>
 8004e3a:	6823      	ldr	r3, [r4, #0]
 8004e3c:	1b5b      	subs	r3, r3, r5
 8004e3e:	d417      	bmi.n	8004e70 <_malloc_r+0x8c>
 8004e40:	2b0b      	cmp	r3, #11
 8004e42:	d903      	bls.n	8004e4c <_malloc_r+0x68>
 8004e44:	6023      	str	r3, [r4, #0]
 8004e46:	441c      	add	r4, r3
 8004e48:	6025      	str	r5, [r4, #0]
 8004e4a:	e004      	b.n	8004e56 <_malloc_r+0x72>
 8004e4c:	6863      	ldr	r3, [r4, #4]
 8004e4e:	42a2      	cmp	r2, r4
 8004e50:	bf0c      	ite	eq
 8004e52:	600b      	streq	r3, [r1, #0]
 8004e54:	6053      	strne	r3, [r2, #4]
 8004e56:	4630      	mov	r0, r6
 8004e58:	f000 f8ce 	bl	8004ff8 <__malloc_unlock>
 8004e5c:	f104 000b 	add.w	r0, r4, #11
 8004e60:	1d23      	adds	r3, r4, #4
 8004e62:	f020 0007 	bic.w	r0, r0, #7
 8004e66:	1ac2      	subs	r2, r0, r3
 8004e68:	d0cc      	beq.n	8004e04 <_malloc_r+0x20>
 8004e6a:	1a1b      	subs	r3, r3, r0
 8004e6c:	50a3      	str	r3, [r4, r2]
 8004e6e:	e7c9      	b.n	8004e04 <_malloc_r+0x20>
 8004e70:	4622      	mov	r2, r4
 8004e72:	6864      	ldr	r4, [r4, #4]
 8004e74:	e7cc      	b.n	8004e10 <_malloc_r+0x2c>
 8004e76:	1cc4      	adds	r4, r0, #3
 8004e78:	f024 0403 	bic.w	r4, r4, #3
 8004e7c:	42a0      	cmp	r0, r4
 8004e7e:	d0e3      	beq.n	8004e48 <_malloc_r+0x64>
 8004e80:	1a21      	subs	r1, r4, r0
 8004e82:	4630      	mov	r0, r6
 8004e84:	f000 f808 	bl	8004e98 <_sbrk_r>
 8004e88:	3001      	adds	r0, #1
 8004e8a:	d1dd      	bne.n	8004e48 <_malloc_r+0x64>
 8004e8c:	e7cf      	b.n	8004e2e <_malloc_r+0x4a>
 8004e8e:	bf00      	nop
 8004e90:	20012dfc 	.word	0x20012dfc
 8004e94:	20012e00 	.word	0x20012e00

08004e98 <_sbrk_r>:
 8004e98:	b538      	push	{r3, r4, r5, lr}
 8004e9a:	4d06      	ldr	r5, [pc, #24]	; (8004eb4 <_sbrk_r+0x1c>)
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	4604      	mov	r4, r0
 8004ea0:	4608      	mov	r0, r1
 8004ea2:	602b      	str	r3, [r5, #0]
 8004ea4:	f000 f8c0 	bl	8005028 <_sbrk>
 8004ea8:	1c43      	adds	r3, r0, #1
 8004eaa:	d102      	bne.n	8004eb2 <_sbrk_r+0x1a>
 8004eac:	682b      	ldr	r3, [r5, #0]
 8004eae:	b103      	cbz	r3, 8004eb2 <_sbrk_r+0x1a>
 8004eb0:	6023      	str	r3, [r4, #0]
 8004eb2:	bd38      	pop	{r3, r4, r5, pc}
 8004eb4:	20012ea0 	.word	0x20012ea0

08004eb8 <__sread>:
 8004eb8:	b510      	push	{r4, lr}
 8004eba:	460c      	mov	r4, r1
 8004ebc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ec0:	f000 f8a0 	bl	8005004 <_read_r>
 8004ec4:	2800      	cmp	r0, #0
 8004ec6:	bfab      	itete	ge
 8004ec8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004eca:	89a3      	ldrhlt	r3, [r4, #12]
 8004ecc:	181b      	addge	r3, r3, r0
 8004ece:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004ed2:	bfac      	ite	ge
 8004ed4:	6563      	strge	r3, [r4, #84]	; 0x54
 8004ed6:	81a3      	strhlt	r3, [r4, #12]
 8004ed8:	bd10      	pop	{r4, pc}

08004eda <__swrite>:
 8004eda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ede:	461f      	mov	r7, r3
 8004ee0:	898b      	ldrh	r3, [r1, #12]
 8004ee2:	05db      	lsls	r3, r3, #23
 8004ee4:	4605      	mov	r5, r0
 8004ee6:	460c      	mov	r4, r1
 8004ee8:	4616      	mov	r6, r2
 8004eea:	d505      	bpl.n	8004ef8 <__swrite+0x1e>
 8004eec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ef0:	2302      	movs	r3, #2
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f000 f868 	bl	8004fc8 <_lseek_r>
 8004ef8:	89a3      	ldrh	r3, [r4, #12]
 8004efa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004efe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f02:	81a3      	strh	r3, [r4, #12]
 8004f04:	4632      	mov	r2, r6
 8004f06:	463b      	mov	r3, r7
 8004f08:	4628      	mov	r0, r5
 8004f0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f0e:	f000 b817 	b.w	8004f40 <_write_r>

08004f12 <__sseek>:
 8004f12:	b510      	push	{r4, lr}
 8004f14:	460c      	mov	r4, r1
 8004f16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f1a:	f000 f855 	bl	8004fc8 <_lseek_r>
 8004f1e:	1c43      	adds	r3, r0, #1
 8004f20:	89a3      	ldrh	r3, [r4, #12]
 8004f22:	bf15      	itete	ne
 8004f24:	6560      	strne	r0, [r4, #84]	; 0x54
 8004f26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004f2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004f2e:	81a3      	strheq	r3, [r4, #12]
 8004f30:	bf18      	it	ne
 8004f32:	81a3      	strhne	r3, [r4, #12]
 8004f34:	bd10      	pop	{r4, pc}

08004f36 <__sclose>:
 8004f36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f3a:	f000 b813 	b.w	8004f64 <_close_r>
	...

08004f40 <_write_r>:
 8004f40:	b538      	push	{r3, r4, r5, lr}
 8004f42:	4d07      	ldr	r5, [pc, #28]	; (8004f60 <_write_r+0x20>)
 8004f44:	4604      	mov	r4, r0
 8004f46:	4608      	mov	r0, r1
 8004f48:	4611      	mov	r1, r2
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	602a      	str	r2, [r5, #0]
 8004f4e:	461a      	mov	r2, r3
 8004f50:	f7fb fdf3 	bl	8000b3a <_write>
 8004f54:	1c43      	adds	r3, r0, #1
 8004f56:	d102      	bne.n	8004f5e <_write_r+0x1e>
 8004f58:	682b      	ldr	r3, [r5, #0]
 8004f5a:	b103      	cbz	r3, 8004f5e <_write_r+0x1e>
 8004f5c:	6023      	str	r3, [r4, #0]
 8004f5e:	bd38      	pop	{r3, r4, r5, pc}
 8004f60:	20012ea0 	.word	0x20012ea0

08004f64 <_close_r>:
 8004f64:	b538      	push	{r3, r4, r5, lr}
 8004f66:	4d06      	ldr	r5, [pc, #24]	; (8004f80 <_close_r+0x1c>)
 8004f68:	2300      	movs	r3, #0
 8004f6a:	4604      	mov	r4, r0
 8004f6c:	4608      	mov	r0, r1
 8004f6e:	602b      	str	r3, [r5, #0]
 8004f70:	f7fb fdff 	bl	8000b72 <_close>
 8004f74:	1c43      	adds	r3, r0, #1
 8004f76:	d102      	bne.n	8004f7e <_close_r+0x1a>
 8004f78:	682b      	ldr	r3, [r5, #0]
 8004f7a:	b103      	cbz	r3, 8004f7e <_close_r+0x1a>
 8004f7c:	6023      	str	r3, [r4, #0]
 8004f7e:	bd38      	pop	{r3, r4, r5, pc}
 8004f80:	20012ea0 	.word	0x20012ea0

08004f84 <_fstat_r>:
 8004f84:	b538      	push	{r3, r4, r5, lr}
 8004f86:	4d07      	ldr	r5, [pc, #28]	; (8004fa4 <_fstat_r+0x20>)
 8004f88:	2300      	movs	r3, #0
 8004f8a:	4604      	mov	r4, r0
 8004f8c:	4608      	mov	r0, r1
 8004f8e:	4611      	mov	r1, r2
 8004f90:	602b      	str	r3, [r5, #0]
 8004f92:	f7fb fdfa 	bl	8000b8a <_fstat>
 8004f96:	1c43      	adds	r3, r0, #1
 8004f98:	d102      	bne.n	8004fa0 <_fstat_r+0x1c>
 8004f9a:	682b      	ldr	r3, [r5, #0]
 8004f9c:	b103      	cbz	r3, 8004fa0 <_fstat_r+0x1c>
 8004f9e:	6023      	str	r3, [r4, #0]
 8004fa0:	bd38      	pop	{r3, r4, r5, pc}
 8004fa2:	bf00      	nop
 8004fa4:	20012ea0 	.word	0x20012ea0

08004fa8 <_isatty_r>:
 8004fa8:	b538      	push	{r3, r4, r5, lr}
 8004faa:	4d06      	ldr	r5, [pc, #24]	; (8004fc4 <_isatty_r+0x1c>)
 8004fac:	2300      	movs	r3, #0
 8004fae:	4604      	mov	r4, r0
 8004fb0:	4608      	mov	r0, r1
 8004fb2:	602b      	str	r3, [r5, #0]
 8004fb4:	f7fb fdf9 	bl	8000baa <_isatty>
 8004fb8:	1c43      	adds	r3, r0, #1
 8004fba:	d102      	bne.n	8004fc2 <_isatty_r+0x1a>
 8004fbc:	682b      	ldr	r3, [r5, #0]
 8004fbe:	b103      	cbz	r3, 8004fc2 <_isatty_r+0x1a>
 8004fc0:	6023      	str	r3, [r4, #0]
 8004fc2:	bd38      	pop	{r3, r4, r5, pc}
 8004fc4:	20012ea0 	.word	0x20012ea0

08004fc8 <_lseek_r>:
 8004fc8:	b538      	push	{r3, r4, r5, lr}
 8004fca:	4d07      	ldr	r5, [pc, #28]	; (8004fe8 <_lseek_r+0x20>)
 8004fcc:	4604      	mov	r4, r0
 8004fce:	4608      	mov	r0, r1
 8004fd0:	4611      	mov	r1, r2
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	602a      	str	r2, [r5, #0]
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	f7fb fdf2 	bl	8000bc0 <_lseek>
 8004fdc:	1c43      	adds	r3, r0, #1
 8004fde:	d102      	bne.n	8004fe6 <_lseek_r+0x1e>
 8004fe0:	682b      	ldr	r3, [r5, #0]
 8004fe2:	b103      	cbz	r3, 8004fe6 <_lseek_r+0x1e>
 8004fe4:	6023      	str	r3, [r4, #0]
 8004fe6:	bd38      	pop	{r3, r4, r5, pc}
 8004fe8:	20012ea0 	.word	0x20012ea0

08004fec <__malloc_lock>:
 8004fec:	4801      	ldr	r0, [pc, #4]	; (8004ff4 <__malloc_lock+0x8>)
 8004fee:	f7ff be43 	b.w	8004c78 <__retarget_lock_acquire_recursive>
 8004ff2:	bf00      	nop
 8004ff4:	20012e98 	.word	0x20012e98

08004ff8 <__malloc_unlock>:
 8004ff8:	4801      	ldr	r0, [pc, #4]	; (8005000 <__malloc_unlock+0x8>)
 8004ffa:	f7ff be3e 	b.w	8004c7a <__retarget_lock_release_recursive>
 8004ffe:	bf00      	nop
 8005000:	20012e98 	.word	0x20012e98

08005004 <_read_r>:
 8005004:	b538      	push	{r3, r4, r5, lr}
 8005006:	4d07      	ldr	r5, [pc, #28]	; (8005024 <_read_r+0x20>)
 8005008:	4604      	mov	r4, r0
 800500a:	4608      	mov	r0, r1
 800500c:	4611      	mov	r1, r2
 800500e:	2200      	movs	r2, #0
 8005010:	602a      	str	r2, [r5, #0]
 8005012:	461a      	mov	r2, r3
 8005014:	f7fb fd74 	bl	8000b00 <_read>
 8005018:	1c43      	adds	r3, r0, #1
 800501a:	d102      	bne.n	8005022 <_read_r+0x1e>
 800501c:	682b      	ldr	r3, [r5, #0]
 800501e:	b103      	cbz	r3, 8005022 <_read_r+0x1e>
 8005020:	6023      	str	r3, [r4, #0]
 8005022:	bd38      	pop	{r3, r4, r5, pc}
 8005024:	20012ea0 	.word	0x20012ea0

08005028 <_sbrk>:
 8005028:	4b04      	ldr	r3, [pc, #16]	; (800503c <_sbrk+0x14>)
 800502a:	6819      	ldr	r1, [r3, #0]
 800502c:	4602      	mov	r2, r0
 800502e:	b909      	cbnz	r1, 8005034 <_sbrk+0xc>
 8005030:	4903      	ldr	r1, [pc, #12]	; (8005040 <_sbrk+0x18>)
 8005032:	6019      	str	r1, [r3, #0]
 8005034:	6818      	ldr	r0, [r3, #0]
 8005036:	4402      	add	r2, r0
 8005038:	601a      	str	r2, [r3, #0]
 800503a:	4770      	bx	lr
 800503c:	20012e04 	.word	0x20012e04
 8005040:	20012ea8 	.word	0x20012ea8

08005044 <_init>:
 8005044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005046:	bf00      	nop
 8005048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800504a:	bc08      	pop	{r3}
 800504c:	469e      	mov	lr, r3
 800504e:	4770      	bx	lr

08005050 <_fini>:
 8005050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005052:	bf00      	nop
 8005054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005056:	bc08      	pop	{r3}
 8005058:	469e      	mov	lr, r3
 800505a:	4770      	bx	lr
