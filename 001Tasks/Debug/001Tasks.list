
001Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f4c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  080070dc  080070dc  000170dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007290  08007290  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08007290  08007290  00017290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007298  08007298  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007298  08007298  00017298  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800729c  0800729c  0001729c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080072a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001a8a4  20000078  08007318  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001a91c  08007318  0002a91c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a34d  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035c7  00000000  00000000  0003a3f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013a8  00000000  00000000  0003d9c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001210  00000000  00000000  0003ed68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024697  00000000  00000000  0003ff78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015816  00000000  00000000  0006460f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d888a  00000000  00000000  00079e25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001526af  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005824  00000000  00000000  00152704  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080070c4 	.word	0x080070c4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	080070c4 	.word	0x080070c4

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	2001a864 	.word	0x2001a864

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b96e 	b.w	8000558 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	4604      	mov	r4, r0
 800029c:	468c      	mov	ip, r1
 800029e:	2b00      	cmp	r3, #0
 80002a0:	f040 8083 	bne.w	80003aa <__udivmoddi4+0x116>
 80002a4:	428a      	cmp	r2, r1
 80002a6:	4617      	mov	r7, r2
 80002a8:	d947      	bls.n	800033a <__udivmoddi4+0xa6>
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	b142      	cbz	r2, 80002c2 <__udivmoddi4+0x2e>
 80002b0:	f1c2 0020 	rsb	r0, r2, #32
 80002b4:	fa24 f000 	lsr.w	r0, r4, r0
 80002b8:	4091      	lsls	r1, r2
 80002ba:	4097      	lsls	r7, r2
 80002bc:	ea40 0c01 	orr.w	ip, r0, r1
 80002c0:	4094      	lsls	r4, r2
 80002c2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002c6:	0c23      	lsrs	r3, r4, #16
 80002c8:	fbbc f6f8 	udiv	r6, ip, r8
 80002cc:	fa1f fe87 	uxth.w	lr, r7
 80002d0:	fb08 c116 	mls	r1, r8, r6, ip
 80002d4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002d8:	fb06 f10e 	mul.w	r1, r6, lr
 80002dc:	4299      	cmp	r1, r3
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x60>
 80002e0:	18fb      	adds	r3, r7, r3
 80002e2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002e6:	f080 8119 	bcs.w	800051c <__udivmoddi4+0x288>
 80002ea:	4299      	cmp	r1, r3
 80002ec:	f240 8116 	bls.w	800051c <__udivmoddi4+0x288>
 80002f0:	3e02      	subs	r6, #2
 80002f2:	443b      	add	r3, r7
 80002f4:	1a5b      	subs	r3, r3, r1
 80002f6:	b2a4      	uxth	r4, r4
 80002f8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002fc:	fb08 3310 	mls	r3, r8, r0, r3
 8000300:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000304:	fb00 fe0e 	mul.w	lr, r0, lr
 8000308:	45a6      	cmp	lr, r4
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x8c>
 800030c:	193c      	adds	r4, r7, r4
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000312:	f080 8105 	bcs.w	8000520 <__udivmoddi4+0x28c>
 8000316:	45a6      	cmp	lr, r4
 8000318:	f240 8102 	bls.w	8000520 <__udivmoddi4+0x28c>
 800031c:	3802      	subs	r0, #2
 800031e:	443c      	add	r4, r7
 8000320:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000324:	eba4 040e 	sub.w	r4, r4, lr
 8000328:	2600      	movs	r6, #0
 800032a:	b11d      	cbz	r5, 8000334 <__udivmoddi4+0xa0>
 800032c:	40d4      	lsrs	r4, r2
 800032e:	2300      	movs	r3, #0
 8000330:	e9c5 4300 	strd	r4, r3, [r5]
 8000334:	4631      	mov	r1, r6
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	b902      	cbnz	r2, 800033e <__udivmoddi4+0xaa>
 800033c:	deff      	udf	#255	; 0xff
 800033e:	fab2 f282 	clz	r2, r2
 8000342:	2a00      	cmp	r2, #0
 8000344:	d150      	bne.n	80003e8 <__udivmoddi4+0x154>
 8000346:	1bcb      	subs	r3, r1, r7
 8000348:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800034c:	fa1f f887 	uxth.w	r8, r7
 8000350:	2601      	movs	r6, #1
 8000352:	fbb3 fcfe 	udiv	ip, r3, lr
 8000356:	0c21      	lsrs	r1, r4, #16
 8000358:	fb0e 331c 	mls	r3, lr, ip, r3
 800035c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000360:	fb08 f30c 	mul.w	r3, r8, ip
 8000364:	428b      	cmp	r3, r1
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0xe4>
 8000368:	1879      	adds	r1, r7, r1
 800036a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0xe2>
 8000370:	428b      	cmp	r3, r1
 8000372:	f200 80e9 	bhi.w	8000548 <__udivmoddi4+0x2b4>
 8000376:	4684      	mov	ip, r0
 8000378:	1ac9      	subs	r1, r1, r3
 800037a:	b2a3      	uxth	r3, r4
 800037c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000380:	fb0e 1110 	mls	r1, lr, r0, r1
 8000384:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000388:	fb08 f800 	mul.w	r8, r8, r0
 800038c:	45a0      	cmp	r8, r4
 800038e:	d907      	bls.n	80003a0 <__udivmoddi4+0x10c>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f100 33ff 	add.w	r3, r0, #4294967295
 8000396:	d202      	bcs.n	800039e <__udivmoddi4+0x10a>
 8000398:	45a0      	cmp	r8, r4
 800039a:	f200 80d9 	bhi.w	8000550 <__udivmoddi4+0x2bc>
 800039e:	4618      	mov	r0, r3
 80003a0:	eba4 0408 	sub.w	r4, r4, r8
 80003a4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003a8:	e7bf      	b.n	800032a <__udivmoddi4+0x96>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d909      	bls.n	80003c2 <__udivmoddi4+0x12e>
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	f000 80b1 	beq.w	8000516 <__udivmoddi4+0x282>
 80003b4:	2600      	movs	r6, #0
 80003b6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ba:	4630      	mov	r0, r6
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	fab3 f683 	clz	r6, r3
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d14a      	bne.n	8000460 <__udivmoddi4+0x1cc>
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0x140>
 80003ce:	4282      	cmp	r2, r0
 80003d0:	f200 80b8 	bhi.w	8000544 <__udivmoddi4+0x2b0>
 80003d4:	1a84      	subs	r4, r0, r2
 80003d6:	eb61 0103 	sbc.w	r1, r1, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	468c      	mov	ip, r1
 80003de:	2d00      	cmp	r5, #0
 80003e0:	d0a8      	beq.n	8000334 <__udivmoddi4+0xa0>
 80003e2:	e9c5 4c00 	strd	r4, ip, [r5]
 80003e6:	e7a5      	b.n	8000334 <__udivmoddi4+0xa0>
 80003e8:	f1c2 0320 	rsb	r3, r2, #32
 80003ec:	fa20 f603 	lsr.w	r6, r0, r3
 80003f0:	4097      	lsls	r7, r2
 80003f2:	fa01 f002 	lsl.w	r0, r1, r2
 80003f6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003fa:	40d9      	lsrs	r1, r3
 80003fc:	4330      	orrs	r0, r6
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	fbb1 f6fe 	udiv	r6, r1, lr
 8000404:	fa1f f887 	uxth.w	r8, r7
 8000408:	fb0e 1116 	mls	r1, lr, r6, r1
 800040c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000410:	fb06 f108 	mul.w	r1, r6, r8
 8000414:	4299      	cmp	r1, r3
 8000416:	fa04 f402 	lsl.w	r4, r4, r2
 800041a:	d909      	bls.n	8000430 <__udivmoddi4+0x19c>
 800041c:	18fb      	adds	r3, r7, r3
 800041e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000422:	f080 808d 	bcs.w	8000540 <__udivmoddi4+0x2ac>
 8000426:	4299      	cmp	r1, r3
 8000428:	f240 808a 	bls.w	8000540 <__udivmoddi4+0x2ac>
 800042c:	3e02      	subs	r6, #2
 800042e:	443b      	add	r3, r7
 8000430:	1a5b      	subs	r3, r3, r1
 8000432:	b281      	uxth	r1, r0
 8000434:	fbb3 f0fe 	udiv	r0, r3, lr
 8000438:	fb0e 3310 	mls	r3, lr, r0, r3
 800043c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000440:	fb00 f308 	mul.w	r3, r0, r8
 8000444:	428b      	cmp	r3, r1
 8000446:	d907      	bls.n	8000458 <__udivmoddi4+0x1c4>
 8000448:	1879      	adds	r1, r7, r1
 800044a:	f100 3cff 	add.w	ip, r0, #4294967295
 800044e:	d273      	bcs.n	8000538 <__udivmoddi4+0x2a4>
 8000450:	428b      	cmp	r3, r1
 8000452:	d971      	bls.n	8000538 <__udivmoddi4+0x2a4>
 8000454:	3802      	subs	r0, #2
 8000456:	4439      	add	r1, r7
 8000458:	1acb      	subs	r3, r1, r3
 800045a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800045e:	e778      	b.n	8000352 <__udivmoddi4+0xbe>
 8000460:	f1c6 0c20 	rsb	ip, r6, #32
 8000464:	fa03 f406 	lsl.w	r4, r3, r6
 8000468:	fa22 f30c 	lsr.w	r3, r2, ip
 800046c:	431c      	orrs	r4, r3
 800046e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000472:	fa01 f306 	lsl.w	r3, r1, r6
 8000476:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800047a:	fa21 f10c 	lsr.w	r1, r1, ip
 800047e:	431f      	orrs	r7, r3
 8000480:	0c3b      	lsrs	r3, r7, #16
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fa1f f884 	uxth.w	r8, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000492:	fb09 fa08 	mul.w	sl, r9, r8
 8000496:	458a      	cmp	sl, r1
 8000498:	fa02 f206 	lsl.w	r2, r2, r6
 800049c:	fa00 f306 	lsl.w	r3, r0, r6
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x220>
 80004a2:	1861      	adds	r1, r4, r1
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	d248      	bcs.n	800053c <__udivmoddi4+0x2a8>
 80004aa:	458a      	cmp	sl, r1
 80004ac:	d946      	bls.n	800053c <__udivmoddi4+0x2a8>
 80004ae:	f1a9 0902 	sub.w	r9, r9, #2
 80004b2:	4421      	add	r1, r4
 80004b4:	eba1 010a 	sub.w	r1, r1, sl
 80004b8:	b2bf      	uxth	r7, r7
 80004ba:	fbb1 f0fe 	udiv	r0, r1, lr
 80004be:	fb0e 1110 	mls	r1, lr, r0, r1
 80004c2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004c6:	fb00 f808 	mul.w	r8, r0, r8
 80004ca:	45b8      	cmp	r8, r7
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x24a>
 80004ce:	19e7      	adds	r7, r4, r7
 80004d0:	f100 31ff 	add.w	r1, r0, #4294967295
 80004d4:	d22e      	bcs.n	8000534 <__udivmoddi4+0x2a0>
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d92c      	bls.n	8000534 <__udivmoddi4+0x2a0>
 80004da:	3802      	subs	r0, #2
 80004dc:	4427      	add	r7, r4
 80004de:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e2:	eba7 0708 	sub.w	r7, r7, r8
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	454f      	cmp	r7, r9
 80004ec:	46c6      	mov	lr, r8
 80004ee:	4649      	mov	r1, r9
 80004f0:	d31a      	bcc.n	8000528 <__udivmoddi4+0x294>
 80004f2:	d017      	beq.n	8000524 <__udivmoddi4+0x290>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x27a>
 80004f6:	ebb3 020e 	subs.w	r2, r3, lr
 80004fa:	eb67 0701 	sbc.w	r7, r7, r1
 80004fe:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000502:	40f2      	lsrs	r2, r6
 8000504:	ea4c 0202 	orr.w	r2, ip, r2
 8000508:	40f7      	lsrs	r7, r6
 800050a:	e9c5 2700 	strd	r2, r7, [r5]
 800050e:	2600      	movs	r6, #0
 8000510:	4631      	mov	r1, r6
 8000512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000516:	462e      	mov	r6, r5
 8000518:	4628      	mov	r0, r5
 800051a:	e70b      	b.n	8000334 <__udivmoddi4+0xa0>
 800051c:	4606      	mov	r6, r0
 800051e:	e6e9      	b.n	80002f4 <__udivmoddi4+0x60>
 8000520:	4618      	mov	r0, r3
 8000522:	e6fd      	b.n	8000320 <__udivmoddi4+0x8c>
 8000524:	4543      	cmp	r3, r8
 8000526:	d2e5      	bcs.n	80004f4 <__udivmoddi4+0x260>
 8000528:	ebb8 0e02 	subs.w	lr, r8, r2
 800052c:	eb69 0104 	sbc.w	r1, r9, r4
 8000530:	3801      	subs	r0, #1
 8000532:	e7df      	b.n	80004f4 <__udivmoddi4+0x260>
 8000534:	4608      	mov	r0, r1
 8000536:	e7d2      	b.n	80004de <__udivmoddi4+0x24a>
 8000538:	4660      	mov	r0, ip
 800053a:	e78d      	b.n	8000458 <__udivmoddi4+0x1c4>
 800053c:	4681      	mov	r9, r0
 800053e:	e7b9      	b.n	80004b4 <__udivmoddi4+0x220>
 8000540:	4666      	mov	r6, ip
 8000542:	e775      	b.n	8000430 <__udivmoddi4+0x19c>
 8000544:	4630      	mov	r0, r6
 8000546:	e74a      	b.n	80003de <__udivmoddi4+0x14a>
 8000548:	f1ac 0c02 	sub.w	ip, ip, #2
 800054c:	4439      	add	r1, r7
 800054e:	e713      	b.n	8000378 <__udivmoddi4+0xe4>
 8000550:	3802      	subs	r0, #2
 8000552:	443c      	add	r4, r7
 8000554:	e724      	b.n	80003a0 <__udivmoddi4+0x10c>
 8000556:	bf00      	nop

08000558 <__aeabi_idiv0>:
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop

0800055c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b088      	sub	sp, #32
 8000560:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000562:	f000 fb75 	bl	8000c50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000566:	f000 f851 	bl	800060c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056a:	f000 f8b9 	bl	80006e0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  // Enable the CYCCNT counter.
  DWT_CTRL |= ( 1<<0 );
 800056e:	4b20      	ldr	r3, [pc, #128]	; (80005f0 <main+0x94>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	4a1f      	ldr	r2, [pc, #124]	; (80005f0 <main+0x94>)
 8000574:	f043 0301 	orr.w	r3, r3, #1
 8000578:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 800057a:	f004 fa53 	bl	8004a24 <SEGGER_SYSVIEW_Conf>

  SEGGER_SYSVIEW_Start();
 800057e:	f005 fab9 	bl	8005af4 <SEGGER_SYSVIEW_Start>

  //xTaskCreate(pxTaskCode, pcName, usStackDepth, pvParameters, uxPriority, pxCreatedTask)//alt+?
   status = xTaskCreate(task1_handler, "Task-1", 200, "Hello world from Task-1", 2, &task1_handle);
 8000582:	f107 0308 	add.w	r3, r7, #8
 8000586:	9301      	str	r3, [sp, #4]
 8000588:	2302      	movs	r3, #2
 800058a:	9300      	str	r3, [sp, #0]
 800058c:	4b19      	ldr	r3, [pc, #100]	; (80005f4 <main+0x98>)
 800058e:	22c8      	movs	r2, #200	; 0xc8
 8000590:	4919      	ldr	r1, [pc, #100]	; (80005f8 <main+0x9c>)
 8000592:	481a      	ldr	r0, [pc, #104]	; (80005fc <main+0xa0>)
 8000594:	f002 fb84 	bl	8002ca0 <xTaskCreate>
 8000598:	6178      	str	r0, [r7, #20]
   configASSERT(status == pdPASS);
 800059a:	697b      	ldr	r3, [r7, #20]
 800059c:	2b01      	cmp	r3, #1
 800059e:	d00a      	beq.n	80005b6 <main+0x5a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005a4:	f383 8811 	msr	BASEPRI, r3
 80005a8:	f3bf 8f6f 	isb	sy
 80005ac:	f3bf 8f4f 	dsb	sy
 80005b0:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005b2:	bf00      	nop
 80005b4:	e7fe      	b.n	80005b4 <main+0x58>

   status = xTaskCreate(task2_handler, "Task-2", 200, "Hello world from Task-2", 2, &task2_handle);
 80005b6:	1d3b      	adds	r3, r7, #4
 80005b8:	9301      	str	r3, [sp, #4]
 80005ba:	2302      	movs	r3, #2
 80005bc:	9300      	str	r3, [sp, #0]
 80005be:	4b10      	ldr	r3, [pc, #64]	; (8000600 <main+0xa4>)
 80005c0:	22c8      	movs	r2, #200	; 0xc8
 80005c2:	4910      	ldr	r1, [pc, #64]	; (8000604 <main+0xa8>)
 80005c4:	4810      	ldr	r0, [pc, #64]	; (8000608 <main+0xac>)
 80005c6:	f002 fb6b 	bl	8002ca0 <xTaskCreate>
 80005ca:	6178      	str	r0, [r7, #20]
   configASSERT(status == pdPASS);
 80005cc:	697b      	ldr	r3, [r7, #20]
 80005ce:	2b01      	cmp	r3, #1
 80005d0:	d00a      	beq.n	80005e8 <main+0x8c>
        __asm volatile
 80005d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005d6:	f383 8811 	msr	BASEPRI, r3
 80005da:	f3bf 8f6f 	isb	sy
 80005de:	f3bf 8f4f 	dsb	sy
 80005e2:	60fb      	str	r3, [r7, #12]
    }
 80005e4:	bf00      	nop
 80005e6:	e7fe      	b.n	80005e6 <main+0x8a>

   //start the FreeRTOS scheduler
   vTaskStartScheduler();
 80005e8:	f002 fcbe 	bl	8002f68 <vTaskStartScheduler>
    //if the control comes here, then the launch of the scheduler has failed due to insufficient memory in heap.
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ec:	e7fe      	b.n	80005ec <main+0x90>
 80005ee:	bf00      	nop
 80005f0:	e0001000 	.word	0xe0001000
 80005f4:	080070dc 	.word	0x080070dc
 80005f8:	080070f4 	.word	0x080070f4
 80005fc:	080009a1 	.word	0x080009a1
 8000600:	080070fc 	.word	0x080070fc
 8000604:	08007114 	.word	0x08007114
 8000608:	080009b1 	.word	0x080009b1

0800060c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b094      	sub	sp, #80	; 0x50
 8000610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000612:	f107 0320 	add.w	r3, r7, #32
 8000616:	2230      	movs	r2, #48	; 0x30
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f006 f888 	bl	8006730 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000620:	f107 030c 	add.w	r3, r7, #12
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
 800062c:	60da      	str	r2, [r3, #12]
 800062e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000630:	2300      	movs	r3, #0
 8000632:	60bb      	str	r3, [r7, #8]
 8000634:	4b28      	ldr	r3, [pc, #160]	; (80006d8 <SystemClock_Config+0xcc>)
 8000636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000638:	4a27      	ldr	r2, [pc, #156]	; (80006d8 <SystemClock_Config+0xcc>)
 800063a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800063e:	6413      	str	r3, [r2, #64]	; 0x40
 8000640:	4b25      	ldr	r3, [pc, #148]	; (80006d8 <SystemClock_Config+0xcc>)
 8000642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000644:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000648:	60bb      	str	r3, [r7, #8]
 800064a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800064c:	2300      	movs	r3, #0
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	4b22      	ldr	r3, [pc, #136]	; (80006dc <SystemClock_Config+0xd0>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a21      	ldr	r2, [pc, #132]	; (80006dc <SystemClock_Config+0xd0>)
 8000656:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800065a:	6013      	str	r3, [r2, #0]
 800065c:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <SystemClock_Config+0xd0>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000664:	607b      	str	r3, [r7, #4]
 8000666:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000668:	2302      	movs	r3, #2
 800066a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800066c:	2301      	movs	r3, #1
 800066e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000670:	2310      	movs	r3, #16
 8000672:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000674:	2302      	movs	r3, #2
 8000676:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000678:	2300      	movs	r3, #0
 800067a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800067c:	2308      	movs	r3, #8
 800067e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000680:	2332      	movs	r3, #50	; 0x32
 8000682:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000684:	2304      	movs	r3, #4
 8000686:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000688:	2307      	movs	r3, #7
 800068a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800068c:	f107 0320 	add.w	r3, r7, #32
 8000690:	4618      	mov	r0, r3
 8000692:	f000 fdb7 	bl	8001204 <HAL_RCC_OscConfig>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800069c:	f000 f9a2 	bl	80009e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a0:	230f      	movs	r3, #15
 80006a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a4:	2302      	movs	r3, #2
 80006a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006ac:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006b8:	f107 030c 	add.w	r3, r7, #12
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f001 f818 	bl	80016f4 <HAL_RCC_ClockConfig>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006ca:	f000 f98b 	bl	80009e4 <Error_Handler>
  }
}
 80006ce:	bf00      	nop
 80006d0:	3750      	adds	r7, #80	; 0x50
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40023800 	.word	0x40023800
 80006dc:	40007000 	.word	0x40007000

080006e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b08c      	sub	sp, #48	; 0x30
 80006e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e6:	f107 031c 	add.w	r3, r7, #28
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
 80006f2:	60da      	str	r2, [r3, #12]
 80006f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	61bb      	str	r3, [r7, #24]
 80006fa:	4ba1      	ldr	r3, [pc, #644]	; (8000980 <MX_GPIO_Init+0x2a0>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	4aa0      	ldr	r2, [pc, #640]	; (8000980 <MX_GPIO_Init+0x2a0>)
 8000700:	f043 0310 	orr.w	r3, r3, #16
 8000704:	6313      	str	r3, [r2, #48]	; 0x30
 8000706:	4b9e      	ldr	r3, [pc, #632]	; (8000980 <MX_GPIO_Init+0x2a0>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	f003 0310 	and.w	r3, r3, #16
 800070e:	61bb      	str	r3, [r7, #24]
 8000710:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	617b      	str	r3, [r7, #20]
 8000716:	4b9a      	ldr	r3, [pc, #616]	; (8000980 <MX_GPIO_Init+0x2a0>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a99      	ldr	r2, [pc, #612]	; (8000980 <MX_GPIO_Init+0x2a0>)
 800071c:	f043 0304 	orr.w	r3, r3, #4
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4b97      	ldr	r3, [pc, #604]	; (8000980 <MX_GPIO_Init+0x2a0>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f003 0304 	and.w	r3, r3, #4
 800072a:	617b      	str	r3, [r7, #20]
 800072c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	613b      	str	r3, [r7, #16]
 8000732:	4b93      	ldr	r3, [pc, #588]	; (8000980 <MX_GPIO_Init+0x2a0>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a92      	ldr	r2, [pc, #584]	; (8000980 <MX_GPIO_Init+0x2a0>)
 8000738:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b90      	ldr	r3, [pc, #576]	; (8000980 <MX_GPIO_Init+0x2a0>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000746:	613b      	str	r3, [r7, #16]
 8000748:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	60fb      	str	r3, [r7, #12]
 800074e:	4b8c      	ldr	r3, [pc, #560]	; (8000980 <MX_GPIO_Init+0x2a0>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a8b      	ldr	r2, [pc, #556]	; (8000980 <MX_GPIO_Init+0x2a0>)
 8000754:	f043 0301 	orr.w	r3, r3, #1
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b89      	ldr	r3, [pc, #548]	; (8000980 <MX_GPIO_Init+0x2a0>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0301 	and.w	r3, r3, #1
 8000762:	60fb      	str	r3, [r7, #12]
 8000764:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	60bb      	str	r3, [r7, #8]
 800076a:	4b85      	ldr	r3, [pc, #532]	; (8000980 <MX_GPIO_Init+0x2a0>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4a84      	ldr	r2, [pc, #528]	; (8000980 <MX_GPIO_Init+0x2a0>)
 8000770:	f043 0302 	orr.w	r3, r3, #2
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
 8000776:	4b82      	ldr	r3, [pc, #520]	; (8000980 <MX_GPIO_Init+0x2a0>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f003 0302 	and.w	r3, r3, #2
 800077e:	60bb      	str	r3, [r7, #8]
 8000780:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	607b      	str	r3, [r7, #4]
 8000786:	4b7e      	ldr	r3, [pc, #504]	; (8000980 <MX_GPIO_Init+0x2a0>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a7d      	ldr	r2, [pc, #500]	; (8000980 <MX_GPIO_Init+0x2a0>)
 800078c:	f043 0308 	orr.w	r3, r3, #8
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b7b      	ldr	r3, [pc, #492]	; (8000980 <MX_GPIO_Init+0x2a0>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0308 	and.w	r3, r3, #8
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800079e:	2200      	movs	r2, #0
 80007a0:	2108      	movs	r1, #8
 80007a2:	4878      	ldr	r0, [pc, #480]	; (8000984 <MX_GPIO_Init+0x2a4>)
 80007a4:	f000 fd14 	bl	80011d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007a8:	2201      	movs	r2, #1
 80007aa:	2101      	movs	r1, #1
 80007ac:	4876      	ldr	r0, [pc, #472]	; (8000988 <MX_GPIO_Init+0x2a8>)
 80007ae:	f000 fd0f 	bl	80011d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007b2:	2200      	movs	r2, #0
 80007b4:	f24f 0110 	movw	r1, #61456	; 0xf010
 80007b8:	4874      	ldr	r0, [pc, #464]	; (800098c <MX_GPIO_Init+0x2ac>)
 80007ba:	f000 fd09 	bl	80011d0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80007be:	2308      	movs	r3, #8
 80007c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c2:	2301      	movs	r3, #1
 80007c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c6:	2300      	movs	r3, #0
 80007c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ca:	2300      	movs	r3, #0
 80007cc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80007ce:	f107 031c 	add.w	r3, r7, #28
 80007d2:	4619      	mov	r1, r3
 80007d4:	486b      	ldr	r0, [pc, #428]	; (8000984 <MX_GPIO_Init+0x2a4>)
 80007d6:	f000 fb5f 	bl	8000e98 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80007da:	2301      	movs	r3, #1
 80007dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007de:	2301      	movs	r3, #1
 80007e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	2300      	movs	r3, #0
 80007e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e6:	2300      	movs	r3, #0
 80007e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007ea:	f107 031c 	add.w	r3, r7, #28
 80007ee:	4619      	mov	r1, r3
 80007f0:	4865      	ldr	r0, [pc, #404]	; (8000988 <MX_GPIO_Init+0x2a8>)
 80007f2:	f000 fb51 	bl	8000e98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80007f6:	2308      	movs	r3, #8
 80007f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fa:	2302      	movs	r3, #2
 80007fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000802:	2300      	movs	r3, #0
 8000804:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000806:	2305      	movs	r3, #5
 8000808:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800080a:	f107 031c 	add.w	r3, r7, #28
 800080e:	4619      	mov	r1, r3
 8000810:	485d      	ldr	r0, [pc, #372]	; (8000988 <MX_GPIO_Init+0x2a8>)
 8000812:	f000 fb41 	bl	8000e98 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000816:	2301      	movs	r3, #1
 8000818:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800081a:	4b5d      	ldr	r3, [pc, #372]	; (8000990 <MX_GPIO_Init+0x2b0>)
 800081c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081e:	2300      	movs	r3, #0
 8000820:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000822:	f107 031c 	add.w	r3, r7, #28
 8000826:	4619      	mov	r1, r3
 8000828:	485a      	ldr	r0, [pc, #360]	; (8000994 <MX_GPIO_Init+0x2b4>)
 800082a:	f000 fb35 	bl	8000e98 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800082e:	2310      	movs	r3, #16
 8000830:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000832:	2302      	movs	r3, #2
 8000834:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083a:	2300      	movs	r3, #0
 800083c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800083e:	2306      	movs	r3, #6
 8000840:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000842:	f107 031c 	add.w	r3, r7, #28
 8000846:	4619      	mov	r1, r3
 8000848:	4852      	ldr	r0, [pc, #328]	; (8000994 <MX_GPIO_Init+0x2b4>)
 800084a:	f000 fb25 	bl	8000e98 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800084e:	23e0      	movs	r3, #224	; 0xe0
 8000850:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000852:	2302      	movs	r3, #2
 8000854:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	2300      	movs	r3, #0
 8000858:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085a:	2300      	movs	r3, #0
 800085c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800085e:	2305      	movs	r3, #5
 8000860:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000862:	f107 031c 	add.w	r3, r7, #28
 8000866:	4619      	mov	r1, r3
 8000868:	484a      	ldr	r0, [pc, #296]	; (8000994 <MX_GPIO_Init+0x2b4>)
 800086a:	f000 fb15 	bl	8000e98 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800086e:	2304      	movs	r3, #4
 8000870:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000872:	2300      	movs	r3, #0
 8000874:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800087a:	f107 031c 	add.w	r3, r7, #28
 800087e:	4619      	mov	r1, r3
 8000880:	4845      	ldr	r0, [pc, #276]	; (8000998 <MX_GPIO_Init+0x2b8>)
 8000882:	f000 fb09 	bl	8000e98 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000886:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800088a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088c:	2302      	movs	r3, #2
 800088e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000894:	2300      	movs	r3, #0
 8000896:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000898:	2305      	movs	r3, #5
 800089a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800089c:	f107 031c 	add.w	r3, r7, #28
 80008a0:	4619      	mov	r1, r3
 80008a2:	483d      	ldr	r0, [pc, #244]	; (8000998 <MX_GPIO_Init+0x2b8>)
 80008a4:	f000 faf8 	bl	8000e98 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008a8:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008ac:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ae:	2301      	movs	r3, #1
 80008b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b6:	2300      	movs	r3, #0
 80008b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008ba:	f107 031c 	add.w	r3, r7, #28
 80008be:	4619      	mov	r1, r3
 80008c0:	4832      	ldr	r0, [pc, #200]	; (800098c <MX_GPIO_Init+0x2ac>)
 80008c2:	f000 fae9 	bl	8000e98 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80008c6:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80008ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008cc:	2302      	movs	r3, #2
 80008ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d4:	2300      	movs	r3, #0
 80008d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008d8:	2306      	movs	r3, #6
 80008da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008dc:	f107 031c 	add.w	r3, r7, #28
 80008e0:	4619      	mov	r1, r3
 80008e2:	4829      	ldr	r0, [pc, #164]	; (8000988 <MX_GPIO_Init+0x2a8>)
 80008e4:	f000 fad8 	bl	8000e98 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80008e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ee:	2300      	movs	r3, #0
 80008f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80008f6:	f107 031c 	add.w	r3, r7, #28
 80008fa:	4619      	mov	r1, r3
 80008fc:	4825      	ldr	r0, [pc, #148]	; (8000994 <MX_GPIO_Init+0x2b4>)
 80008fe:	f000 facb 	bl	8000e98 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000902:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000906:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000908:	2302      	movs	r3, #2
 800090a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000910:	2300      	movs	r3, #0
 8000912:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000914:	230a      	movs	r3, #10
 8000916:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000918:	f107 031c 	add.w	r3, r7, #28
 800091c:	4619      	mov	r1, r3
 800091e:	481d      	ldr	r0, [pc, #116]	; (8000994 <MX_GPIO_Init+0x2b4>)
 8000920:	f000 faba 	bl	8000e98 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000924:	2320      	movs	r3, #32
 8000926:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000928:	2300      	movs	r3, #0
 800092a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000930:	f107 031c 	add.w	r3, r7, #28
 8000934:	4619      	mov	r1, r3
 8000936:	4815      	ldr	r0, [pc, #84]	; (800098c <MX_GPIO_Init+0x2ac>)
 8000938:	f000 faae 	bl	8000e98 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800093c:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000940:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000942:	2312      	movs	r3, #18
 8000944:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000946:	2301      	movs	r3, #1
 8000948:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094a:	2300      	movs	r3, #0
 800094c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800094e:	2304      	movs	r3, #4
 8000950:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000952:	f107 031c 	add.w	r3, r7, #28
 8000956:	4619      	mov	r1, r3
 8000958:	480f      	ldr	r0, [pc, #60]	; (8000998 <MX_GPIO_Init+0x2b8>)
 800095a:	f000 fa9d 	bl	8000e98 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800095e:	2302      	movs	r3, #2
 8000960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000962:	4b0e      	ldr	r3, [pc, #56]	; (800099c <MX_GPIO_Init+0x2bc>)
 8000964:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800096a:	f107 031c 	add.w	r3, r7, #28
 800096e:	4619      	mov	r1, r3
 8000970:	4804      	ldr	r0, [pc, #16]	; (8000984 <MX_GPIO_Init+0x2a4>)
 8000972:	f000 fa91 	bl	8000e98 <HAL_GPIO_Init>

}
 8000976:	bf00      	nop
 8000978:	3730      	adds	r7, #48	; 0x30
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40023800 	.word	0x40023800
 8000984:	40021000 	.word	0x40021000
 8000988:	40020800 	.word	0x40020800
 800098c:	40020c00 	.word	0x40020c00
 8000990:	10110000 	.word	0x10110000
 8000994:	40020000 	.word	0x40020000
 8000998:	40020400 	.word	0x40020400
 800099c:	10120000 	.word	0x10120000

080009a0 <task1_handler>:

/* USER CODE BEGIN 4 */
static void task1_handler(void* parameters){
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
	while(1)
	{
		printf("%s\n",(char*) parameters);
 80009a8:	6878      	ldr	r0, [r7, #4]
 80009aa:	f005 ff37 	bl	800681c <puts>
 80009ae:	e7fb      	b.n	80009a8 <task1_handler+0x8>

080009b0 <task2_handler>:
		//taskYIELD();
	}

}

static void task2_handler(void* parameters){
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
	while(1)
	{
		printf("%s\n",(char*) parameters);
 80009b8:	6878      	ldr	r0, [r7, #4]
 80009ba:	f005 ff2f 	bl	800681c <puts>
 80009be:	e7fb      	b.n	80009b8 <task2_handler+0x8>

080009c0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a04      	ldr	r2, [pc, #16]	; (80009e0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d101      	bne.n	80009d6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009d2:	f000 f95f 	bl	8000c94 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009d6:	bf00      	nop
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40001000 	.word	0x40001000

080009e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e8:	b672      	cpsid	i
}
 80009ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009ec:	e7fe      	b.n	80009ec <Error_Handler+0x8>
	...

080009f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	607b      	str	r3, [r7, #4]
 80009fa:	4b10      	ldr	r3, [pc, #64]	; (8000a3c <HAL_MspInit+0x4c>)
 80009fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009fe:	4a0f      	ldr	r2, [pc, #60]	; (8000a3c <HAL_MspInit+0x4c>)
 8000a00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a04:	6453      	str	r3, [r2, #68]	; 0x44
 8000a06:	4b0d      	ldr	r3, [pc, #52]	; (8000a3c <HAL_MspInit+0x4c>)
 8000a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a0e:	607b      	str	r3, [r7, #4]
 8000a10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	603b      	str	r3, [r7, #0]
 8000a16:	4b09      	ldr	r3, [pc, #36]	; (8000a3c <HAL_MspInit+0x4c>)
 8000a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1a:	4a08      	ldr	r2, [pc, #32]	; (8000a3c <HAL_MspInit+0x4c>)
 8000a1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a20:	6413      	str	r3, [r2, #64]	; 0x40
 8000a22:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <HAL_MspInit+0x4c>)
 8000a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a2a:	603b      	str	r3, [r7, #0]
 8000a2c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 8000a2e:	f003 fc43 	bl	80042b8 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000a32:	bf00      	nop
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40023800 	.word	0x40023800

08000a40 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b08c      	sub	sp, #48	; 0x30
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000a50:	2200      	movs	r2, #0
 8000a52:	6879      	ldr	r1, [r7, #4]
 8000a54:	2036      	movs	r0, #54	; 0x36
 8000a56:	f000 f9f5 	bl	8000e44 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a5a:	2036      	movs	r0, #54	; 0x36
 8000a5c:	f000 fa0e 	bl	8000e7c <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000a60:	2300      	movs	r3, #0
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	4b1f      	ldr	r3, [pc, #124]	; (8000ae4 <HAL_InitTick+0xa4>)
 8000a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a68:	4a1e      	ldr	r2, [pc, #120]	; (8000ae4 <HAL_InitTick+0xa4>)
 8000a6a:	f043 0310 	orr.w	r3, r3, #16
 8000a6e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a70:	4b1c      	ldr	r3, [pc, #112]	; (8000ae4 <HAL_InitTick+0xa4>)
 8000a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a74:	f003 0310 	and.w	r3, r3, #16
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a7c:	f107 0210 	add.w	r2, r7, #16
 8000a80:	f107 0314 	add.w	r3, r7, #20
 8000a84:	4611      	mov	r1, r2
 8000a86:	4618      	mov	r0, r3
 8000a88:	f001 f81c 	bl	8001ac4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000a8c:	f001 f806 	bl	8001a9c <HAL_RCC_GetPCLK1Freq>
 8000a90:	4603      	mov	r3, r0
 8000a92:	005b      	lsls	r3, r3, #1
 8000a94:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a98:	4a13      	ldr	r2, [pc, #76]	; (8000ae8 <HAL_InitTick+0xa8>)
 8000a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a9e:	0c9b      	lsrs	r3, r3, #18
 8000aa0:	3b01      	subs	r3, #1
 8000aa2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000aa4:	4b11      	ldr	r3, [pc, #68]	; (8000aec <HAL_InitTick+0xac>)
 8000aa6:	4a12      	ldr	r2, [pc, #72]	; (8000af0 <HAL_InitTick+0xb0>)
 8000aa8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000aaa:	4b10      	ldr	r3, [pc, #64]	; (8000aec <HAL_InitTick+0xac>)
 8000aac:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ab0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000ab2:	4a0e      	ldr	r2, [pc, #56]	; (8000aec <HAL_InitTick+0xac>)
 8000ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ab6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000ab8:	4b0c      	ldr	r3, [pc, #48]	; (8000aec <HAL_InitTick+0xac>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000abe:	4b0b      	ldr	r3, [pc, #44]	; (8000aec <HAL_InitTick+0xac>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000ac4:	4809      	ldr	r0, [pc, #36]	; (8000aec <HAL_InitTick+0xac>)
 8000ac6:	f001 f82f 	bl	8001b28 <HAL_TIM_Base_Init>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d104      	bne.n	8000ada <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000ad0:	4806      	ldr	r0, [pc, #24]	; (8000aec <HAL_InitTick+0xac>)
 8000ad2:	f001 f883 	bl	8001bdc <HAL_TIM_Base_Start_IT>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	e000      	b.n	8000adc <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000ada:	2301      	movs	r3, #1
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	3730      	adds	r7, #48	; 0x30
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	40023800 	.word	0x40023800
 8000ae8:	431bde83 	.word	0x431bde83
 8000aec:	2001a7d8 	.word	0x2001a7d8
 8000af0:	40001000 	.word	0x40001000

08000af4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000af8:	e7fe      	b.n	8000af8 <NMI_Handler+0x4>

08000afa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000afa:	b480      	push	{r7}
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000afe:	e7fe      	b.n	8000afe <HardFault_Handler+0x4>

08000b00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <MemManage_Handler+0x4>

08000b06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b0a:	e7fe      	b.n	8000b0a <BusFault_Handler+0x4>

08000b0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b10:	e7fe      	b.n	8000b10 <UsageFault_Handler+0x4>

08000b12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b12:	b480      	push	{r7}
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b16:	bf00      	nop
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr

08000b20 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b24:	4802      	ldr	r0, [pc, #8]	; (8000b30 <TIM6_DAC_IRQHandler+0x10>)
 8000b26:	f001 f8c9 	bl	8001cbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	2001a7d8 	.word	0x2001a7d8

08000b34 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b086      	sub	sp, #24
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	60f8      	str	r0, [r7, #12]
 8000b3c:	60b9      	str	r1, [r7, #8]
 8000b3e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b40:	2300      	movs	r3, #0
 8000b42:	617b      	str	r3, [r7, #20]
 8000b44:	e00a      	b.n	8000b5c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b46:	f3af 8000 	nop.w
 8000b4a:	4601      	mov	r1, r0
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	1c5a      	adds	r2, r3, #1
 8000b50:	60ba      	str	r2, [r7, #8]
 8000b52:	b2ca      	uxtb	r2, r1
 8000b54:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	3301      	adds	r3, #1
 8000b5a:	617b      	str	r3, [r7, #20]
 8000b5c:	697a      	ldr	r2, [r7, #20]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	dbf0      	blt.n	8000b46 <_read+0x12>
	}

return len;
 8000b64:	687b      	ldr	r3, [r7, #4]
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3718      	adds	r7, #24
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <_close>:
	}
	return len;
}

int _close(int file)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	b083      	sub	sp, #12
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	6078      	str	r0, [r7, #4]
	return -1;
 8000b76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	370c      	adds	r7, #12
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr

08000b86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b86:	b480      	push	{r7}
 8000b88:	b083      	sub	sp, #12
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	6078      	str	r0, [r7, #4]
 8000b8e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b96:	605a      	str	r2, [r3, #4]
	return 0;
 8000b98:	2300      	movs	r3, #0
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr

08000ba6 <_isatty>:

int _isatty(int file)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	b083      	sub	sp, #12
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
	return 1;
 8000bae:	2301      	movs	r3, #1
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	370c      	adds	r7, #12
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b085      	sub	sp, #20
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	60f8      	str	r0, [r7, #12]
 8000bc4:	60b9      	str	r1, [r7, #8]
 8000bc6:	607a      	str	r2, [r7, #4]
	return 0;
 8000bc8:	2300      	movs	r3, #0
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3714      	adds	r7, #20
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
	...

08000bd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bdc:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <SystemInit+0x20>)
 8000bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000be2:	4a05      	ldr	r2, [pc, #20]	; (8000bf8 <SystemInit+0x20>)
 8000be4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000be8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	e000ed00 	.word	0xe000ed00

08000bfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000bfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c34 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c00:	480d      	ldr	r0, [pc, #52]	; (8000c38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c02:	490e      	ldr	r1, [pc, #56]	; (8000c3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c04:	4a0e      	ldr	r2, [pc, #56]	; (8000c40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c08:	e002      	b.n	8000c10 <LoopCopyDataInit>

08000c0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c0e:	3304      	adds	r3, #4

08000c10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c14:	d3f9      	bcc.n	8000c0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c16:	4a0b      	ldr	r2, [pc, #44]	; (8000c44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c18:	4c0b      	ldr	r4, [pc, #44]	; (8000c48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c1c:	e001      	b.n	8000c22 <LoopFillZerobss>

08000c1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c20:	3204      	adds	r2, #4

08000c22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c24:	d3fb      	bcc.n	8000c1e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c26:	f7ff ffd7 	bl	8000bd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c2a:	f005 fd41 	bl	80066b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c2e:	f7ff fc95 	bl	800055c <main>
  bx  lr    
 8000c32:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c3c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000c40:	080072a0 	.word	0x080072a0
  ldr r2, =_sbss
 8000c44:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000c48:	2001a91c 	.word	0x2001a91c

08000c4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c4c:	e7fe      	b.n	8000c4c <ADC_IRQHandler>
	...

08000c50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c54:	4b0e      	ldr	r3, [pc, #56]	; (8000c90 <HAL_Init+0x40>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a0d      	ldr	r2, [pc, #52]	; (8000c90 <HAL_Init+0x40>)
 8000c5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c60:	4b0b      	ldr	r3, [pc, #44]	; (8000c90 <HAL_Init+0x40>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a0a      	ldr	r2, [pc, #40]	; (8000c90 <HAL_Init+0x40>)
 8000c66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c6c:	4b08      	ldr	r3, [pc, #32]	; (8000c90 <HAL_Init+0x40>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a07      	ldr	r2, [pc, #28]	; (8000c90 <HAL_Init+0x40>)
 8000c72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c78:	2003      	movs	r0, #3
 8000c7a:	f000 f8d8 	bl	8000e2e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c7e:	2000      	movs	r0, #0
 8000c80:	f7ff fede 	bl	8000a40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c84:	f7ff feb4 	bl	80009f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c88:	2300      	movs	r3, #0
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	40023c00 	.word	0x40023c00

08000c94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c98:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <HAL_IncTick+0x20>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <HAL_IncTick+0x24>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4413      	add	r3, r2
 8000ca4:	4a04      	ldr	r2, [pc, #16]	; (8000cb8 <HAL_IncTick+0x24>)
 8000ca6:	6013      	str	r3, [r2, #0]
}
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	20000008 	.word	0x20000008
 8000cb8:	2001a820 	.word	0x2001a820

08000cbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000cc0:	4b03      	ldr	r3, [pc, #12]	; (8000cd0 <HAL_GetTick+0x14>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	2001a820 	.word	0x2001a820

08000cd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b085      	sub	sp, #20
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	f003 0307 	and.w	r3, r3, #7
 8000ce2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ce4:	4b0c      	ldr	r3, [pc, #48]	; (8000d18 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cea:	68ba      	ldr	r2, [r7, #8]
 8000cec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d06:	4a04      	ldr	r2, [pc, #16]	; (8000d18 <__NVIC_SetPriorityGrouping+0x44>)
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	60d3      	str	r3, [r2, #12]
}
 8000d0c:	bf00      	nop
 8000d0e:	3714      	adds	r7, #20
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d20:	4b04      	ldr	r3, [pc, #16]	; (8000d34 <__NVIC_GetPriorityGrouping+0x18>)
 8000d22:	68db      	ldr	r3, [r3, #12]
 8000d24:	0a1b      	lsrs	r3, r3, #8
 8000d26:	f003 0307 	and.w	r3, r3, #7
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	e000ed00 	.word	0xe000ed00

08000d38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	db0b      	blt.n	8000d62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d4a:	79fb      	ldrb	r3, [r7, #7]
 8000d4c:	f003 021f 	and.w	r2, r3, #31
 8000d50:	4907      	ldr	r1, [pc, #28]	; (8000d70 <__NVIC_EnableIRQ+0x38>)
 8000d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d56:	095b      	lsrs	r3, r3, #5
 8000d58:	2001      	movs	r0, #1
 8000d5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d62:	bf00      	nop
 8000d64:	370c      	adds	r7, #12
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	e000e100 	.word	0xe000e100

08000d74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	6039      	str	r1, [r7, #0]
 8000d7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	db0a      	blt.n	8000d9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	b2da      	uxtb	r2, r3
 8000d8c:	490c      	ldr	r1, [pc, #48]	; (8000dc0 <__NVIC_SetPriority+0x4c>)
 8000d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d92:	0112      	lsls	r2, r2, #4
 8000d94:	b2d2      	uxtb	r2, r2
 8000d96:	440b      	add	r3, r1
 8000d98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d9c:	e00a      	b.n	8000db4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	b2da      	uxtb	r2, r3
 8000da2:	4908      	ldr	r1, [pc, #32]	; (8000dc4 <__NVIC_SetPriority+0x50>)
 8000da4:	79fb      	ldrb	r3, [r7, #7]
 8000da6:	f003 030f 	and.w	r3, r3, #15
 8000daa:	3b04      	subs	r3, #4
 8000dac:	0112      	lsls	r2, r2, #4
 8000dae:	b2d2      	uxtb	r2, r2
 8000db0:	440b      	add	r3, r1
 8000db2:	761a      	strb	r2, [r3, #24]
}
 8000db4:	bf00      	nop
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	e000e100 	.word	0xe000e100
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b089      	sub	sp, #36	; 0x24
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	60f8      	str	r0, [r7, #12]
 8000dd0:	60b9      	str	r1, [r7, #8]
 8000dd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	f003 0307 	and.w	r3, r3, #7
 8000dda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	f1c3 0307 	rsb	r3, r3, #7
 8000de2:	2b04      	cmp	r3, #4
 8000de4:	bf28      	it	cs
 8000de6:	2304      	movcs	r3, #4
 8000de8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	3304      	adds	r3, #4
 8000dee:	2b06      	cmp	r3, #6
 8000df0:	d902      	bls.n	8000df8 <NVIC_EncodePriority+0x30>
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	3b03      	subs	r3, #3
 8000df6:	e000      	b.n	8000dfa <NVIC_EncodePriority+0x32>
 8000df8:	2300      	movs	r3, #0
 8000dfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8000e00:	69bb      	ldr	r3, [r7, #24]
 8000e02:	fa02 f303 	lsl.w	r3, r2, r3
 8000e06:	43da      	mvns	r2, r3
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	401a      	ands	r2, r3
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e10:	f04f 31ff 	mov.w	r1, #4294967295
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	fa01 f303 	lsl.w	r3, r1, r3
 8000e1a:	43d9      	mvns	r1, r3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e20:	4313      	orrs	r3, r2
         );
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3724      	adds	r7, #36	; 0x24
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr

08000e2e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b082      	sub	sp, #8
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e36:	6878      	ldr	r0, [r7, #4]
 8000e38:	f7ff ff4c 	bl	8000cd4 <__NVIC_SetPriorityGrouping>
}
 8000e3c:	bf00      	nop
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b086      	sub	sp, #24
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	60b9      	str	r1, [r7, #8]
 8000e4e:	607a      	str	r2, [r7, #4]
 8000e50:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e52:	2300      	movs	r3, #0
 8000e54:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e56:	f7ff ff61 	bl	8000d1c <__NVIC_GetPriorityGrouping>
 8000e5a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e5c:	687a      	ldr	r2, [r7, #4]
 8000e5e:	68b9      	ldr	r1, [r7, #8]
 8000e60:	6978      	ldr	r0, [r7, #20]
 8000e62:	f7ff ffb1 	bl	8000dc8 <NVIC_EncodePriority>
 8000e66:	4602      	mov	r2, r0
 8000e68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e6c:	4611      	mov	r1, r2
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f7ff ff80 	bl	8000d74 <__NVIC_SetPriority>
}
 8000e74:	bf00      	nop
 8000e76:	3718      	adds	r7, #24
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff ff54 	bl	8000d38 <__NVIC_EnableIRQ>
}
 8000e90:	bf00      	nop
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b089      	sub	sp, #36	; 0x24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eae:	2300      	movs	r3, #0
 8000eb0:	61fb      	str	r3, [r7, #28]
 8000eb2:	e16b      	b.n	800118c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	697a      	ldr	r2, [r7, #20]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ec8:	693a      	ldr	r2, [r7, #16]
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	f040 815a 	bne.w	8001186 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f003 0303 	and.w	r3, r3, #3
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d005      	beq.n	8000eea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ee6:	2b02      	cmp	r3, #2
 8000ee8:	d130      	bne.n	8000f4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	689b      	ldr	r3, [r3, #8]
 8000eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	2203      	movs	r2, #3
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	43db      	mvns	r3, r3
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	4013      	ands	r3, r2
 8000f00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	68da      	ldr	r2, [r3, #12]
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	69ba      	ldr	r2, [r7, #24]
 8000f18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f20:	2201      	movs	r2, #1
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	091b      	lsrs	r3, r3, #4
 8000f36:	f003 0201 	and.w	r2, r3, #1
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f003 0303 	and.w	r3, r3, #3
 8000f54:	2b03      	cmp	r3, #3
 8000f56:	d017      	beq.n	8000f88 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	2203      	movs	r2, #3
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	689a      	ldr	r2, [r3, #8]
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f003 0303 	and.w	r3, r3, #3
 8000f90:	2b02      	cmp	r3, #2
 8000f92:	d123      	bne.n	8000fdc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	08da      	lsrs	r2, r3, #3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3208      	adds	r2, #8
 8000f9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	f003 0307 	and.w	r3, r3, #7
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	220f      	movs	r2, #15
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	691a      	ldr	r2, [r3, #16]
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	f003 0307 	and.w	r3, r3, #7
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	08da      	lsrs	r2, r3, #3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	3208      	adds	r2, #8
 8000fd6:	69b9      	ldr	r1, [r7, #24]
 8000fd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	2203      	movs	r2, #3
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	43db      	mvns	r3, r3
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f003 0203 	and.w	r2, r3, #3
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	4313      	orrs	r3, r2
 8001008:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001018:	2b00      	cmp	r3, #0
 800101a:	f000 80b4 	beq.w	8001186 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	4b60      	ldr	r3, [pc, #384]	; (80011a4 <HAL_GPIO_Init+0x30c>)
 8001024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001026:	4a5f      	ldr	r2, [pc, #380]	; (80011a4 <HAL_GPIO_Init+0x30c>)
 8001028:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800102c:	6453      	str	r3, [r2, #68]	; 0x44
 800102e:	4b5d      	ldr	r3, [pc, #372]	; (80011a4 <HAL_GPIO_Init+0x30c>)
 8001030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001032:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800103a:	4a5b      	ldr	r2, [pc, #364]	; (80011a8 <HAL_GPIO_Init+0x310>)
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	089b      	lsrs	r3, r3, #2
 8001040:	3302      	adds	r3, #2
 8001042:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001046:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	f003 0303 	and.w	r3, r3, #3
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	220f      	movs	r2, #15
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	43db      	mvns	r3, r3
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	4013      	ands	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a52      	ldr	r2, [pc, #328]	; (80011ac <HAL_GPIO_Init+0x314>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d02b      	beq.n	80010be <HAL_GPIO_Init+0x226>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a51      	ldr	r2, [pc, #324]	; (80011b0 <HAL_GPIO_Init+0x318>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d025      	beq.n	80010ba <HAL_GPIO_Init+0x222>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4a50      	ldr	r2, [pc, #320]	; (80011b4 <HAL_GPIO_Init+0x31c>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d01f      	beq.n	80010b6 <HAL_GPIO_Init+0x21e>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a4f      	ldr	r2, [pc, #316]	; (80011b8 <HAL_GPIO_Init+0x320>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d019      	beq.n	80010b2 <HAL_GPIO_Init+0x21a>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4a4e      	ldr	r2, [pc, #312]	; (80011bc <HAL_GPIO_Init+0x324>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d013      	beq.n	80010ae <HAL_GPIO_Init+0x216>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a4d      	ldr	r2, [pc, #308]	; (80011c0 <HAL_GPIO_Init+0x328>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d00d      	beq.n	80010aa <HAL_GPIO_Init+0x212>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4a4c      	ldr	r2, [pc, #304]	; (80011c4 <HAL_GPIO_Init+0x32c>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d007      	beq.n	80010a6 <HAL_GPIO_Init+0x20e>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4a4b      	ldr	r2, [pc, #300]	; (80011c8 <HAL_GPIO_Init+0x330>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d101      	bne.n	80010a2 <HAL_GPIO_Init+0x20a>
 800109e:	2307      	movs	r3, #7
 80010a0:	e00e      	b.n	80010c0 <HAL_GPIO_Init+0x228>
 80010a2:	2308      	movs	r3, #8
 80010a4:	e00c      	b.n	80010c0 <HAL_GPIO_Init+0x228>
 80010a6:	2306      	movs	r3, #6
 80010a8:	e00a      	b.n	80010c0 <HAL_GPIO_Init+0x228>
 80010aa:	2305      	movs	r3, #5
 80010ac:	e008      	b.n	80010c0 <HAL_GPIO_Init+0x228>
 80010ae:	2304      	movs	r3, #4
 80010b0:	e006      	b.n	80010c0 <HAL_GPIO_Init+0x228>
 80010b2:	2303      	movs	r3, #3
 80010b4:	e004      	b.n	80010c0 <HAL_GPIO_Init+0x228>
 80010b6:	2302      	movs	r3, #2
 80010b8:	e002      	b.n	80010c0 <HAL_GPIO_Init+0x228>
 80010ba:	2301      	movs	r3, #1
 80010bc:	e000      	b.n	80010c0 <HAL_GPIO_Init+0x228>
 80010be:	2300      	movs	r3, #0
 80010c0:	69fa      	ldr	r2, [r7, #28]
 80010c2:	f002 0203 	and.w	r2, r2, #3
 80010c6:	0092      	lsls	r2, r2, #2
 80010c8:	4093      	lsls	r3, r2
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010d0:	4935      	ldr	r1, [pc, #212]	; (80011a8 <HAL_GPIO_Init+0x310>)
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	089b      	lsrs	r3, r3, #2
 80010d6:	3302      	adds	r3, #2
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010de:	4b3b      	ldr	r3, [pc, #236]	; (80011cc <HAL_GPIO_Init+0x334>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	43db      	mvns	r3, r3
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	4013      	ands	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d003      	beq.n	8001102 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	4313      	orrs	r3, r2
 8001100:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001102:	4a32      	ldr	r2, [pc, #200]	; (80011cc <HAL_GPIO_Init+0x334>)
 8001104:	69bb      	ldr	r3, [r7, #24]
 8001106:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001108:	4b30      	ldr	r3, [pc, #192]	; (80011cc <HAL_GPIO_Init+0x334>)
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	43db      	mvns	r3, r3
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	4013      	ands	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001120:	2b00      	cmp	r3, #0
 8001122:	d003      	beq.n	800112c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	4313      	orrs	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800112c:	4a27      	ldr	r2, [pc, #156]	; (80011cc <HAL_GPIO_Init+0x334>)
 800112e:	69bb      	ldr	r3, [r7, #24]
 8001130:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001132:	4b26      	ldr	r3, [pc, #152]	; (80011cc <HAL_GPIO_Init+0x334>)
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	43db      	mvns	r3, r3
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	4013      	ands	r3, r2
 8001140:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800114a:	2b00      	cmp	r3, #0
 800114c:	d003      	beq.n	8001156 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	4313      	orrs	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001156:	4a1d      	ldr	r2, [pc, #116]	; (80011cc <HAL_GPIO_Init+0x334>)
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800115c:	4b1b      	ldr	r3, [pc, #108]	; (80011cc <HAL_GPIO_Init+0x334>)
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	43db      	mvns	r3, r3
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	4013      	ands	r3, r2
 800116a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001174:	2b00      	cmp	r3, #0
 8001176:	d003      	beq.n	8001180 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	4313      	orrs	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001180:	4a12      	ldr	r2, [pc, #72]	; (80011cc <HAL_GPIO_Init+0x334>)
 8001182:	69bb      	ldr	r3, [r7, #24]
 8001184:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	3301      	adds	r3, #1
 800118a:	61fb      	str	r3, [r7, #28]
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	2b0f      	cmp	r3, #15
 8001190:	f67f ae90 	bls.w	8000eb4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001194:	bf00      	nop
 8001196:	bf00      	nop
 8001198:	3724      	adds	r7, #36	; 0x24
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	40023800 	.word	0x40023800
 80011a8:	40013800 	.word	0x40013800
 80011ac:	40020000 	.word	0x40020000
 80011b0:	40020400 	.word	0x40020400
 80011b4:	40020800 	.word	0x40020800
 80011b8:	40020c00 	.word	0x40020c00
 80011bc:	40021000 	.word	0x40021000
 80011c0:	40021400 	.word	0x40021400
 80011c4:	40021800 	.word	0x40021800
 80011c8:	40021c00 	.word	0x40021c00
 80011cc:	40013c00 	.word	0x40013c00

080011d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	460b      	mov	r3, r1
 80011da:	807b      	strh	r3, [r7, #2]
 80011dc:	4613      	mov	r3, r2
 80011de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011e0:	787b      	ldrb	r3, [r7, #1]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d003      	beq.n	80011ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011e6:	887a      	ldrh	r2, [r7, #2]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011ec:	e003      	b.n	80011f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011ee:	887b      	ldrh	r3, [r7, #2]
 80011f0:	041a      	lsls	r2, r3, #16
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	619a      	str	r2, [r3, #24]
}
 80011f6:	bf00      	nop
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
	...

08001204 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b086      	sub	sp, #24
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d101      	bne.n	8001216 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e264      	b.n	80016e0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	2b00      	cmp	r3, #0
 8001220:	d075      	beq.n	800130e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001222:	4ba3      	ldr	r3, [pc, #652]	; (80014b0 <HAL_RCC_OscConfig+0x2ac>)
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	f003 030c 	and.w	r3, r3, #12
 800122a:	2b04      	cmp	r3, #4
 800122c:	d00c      	beq.n	8001248 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800122e:	4ba0      	ldr	r3, [pc, #640]	; (80014b0 <HAL_RCC_OscConfig+0x2ac>)
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001236:	2b08      	cmp	r3, #8
 8001238:	d112      	bne.n	8001260 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800123a:	4b9d      	ldr	r3, [pc, #628]	; (80014b0 <HAL_RCC_OscConfig+0x2ac>)
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001242:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001246:	d10b      	bne.n	8001260 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001248:	4b99      	ldr	r3, [pc, #612]	; (80014b0 <HAL_RCC_OscConfig+0x2ac>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001250:	2b00      	cmp	r3, #0
 8001252:	d05b      	beq.n	800130c <HAL_RCC_OscConfig+0x108>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d157      	bne.n	800130c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800125c:	2301      	movs	r3, #1
 800125e:	e23f      	b.n	80016e0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001268:	d106      	bne.n	8001278 <HAL_RCC_OscConfig+0x74>
 800126a:	4b91      	ldr	r3, [pc, #580]	; (80014b0 <HAL_RCC_OscConfig+0x2ac>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a90      	ldr	r2, [pc, #576]	; (80014b0 <HAL_RCC_OscConfig+0x2ac>)
 8001270:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001274:	6013      	str	r3, [r2, #0]
 8001276:	e01d      	b.n	80012b4 <HAL_RCC_OscConfig+0xb0>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001280:	d10c      	bne.n	800129c <HAL_RCC_OscConfig+0x98>
 8001282:	4b8b      	ldr	r3, [pc, #556]	; (80014b0 <HAL_RCC_OscConfig+0x2ac>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a8a      	ldr	r2, [pc, #552]	; (80014b0 <HAL_RCC_OscConfig+0x2ac>)
 8001288:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800128c:	6013      	str	r3, [r2, #0]
 800128e:	4b88      	ldr	r3, [pc, #544]	; (80014b0 <HAL_RCC_OscConfig+0x2ac>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a87      	ldr	r2, [pc, #540]	; (80014b0 <HAL_RCC_OscConfig+0x2ac>)
 8001294:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001298:	6013      	str	r3, [r2, #0]
 800129a:	e00b      	b.n	80012b4 <HAL_RCC_OscConfig+0xb0>
 800129c:	4b84      	ldr	r3, [pc, #528]	; (80014b0 <HAL_RCC_OscConfig+0x2ac>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a83      	ldr	r2, [pc, #524]	; (80014b0 <HAL_RCC_OscConfig+0x2ac>)
 80012a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012a6:	6013      	str	r3, [r2, #0]
 80012a8:	4b81      	ldr	r3, [pc, #516]	; (80014b0 <HAL_RCC_OscConfig+0x2ac>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a80      	ldr	r2, [pc, #512]	; (80014b0 <HAL_RCC_OscConfig+0x2ac>)
 80012ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d013      	beq.n	80012e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012bc:	f7ff fcfe 	bl	8000cbc <HAL_GetTick>
 80012c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012c2:	e008      	b.n	80012d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012c4:	f7ff fcfa 	bl	8000cbc <HAL_GetTick>
 80012c8:	4602      	mov	r2, r0
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	2b64      	cmp	r3, #100	; 0x64
 80012d0:	d901      	bls.n	80012d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012d2:	2303      	movs	r3, #3
 80012d4:	e204      	b.n	80016e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012d6:	4b76      	ldr	r3, [pc, #472]	; (80014b0 <HAL_RCC_OscConfig+0x2ac>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d0f0      	beq.n	80012c4 <HAL_RCC_OscConfig+0xc0>
 80012e2:	e014      	b.n	800130e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e4:	f7ff fcea 	bl	8000cbc <HAL_GetTick>
 80012e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ea:	e008      	b.n	80012fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012ec:	f7ff fce6 	bl	8000cbc <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	2b64      	cmp	r3, #100	; 0x64
 80012f8:	d901      	bls.n	80012fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e1f0      	b.n	80016e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012fe:	4b6c      	ldr	r3, [pc, #432]	; (80014b0 <HAL_RCC_OscConfig+0x2ac>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d1f0      	bne.n	80012ec <HAL_RCC_OscConfig+0xe8>
 800130a:	e000      	b.n	800130e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800130c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 0302 	and.w	r3, r3, #2
 8001316:	2b00      	cmp	r3, #0
 8001318:	d063      	beq.n	80013e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800131a:	4b65      	ldr	r3, [pc, #404]	; (80014b0 <HAL_RCC_OscConfig+0x2ac>)
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	f003 030c 	and.w	r3, r3, #12
 8001322:	2b00      	cmp	r3, #0
 8001324:	d00b      	beq.n	800133e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001326:	4b62      	ldr	r3, [pc, #392]	; (80014b0 <HAL_RCC_OscConfig+0x2ac>)
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800132e:	2b08      	cmp	r3, #8
 8001330:	d11c      	bne.n	800136c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001332:	4b5f      	ldr	r3, [pc, #380]	; (80014b0 <HAL_RCC_OscConfig+0x2ac>)
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d116      	bne.n	800136c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800133e:	4b5c      	ldr	r3, [pc, #368]	; (80014b0 <HAL_RCC_OscConfig+0x2ac>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 0302 	and.w	r3, r3, #2
 8001346:	2b00      	cmp	r3, #0
 8001348:	d005      	beq.n	8001356 <HAL_RCC_OscConfig+0x152>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	68db      	ldr	r3, [r3, #12]
 800134e:	2b01      	cmp	r3, #1
 8001350:	d001      	beq.n	8001356 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e1c4      	b.n	80016e0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001356:	4b56      	ldr	r3, [pc, #344]	; (80014b0 <HAL_RCC_OscConfig+0x2ac>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	691b      	ldr	r3, [r3, #16]
 8001362:	00db      	lsls	r3, r3, #3
 8001364:	4952      	ldr	r1, [pc, #328]	; (80014b0 <HAL_RCC_OscConfig+0x2ac>)
 8001366:	4313      	orrs	r3, r2
 8001368:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800136a:	e03a      	b.n	80013e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d020      	beq.n	80013b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001374:	4b4f      	ldr	r3, [pc, #316]	; (80014b4 <HAL_RCC_OscConfig+0x2b0>)
 8001376:	2201      	movs	r2, #1
 8001378:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800137a:	f7ff fc9f 	bl	8000cbc <HAL_GetTick>
 800137e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001380:	e008      	b.n	8001394 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001382:	f7ff fc9b 	bl	8000cbc <HAL_GetTick>
 8001386:	4602      	mov	r2, r0
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	2b02      	cmp	r3, #2
 800138e:	d901      	bls.n	8001394 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001390:	2303      	movs	r3, #3
 8001392:	e1a5      	b.n	80016e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001394:	4b46      	ldr	r3, [pc, #280]	; (80014b0 <HAL_RCC_OscConfig+0x2ac>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f003 0302 	and.w	r3, r3, #2
 800139c:	2b00      	cmp	r3, #0
 800139e:	d0f0      	beq.n	8001382 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013a0:	4b43      	ldr	r3, [pc, #268]	; (80014b0 <HAL_RCC_OscConfig+0x2ac>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	691b      	ldr	r3, [r3, #16]
 80013ac:	00db      	lsls	r3, r3, #3
 80013ae:	4940      	ldr	r1, [pc, #256]	; (80014b0 <HAL_RCC_OscConfig+0x2ac>)
 80013b0:	4313      	orrs	r3, r2
 80013b2:	600b      	str	r3, [r1, #0]
 80013b4:	e015      	b.n	80013e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013b6:	4b3f      	ldr	r3, [pc, #252]	; (80014b4 <HAL_RCC_OscConfig+0x2b0>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013bc:	f7ff fc7e 	bl	8000cbc <HAL_GetTick>
 80013c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013c2:	e008      	b.n	80013d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013c4:	f7ff fc7a 	bl	8000cbc <HAL_GetTick>
 80013c8:	4602      	mov	r2, r0
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d901      	bls.n	80013d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013d2:	2303      	movs	r3, #3
 80013d4:	e184      	b.n	80016e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013d6:	4b36      	ldr	r3, [pc, #216]	; (80014b0 <HAL_RCC_OscConfig+0x2ac>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 0302 	and.w	r3, r3, #2
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d1f0      	bne.n	80013c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0308 	and.w	r3, r3, #8
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d030      	beq.n	8001450 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	695b      	ldr	r3, [r3, #20]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d016      	beq.n	8001424 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013f6:	4b30      	ldr	r3, [pc, #192]	; (80014b8 <HAL_RCC_OscConfig+0x2b4>)
 80013f8:	2201      	movs	r2, #1
 80013fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013fc:	f7ff fc5e 	bl	8000cbc <HAL_GetTick>
 8001400:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001402:	e008      	b.n	8001416 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001404:	f7ff fc5a 	bl	8000cbc <HAL_GetTick>
 8001408:	4602      	mov	r2, r0
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	2b02      	cmp	r3, #2
 8001410:	d901      	bls.n	8001416 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001412:	2303      	movs	r3, #3
 8001414:	e164      	b.n	80016e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001416:	4b26      	ldr	r3, [pc, #152]	; (80014b0 <HAL_RCC_OscConfig+0x2ac>)
 8001418:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800141a:	f003 0302 	and.w	r3, r3, #2
 800141e:	2b00      	cmp	r3, #0
 8001420:	d0f0      	beq.n	8001404 <HAL_RCC_OscConfig+0x200>
 8001422:	e015      	b.n	8001450 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001424:	4b24      	ldr	r3, [pc, #144]	; (80014b8 <HAL_RCC_OscConfig+0x2b4>)
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800142a:	f7ff fc47 	bl	8000cbc <HAL_GetTick>
 800142e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001430:	e008      	b.n	8001444 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001432:	f7ff fc43 	bl	8000cbc <HAL_GetTick>
 8001436:	4602      	mov	r2, r0
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	1ad3      	subs	r3, r2, r3
 800143c:	2b02      	cmp	r3, #2
 800143e:	d901      	bls.n	8001444 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001440:	2303      	movs	r3, #3
 8001442:	e14d      	b.n	80016e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001444:	4b1a      	ldr	r3, [pc, #104]	; (80014b0 <HAL_RCC_OscConfig+0x2ac>)
 8001446:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001448:	f003 0302 	and.w	r3, r3, #2
 800144c:	2b00      	cmp	r3, #0
 800144e:	d1f0      	bne.n	8001432 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 0304 	and.w	r3, r3, #4
 8001458:	2b00      	cmp	r3, #0
 800145a:	f000 80a0 	beq.w	800159e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800145e:	2300      	movs	r3, #0
 8001460:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001462:	4b13      	ldr	r3, [pc, #76]	; (80014b0 <HAL_RCC_OscConfig+0x2ac>)
 8001464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d10f      	bne.n	800148e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	60bb      	str	r3, [r7, #8]
 8001472:	4b0f      	ldr	r3, [pc, #60]	; (80014b0 <HAL_RCC_OscConfig+0x2ac>)
 8001474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001476:	4a0e      	ldr	r2, [pc, #56]	; (80014b0 <HAL_RCC_OscConfig+0x2ac>)
 8001478:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800147c:	6413      	str	r3, [r2, #64]	; 0x40
 800147e:	4b0c      	ldr	r3, [pc, #48]	; (80014b0 <HAL_RCC_OscConfig+0x2ac>)
 8001480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001486:	60bb      	str	r3, [r7, #8]
 8001488:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800148a:	2301      	movs	r3, #1
 800148c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800148e:	4b0b      	ldr	r3, [pc, #44]	; (80014bc <HAL_RCC_OscConfig+0x2b8>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001496:	2b00      	cmp	r3, #0
 8001498:	d121      	bne.n	80014de <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800149a:	4b08      	ldr	r3, [pc, #32]	; (80014bc <HAL_RCC_OscConfig+0x2b8>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a07      	ldr	r2, [pc, #28]	; (80014bc <HAL_RCC_OscConfig+0x2b8>)
 80014a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014a6:	f7ff fc09 	bl	8000cbc <HAL_GetTick>
 80014aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ac:	e011      	b.n	80014d2 <HAL_RCC_OscConfig+0x2ce>
 80014ae:	bf00      	nop
 80014b0:	40023800 	.word	0x40023800
 80014b4:	42470000 	.word	0x42470000
 80014b8:	42470e80 	.word	0x42470e80
 80014bc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014c0:	f7ff fbfc 	bl	8000cbc <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d901      	bls.n	80014d2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	e106      	b.n	80016e0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014d2:	4b85      	ldr	r3, [pc, #532]	; (80016e8 <HAL_RCC_OscConfig+0x4e4>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d0f0      	beq.n	80014c0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d106      	bne.n	80014f4 <HAL_RCC_OscConfig+0x2f0>
 80014e6:	4b81      	ldr	r3, [pc, #516]	; (80016ec <HAL_RCC_OscConfig+0x4e8>)
 80014e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ea:	4a80      	ldr	r2, [pc, #512]	; (80016ec <HAL_RCC_OscConfig+0x4e8>)
 80014ec:	f043 0301 	orr.w	r3, r3, #1
 80014f0:	6713      	str	r3, [r2, #112]	; 0x70
 80014f2:	e01c      	b.n	800152e <HAL_RCC_OscConfig+0x32a>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	2b05      	cmp	r3, #5
 80014fa:	d10c      	bne.n	8001516 <HAL_RCC_OscConfig+0x312>
 80014fc:	4b7b      	ldr	r3, [pc, #492]	; (80016ec <HAL_RCC_OscConfig+0x4e8>)
 80014fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001500:	4a7a      	ldr	r2, [pc, #488]	; (80016ec <HAL_RCC_OscConfig+0x4e8>)
 8001502:	f043 0304 	orr.w	r3, r3, #4
 8001506:	6713      	str	r3, [r2, #112]	; 0x70
 8001508:	4b78      	ldr	r3, [pc, #480]	; (80016ec <HAL_RCC_OscConfig+0x4e8>)
 800150a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800150c:	4a77      	ldr	r2, [pc, #476]	; (80016ec <HAL_RCC_OscConfig+0x4e8>)
 800150e:	f043 0301 	orr.w	r3, r3, #1
 8001512:	6713      	str	r3, [r2, #112]	; 0x70
 8001514:	e00b      	b.n	800152e <HAL_RCC_OscConfig+0x32a>
 8001516:	4b75      	ldr	r3, [pc, #468]	; (80016ec <HAL_RCC_OscConfig+0x4e8>)
 8001518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800151a:	4a74      	ldr	r2, [pc, #464]	; (80016ec <HAL_RCC_OscConfig+0x4e8>)
 800151c:	f023 0301 	bic.w	r3, r3, #1
 8001520:	6713      	str	r3, [r2, #112]	; 0x70
 8001522:	4b72      	ldr	r3, [pc, #456]	; (80016ec <HAL_RCC_OscConfig+0x4e8>)
 8001524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001526:	4a71      	ldr	r2, [pc, #452]	; (80016ec <HAL_RCC_OscConfig+0x4e8>)
 8001528:	f023 0304 	bic.w	r3, r3, #4
 800152c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d015      	beq.n	8001562 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001536:	f7ff fbc1 	bl	8000cbc <HAL_GetTick>
 800153a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800153c:	e00a      	b.n	8001554 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800153e:	f7ff fbbd 	bl	8000cbc <HAL_GetTick>
 8001542:	4602      	mov	r2, r0
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	f241 3288 	movw	r2, #5000	; 0x1388
 800154c:	4293      	cmp	r3, r2
 800154e:	d901      	bls.n	8001554 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001550:	2303      	movs	r3, #3
 8001552:	e0c5      	b.n	80016e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001554:	4b65      	ldr	r3, [pc, #404]	; (80016ec <HAL_RCC_OscConfig+0x4e8>)
 8001556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001558:	f003 0302 	and.w	r3, r3, #2
 800155c:	2b00      	cmp	r3, #0
 800155e:	d0ee      	beq.n	800153e <HAL_RCC_OscConfig+0x33a>
 8001560:	e014      	b.n	800158c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001562:	f7ff fbab 	bl	8000cbc <HAL_GetTick>
 8001566:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001568:	e00a      	b.n	8001580 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800156a:	f7ff fba7 	bl	8000cbc <HAL_GetTick>
 800156e:	4602      	mov	r2, r0
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	f241 3288 	movw	r2, #5000	; 0x1388
 8001578:	4293      	cmp	r3, r2
 800157a:	d901      	bls.n	8001580 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800157c:	2303      	movs	r3, #3
 800157e:	e0af      	b.n	80016e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001580:	4b5a      	ldr	r3, [pc, #360]	; (80016ec <HAL_RCC_OscConfig+0x4e8>)
 8001582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001584:	f003 0302 	and.w	r3, r3, #2
 8001588:	2b00      	cmp	r3, #0
 800158a:	d1ee      	bne.n	800156a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800158c:	7dfb      	ldrb	r3, [r7, #23]
 800158e:	2b01      	cmp	r3, #1
 8001590:	d105      	bne.n	800159e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001592:	4b56      	ldr	r3, [pc, #344]	; (80016ec <HAL_RCC_OscConfig+0x4e8>)
 8001594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001596:	4a55      	ldr	r2, [pc, #340]	; (80016ec <HAL_RCC_OscConfig+0x4e8>)
 8001598:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800159c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	699b      	ldr	r3, [r3, #24]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	f000 809b 	beq.w	80016de <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015a8:	4b50      	ldr	r3, [pc, #320]	; (80016ec <HAL_RCC_OscConfig+0x4e8>)
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	f003 030c 	and.w	r3, r3, #12
 80015b0:	2b08      	cmp	r3, #8
 80015b2:	d05c      	beq.n	800166e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	699b      	ldr	r3, [r3, #24]
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d141      	bne.n	8001640 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015bc:	4b4c      	ldr	r3, [pc, #304]	; (80016f0 <HAL_RCC_OscConfig+0x4ec>)
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c2:	f7ff fb7b 	bl	8000cbc <HAL_GetTick>
 80015c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015c8:	e008      	b.n	80015dc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015ca:	f7ff fb77 	bl	8000cbc <HAL_GetTick>
 80015ce:	4602      	mov	r2, r0
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d901      	bls.n	80015dc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e081      	b.n	80016e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015dc:	4b43      	ldr	r3, [pc, #268]	; (80016ec <HAL_RCC_OscConfig+0x4e8>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d1f0      	bne.n	80015ca <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	69da      	ldr	r2, [r3, #28]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6a1b      	ldr	r3, [r3, #32]
 80015f0:	431a      	orrs	r2, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f6:	019b      	lsls	r3, r3, #6
 80015f8:	431a      	orrs	r2, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015fe:	085b      	lsrs	r3, r3, #1
 8001600:	3b01      	subs	r3, #1
 8001602:	041b      	lsls	r3, r3, #16
 8001604:	431a      	orrs	r2, r3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800160a:	061b      	lsls	r3, r3, #24
 800160c:	4937      	ldr	r1, [pc, #220]	; (80016ec <HAL_RCC_OscConfig+0x4e8>)
 800160e:	4313      	orrs	r3, r2
 8001610:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001612:	4b37      	ldr	r3, [pc, #220]	; (80016f0 <HAL_RCC_OscConfig+0x4ec>)
 8001614:	2201      	movs	r2, #1
 8001616:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001618:	f7ff fb50 	bl	8000cbc <HAL_GetTick>
 800161c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800161e:	e008      	b.n	8001632 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001620:	f7ff fb4c 	bl	8000cbc <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b02      	cmp	r3, #2
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e056      	b.n	80016e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001632:	4b2e      	ldr	r3, [pc, #184]	; (80016ec <HAL_RCC_OscConfig+0x4e8>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d0f0      	beq.n	8001620 <HAL_RCC_OscConfig+0x41c>
 800163e:	e04e      	b.n	80016de <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001640:	4b2b      	ldr	r3, [pc, #172]	; (80016f0 <HAL_RCC_OscConfig+0x4ec>)
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001646:	f7ff fb39 	bl	8000cbc <HAL_GetTick>
 800164a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800164c:	e008      	b.n	8001660 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800164e:	f7ff fb35 	bl	8000cbc <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	2b02      	cmp	r3, #2
 800165a:	d901      	bls.n	8001660 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	e03f      	b.n	80016e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001660:	4b22      	ldr	r3, [pc, #136]	; (80016ec <HAL_RCC_OscConfig+0x4e8>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d1f0      	bne.n	800164e <HAL_RCC_OscConfig+0x44a>
 800166c:	e037      	b.n	80016de <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	699b      	ldr	r3, [r3, #24]
 8001672:	2b01      	cmp	r3, #1
 8001674:	d101      	bne.n	800167a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e032      	b.n	80016e0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800167a:	4b1c      	ldr	r3, [pc, #112]	; (80016ec <HAL_RCC_OscConfig+0x4e8>)
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	699b      	ldr	r3, [r3, #24]
 8001684:	2b01      	cmp	r3, #1
 8001686:	d028      	beq.n	80016da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001692:	429a      	cmp	r2, r3
 8001694:	d121      	bne.n	80016da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d11a      	bne.n	80016da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016a4:	68fa      	ldr	r2, [r7, #12]
 80016a6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016aa:	4013      	ands	r3, r2
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016b0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d111      	bne.n	80016da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c0:	085b      	lsrs	r3, r3, #1
 80016c2:	3b01      	subs	r3, #1
 80016c4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d107      	bne.n	80016da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d001      	beq.n	80016de <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e000      	b.n	80016e0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80016de:	2300      	movs	r3, #0
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3718      	adds	r7, #24
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	40007000 	.word	0x40007000
 80016ec:	40023800 	.word	0x40023800
 80016f0:	42470060 	.word	0x42470060

080016f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d101      	bne.n	8001708 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e0cc      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001708:	4b68      	ldr	r3, [pc, #416]	; (80018ac <HAL_RCC_ClockConfig+0x1b8>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0307 	and.w	r3, r3, #7
 8001710:	683a      	ldr	r2, [r7, #0]
 8001712:	429a      	cmp	r2, r3
 8001714:	d90c      	bls.n	8001730 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001716:	4b65      	ldr	r3, [pc, #404]	; (80018ac <HAL_RCC_ClockConfig+0x1b8>)
 8001718:	683a      	ldr	r2, [r7, #0]
 800171a:	b2d2      	uxtb	r2, r2
 800171c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800171e:	4b63      	ldr	r3, [pc, #396]	; (80018ac <HAL_RCC_ClockConfig+0x1b8>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0307 	and.w	r3, r3, #7
 8001726:	683a      	ldr	r2, [r7, #0]
 8001728:	429a      	cmp	r2, r3
 800172a:	d001      	beq.n	8001730 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e0b8      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0302 	and.w	r3, r3, #2
 8001738:	2b00      	cmp	r3, #0
 800173a:	d020      	beq.n	800177e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0304 	and.w	r3, r3, #4
 8001744:	2b00      	cmp	r3, #0
 8001746:	d005      	beq.n	8001754 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001748:	4b59      	ldr	r3, [pc, #356]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	4a58      	ldr	r2, [pc, #352]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 800174e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001752:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0308 	and.w	r3, r3, #8
 800175c:	2b00      	cmp	r3, #0
 800175e:	d005      	beq.n	800176c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001760:	4b53      	ldr	r3, [pc, #332]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	4a52      	ldr	r2, [pc, #328]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001766:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800176a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800176c:	4b50      	ldr	r3, [pc, #320]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	494d      	ldr	r1, [pc, #308]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 800177a:	4313      	orrs	r3, r2
 800177c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0301 	and.w	r3, r3, #1
 8001786:	2b00      	cmp	r3, #0
 8001788:	d044      	beq.n	8001814 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d107      	bne.n	80017a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001792:	4b47      	ldr	r3, [pc, #284]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d119      	bne.n	80017d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e07f      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d003      	beq.n	80017b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017ae:	2b03      	cmp	r3, #3
 80017b0:	d107      	bne.n	80017c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017b2:	4b3f      	ldr	r3, [pc, #252]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d109      	bne.n	80017d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e06f      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017c2:	4b3b      	ldr	r3, [pc, #236]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0302 	and.w	r3, r3, #2
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d101      	bne.n	80017d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e067      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017d2:	4b37      	ldr	r3, [pc, #220]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	f023 0203 	bic.w	r2, r3, #3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	4934      	ldr	r1, [pc, #208]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 80017e0:	4313      	orrs	r3, r2
 80017e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017e4:	f7ff fa6a 	bl	8000cbc <HAL_GetTick>
 80017e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ea:	e00a      	b.n	8001802 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017ec:	f7ff fa66 	bl	8000cbc <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e04f      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001802:	4b2b      	ldr	r3, [pc, #172]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f003 020c 	and.w	r2, r3, #12
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	429a      	cmp	r2, r3
 8001812:	d1eb      	bne.n	80017ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001814:	4b25      	ldr	r3, [pc, #148]	; (80018ac <HAL_RCC_ClockConfig+0x1b8>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0307 	and.w	r3, r3, #7
 800181c:	683a      	ldr	r2, [r7, #0]
 800181e:	429a      	cmp	r2, r3
 8001820:	d20c      	bcs.n	800183c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001822:	4b22      	ldr	r3, [pc, #136]	; (80018ac <HAL_RCC_ClockConfig+0x1b8>)
 8001824:	683a      	ldr	r2, [r7, #0]
 8001826:	b2d2      	uxtb	r2, r2
 8001828:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800182a:	4b20      	ldr	r3, [pc, #128]	; (80018ac <HAL_RCC_ClockConfig+0x1b8>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0307 	and.w	r3, r3, #7
 8001832:	683a      	ldr	r2, [r7, #0]
 8001834:	429a      	cmp	r2, r3
 8001836:	d001      	beq.n	800183c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e032      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0304 	and.w	r3, r3, #4
 8001844:	2b00      	cmp	r3, #0
 8001846:	d008      	beq.n	800185a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001848:	4b19      	ldr	r3, [pc, #100]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	4916      	ldr	r1, [pc, #88]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001856:	4313      	orrs	r3, r2
 8001858:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0308 	and.w	r3, r3, #8
 8001862:	2b00      	cmp	r3, #0
 8001864:	d009      	beq.n	800187a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001866:	4b12      	ldr	r3, [pc, #72]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	691b      	ldr	r3, [r3, #16]
 8001872:	00db      	lsls	r3, r3, #3
 8001874:	490e      	ldr	r1, [pc, #56]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001876:	4313      	orrs	r3, r2
 8001878:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800187a:	f000 f821 	bl	80018c0 <HAL_RCC_GetSysClockFreq>
 800187e:	4602      	mov	r2, r0
 8001880:	4b0b      	ldr	r3, [pc, #44]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	091b      	lsrs	r3, r3, #4
 8001886:	f003 030f 	and.w	r3, r3, #15
 800188a:	490a      	ldr	r1, [pc, #40]	; (80018b4 <HAL_RCC_ClockConfig+0x1c0>)
 800188c:	5ccb      	ldrb	r3, [r1, r3]
 800188e:	fa22 f303 	lsr.w	r3, r2, r3
 8001892:	4a09      	ldr	r2, [pc, #36]	; (80018b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001894:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001896:	4b09      	ldr	r3, [pc, #36]	; (80018bc <HAL_RCC_ClockConfig+0x1c8>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4618      	mov	r0, r3
 800189c:	f7ff f8d0 	bl	8000a40 <HAL_InitTick>

  return HAL_OK;
 80018a0:	2300      	movs	r3, #0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3710      	adds	r7, #16
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40023c00 	.word	0x40023c00
 80018b0:	40023800 	.word	0x40023800
 80018b4:	08007200 	.word	0x08007200
 80018b8:	20000000 	.word	0x20000000
 80018bc:	20000004 	.word	0x20000004

080018c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80018c4:	b084      	sub	sp, #16
 80018c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80018c8:	2300      	movs	r3, #0
 80018ca:	607b      	str	r3, [r7, #4]
 80018cc:	2300      	movs	r3, #0
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	2300      	movs	r3, #0
 80018d2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80018d4:	2300      	movs	r3, #0
 80018d6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018d8:	4b67      	ldr	r3, [pc, #412]	; (8001a78 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	f003 030c 	and.w	r3, r3, #12
 80018e0:	2b08      	cmp	r3, #8
 80018e2:	d00d      	beq.n	8001900 <HAL_RCC_GetSysClockFreq+0x40>
 80018e4:	2b08      	cmp	r3, #8
 80018e6:	f200 80bd 	bhi.w	8001a64 <HAL_RCC_GetSysClockFreq+0x1a4>
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d002      	beq.n	80018f4 <HAL_RCC_GetSysClockFreq+0x34>
 80018ee:	2b04      	cmp	r3, #4
 80018f0:	d003      	beq.n	80018fa <HAL_RCC_GetSysClockFreq+0x3a>
 80018f2:	e0b7      	b.n	8001a64 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018f4:	4b61      	ldr	r3, [pc, #388]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80018f6:	60bb      	str	r3, [r7, #8]
       break;
 80018f8:	e0b7      	b.n	8001a6a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018fa:	4b61      	ldr	r3, [pc, #388]	; (8001a80 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80018fc:	60bb      	str	r3, [r7, #8]
      break;
 80018fe:	e0b4      	b.n	8001a6a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001900:	4b5d      	ldr	r3, [pc, #372]	; (8001a78 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001908:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800190a:	4b5b      	ldr	r3, [pc, #364]	; (8001a78 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d04d      	beq.n	80019b2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001916:	4b58      	ldr	r3, [pc, #352]	; (8001a78 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	099b      	lsrs	r3, r3, #6
 800191c:	461a      	mov	r2, r3
 800191e:	f04f 0300 	mov.w	r3, #0
 8001922:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001926:	f04f 0100 	mov.w	r1, #0
 800192a:	ea02 0800 	and.w	r8, r2, r0
 800192e:	ea03 0901 	and.w	r9, r3, r1
 8001932:	4640      	mov	r0, r8
 8001934:	4649      	mov	r1, r9
 8001936:	f04f 0200 	mov.w	r2, #0
 800193a:	f04f 0300 	mov.w	r3, #0
 800193e:	014b      	lsls	r3, r1, #5
 8001940:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001944:	0142      	lsls	r2, r0, #5
 8001946:	4610      	mov	r0, r2
 8001948:	4619      	mov	r1, r3
 800194a:	ebb0 0008 	subs.w	r0, r0, r8
 800194e:	eb61 0109 	sbc.w	r1, r1, r9
 8001952:	f04f 0200 	mov.w	r2, #0
 8001956:	f04f 0300 	mov.w	r3, #0
 800195a:	018b      	lsls	r3, r1, #6
 800195c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001960:	0182      	lsls	r2, r0, #6
 8001962:	1a12      	subs	r2, r2, r0
 8001964:	eb63 0301 	sbc.w	r3, r3, r1
 8001968:	f04f 0000 	mov.w	r0, #0
 800196c:	f04f 0100 	mov.w	r1, #0
 8001970:	00d9      	lsls	r1, r3, #3
 8001972:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001976:	00d0      	lsls	r0, r2, #3
 8001978:	4602      	mov	r2, r0
 800197a:	460b      	mov	r3, r1
 800197c:	eb12 0208 	adds.w	r2, r2, r8
 8001980:	eb43 0309 	adc.w	r3, r3, r9
 8001984:	f04f 0000 	mov.w	r0, #0
 8001988:	f04f 0100 	mov.w	r1, #0
 800198c:	0259      	lsls	r1, r3, #9
 800198e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001992:	0250      	lsls	r0, r2, #9
 8001994:	4602      	mov	r2, r0
 8001996:	460b      	mov	r3, r1
 8001998:	4610      	mov	r0, r2
 800199a:	4619      	mov	r1, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	461a      	mov	r2, r3
 80019a0:	f04f 0300 	mov.w	r3, #0
 80019a4:	f7fe fc5e 	bl	8000264 <__aeabi_uldivmod>
 80019a8:	4602      	mov	r2, r0
 80019aa:	460b      	mov	r3, r1
 80019ac:	4613      	mov	r3, r2
 80019ae:	60fb      	str	r3, [r7, #12]
 80019b0:	e04a      	b.n	8001a48 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019b2:	4b31      	ldr	r3, [pc, #196]	; (8001a78 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	099b      	lsrs	r3, r3, #6
 80019b8:	461a      	mov	r2, r3
 80019ba:	f04f 0300 	mov.w	r3, #0
 80019be:	f240 10ff 	movw	r0, #511	; 0x1ff
 80019c2:	f04f 0100 	mov.w	r1, #0
 80019c6:	ea02 0400 	and.w	r4, r2, r0
 80019ca:	ea03 0501 	and.w	r5, r3, r1
 80019ce:	4620      	mov	r0, r4
 80019d0:	4629      	mov	r1, r5
 80019d2:	f04f 0200 	mov.w	r2, #0
 80019d6:	f04f 0300 	mov.w	r3, #0
 80019da:	014b      	lsls	r3, r1, #5
 80019dc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80019e0:	0142      	lsls	r2, r0, #5
 80019e2:	4610      	mov	r0, r2
 80019e4:	4619      	mov	r1, r3
 80019e6:	1b00      	subs	r0, r0, r4
 80019e8:	eb61 0105 	sbc.w	r1, r1, r5
 80019ec:	f04f 0200 	mov.w	r2, #0
 80019f0:	f04f 0300 	mov.w	r3, #0
 80019f4:	018b      	lsls	r3, r1, #6
 80019f6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80019fa:	0182      	lsls	r2, r0, #6
 80019fc:	1a12      	subs	r2, r2, r0
 80019fe:	eb63 0301 	sbc.w	r3, r3, r1
 8001a02:	f04f 0000 	mov.w	r0, #0
 8001a06:	f04f 0100 	mov.w	r1, #0
 8001a0a:	00d9      	lsls	r1, r3, #3
 8001a0c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001a10:	00d0      	lsls	r0, r2, #3
 8001a12:	4602      	mov	r2, r0
 8001a14:	460b      	mov	r3, r1
 8001a16:	1912      	adds	r2, r2, r4
 8001a18:	eb45 0303 	adc.w	r3, r5, r3
 8001a1c:	f04f 0000 	mov.w	r0, #0
 8001a20:	f04f 0100 	mov.w	r1, #0
 8001a24:	0299      	lsls	r1, r3, #10
 8001a26:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001a2a:	0290      	lsls	r0, r2, #10
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	460b      	mov	r3, r1
 8001a30:	4610      	mov	r0, r2
 8001a32:	4619      	mov	r1, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	461a      	mov	r2, r3
 8001a38:	f04f 0300 	mov.w	r3, #0
 8001a3c:	f7fe fc12 	bl	8000264 <__aeabi_uldivmod>
 8001a40:	4602      	mov	r2, r0
 8001a42:	460b      	mov	r3, r1
 8001a44:	4613      	mov	r3, r2
 8001a46:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a48:	4b0b      	ldr	r3, [pc, #44]	; (8001a78 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	0c1b      	lsrs	r3, r3, #16
 8001a4e:	f003 0303 	and.w	r3, r3, #3
 8001a52:	3301      	adds	r3, #1
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001a58:	68fa      	ldr	r2, [r7, #12]
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a60:	60bb      	str	r3, [r7, #8]
      break;
 8001a62:	e002      	b.n	8001a6a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a64:	4b05      	ldr	r3, [pc, #20]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001a66:	60bb      	str	r3, [r7, #8]
      break;
 8001a68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a6a:	68bb      	ldr	r3, [r7, #8]
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3710      	adds	r7, #16
 8001a70:	46bd      	mov	sp, r7
 8001a72:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001a76:	bf00      	nop
 8001a78:	40023800 	.word	0x40023800
 8001a7c:	00f42400 	.word	0x00f42400
 8001a80:	007a1200 	.word	0x007a1200

08001a84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a88:	4b03      	ldr	r3, [pc, #12]	; (8001a98 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	20000000 	.word	0x20000000

08001a9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001aa0:	f7ff fff0 	bl	8001a84 <HAL_RCC_GetHCLKFreq>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	4b05      	ldr	r3, [pc, #20]	; (8001abc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	0a9b      	lsrs	r3, r3, #10
 8001aac:	f003 0307 	and.w	r3, r3, #7
 8001ab0:	4903      	ldr	r1, [pc, #12]	; (8001ac0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ab2:	5ccb      	ldrb	r3, [r1, r3]
 8001ab4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	40023800 	.word	0x40023800
 8001ac0:	08007210 	.word	0x08007210

08001ac4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	220f      	movs	r2, #15
 8001ad2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ad4:	4b12      	ldr	r3, [pc, #72]	; (8001b20 <HAL_RCC_GetClockConfig+0x5c>)
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	f003 0203 	and.w	r2, r3, #3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ae0:	4b0f      	ldr	r3, [pc, #60]	; (8001b20 <HAL_RCC_GetClockConfig+0x5c>)
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001aec:	4b0c      	ldr	r3, [pc, #48]	; (8001b20 <HAL_RCC_GetClockConfig+0x5c>)
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001af8:	4b09      	ldr	r3, [pc, #36]	; (8001b20 <HAL_RCC_GetClockConfig+0x5c>)
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	08db      	lsrs	r3, r3, #3
 8001afe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b06:	4b07      	ldr	r3, [pc, #28]	; (8001b24 <HAL_RCC_GetClockConfig+0x60>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0207 	and.w	r2, r3, #7
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	601a      	str	r2, [r3, #0]
}
 8001b12:	bf00      	nop
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	40023800 	.word	0x40023800
 8001b24:	40023c00 	.word	0x40023c00

08001b28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d101      	bne.n	8001b3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e041      	b.n	8001bbe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d106      	bne.n	8001b54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f000 f839 	bl	8001bc6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2202      	movs	r2, #2
 8001b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	3304      	adds	r3, #4
 8001b64:	4619      	mov	r1, r3
 8001b66:	4610      	mov	r0, r2
 8001b68:	f000 f9d8 	bl	8001f1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2201      	movs	r2, #1
 8001b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2201      	movs	r2, #1
 8001b88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2201      	movs	r2, #1
 8001b98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	b083      	sub	sp, #12
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001bce:	bf00      	nop
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
	...

08001bdc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b085      	sub	sp, #20
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d001      	beq.n	8001bf4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e04e      	b.n	8001c92 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2202      	movs	r2, #2
 8001bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	68da      	ldr	r2, [r3, #12]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f042 0201 	orr.w	r2, r2, #1
 8001c0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a23      	ldr	r2, [pc, #140]	; (8001ca0 <HAL_TIM_Base_Start_IT+0xc4>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d022      	beq.n	8001c5c <HAL_TIM_Base_Start_IT+0x80>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c1e:	d01d      	beq.n	8001c5c <HAL_TIM_Base_Start_IT+0x80>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a1f      	ldr	r2, [pc, #124]	; (8001ca4 <HAL_TIM_Base_Start_IT+0xc8>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d018      	beq.n	8001c5c <HAL_TIM_Base_Start_IT+0x80>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a1e      	ldr	r2, [pc, #120]	; (8001ca8 <HAL_TIM_Base_Start_IT+0xcc>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d013      	beq.n	8001c5c <HAL_TIM_Base_Start_IT+0x80>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a1c      	ldr	r2, [pc, #112]	; (8001cac <HAL_TIM_Base_Start_IT+0xd0>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d00e      	beq.n	8001c5c <HAL_TIM_Base_Start_IT+0x80>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a1b      	ldr	r2, [pc, #108]	; (8001cb0 <HAL_TIM_Base_Start_IT+0xd4>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d009      	beq.n	8001c5c <HAL_TIM_Base_Start_IT+0x80>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a19      	ldr	r2, [pc, #100]	; (8001cb4 <HAL_TIM_Base_Start_IT+0xd8>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d004      	beq.n	8001c5c <HAL_TIM_Base_Start_IT+0x80>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a18      	ldr	r2, [pc, #96]	; (8001cb8 <HAL_TIM_Base_Start_IT+0xdc>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d111      	bne.n	8001c80 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	f003 0307 	and.w	r3, r3, #7
 8001c66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2b06      	cmp	r3, #6
 8001c6c:	d010      	beq.n	8001c90 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f042 0201 	orr.w	r2, r2, #1
 8001c7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c7e:	e007      	b.n	8001c90 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f042 0201 	orr.w	r2, r2, #1
 8001c8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3714      	adds	r7, #20
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	40010000 	.word	0x40010000
 8001ca4:	40000400 	.word	0x40000400
 8001ca8:	40000800 	.word	0x40000800
 8001cac:	40000c00 	.word	0x40000c00
 8001cb0:	40010400 	.word	0x40010400
 8001cb4:	40014000 	.word	0x40014000
 8001cb8:	40001800 	.word	0x40001800

08001cbc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	691b      	ldr	r3, [r3, #16]
 8001cca:	f003 0302 	and.w	r3, r3, #2
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d122      	bne.n	8001d18 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	f003 0302 	and.w	r3, r3, #2
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d11b      	bne.n	8001d18 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f06f 0202 	mvn.w	r2, #2
 8001ce8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2201      	movs	r2, #1
 8001cee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	699b      	ldr	r3, [r3, #24]
 8001cf6:	f003 0303 	and.w	r3, r3, #3
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d003      	beq.n	8001d06 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f000 f8ee 	bl	8001ee0 <HAL_TIM_IC_CaptureCallback>
 8001d04:	e005      	b.n	8001d12 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f000 f8e0 	bl	8001ecc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f000 f8f1 	bl	8001ef4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	691b      	ldr	r3, [r3, #16]
 8001d1e:	f003 0304 	and.w	r3, r3, #4
 8001d22:	2b04      	cmp	r3, #4
 8001d24:	d122      	bne.n	8001d6c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	f003 0304 	and.w	r3, r3, #4
 8001d30:	2b04      	cmp	r3, #4
 8001d32:	d11b      	bne.n	8001d6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f06f 0204 	mvn.w	r2, #4
 8001d3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2202      	movs	r2, #2
 8001d42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	699b      	ldr	r3, [r3, #24]
 8001d4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d003      	beq.n	8001d5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f000 f8c4 	bl	8001ee0 <HAL_TIM_IC_CaptureCallback>
 8001d58:	e005      	b.n	8001d66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f000 f8b6 	bl	8001ecc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f000 f8c7 	bl	8001ef4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	691b      	ldr	r3, [r3, #16]
 8001d72:	f003 0308 	and.w	r3, r3, #8
 8001d76:	2b08      	cmp	r3, #8
 8001d78:	d122      	bne.n	8001dc0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	f003 0308 	and.w	r3, r3, #8
 8001d84:	2b08      	cmp	r3, #8
 8001d86:	d11b      	bne.n	8001dc0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f06f 0208 	mvn.w	r2, #8
 8001d90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2204      	movs	r2, #4
 8001d96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	69db      	ldr	r3, [r3, #28]
 8001d9e:	f003 0303 	and.w	r3, r3, #3
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d003      	beq.n	8001dae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f000 f89a 	bl	8001ee0 <HAL_TIM_IC_CaptureCallback>
 8001dac:	e005      	b.n	8001dba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f000 f88c 	bl	8001ecc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f000 f89d 	bl	8001ef4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	f003 0310 	and.w	r3, r3, #16
 8001dca:	2b10      	cmp	r3, #16
 8001dcc:	d122      	bne.n	8001e14 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	f003 0310 	and.w	r3, r3, #16
 8001dd8:	2b10      	cmp	r3, #16
 8001dda:	d11b      	bne.n	8001e14 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f06f 0210 	mvn.w	r2, #16
 8001de4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2208      	movs	r2, #8
 8001dea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	69db      	ldr	r3, [r3, #28]
 8001df2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d003      	beq.n	8001e02 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f000 f870 	bl	8001ee0 <HAL_TIM_IC_CaptureCallback>
 8001e00:	e005      	b.n	8001e0e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f000 f862 	bl	8001ecc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f000 f873 	bl	8001ef4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	691b      	ldr	r3, [r3, #16]
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d10e      	bne.n	8001e40 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	f003 0301 	and.w	r3, r3, #1
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d107      	bne.n	8001e40 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f06f 0201 	mvn.w	r2, #1
 8001e38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f7fe fdc0 	bl	80009c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	691b      	ldr	r3, [r3, #16]
 8001e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e4a:	2b80      	cmp	r3, #128	; 0x80
 8001e4c:	d10e      	bne.n	8001e6c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e58:	2b80      	cmp	r3, #128	; 0x80
 8001e5a:	d107      	bne.n	8001e6c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f000 f902 	bl	8002070 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	691b      	ldr	r3, [r3, #16]
 8001e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e76:	2b40      	cmp	r3, #64	; 0x40
 8001e78:	d10e      	bne.n	8001e98 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e84:	2b40      	cmp	r3, #64	; 0x40
 8001e86:	d107      	bne.n	8001e98 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f000 f838 	bl	8001f08 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	691b      	ldr	r3, [r3, #16]
 8001e9e:	f003 0320 	and.w	r3, r3, #32
 8001ea2:	2b20      	cmp	r3, #32
 8001ea4:	d10e      	bne.n	8001ec4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	f003 0320 	and.w	r3, r3, #32
 8001eb0:	2b20      	cmp	r3, #32
 8001eb2:	d107      	bne.n	8001ec4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f06f 0220 	mvn.w	r2, #32
 8001ebc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f000 f8cc 	bl	800205c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ec4:	bf00      	nop
 8001ec6:	3708      	adds	r7, #8
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ed4:	bf00      	nop
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ee8:	bf00      	nop
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001efc:	bf00      	nop
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f10:	bf00      	nop
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b085      	sub	sp, #20
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4a40      	ldr	r2, [pc, #256]	; (8002030 <TIM_Base_SetConfig+0x114>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d013      	beq.n	8001f5c <TIM_Base_SetConfig+0x40>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f3a:	d00f      	beq.n	8001f5c <TIM_Base_SetConfig+0x40>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	4a3d      	ldr	r2, [pc, #244]	; (8002034 <TIM_Base_SetConfig+0x118>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d00b      	beq.n	8001f5c <TIM_Base_SetConfig+0x40>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	4a3c      	ldr	r2, [pc, #240]	; (8002038 <TIM_Base_SetConfig+0x11c>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d007      	beq.n	8001f5c <TIM_Base_SetConfig+0x40>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	4a3b      	ldr	r2, [pc, #236]	; (800203c <TIM_Base_SetConfig+0x120>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d003      	beq.n	8001f5c <TIM_Base_SetConfig+0x40>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4a3a      	ldr	r2, [pc, #232]	; (8002040 <TIM_Base_SetConfig+0x124>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d108      	bne.n	8001f6e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	68fa      	ldr	r2, [r7, #12]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a2f      	ldr	r2, [pc, #188]	; (8002030 <TIM_Base_SetConfig+0x114>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d02b      	beq.n	8001fce <TIM_Base_SetConfig+0xb2>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f7c:	d027      	beq.n	8001fce <TIM_Base_SetConfig+0xb2>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a2c      	ldr	r2, [pc, #176]	; (8002034 <TIM_Base_SetConfig+0x118>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d023      	beq.n	8001fce <TIM_Base_SetConfig+0xb2>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a2b      	ldr	r2, [pc, #172]	; (8002038 <TIM_Base_SetConfig+0x11c>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d01f      	beq.n	8001fce <TIM_Base_SetConfig+0xb2>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a2a      	ldr	r2, [pc, #168]	; (800203c <TIM_Base_SetConfig+0x120>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d01b      	beq.n	8001fce <TIM_Base_SetConfig+0xb2>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a29      	ldr	r2, [pc, #164]	; (8002040 <TIM_Base_SetConfig+0x124>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d017      	beq.n	8001fce <TIM_Base_SetConfig+0xb2>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a28      	ldr	r2, [pc, #160]	; (8002044 <TIM_Base_SetConfig+0x128>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d013      	beq.n	8001fce <TIM_Base_SetConfig+0xb2>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a27      	ldr	r2, [pc, #156]	; (8002048 <TIM_Base_SetConfig+0x12c>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d00f      	beq.n	8001fce <TIM_Base_SetConfig+0xb2>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a26      	ldr	r2, [pc, #152]	; (800204c <TIM_Base_SetConfig+0x130>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d00b      	beq.n	8001fce <TIM_Base_SetConfig+0xb2>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a25      	ldr	r2, [pc, #148]	; (8002050 <TIM_Base_SetConfig+0x134>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d007      	beq.n	8001fce <TIM_Base_SetConfig+0xb2>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a24      	ldr	r2, [pc, #144]	; (8002054 <TIM_Base_SetConfig+0x138>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d003      	beq.n	8001fce <TIM_Base_SetConfig+0xb2>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a23      	ldr	r2, [pc, #140]	; (8002058 <TIM_Base_SetConfig+0x13c>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d108      	bne.n	8001fe0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	68fa      	ldr	r2, [r7, #12]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	695b      	ldr	r3, [r3, #20]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	68fa      	ldr	r2, [r7, #12]
 8001ff2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	689a      	ldr	r2, [r3, #8]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	4a0a      	ldr	r2, [pc, #40]	; (8002030 <TIM_Base_SetConfig+0x114>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d003      	beq.n	8002014 <TIM_Base_SetConfig+0xf8>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4a0c      	ldr	r2, [pc, #48]	; (8002040 <TIM_Base_SetConfig+0x124>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d103      	bne.n	800201c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	691a      	ldr	r2, [r3, #16]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2201      	movs	r2, #1
 8002020:	615a      	str	r2, [r3, #20]
}
 8002022:	bf00      	nop
 8002024:	3714      	adds	r7, #20
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	40010000 	.word	0x40010000
 8002034:	40000400 	.word	0x40000400
 8002038:	40000800 	.word	0x40000800
 800203c:	40000c00 	.word	0x40000c00
 8002040:	40010400 	.word	0x40010400
 8002044:	40014000 	.word	0x40014000
 8002048:	40014400 	.word	0x40014400
 800204c:	40014800 	.word	0x40014800
 8002050:	40001800 	.word	0x40001800
 8002054:	40001c00 	.word	0x40001c00
 8002058:	40002000 	.word	0x40002000

0800205c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002064:	bf00      	nop
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f103 0208 	add.w	r2, r3, #8
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f04f 32ff 	mov.w	r2, #4294967295
 800209c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f103 0208 	add.w	r2, r3, #8
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f103 0208 	add.w	r2, r3, #8
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80020b8:	bf00      	nop
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80020d2:	bf00      	nop
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr

080020de <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80020de:	b480      	push	{r7}
 80020e0:	b085      	sub	sp, #20
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
 80020e6:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	68fa      	ldr	r2, [r7, #12]
 80020f2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	689a      	ldr	r2, [r3, #8]
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	683a      	ldr	r2, [r7, #0]
 8002102:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	683a      	ldr	r2, [r7, #0]
 8002108:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	1c5a      	adds	r2, r3, #1
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	601a      	str	r2, [r3, #0]
}
 800211a:	bf00      	nop
 800211c:	3714      	adds	r7, #20
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr

08002126 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002126:	b480      	push	{r7}
 8002128:	b085      	sub	sp, #20
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
 800212e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800213c:	d103      	bne.n	8002146 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	60fb      	str	r3, [r7, #12]
 8002144:	e00c      	b.n	8002160 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	3308      	adds	r3, #8
 800214a:	60fb      	str	r3, [r7, #12]
 800214c:	e002      	b.n	8002154 <vListInsert+0x2e>
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	60fb      	str	r3, [r7, #12]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	68ba      	ldr	r2, [r7, #8]
 800215c:	429a      	cmp	r2, r3
 800215e:	d2f6      	bcs.n	800214e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	685a      	ldr	r2, [r3, #4]
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	683a      	ldr	r2, [r7, #0]
 800216e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	68fa      	ldr	r2, [r7, #12]
 8002174:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	683a      	ldr	r2, [r7, #0]
 800217a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	1c5a      	adds	r2, r3, #1
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	601a      	str	r2, [r3, #0]
}
 800218c:	bf00      	nop
 800218e:	3714      	adds	r7, #20
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002198:	b480      	push	{r7}
 800219a:	b085      	sub	sp, #20
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	691b      	ldr	r3, [r3, #16]
 80021a4:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	6892      	ldr	r2, [r2, #8]
 80021ae:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	6852      	ldr	r2, [r2, #4]
 80021b8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d103      	bne.n	80021cc <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	689a      	ldr	r2, [r3, #8]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2200      	movs	r2, #0
 80021d0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	1e5a      	subs	r2, r3, #1
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3714      	adds	r7, #20
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d10a      	bne.n	8002216 <xQueueGenericReset+0x2a>
        __asm volatile
 8002200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002204:	f383 8811 	msr	BASEPRI, r3
 8002208:	f3bf 8f6f 	isb	sy
 800220c:	f3bf 8f4f 	dsb	sy
 8002210:	60bb      	str	r3, [r7, #8]
    }
 8002212:	bf00      	nop
 8002214:	e7fe      	b.n	8002214 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8002216:	f002 f8cd 	bl	80043b4 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002222:	68f9      	ldr	r1, [r7, #12]
 8002224:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002226:	fb01 f303 	mul.w	r3, r1, r3
 800222a:	441a      	add	r2, r3
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2200      	movs	r2, #0
 8002234:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002246:	3b01      	subs	r3, #1
 8002248:	68f9      	ldr	r1, [r7, #12]
 800224a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800224c:	fb01 f303 	mul.w	r3, r1, r3
 8002250:	441a      	add	r2, r3
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	22ff      	movs	r2, #255	; 0xff
 800225a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	22ff      	movs	r2, #255	; 0xff
 8002262:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d114      	bne.n	8002296 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	691b      	ldr	r3, [r3, #16]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d01a      	beq.n	80022aa <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	3310      	adds	r3, #16
 8002278:	4618      	mov	r0, r3
 800227a:	f001 f927 	bl	80034cc <xTaskRemoveFromEventList>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d012      	beq.n	80022aa <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8002284:	4b0c      	ldr	r3, [pc, #48]	; (80022b8 <xQueueGenericReset+0xcc>)
 8002286:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800228a:	601a      	str	r2, [r3, #0]
 800228c:	f3bf 8f4f 	dsb	sy
 8002290:	f3bf 8f6f 	isb	sy
 8002294:	e009      	b.n	80022aa <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	3310      	adds	r3, #16
 800229a:	4618      	mov	r0, r3
 800229c:	f7ff fef2 	bl	8002084 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	3324      	adds	r3, #36	; 0x24
 80022a4:	4618      	mov	r0, r3
 80022a6:	f7ff feed 	bl	8002084 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80022aa:	f002 f8b3 	bl	8004414 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80022ae:	2301      	movs	r3, #1
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3710      	adds	r7, #16
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	e000ed04 	.word	0xe000ed04

080022bc <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80022bc:	b580      	push	{r7, lr}
 80022be:	b08c      	sub	sp, #48	; 0x30
 80022c0:	af02      	add	r7, sp, #8
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	60b9      	str	r1, [r7, #8]
 80022c6:	4613      	mov	r3, r2
 80022c8:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d10a      	bne.n	80022e6 <xQueueGenericCreate+0x2a>
        __asm volatile
 80022d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022d4:	f383 8811 	msr	BASEPRI, r3
 80022d8:	f3bf 8f6f 	isb	sy
 80022dc:	f3bf 8f4f 	dsb	sy
 80022e0:	61bb      	str	r3, [r7, #24]
    }
 80022e2:	bf00      	nop
 80022e4:	e7fe      	b.n	80022e4 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	68ba      	ldr	r2, [r7, #8]
 80022ea:	fb02 f303 	mul.w	r3, r2, r3
 80022ee:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d006      	beq.n	8002304 <xQueueGenericCreate+0x48>
 80022f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80022fe:	68fa      	ldr	r2, [r7, #12]
 8002300:	429a      	cmp	r2, r3
 8002302:	d101      	bne.n	8002308 <xQueueGenericCreate+0x4c>
 8002304:	2301      	movs	r3, #1
 8002306:	e000      	b.n	800230a <xQueueGenericCreate+0x4e>
 8002308:	2300      	movs	r3, #0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d10a      	bne.n	8002324 <xQueueGenericCreate+0x68>
        __asm volatile
 800230e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002312:	f383 8811 	msr	BASEPRI, r3
 8002316:	f3bf 8f6f 	isb	sy
 800231a:	f3bf 8f4f 	dsb	sy
 800231e:	617b      	str	r3, [r7, #20]
    }
 8002320:	bf00      	nop
 8002322:	e7fe      	b.n	8002322 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8002324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002326:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800232a:	d90a      	bls.n	8002342 <xQueueGenericCreate+0x86>
        __asm volatile
 800232c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002330:	f383 8811 	msr	BASEPRI, r3
 8002334:	f3bf 8f6f 	isb	sy
 8002338:	f3bf 8f4f 	dsb	sy
 800233c:	613b      	str	r3, [r7, #16]
    }
 800233e:	bf00      	nop
 8002340:	e7fe      	b.n	8002340 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002344:	3350      	adds	r3, #80	; 0x50
 8002346:	4618      	mov	r0, r3
 8002348:	f002 f960 	bl	800460c <pvPortMalloc>
 800234c:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 800234e:	6a3b      	ldr	r3, [r7, #32]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d00d      	beq.n	8002370 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002354:	6a3b      	ldr	r3, [r7, #32]
 8002356:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	3350      	adds	r3, #80	; 0x50
 800235c:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800235e:	79fa      	ldrb	r2, [r7, #7]
 8002360:	6a3b      	ldr	r3, [r7, #32]
 8002362:	9300      	str	r3, [sp, #0]
 8002364:	4613      	mov	r3, r2
 8002366:	69fa      	ldr	r2, [r7, #28]
 8002368:	68b9      	ldr	r1, [r7, #8]
 800236a:	68f8      	ldr	r0, [r7, #12]
 800236c:	f000 f805 	bl	800237a <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002370:	6a3b      	ldr	r3, [r7, #32]
    }
 8002372:	4618      	mov	r0, r3
 8002374:	3728      	adds	r7, #40	; 0x28
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}

0800237a <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800237a:	b580      	push	{r7, lr}
 800237c:	b084      	sub	sp, #16
 800237e:	af00      	add	r7, sp, #0
 8002380:	60f8      	str	r0, [r7, #12]
 8002382:	60b9      	str	r1, [r7, #8]
 8002384:	607a      	str	r2, [r7, #4]
 8002386:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d103      	bne.n	8002396 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	601a      	str	r2, [r3, #0]
 8002394:	e002      	b.n	800239c <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	68fa      	ldr	r2, [r7, #12]
 80023a0:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	68ba      	ldr	r2, [r7, #8]
 80023a6:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80023a8:	2101      	movs	r1, #1
 80023aa:	69b8      	ldr	r0, [r7, #24]
 80023ac:	f7ff ff1e 	bl	80021ec <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	78fa      	ldrb	r2, [r7, #3]
 80023b4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80023b8:	78fb      	ldrb	r3, [r7, #3]
 80023ba:	68ba      	ldr	r2, [r7, #8]
 80023bc:	68f9      	ldr	r1, [r7, #12]
 80023be:	2073      	movs	r0, #115	; 0x73
 80023c0:	f003 fa90 	bl	80058e4 <SEGGER_SYSVIEW_RecordU32x3>
}
 80023c4:	bf00      	nop
 80023c6:	3710      	adds	r7, #16
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}

080023cc <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b090      	sub	sp, #64	; 0x40
 80023d0:	af02      	add	r7, sp, #8
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	607a      	str	r2, [r7, #4]
 80023d8:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80023da:	2300      	movs	r3, #0
 80023dc:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80023e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d10a      	bne.n	80023fe <xQueueGenericSend+0x32>
        __asm volatile
 80023e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023ec:	f383 8811 	msr	BASEPRI, r3
 80023f0:	f3bf 8f6f 	isb	sy
 80023f4:	f3bf 8f4f 	dsb	sy
 80023f8:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80023fa:	bf00      	nop
 80023fc:	e7fe      	b.n	80023fc <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d103      	bne.n	800240c <xQueueGenericSend+0x40>
 8002404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002408:	2b00      	cmp	r3, #0
 800240a:	d101      	bne.n	8002410 <xQueueGenericSend+0x44>
 800240c:	2301      	movs	r3, #1
 800240e:	e000      	b.n	8002412 <xQueueGenericSend+0x46>
 8002410:	2300      	movs	r3, #0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d10a      	bne.n	800242c <xQueueGenericSend+0x60>
        __asm volatile
 8002416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800241a:	f383 8811 	msr	BASEPRI, r3
 800241e:	f3bf 8f6f 	isb	sy
 8002422:	f3bf 8f4f 	dsb	sy
 8002426:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002428:	bf00      	nop
 800242a:	e7fe      	b.n	800242a <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	2b02      	cmp	r3, #2
 8002430:	d103      	bne.n	800243a <xQueueGenericSend+0x6e>
 8002432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002436:	2b01      	cmp	r3, #1
 8002438:	d101      	bne.n	800243e <xQueueGenericSend+0x72>
 800243a:	2301      	movs	r3, #1
 800243c:	e000      	b.n	8002440 <xQueueGenericSend+0x74>
 800243e:	2300      	movs	r3, #0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d10a      	bne.n	800245a <xQueueGenericSend+0x8e>
        __asm volatile
 8002444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002448:	f383 8811 	msr	BASEPRI, r3
 800244c:	f3bf 8f6f 	isb	sy
 8002450:	f3bf 8f4f 	dsb	sy
 8002454:	623b      	str	r3, [r7, #32]
    }
 8002456:	bf00      	nop
 8002458:	e7fe      	b.n	8002458 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800245a:	f001 f9d7 	bl	800380c <xTaskGetSchedulerState>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d102      	bne.n	800246a <xQueueGenericSend+0x9e>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d101      	bne.n	800246e <xQueueGenericSend+0xa2>
 800246a:	2301      	movs	r3, #1
 800246c:	e000      	b.n	8002470 <xQueueGenericSend+0xa4>
 800246e:	2300      	movs	r3, #0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d10a      	bne.n	800248a <xQueueGenericSend+0xbe>
        __asm volatile
 8002474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002478:	f383 8811 	msr	BASEPRI, r3
 800247c:	f3bf 8f6f 	isb	sy
 8002480:	f3bf 8f4f 	dsb	sy
 8002484:	61fb      	str	r3, [r7, #28]
    }
 8002486:	bf00      	nop
 8002488:	e7fe      	b.n	8002488 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800248a:	f001 ff93 	bl	80043b4 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800248e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002490:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002496:	429a      	cmp	r2, r3
 8002498:	d302      	bcc.n	80024a0 <xQueueGenericSend+0xd4>
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	2b02      	cmp	r3, #2
 800249e:	d136      	bne.n	800250e <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 80024a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024a2:	4618      	mov	r0, r3
 80024a4:	f003 ffaa 	bl	80063fc <SEGGER_SYSVIEW_ShrinkId>
 80024a8:	68ba      	ldr	r2, [r7, #8]
 80024aa:	6879      	ldr	r1, [r7, #4]
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	9300      	str	r3, [sp, #0]
 80024b0:	460b      	mov	r3, r1
 80024b2:	4601      	mov	r1, r0
 80024b4:	205a      	movs	r0, #90	; 0x5a
 80024b6:	f003 fa8b 	bl	80059d0 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80024ba:	683a      	ldr	r2, [r7, #0]
 80024bc:	68b9      	ldr	r1, [r7, #8]
 80024be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80024c0:	f000 fa78 	bl	80029b4 <prvCopyDataToQueue>
 80024c4:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80024c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d010      	beq.n	80024f0 <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80024ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d0:	3324      	adds	r3, #36	; 0x24
 80024d2:	4618      	mov	r0, r3
 80024d4:	f000 fffa 	bl	80034cc <xTaskRemoveFromEventList>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d013      	beq.n	8002506 <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80024de:	4b4d      	ldr	r3, [pc, #308]	; (8002614 <xQueueGenericSend+0x248>)
 80024e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024e4:	601a      	str	r2, [r3, #0]
 80024e6:	f3bf 8f4f 	dsb	sy
 80024ea:	f3bf 8f6f 	isb	sy
 80024ee:	e00a      	b.n	8002506 <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80024f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d007      	beq.n	8002506 <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80024f6:	4b47      	ldr	r3, [pc, #284]	; (8002614 <xQueueGenericSend+0x248>)
 80024f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024fc:	601a      	str	r2, [r3, #0]
 80024fe:	f3bf 8f4f 	dsb	sy
 8002502:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002506:	f001 ff85 	bl	8004414 <vPortExitCritical>
                return pdPASS;
 800250a:	2301      	movs	r3, #1
 800250c:	e07d      	b.n	800260a <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d110      	bne.n	8002536 <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002514:	f001 ff7e 	bl	8004414 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8002518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800251a:	4618      	mov	r0, r3
 800251c:	f003 ff6e 	bl	80063fc <SEGGER_SYSVIEW_ShrinkId>
 8002520:	68ba      	ldr	r2, [r7, #8]
 8002522:	6879      	ldr	r1, [r7, #4]
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	9300      	str	r3, [sp, #0]
 8002528:	460b      	mov	r3, r1
 800252a:	4601      	mov	r1, r0
 800252c:	205a      	movs	r0, #90	; 0x5a
 800252e:	f003 fa4f 	bl	80059d0 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8002532:	2300      	movs	r3, #0
 8002534:	e069      	b.n	800260a <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002538:	2b00      	cmp	r3, #0
 800253a:	d106      	bne.n	800254a <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800253c:	f107 0314 	add.w	r3, r7, #20
 8002540:	4618      	mov	r0, r3
 8002542:	f001 f829 	bl	8003598 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002546:	2301      	movs	r3, #1
 8002548:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800254a:	f001 ff63 	bl	8004414 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800254e:	f000 fd71 	bl	8003034 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002552:	f001 ff2f 	bl	80043b4 <vPortEnterCritical>
 8002556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002558:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800255c:	b25b      	sxtb	r3, r3
 800255e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002562:	d103      	bne.n	800256c <xQueueGenericSend+0x1a0>
 8002564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002566:	2200      	movs	r2, #0
 8002568:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800256c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800256e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002572:	b25b      	sxtb	r3, r3
 8002574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002578:	d103      	bne.n	8002582 <xQueueGenericSend+0x1b6>
 800257a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800257c:	2200      	movs	r2, #0
 800257e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002582:	f001 ff47 	bl	8004414 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002586:	1d3a      	adds	r2, r7, #4
 8002588:	f107 0314 	add.w	r3, r7, #20
 800258c:	4611      	mov	r1, r2
 800258e:	4618      	mov	r0, r3
 8002590:	f001 f818 	bl	80035c4 <xTaskCheckForTimeOut>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d124      	bne.n	80025e4 <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800259a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800259c:	f000 fb02 	bl	8002ba4 <prvIsQueueFull>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d018      	beq.n	80025d8 <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80025a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025a8:	3310      	adds	r3, #16
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	4611      	mov	r1, r2
 80025ae:	4618      	mov	r0, r3
 80025b0:	f000 ff3a 	bl	8003428 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80025b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025b6:	f000 fa8d 	bl	8002ad4 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80025ba:	f000 fd49 	bl	8003050 <xTaskResumeAll>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	f47f af62 	bne.w	800248a <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 80025c6:	4b13      	ldr	r3, [pc, #76]	; (8002614 <xQueueGenericSend+0x248>)
 80025c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025cc:	601a      	str	r2, [r3, #0]
 80025ce:	f3bf 8f4f 	dsb	sy
 80025d2:	f3bf 8f6f 	isb	sy
 80025d6:	e758      	b.n	800248a <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80025d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025da:	f000 fa7b 	bl	8002ad4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80025de:	f000 fd37 	bl	8003050 <xTaskResumeAll>
 80025e2:	e752      	b.n	800248a <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80025e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025e6:	f000 fa75 	bl	8002ad4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80025ea:	f000 fd31 	bl	8003050 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 80025ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025f0:	4618      	mov	r0, r3
 80025f2:	f003 ff03 	bl	80063fc <SEGGER_SYSVIEW_ShrinkId>
 80025f6:	68ba      	ldr	r2, [r7, #8]
 80025f8:	6879      	ldr	r1, [r7, #4]
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	9300      	str	r3, [sp, #0]
 80025fe:	460b      	mov	r3, r1
 8002600:	4601      	mov	r1, r0
 8002602:	205a      	movs	r0, #90	; 0x5a
 8002604:	f003 f9e4 	bl	80059d0 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8002608:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800260a:	4618      	mov	r0, r3
 800260c:	3738      	adds	r7, #56	; 0x38
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	e000ed04 	.word	0xe000ed04

08002618 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b090      	sub	sp, #64	; 0x40
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	607a      	str	r2, [r7, #4]
 8002624:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 800262a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800262c:	2b00      	cmp	r3, #0
 800262e:	d10a      	bne.n	8002646 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8002630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002634:	f383 8811 	msr	BASEPRI, r3
 8002638:	f3bf 8f6f 	isb	sy
 800263c:	f3bf 8f4f 	dsb	sy
 8002640:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002642:	bf00      	nop
 8002644:	e7fe      	b.n	8002644 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d103      	bne.n	8002654 <xQueueGenericSendFromISR+0x3c>
 800264c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800264e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002650:	2b00      	cmp	r3, #0
 8002652:	d101      	bne.n	8002658 <xQueueGenericSendFromISR+0x40>
 8002654:	2301      	movs	r3, #1
 8002656:	e000      	b.n	800265a <xQueueGenericSendFromISR+0x42>
 8002658:	2300      	movs	r3, #0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d10a      	bne.n	8002674 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 800265e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002662:	f383 8811 	msr	BASEPRI, r3
 8002666:	f3bf 8f6f 	isb	sy
 800266a:	f3bf 8f4f 	dsb	sy
 800266e:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002670:	bf00      	nop
 8002672:	e7fe      	b.n	8002672 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	2b02      	cmp	r3, #2
 8002678:	d103      	bne.n	8002682 <xQueueGenericSendFromISR+0x6a>
 800267a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800267c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800267e:	2b01      	cmp	r3, #1
 8002680:	d101      	bne.n	8002686 <xQueueGenericSendFromISR+0x6e>
 8002682:	2301      	movs	r3, #1
 8002684:	e000      	b.n	8002688 <xQueueGenericSendFromISR+0x70>
 8002686:	2300      	movs	r3, #0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d10a      	bne.n	80026a2 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 800268c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002690:	f383 8811 	msr	BASEPRI, r3
 8002694:	f3bf 8f6f 	isb	sy
 8002698:	f3bf 8f4f 	dsb	sy
 800269c:	623b      	str	r3, [r7, #32]
    }
 800269e:	bf00      	nop
 80026a0:	e7fe      	b.n	80026a0 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80026a2:	f001 ff73 	bl	800458c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80026a6:	f3ef 8211 	mrs	r2, BASEPRI
 80026aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026ae:	f383 8811 	msr	BASEPRI, r3
 80026b2:	f3bf 8f6f 	isb	sy
 80026b6:	f3bf 8f4f 	dsb	sy
 80026ba:	61fa      	str	r2, [r7, #28]
 80026bc:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80026be:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80026c0:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80026c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d302      	bcc.n	80026d4 <xQueueGenericSendFromISR+0xbc>
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d148      	bne.n	8002766 <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80026d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80026da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80026de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026e2:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 80026e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026e6:	4618      	mov	r0, r3
 80026e8:	f003 fe88 	bl	80063fc <SEGGER_SYSVIEW_ShrinkId>
 80026ec:	4601      	mov	r1, r0
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	461a      	mov	r2, r3
 80026f2:	2060      	movs	r0, #96	; 0x60
 80026f4:	f003 f89c 	bl	8005830 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80026f8:	683a      	ldr	r2, [r7, #0]
 80026fa:	68b9      	ldr	r1, [r7, #8]
 80026fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80026fe:	f000 f959 	bl	80029b4 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8002702:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800270a:	d112      	bne.n	8002732 <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800270c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800270e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002710:	2b00      	cmp	r3, #0
 8002712:	d025      	beq.n	8002760 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002716:	3324      	adds	r3, #36	; 0x24
 8002718:	4618      	mov	r0, r3
 800271a:	f000 fed7 	bl	80034cc <xTaskRemoveFromEventList>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d01d      	beq.n	8002760 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d01a      	beq.n	8002760 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2201      	movs	r2, #1
 800272e:	601a      	str	r2, [r3, #0]
 8002730:	e016      	b.n	8002760 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8002732:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002736:	2b7f      	cmp	r3, #127	; 0x7f
 8002738:	d10a      	bne.n	8002750 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 800273a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800273e:	f383 8811 	msr	BASEPRI, r3
 8002742:	f3bf 8f6f 	isb	sy
 8002746:	f3bf 8f4f 	dsb	sy
 800274a:	617b      	str	r3, [r7, #20]
    }
 800274c:	bf00      	nop
 800274e:	e7fe      	b.n	800274e <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002750:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002754:	3301      	adds	r3, #1
 8002756:	b2db      	uxtb	r3, r3
 8002758:	b25a      	sxtb	r2, r3
 800275a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800275c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8002760:	2301      	movs	r3, #1
 8002762:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8002764:	e00b      	b.n	800277e <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8002766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002768:	4618      	mov	r0, r3
 800276a:	f003 fe47 	bl	80063fc <SEGGER_SYSVIEW_ShrinkId>
 800276e:	4601      	mov	r1, r0
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	461a      	mov	r2, r3
 8002774:	2060      	movs	r0, #96	; 0x60
 8002776:	f003 f85b 	bl	8005830 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 800277a:	2300      	movs	r3, #0
 800277c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800277e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002780:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002788:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800278a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800278c:	4618      	mov	r0, r3
 800278e:	3740      	adds	r7, #64	; 0x40
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002794:	b590      	push	{r4, r7, lr}
 8002796:	b08f      	sub	sp, #60	; 0x3c
 8002798:	af02      	add	r7, sp, #8
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80027a0:	2300      	movs	r3, #0
 80027a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80027a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d10a      	bne.n	80027c4 <xQueueReceive+0x30>
        __asm volatile
 80027ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027b2:	f383 8811 	msr	BASEPRI, r3
 80027b6:	f3bf 8f6f 	isb	sy
 80027ba:	f3bf 8f4f 	dsb	sy
 80027be:	623b      	str	r3, [r7, #32]
    }
 80027c0:	bf00      	nop
 80027c2:	e7fe      	b.n	80027c2 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d103      	bne.n	80027d2 <xQueueReceive+0x3e>
 80027ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d101      	bne.n	80027d6 <xQueueReceive+0x42>
 80027d2:	2301      	movs	r3, #1
 80027d4:	e000      	b.n	80027d8 <xQueueReceive+0x44>
 80027d6:	2300      	movs	r3, #0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d10a      	bne.n	80027f2 <xQueueReceive+0x5e>
        __asm volatile
 80027dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027e0:	f383 8811 	msr	BASEPRI, r3
 80027e4:	f3bf 8f6f 	isb	sy
 80027e8:	f3bf 8f4f 	dsb	sy
 80027ec:	61fb      	str	r3, [r7, #28]
    }
 80027ee:	bf00      	nop
 80027f0:	e7fe      	b.n	80027f0 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80027f2:	f001 f80b 	bl	800380c <xTaskGetSchedulerState>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d102      	bne.n	8002802 <xQueueReceive+0x6e>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d101      	bne.n	8002806 <xQueueReceive+0x72>
 8002802:	2301      	movs	r3, #1
 8002804:	e000      	b.n	8002808 <xQueueReceive+0x74>
 8002806:	2300      	movs	r3, #0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d10a      	bne.n	8002822 <xQueueReceive+0x8e>
        __asm volatile
 800280c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002810:	f383 8811 	msr	BASEPRI, r3
 8002814:	f3bf 8f6f 	isb	sy
 8002818:	f3bf 8f4f 	dsb	sy
 800281c:	61bb      	str	r3, [r7, #24]
    }
 800281e:	bf00      	nop
 8002820:	e7fe      	b.n	8002820 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002822:	f001 fdc7 	bl	80043b4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800282a:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800282c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282e:	2b00      	cmp	r3, #0
 8002830:	d02f      	beq.n	8002892 <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002832:	68b9      	ldr	r1, [r7, #8]
 8002834:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002836:	f000 f927 	bl	8002a88 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 800283a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800283c:	4618      	mov	r0, r3
 800283e:	f003 fddd 	bl	80063fc <SEGGER_SYSVIEW_ShrinkId>
 8002842:	4604      	mov	r4, r0
 8002844:	2000      	movs	r0, #0
 8002846:	f003 fdd9 	bl	80063fc <SEGGER_SYSVIEW_ShrinkId>
 800284a:	4602      	mov	r2, r0
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2101      	movs	r1, #1
 8002850:	9100      	str	r1, [sp, #0]
 8002852:	4621      	mov	r1, r4
 8002854:	205c      	movs	r0, #92	; 0x5c
 8002856:	f003 f8bb 	bl	80059d0 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800285a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285c:	1e5a      	subs	r2, r3, #1
 800285e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002860:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d00f      	beq.n	800288a <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800286a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800286c:	3310      	adds	r3, #16
 800286e:	4618      	mov	r0, r3
 8002870:	f000 fe2c 	bl	80034cc <xTaskRemoveFromEventList>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d007      	beq.n	800288a <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800287a:	4b4d      	ldr	r3, [pc, #308]	; (80029b0 <xQueueReceive+0x21c>)
 800287c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002880:	601a      	str	r2, [r3, #0]
 8002882:	f3bf 8f4f 	dsb	sy
 8002886:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800288a:	f001 fdc3 	bl	8004414 <vPortExitCritical>
                return pdPASS;
 800288e:	2301      	movs	r3, #1
 8002890:	e08a      	b.n	80029a8 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d113      	bne.n	80028c0 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002898:	f001 fdbc 	bl	8004414 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 800289c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800289e:	4618      	mov	r0, r3
 80028a0:	f003 fdac 	bl	80063fc <SEGGER_SYSVIEW_ShrinkId>
 80028a4:	4604      	mov	r4, r0
 80028a6:	2000      	movs	r0, #0
 80028a8:	f003 fda8 	bl	80063fc <SEGGER_SYSVIEW_ShrinkId>
 80028ac:	4602      	mov	r2, r0
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2101      	movs	r1, #1
 80028b2:	9100      	str	r1, [sp, #0]
 80028b4:	4621      	mov	r1, r4
 80028b6:	205c      	movs	r0, #92	; 0x5c
 80028b8:	f003 f88a 	bl	80059d0 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 80028bc:	2300      	movs	r3, #0
 80028be:	e073      	b.n	80029a8 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 80028c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d106      	bne.n	80028d4 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80028c6:	f107 0310 	add.w	r3, r7, #16
 80028ca:	4618      	mov	r0, r3
 80028cc:	f000 fe64 	bl	8003598 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80028d0:	2301      	movs	r3, #1
 80028d2:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80028d4:	f001 fd9e 	bl	8004414 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80028d8:	f000 fbac 	bl	8003034 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80028dc:	f001 fd6a 	bl	80043b4 <vPortEnterCritical>
 80028e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80028e6:	b25b      	sxtb	r3, r3
 80028e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ec:	d103      	bne.n	80028f6 <xQueueReceive+0x162>
 80028ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028fc:	b25b      	sxtb	r3, r3
 80028fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002902:	d103      	bne.n	800290c <xQueueReceive+0x178>
 8002904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002906:	2200      	movs	r2, #0
 8002908:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800290c:	f001 fd82 	bl	8004414 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002910:	1d3a      	adds	r2, r7, #4
 8002912:	f107 0310 	add.w	r3, r7, #16
 8002916:	4611      	mov	r1, r2
 8002918:	4618      	mov	r0, r3
 800291a:	f000 fe53 	bl	80035c4 <xTaskCheckForTimeOut>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d124      	bne.n	800296e <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002924:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002926:	f000 f927 	bl	8002b78 <prvIsQueueEmpty>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d018      	beq.n	8002962 <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002932:	3324      	adds	r3, #36	; 0x24
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	4611      	mov	r1, r2
 8002938:	4618      	mov	r0, r3
 800293a:	f000 fd75 	bl	8003428 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800293e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002940:	f000 f8c8 	bl	8002ad4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002944:	f000 fb84 	bl	8003050 <xTaskResumeAll>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	f47f af69 	bne.w	8002822 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002950:	4b17      	ldr	r3, [pc, #92]	; (80029b0 <xQueueReceive+0x21c>)
 8002952:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002956:	601a      	str	r2, [r3, #0]
 8002958:	f3bf 8f4f 	dsb	sy
 800295c:	f3bf 8f6f 	isb	sy
 8002960:	e75f      	b.n	8002822 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002962:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002964:	f000 f8b6 	bl	8002ad4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002968:	f000 fb72 	bl	8003050 <xTaskResumeAll>
 800296c:	e759      	b.n	8002822 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800296e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002970:	f000 f8b0 	bl	8002ad4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002974:	f000 fb6c 	bl	8003050 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002978:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800297a:	f000 f8fd 	bl	8002b78 <prvIsQueueEmpty>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	f43f af4e 	beq.w	8002822 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002988:	4618      	mov	r0, r3
 800298a:	f003 fd37 	bl	80063fc <SEGGER_SYSVIEW_ShrinkId>
 800298e:	4604      	mov	r4, r0
 8002990:	2000      	movs	r0, #0
 8002992:	f003 fd33 	bl	80063fc <SEGGER_SYSVIEW_ShrinkId>
 8002996:	4602      	mov	r2, r0
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2101      	movs	r1, #1
 800299c:	9100      	str	r1, [sp, #0]
 800299e:	4621      	mov	r1, r4
 80029a0:	205c      	movs	r0, #92	; 0x5c
 80029a2:	f003 f815 	bl	80059d0 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 80029a6:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3734      	adds	r7, #52	; 0x34
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd90      	pop	{r4, r7, pc}
 80029b0:	e000ed04 	.word	0xe000ed04

080029b4 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b086      	sub	sp, #24
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80029c0:	2300      	movs	r3, #0
 80029c2:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029c8:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d10d      	bne.n	80029ee <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d14d      	bne.n	8002a76 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	4618      	mov	r0, r3
 80029e0:	f000 ff32 	bl	8003848 <xTaskPriorityDisinherit>
 80029e4:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2200      	movs	r2, #0
 80029ea:	609a      	str	r2, [r3, #8]
 80029ec:	e043      	b.n	8002a76 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d119      	bne.n	8002a28 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6858      	ldr	r0, [r3, #4]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fc:	461a      	mov	r2, r3
 80029fe:	68b9      	ldr	r1, [r7, #8]
 8002a00:	f003 fe88 	bl	8006714 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	685a      	ldr	r2, [r3, #4]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0c:	441a      	add	r2, r3
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	685a      	ldr	r2, [r3, #4]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d32b      	bcc.n	8002a76 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	605a      	str	r2, [r3, #4]
 8002a26:	e026      	b.n	8002a76 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	68d8      	ldr	r0, [r3, #12]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a30:	461a      	mov	r2, r3
 8002a32:	68b9      	ldr	r1, [r7, #8]
 8002a34:	f003 fe6e 	bl	8006714 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	68da      	ldr	r2, [r3, #12]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a40:	425b      	negs	r3, r3
 8002a42:	441a      	add	r2, r3
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	68da      	ldr	r2, [r3, #12]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d207      	bcs.n	8002a64 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	689a      	ldr	r2, [r3, #8]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5c:	425b      	negs	r3, r3
 8002a5e:	441a      	add	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d105      	bne.n	8002a76 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d002      	beq.n	8002a76 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	3b01      	subs	r3, #1
 8002a74:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	1c5a      	adds	r2, r3, #1
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8002a7e:	697b      	ldr	r3, [r7, #20]
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3718      	adds	r7, #24
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d018      	beq.n	8002acc <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	68da      	ldr	r2, [r3, #12]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa2:	441a      	add	r2, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	68da      	ldr	r2, [r3, #12]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d303      	bcc.n	8002abc <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	68d9      	ldr	r1, [r3, #12]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	6838      	ldr	r0, [r7, #0]
 8002ac8:	f003 fe24 	bl	8006714 <memcpy>
    }
}
 8002acc:	bf00      	nop
 8002ace:	3708      	adds	r7, #8
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002adc:	f001 fc6a 	bl	80043b4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ae6:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002ae8:	e011      	b.n	8002b0e <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d012      	beq.n	8002b18 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	3324      	adds	r3, #36	; 0x24
 8002af6:	4618      	mov	r0, r3
 8002af8:	f000 fce8 	bl	80034cc <xTaskRemoveFromEventList>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002b02:	f000 fdc5 	bl	8003690 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002b06:	7bfb      	ldrb	r3, [r7, #15]
 8002b08:	3b01      	subs	r3, #1
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002b0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	dce9      	bgt.n	8002aea <prvUnlockQueue+0x16>
 8002b16:	e000      	b.n	8002b1a <prvUnlockQueue+0x46>
                        break;
 8002b18:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	22ff      	movs	r2, #255	; 0xff
 8002b1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002b22:	f001 fc77 	bl	8004414 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002b26:	f001 fc45 	bl	80043b4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b30:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002b32:	e011      	b.n	8002b58 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	691b      	ldr	r3, [r3, #16]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d012      	beq.n	8002b62 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	3310      	adds	r3, #16
 8002b40:	4618      	mov	r0, r3
 8002b42:	f000 fcc3 	bl	80034cc <xTaskRemoveFromEventList>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d001      	beq.n	8002b50 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002b4c:	f000 fda0 	bl	8003690 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002b50:	7bbb      	ldrb	r3, [r7, #14]
 8002b52:	3b01      	subs	r3, #1
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002b58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	dce9      	bgt.n	8002b34 <prvUnlockQueue+0x60>
 8002b60:	e000      	b.n	8002b64 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002b62:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	22ff      	movs	r2, #255	; 0xff
 8002b68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002b6c:	f001 fc52 	bl	8004414 <vPortExitCritical>
}
 8002b70:	bf00      	nop
 8002b72:	3710      	adds	r7, #16
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002b80:	f001 fc18 	bl	80043b4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d102      	bne.n	8002b92 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	60fb      	str	r3, [r7, #12]
 8002b90:	e001      	b.n	8002b96 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002b92:	2300      	movs	r3, #0
 8002b94:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002b96:	f001 fc3d 	bl	8004414 <vPortExitCritical>

    return xReturn;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3710      	adds	r7, #16
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002bac:	f001 fc02 	bl	80043b4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d102      	bne.n	8002bc2 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	60fb      	str	r3, [r7, #12]
 8002bc0:	e001      	b.n	8002bc6 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002bc6:	f001 fc25 	bl	8004414 <vPortExitCritical>

    return xReturn;
 8002bca:	68fb      	ldr	r3, [r7, #12]
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3710      	adds	r7, #16
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002bde:	2300      	movs	r3, #0
 8002be0:	60fb      	str	r3, [r7, #12]
 8002be2:	e01e      	b.n	8002c22 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002be4:	4a13      	ldr	r2, [pc, #76]	; (8002c34 <vQueueAddToRegistry+0x60>)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d115      	bne.n	8002c1c <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002bf0:	4910      	ldr	r1, [pc, #64]	; (8002c34 <vQueueAddToRegistry+0x60>)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	683a      	ldr	r2, [r7, #0]
 8002bf6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8002bfa:	4a0e      	ldr	r2, [pc, #56]	; (8002c34 <vQueueAddToRegistry+0x60>)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	00db      	lsls	r3, r3, #3
 8002c00:	4413      	add	r3, r2
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f003 fbf7 	bl	80063fc <SEGGER_SYSVIEW_ShrinkId>
 8002c0e:	4601      	mov	r1, r0
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	461a      	mov	r2, r3
 8002c14:	2071      	movs	r0, #113	; 0x71
 8002c16:	f002 fe0b 	bl	8005830 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8002c1a:	e006      	b.n	8002c2a <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	3301      	adds	r3, #1
 8002c20:	60fb      	str	r3, [r7, #12]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2b07      	cmp	r3, #7
 8002c26:	d9dd      	bls.n	8002be4 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002c28:	bf00      	nop
 8002c2a:	bf00      	nop
 8002c2c:	3710      	adds	r7, #16
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	2001a824 	.word	0x2001a824

08002c38 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b086      	sub	sp, #24
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	60b9      	str	r1, [r7, #8]
 8002c42:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002c48:	f001 fbb4 	bl	80043b4 <vPortEnterCritical>
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c52:	b25b      	sxtb	r3, r3
 8002c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c58:	d103      	bne.n	8002c62 <vQueueWaitForMessageRestricted+0x2a>
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c68:	b25b      	sxtb	r3, r3
 8002c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c6e:	d103      	bne.n	8002c78 <vQueueWaitForMessageRestricted+0x40>
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c78:	f001 fbcc 	bl	8004414 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d106      	bne.n	8002c92 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	3324      	adds	r3, #36	; 0x24
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	68b9      	ldr	r1, [r7, #8]
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f000 fbef 	bl	8003470 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002c92:	6978      	ldr	r0, [r7, #20]
 8002c94:	f7ff ff1e 	bl	8002ad4 <prvUnlockQueue>
    }
 8002c98:	bf00      	nop
 8002c9a:	3718      	adds	r7, #24
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b08c      	sub	sp, #48	; 0x30
 8002ca4:	af04      	add	r7, sp, #16
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	603b      	str	r3, [r7, #0]
 8002cac:	4613      	mov	r3, r2
 8002cae:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002cb0:	88fb      	ldrh	r3, [r7, #6]
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f001 fca9 	bl	800460c <pvPortMalloc>
 8002cba:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d00e      	beq.n	8002ce0 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002cc2:	2058      	movs	r0, #88	; 0x58
 8002cc4:	f001 fca2 	bl	800460c <pvPortMalloc>
 8002cc8:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d003      	beq.n	8002cd8 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	697a      	ldr	r2, [r7, #20]
 8002cd4:	631a      	str	r2, [r3, #48]	; 0x30
 8002cd6:	e005      	b.n	8002ce4 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002cd8:	6978      	ldr	r0, [r7, #20]
 8002cda:	f001 fd77 	bl	80047cc <vPortFree>
 8002cde:	e001      	b.n	8002ce4 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d013      	beq.n	8002d12 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002cea:	88fa      	ldrh	r2, [r7, #6]
 8002cec:	2300      	movs	r3, #0
 8002cee:	9303      	str	r3, [sp, #12]
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	9302      	str	r3, [sp, #8]
 8002cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cf6:	9301      	str	r3, [sp, #4]
 8002cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cfa:	9300      	str	r3, [sp, #0]
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	68b9      	ldr	r1, [r7, #8]
 8002d00:	68f8      	ldr	r0, [r7, #12]
 8002d02:	f000 f80e 	bl	8002d22 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002d06:	69f8      	ldr	r0, [r7, #28]
 8002d08:	f000 f8a2 	bl	8002e50 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	61bb      	str	r3, [r7, #24]
 8002d10:	e002      	b.n	8002d18 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002d12:	f04f 33ff 	mov.w	r3, #4294967295
 8002d16:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002d18:	69bb      	ldr	r3, [r7, #24]
    }
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3720      	adds	r7, #32
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}

08002d22 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002d22:	b580      	push	{r7, lr}
 8002d24:	b088      	sub	sp, #32
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	60f8      	str	r0, [r7, #12]
 8002d2a:	60b9      	str	r1, [r7, #8]
 8002d2c:	607a      	str	r2, [r7, #4]
 8002d2e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d32:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	461a      	mov	r2, r3
 8002d3a:	21a5      	movs	r1, #165	; 0xa5
 8002d3c:	f003 fcf8 	bl	8006730 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	4413      	add	r3, r2
 8002d50:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	f023 0307 	bic.w	r3, r3, #7
 8002d58:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	f003 0307 	and.w	r3, r3, #7
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d00a      	beq.n	8002d7a <prvInitialiseNewTask+0x58>
        __asm volatile
 8002d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d68:	f383 8811 	msr	BASEPRI, r3
 8002d6c:	f3bf 8f6f 	isb	sy
 8002d70:	f3bf 8f4f 	dsb	sy
 8002d74:	617b      	str	r3, [r7, #20]
    }
 8002d76:	bf00      	nop
 8002d78:	e7fe      	b.n	8002d78 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d01f      	beq.n	8002dc0 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d80:	2300      	movs	r3, #0
 8002d82:	61fb      	str	r3, [r7, #28]
 8002d84:	e012      	b.n	8002dac <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002d86:	68ba      	ldr	r2, [r7, #8]
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	4413      	add	r3, r2
 8002d8c:	7819      	ldrb	r1, [r3, #0]
 8002d8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	4413      	add	r3, r2
 8002d94:	3334      	adds	r3, #52	; 0x34
 8002d96:	460a      	mov	r2, r1
 8002d98:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002d9a:	68ba      	ldr	r2, [r7, #8]
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	4413      	add	r3, r2
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d006      	beq.n	8002db4 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	3301      	adds	r3, #1
 8002daa:	61fb      	str	r3, [r7, #28]
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	2b09      	cmp	r3, #9
 8002db0:	d9e9      	bls.n	8002d86 <prvInitialiseNewTask+0x64>
 8002db2:	e000      	b.n	8002db6 <prvInitialiseNewTask+0x94>
            {
                break;
 8002db4:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002dbe:	e003      	b.n	8002dc8 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dca:	2b04      	cmp	r3, #4
 8002dcc:	d901      	bls.n	8002dd2 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002dce:	2304      	movs	r3, #4
 8002dd0:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002dd6:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ddc:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de0:	2200      	movs	r2, #0
 8002de2:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de6:	3304      	adds	r3, #4
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7ff f96b 	bl	80020c4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df0:	3318      	adds	r3, #24
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7ff f966 	bl	80020c4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dfc:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e00:	f1c3 0205 	rsb	r2, r3, #5
 8002e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e06:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e0c:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e10:	3350      	adds	r3, #80	; 0x50
 8002e12:	2204      	movs	r2, #4
 8002e14:	2100      	movs	r1, #0
 8002e16:	4618      	mov	r0, r3
 8002e18:	f003 fc8a 	bl	8006730 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e1e:	3354      	adds	r3, #84	; 0x54
 8002e20:	2201      	movs	r2, #1
 8002e22:	2100      	movs	r1, #0
 8002e24:	4618      	mov	r0, r3
 8002e26:	f003 fc83 	bl	8006730 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002e2a:	683a      	ldr	r2, [r7, #0]
 8002e2c:	68f9      	ldr	r1, [r7, #12]
 8002e2e:	69b8      	ldr	r0, [r7, #24]
 8002e30:	f001 f914 	bl	800405c <pxPortInitialiseStack>
 8002e34:	4602      	mov	r2, r0
 8002e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e38:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d002      	beq.n	8002e46 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e44:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002e46:	bf00      	nop
 8002e48:	3720      	adds	r7, #32
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
	...

08002e50 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002e50:	b5b0      	push	{r4, r5, r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af02      	add	r7, sp, #8
 8002e56:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002e58:	f001 faac 	bl	80043b4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002e5c:	4b3b      	ldr	r3, [pc, #236]	; (8002f4c <prvAddNewTaskToReadyList+0xfc>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	3301      	adds	r3, #1
 8002e62:	4a3a      	ldr	r2, [pc, #232]	; (8002f4c <prvAddNewTaskToReadyList+0xfc>)
 8002e64:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002e66:	4b3a      	ldr	r3, [pc, #232]	; (8002f50 <prvAddNewTaskToReadyList+0x100>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d109      	bne.n	8002e82 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002e6e:	4a38      	ldr	r2, [pc, #224]	; (8002f50 <prvAddNewTaskToReadyList+0x100>)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002e74:	4b35      	ldr	r3, [pc, #212]	; (8002f4c <prvAddNewTaskToReadyList+0xfc>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d110      	bne.n	8002e9e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002e7c:	f000 fc2c 	bl	80036d8 <prvInitialiseTaskLists>
 8002e80:	e00d      	b.n	8002e9e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002e82:	4b34      	ldr	r3, [pc, #208]	; (8002f54 <prvAddNewTaskToReadyList+0x104>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d109      	bne.n	8002e9e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002e8a:	4b31      	ldr	r3, [pc, #196]	; (8002f50 <prvAddNewTaskToReadyList+0x100>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d802      	bhi.n	8002e9e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002e98:	4a2d      	ldr	r2, [pc, #180]	; (8002f50 <prvAddNewTaskToReadyList+0x100>)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002e9e:	4b2e      	ldr	r3, [pc, #184]	; (8002f58 <prvAddNewTaskToReadyList+0x108>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	4a2c      	ldr	r2, [pc, #176]	; (8002f58 <prvAddNewTaskToReadyList+0x108>)
 8002ea6:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002ea8:	4b2b      	ldr	r3, [pc, #172]	; (8002f58 <prvAddNewTaskToReadyList+0x108>)
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d016      	beq.n	8002ee4 <prvAddNewTaskToReadyList+0x94>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f003 f979 	bl	80061b0 <SEGGER_SYSVIEW_OnTaskCreate>
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ece:	461d      	mov	r5, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	461c      	mov	r4, r3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eda:	1ae3      	subs	r3, r4, r3
 8002edc:	9300      	str	r3, [sp, #0]
 8002ede:	462b      	mov	r3, r5
 8002ee0:	f001 fe3a 	bl	8004b58 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f003 f9e6 	bl	80062b8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	409a      	lsls	r2, r3
 8002ef4:	4b19      	ldr	r3, [pc, #100]	; (8002f5c <prvAddNewTaskToReadyList+0x10c>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	4a18      	ldr	r2, [pc, #96]	; (8002f5c <prvAddNewTaskToReadyList+0x10c>)
 8002efc:	6013      	str	r3, [r2, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f02:	4613      	mov	r3, r2
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	4413      	add	r3, r2
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	4a15      	ldr	r2, [pc, #84]	; (8002f60 <prvAddNewTaskToReadyList+0x110>)
 8002f0c:	441a      	add	r2, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	3304      	adds	r3, #4
 8002f12:	4619      	mov	r1, r3
 8002f14:	4610      	mov	r0, r2
 8002f16:	f7ff f8e2 	bl	80020de <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002f1a:	f001 fa7b 	bl	8004414 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002f1e:	4b0d      	ldr	r3, [pc, #52]	; (8002f54 <prvAddNewTaskToReadyList+0x104>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d00e      	beq.n	8002f44 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002f26:	4b0a      	ldr	r3, [pc, #40]	; (8002f50 <prvAddNewTaskToReadyList+0x100>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d207      	bcs.n	8002f44 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002f34:	4b0b      	ldr	r3, [pc, #44]	; (8002f64 <prvAddNewTaskToReadyList+0x114>)
 8002f36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f3a:	601a      	str	r2, [r3, #0]
 8002f3c:	f3bf 8f4f 	dsb	sy
 8002f40:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002f44:	bf00      	nop
 8002f46:	3708      	adds	r7, #8
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bdb0      	pop	{r4, r5, r7, pc}
 8002f4c:	2000016c 	.word	0x2000016c
 8002f50:	20000094 	.word	0x20000094
 8002f54:	20000178 	.word	0x20000178
 8002f58:	20000188 	.word	0x20000188
 8002f5c:	20000174 	.word	0x20000174
 8002f60:	20000098 	.word	0x20000098
 8002f64:	e000ed04 	.word	0xe000ed04

08002f68 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b086      	sub	sp, #24
 8002f6c:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002f6e:	4b29      	ldr	r3, [pc, #164]	; (8003014 <vTaskStartScheduler+0xac>)
 8002f70:	9301      	str	r3, [sp, #4]
 8002f72:	2300      	movs	r3, #0
 8002f74:	9300      	str	r3, [sp, #0]
 8002f76:	2300      	movs	r3, #0
 8002f78:	2282      	movs	r2, #130	; 0x82
 8002f7a:	4927      	ldr	r1, [pc, #156]	; (8003018 <vTaskStartScheduler+0xb0>)
 8002f7c:	4827      	ldr	r0, [pc, #156]	; (800301c <vTaskStartScheduler+0xb4>)
 8002f7e:	f7ff fe8f 	bl	8002ca0 <xTaskCreate>
 8002f82:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d102      	bne.n	8002f90 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8002f8a:	f000 fd55 	bl	8003a38 <xTimerCreateTimerTask>
 8002f8e:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d129      	bne.n	8002fea <vTaskStartScheduler+0x82>
        __asm volatile
 8002f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f9a:	f383 8811 	msr	BASEPRI, r3
 8002f9e:	f3bf 8f6f 	isb	sy
 8002fa2:	f3bf 8f4f 	dsb	sy
 8002fa6:	60bb      	str	r3, [r7, #8]
    }
 8002fa8:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002faa:	4b1d      	ldr	r3, [pc, #116]	; (8003020 <vTaskStartScheduler+0xb8>)
 8002fac:	f04f 32ff 	mov.w	r2, #4294967295
 8002fb0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002fb2:	4b1c      	ldr	r3, [pc, #112]	; (8003024 <vTaskStartScheduler+0xbc>)
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002fb8:	4b1b      	ldr	r3, [pc, #108]	; (8003028 <vTaskStartScheduler+0xc0>)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002fbe:	4b1b      	ldr	r3, [pc, #108]	; (800302c <vTaskStartScheduler+0xc4>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	3334      	adds	r3, #52	; 0x34
 8002fc4:	2205      	movs	r2, #5
 8002fc6:	4914      	ldr	r1, [pc, #80]	; (8003018 <vTaskStartScheduler+0xb0>)
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f003 fb95 	bl	80066f8 <memcmp>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d005      	beq.n	8002fe0 <vTaskStartScheduler+0x78>
 8002fd4:	4b15      	ldr	r3, [pc, #84]	; (800302c <vTaskStartScheduler+0xc4>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f003 f92b 	bl	8006234 <SEGGER_SYSVIEW_OnTaskStartExec>
 8002fde:	e001      	b.n	8002fe4 <vTaskStartScheduler+0x7c>
 8002fe0:	f003 f8ca 	bl	8006178 <SEGGER_SYSVIEW_OnIdle>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002fe4:	f001 f8c6 	bl	8004174 <xPortStartScheduler>
 8002fe8:	e00e      	b.n	8003008 <vTaskStartScheduler+0xa0>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff0:	d10a      	bne.n	8003008 <vTaskStartScheduler+0xa0>
        __asm volatile
 8002ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ff6:	f383 8811 	msr	BASEPRI, r3
 8002ffa:	f3bf 8f6f 	isb	sy
 8002ffe:	f3bf 8f4f 	dsb	sy
 8003002:	607b      	str	r3, [r7, #4]
    }
 8003004:	bf00      	nop
 8003006:	e7fe      	b.n	8003006 <vTaskStartScheduler+0x9e>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003008:	4b09      	ldr	r3, [pc, #36]	; (8003030 <vTaskStartScheduler+0xc8>)
 800300a:	681b      	ldr	r3, [r3, #0]
}
 800300c:	bf00      	nop
 800300e:	3710      	adds	r7, #16
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}
 8003014:	20000190 	.word	0x20000190
 8003018:	0800711c 	.word	0x0800711c
 800301c:	080036a9 	.word	0x080036a9
 8003020:	2000018c 	.word	0x2000018c
 8003024:	20000178 	.word	0x20000178
 8003028:	20000170 	.word	0x20000170
 800302c:	20000094 	.word	0x20000094
 8003030:	2000000c 	.word	0x2000000c

08003034 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003034:	b480      	push	{r7}
 8003036:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003038:	4b04      	ldr	r3, [pc, #16]	; (800304c <vTaskSuspendAll+0x18>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	3301      	adds	r3, #1
 800303e:	4a03      	ldr	r2, [pc, #12]	; (800304c <vTaskSuspendAll+0x18>)
 8003040:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003042:	bf00      	nop
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr
 800304c:	20000194 	.word	0x20000194

08003050 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003056:	2300      	movs	r3, #0
 8003058:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800305a:	2300      	movs	r3, #0
 800305c:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800305e:	4b43      	ldr	r3, [pc, #268]	; (800316c <xTaskResumeAll+0x11c>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d10a      	bne.n	800307c <xTaskResumeAll+0x2c>
        __asm volatile
 8003066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800306a:	f383 8811 	msr	BASEPRI, r3
 800306e:	f3bf 8f6f 	isb	sy
 8003072:	f3bf 8f4f 	dsb	sy
 8003076:	603b      	str	r3, [r7, #0]
    }
 8003078:	bf00      	nop
 800307a:	e7fe      	b.n	800307a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800307c:	f001 f99a 	bl	80043b4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003080:	4b3a      	ldr	r3, [pc, #232]	; (800316c <xTaskResumeAll+0x11c>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	3b01      	subs	r3, #1
 8003086:	4a39      	ldr	r2, [pc, #228]	; (800316c <xTaskResumeAll+0x11c>)
 8003088:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800308a:	4b38      	ldr	r3, [pc, #224]	; (800316c <xTaskResumeAll+0x11c>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d165      	bne.n	800315e <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003092:	4b37      	ldr	r3, [pc, #220]	; (8003170 <xTaskResumeAll+0x120>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d061      	beq.n	800315e <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800309a:	e032      	b.n	8003102 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800309c:	4b35      	ldr	r3, [pc, #212]	; (8003174 <xTaskResumeAll+0x124>)
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	3318      	adds	r3, #24
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7ff f875 	bl	8002198 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	3304      	adds	r3, #4
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7ff f870 	bl	8002198 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f003 f8fc 	bl	80062b8 <SEGGER_SYSVIEW_OnTaskStartReady>
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c4:	2201      	movs	r2, #1
 80030c6:	409a      	lsls	r2, r3
 80030c8:	4b2b      	ldr	r3, [pc, #172]	; (8003178 <xTaskResumeAll+0x128>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	4a2a      	ldr	r2, [pc, #168]	; (8003178 <xTaskResumeAll+0x128>)
 80030d0:	6013      	str	r3, [r2, #0]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030d6:	4613      	mov	r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	4413      	add	r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	4a27      	ldr	r2, [pc, #156]	; (800317c <xTaskResumeAll+0x12c>)
 80030e0:	441a      	add	r2, r3
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	3304      	adds	r3, #4
 80030e6:	4619      	mov	r1, r3
 80030e8:	4610      	mov	r0, r2
 80030ea:	f7fe fff8 	bl	80020de <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030f2:	4b23      	ldr	r3, [pc, #140]	; (8003180 <xTaskResumeAll+0x130>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d302      	bcc.n	8003102 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 80030fc:	4b21      	ldr	r3, [pc, #132]	; (8003184 <xTaskResumeAll+0x134>)
 80030fe:	2201      	movs	r2, #1
 8003100:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003102:	4b1c      	ldr	r3, [pc, #112]	; (8003174 <xTaskResumeAll+0x124>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d1c8      	bne.n	800309c <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d001      	beq.n	8003114 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003110:	f000 fb60 	bl	80037d4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003114:	4b1c      	ldr	r3, [pc, #112]	; (8003188 <xTaskResumeAll+0x138>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d010      	beq.n	8003142 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003120:	f000 f858 	bl	80031d4 <xTaskIncrementTick>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d002      	beq.n	8003130 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 800312a:	4b16      	ldr	r3, [pc, #88]	; (8003184 <xTaskResumeAll+0x134>)
 800312c:	2201      	movs	r2, #1
 800312e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	3b01      	subs	r3, #1
 8003134:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d1f1      	bne.n	8003120 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 800313c:	4b12      	ldr	r3, [pc, #72]	; (8003188 <xTaskResumeAll+0x138>)
 800313e:	2200      	movs	r2, #0
 8003140:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003142:	4b10      	ldr	r3, [pc, #64]	; (8003184 <xTaskResumeAll+0x134>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d009      	beq.n	800315e <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800314a:	2301      	movs	r3, #1
 800314c:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800314e:	4b0f      	ldr	r3, [pc, #60]	; (800318c <xTaskResumeAll+0x13c>)
 8003150:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003154:	601a      	str	r2, [r3, #0]
 8003156:	f3bf 8f4f 	dsb	sy
 800315a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800315e:	f001 f959 	bl	8004414 <vPortExitCritical>

    return xAlreadyYielded;
 8003162:	68bb      	ldr	r3, [r7, #8]
}
 8003164:	4618      	mov	r0, r3
 8003166:	3710      	adds	r7, #16
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}
 800316c:	20000194 	.word	0x20000194
 8003170:	2000016c 	.word	0x2000016c
 8003174:	2000012c 	.word	0x2000012c
 8003178:	20000174 	.word	0x20000174
 800317c:	20000098 	.word	0x20000098
 8003180:	20000094 	.word	0x20000094
 8003184:	20000180 	.word	0x20000180
 8003188:	2000017c 	.word	0x2000017c
 800318c:	e000ed04 	.word	0xe000ed04

08003190 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003196:	4b05      	ldr	r3, [pc, #20]	; (80031ac <xTaskGetTickCount+0x1c>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800319c:	687b      	ldr	r3, [r7, #4]
}
 800319e:	4618      	mov	r0, r3
 80031a0:	370c      	adds	r7, #12
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr
 80031aa:	bf00      	nop
 80031ac:	20000170 	.word	0x20000170

080031b0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80031b6:	f001 f9e9 	bl	800458c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80031ba:	2300      	movs	r3, #0
 80031bc:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80031be:	4b04      	ldr	r3, [pc, #16]	; (80031d0 <xTaskGetTickCountFromISR+0x20>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80031c4:	683b      	ldr	r3, [r7, #0]
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3708      	adds	r7, #8
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	20000170 	.word	0x20000170

080031d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b086      	sub	sp, #24
 80031d8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80031da:	2300      	movs	r3, #0
 80031dc:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031de:	4b50      	ldr	r3, [pc, #320]	; (8003320 <xTaskIncrementTick+0x14c>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	f040 8092 	bne.w	800330c <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80031e8:	4b4e      	ldr	r3, [pc, #312]	; (8003324 <xTaskIncrementTick+0x150>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	3301      	adds	r3, #1
 80031ee:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80031f0:	4a4c      	ldr	r2, [pc, #304]	; (8003324 <xTaskIncrementTick+0x150>)
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d120      	bne.n	800323e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80031fc:	4b4a      	ldr	r3, [pc, #296]	; (8003328 <xTaskIncrementTick+0x154>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d00a      	beq.n	800321c <xTaskIncrementTick+0x48>
        __asm volatile
 8003206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800320a:	f383 8811 	msr	BASEPRI, r3
 800320e:	f3bf 8f6f 	isb	sy
 8003212:	f3bf 8f4f 	dsb	sy
 8003216:	603b      	str	r3, [r7, #0]
    }
 8003218:	bf00      	nop
 800321a:	e7fe      	b.n	800321a <xTaskIncrementTick+0x46>
 800321c:	4b42      	ldr	r3, [pc, #264]	; (8003328 <xTaskIncrementTick+0x154>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	60fb      	str	r3, [r7, #12]
 8003222:	4b42      	ldr	r3, [pc, #264]	; (800332c <xTaskIncrementTick+0x158>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a40      	ldr	r2, [pc, #256]	; (8003328 <xTaskIncrementTick+0x154>)
 8003228:	6013      	str	r3, [r2, #0]
 800322a:	4a40      	ldr	r2, [pc, #256]	; (800332c <xTaskIncrementTick+0x158>)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6013      	str	r3, [r2, #0]
 8003230:	4b3f      	ldr	r3, [pc, #252]	; (8003330 <xTaskIncrementTick+0x15c>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	3301      	adds	r3, #1
 8003236:	4a3e      	ldr	r2, [pc, #248]	; (8003330 <xTaskIncrementTick+0x15c>)
 8003238:	6013      	str	r3, [r2, #0]
 800323a:	f000 facb 	bl	80037d4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800323e:	4b3d      	ldr	r3, [pc, #244]	; (8003334 <xTaskIncrementTick+0x160>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	693a      	ldr	r2, [r7, #16]
 8003244:	429a      	cmp	r2, r3
 8003246:	d34c      	bcc.n	80032e2 <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003248:	4b37      	ldr	r3, [pc, #220]	; (8003328 <xTaskIncrementTick+0x154>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d104      	bne.n	800325c <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003252:	4b38      	ldr	r3, [pc, #224]	; (8003334 <xTaskIncrementTick+0x160>)
 8003254:	f04f 32ff 	mov.w	r2, #4294967295
 8003258:	601a      	str	r2, [r3, #0]
                    break;
 800325a:	e042      	b.n	80032e2 <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800325c:	4b32      	ldr	r3, [pc, #200]	; (8003328 <xTaskIncrementTick+0x154>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800326c:	693a      	ldr	r2, [r7, #16]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	429a      	cmp	r2, r3
 8003272:	d203      	bcs.n	800327c <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003274:	4a2f      	ldr	r2, [pc, #188]	; (8003334 <xTaskIncrementTick+0x160>)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800327a:	e032      	b.n	80032e2 <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	3304      	adds	r3, #4
 8003280:	4618      	mov	r0, r3
 8003282:	f7fe ff89 	bl	8002198 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800328a:	2b00      	cmp	r3, #0
 800328c:	d004      	beq.n	8003298 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	3318      	adds	r3, #24
 8003292:	4618      	mov	r0, r3
 8003294:	f7fe ff80 	bl	8002198 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	4618      	mov	r0, r3
 800329c:	f003 f80c 	bl	80062b8 <SEGGER_SYSVIEW_OnTaskStartReady>
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a4:	2201      	movs	r2, #1
 80032a6:	409a      	lsls	r2, r3
 80032a8:	4b23      	ldr	r3, [pc, #140]	; (8003338 <xTaskIncrementTick+0x164>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	4a22      	ldr	r2, [pc, #136]	; (8003338 <xTaskIncrementTick+0x164>)
 80032b0:	6013      	str	r3, [r2, #0]
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032b6:	4613      	mov	r3, r2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	4413      	add	r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	4a1f      	ldr	r2, [pc, #124]	; (800333c <xTaskIncrementTick+0x168>)
 80032c0:	441a      	add	r2, r3
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	3304      	adds	r3, #4
 80032c6:	4619      	mov	r1, r3
 80032c8:	4610      	mov	r0, r2
 80032ca:	f7fe ff08 	bl	80020de <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032d2:	4b1b      	ldr	r3, [pc, #108]	; (8003340 <xTaskIncrementTick+0x16c>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d8:	429a      	cmp	r2, r3
 80032da:	d3b5      	bcc.n	8003248 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 80032dc:	2301      	movs	r3, #1
 80032de:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80032e0:	e7b2      	b.n	8003248 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80032e2:	4b17      	ldr	r3, [pc, #92]	; (8003340 <xTaskIncrementTick+0x16c>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032e8:	4914      	ldr	r1, [pc, #80]	; (800333c <xTaskIncrementTick+0x168>)
 80032ea:	4613      	mov	r3, r2
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	4413      	add	r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	440b      	add	r3, r1
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d901      	bls.n	80032fe <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 80032fa:	2301      	movs	r3, #1
 80032fc:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80032fe:	4b11      	ldr	r3, [pc, #68]	; (8003344 <xTaskIncrementTick+0x170>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d007      	beq.n	8003316 <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8003306:	2301      	movs	r3, #1
 8003308:	617b      	str	r3, [r7, #20]
 800330a:	e004      	b.n	8003316 <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800330c:	4b0e      	ldr	r3, [pc, #56]	; (8003348 <xTaskIncrementTick+0x174>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	3301      	adds	r3, #1
 8003312:	4a0d      	ldr	r2, [pc, #52]	; (8003348 <xTaskIncrementTick+0x174>)
 8003314:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8003316:	697b      	ldr	r3, [r7, #20]
}
 8003318:	4618      	mov	r0, r3
 800331a:	3718      	adds	r7, #24
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}
 8003320:	20000194 	.word	0x20000194
 8003324:	20000170 	.word	0x20000170
 8003328:	20000124 	.word	0x20000124
 800332c:	20000128 	.word	0x20000128
 8003330:	20000184 	.word	0x20000184
 8003334:	2000018c 	.word	0x2000018c
 8003338:	20000174 	.word	0x20000174
 800333c:	20000098 	.word	0x20000098
 8003340:	20000094 	.word	0x20000094
 8003344:	20000180 	.word	0x20000180
 8003348:	2000017c 	.word	0x2000017c

0800334c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b086      	sub	sp, #24
 8003350:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003352:	4b2f      	ldr	r3, [pc, #188]	; (8003410 <vTaskSwitchContext+0xc4>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d003      	beq.n	8003362 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800335a:	4b2e      	ldr	r3, [pc, #184]	; (8003414 <vTaskSwitchContext+0xc8>)
 800335c:	2201      	movs	r2, #1
 800335e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003360:	e052      	b.n	8003408 <vTaskSwitchContext+0xbc>
        xYieldPending = pdFALSE;
 8003362:	4b2c      	ldr	r3, [pc, #176]	; (8003414 <vTaskSwitchContext+0xc8>)
 8003364:	2200      	movs	r2, #0
 8003366:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003368:	4b2b      	ldr	r3, [pc, #172]	; (8003418 <vTaskSwitchContext+0xcc>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	fab3 f383 	clz	r3, r3
 8003374:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003376:	7afb      	ldrb	r3, [r7, #11]
 8003378:	f1c3 031f 	rsb	r3, r3, #31
 800337c:	617b      	str	r3, [r7, #20]
 800337e:	4927      	ldr	r1, [pc, #156]	; (800341c <vTaskSwitchContext+0xd0>)
 8003380:	697a      	ldr	r2, [r7, #20]
 8003382:	4613      	mov	r3, r2
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	4413      	add	r3, r2
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	440b      	add	r3, r1
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d10a      	bne.n	80033a8 <vTaskSwitchContext+0x5c>
        __asm volatile
 8003392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003396:	f383 8811 	msr	BASEPRI, r3
 800339a:	f3bf 8f6f 	isb	sy
 800339e:	f3bf 8f4f 	dsb	sy
 80033a2:	607b      	str	r3, [r7, #4]
    }
 80033a4:	bf00      	nop
 80033a6:	e7fe      	b.n	80033a6 <vTaskSwitchContext+0x5a>
 80033a8:	697a      	ldr	r2, [r7, #20]
 80033aa:	4613      	mov	r3, r2
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	4413      	add	r3, r2
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	4a1a      	ldr	r2, [pc, #104]	; (800341c <vTaskSwitchContext+0xd0>)
 80033b4:	4413      	add	r3, r2
 80033b6:	613b      	str	r3, [r7, #16]
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	685a      	ldr	r2, [r3, #4]
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	605a      	str	r2, [r3, #4]
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	685a      	ldr	r2, [r3, #4]
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	3308      	adds	r3, #8
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d104      	bne.n	80033d8 <vTaskSwitchContext+0x8c>
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	685a      	ldr	r2, [r3, #4]
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	605a      	str	r2, [r3, #4]
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	4a10      	ldr	r2, [pc, #64]	; (8003420 <vTaskSwitchContext+0xd4>)
 80033e0:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80033e2:	4b0f      	ldr	r3, [pc, #60]	; (8003420 <vTaskSwitchContext+0xd4>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	3334      	adds	r3, #52	; 0x34
 80033e8:	2205      	movs	r2, #5
 80033ea:	490e      	ldr	r1, [pc, #56]	; (8003424 <vTaskSwitchContext+0xd8>)
 80033ec:	4618      	mov	r0, r3
 80033ee:	f003 f983 	bl	80066f8 <memcmp>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d005      	beq.n	8003404 <vTaskSwitchContext+0xb8>
 80033f8:	4b09      	ldr	r3, [pc, #36]	; (8003420 <vTaskSwitchContext+0xd4>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4618      	mov	r0, r3
 80033fe:	f002 ff19 	bl	8006234 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003402:	e001      	b.n	8003408 <vTaskSwitchContext+0xbc>
        traceTASK_SWITCHED_IN();
 8003404:	f002 feb8 	bl	8006178 <SEGGER_SYSVIEW_OnIdle>
}
 8003408:	bf00      	nop
 800340a:	3718      	adds	r7, #24
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}
 8003410:	20000194 	.word	0x20000194
 8003414:	20000180 	.word	0x20000180
 8003418:	20000174 	.word	0x20000174
 800341c:	20000098 	.word	0x20000098
 8003420:	20000094 	.word	0x20000094
 8003424:	0800711c 	.word	0x0800711c

08003428 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d10a      	bne.n	800344e <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800343c:	f383 8811 	msr	BASEPRI, r3
 8003440:	f3bf 8f6f 	isb	sy
 8003444:	f3bf 8f4f 	dsb	sy
 8003448:	60fb      	str	r3, [r7, #12]
    }
 800344a:	bf00      	nop
 800344c:	e7fe      	b.n	800344c <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800344e:	4b07      	ldr	r3, [pc, #28]	; (800346c <vTaskPlaceOnEventList+0x44>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	3318      	adds	r3, #24
 8003454:	4619      	mov	r1, r3
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f7fe fe65 	bl	8002126 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800345c:	2101      	movs	r1, #1
 800345e:	6838      	ldr	r0, [r7, #0]
 8003460:	f000 fa72 	bl	8003948 <prvAddCurrentTaskToDelayedList>
}
 8003464:	bf00      	nop
 8003466:	3710      	adds	r7, #16
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}
 800346c:	20000094 	.word	0x20000094

08003470 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003470:	b580      	push	{r7, lr}
 8003472:	b086      	sub	sp, #24
 8003474:	af00      	add	r7, sp, #0
 8003476:	60f8      	str	r0, [r7, #12]
 8003478:	60b9      	str	r1, [r7, #8]
 800347a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d10a      	bne.n	8003498 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8003482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003486:	f383 8811 	msr	BASEPRI, r3
 800348a:	f3bf 8f6f 	isb	sy
 800348e:	f3bf 8f4f 	dsb	sy
 8003492:	617b      	str	r3, [r7, #20]
    }
 8003494:	bf00      	nop
 8003496:	e7fe      	b.n	8003496 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003498:	4b0b      	ldr	r3, [pc, #44]	; (80034c8 <vTaskPlaceOnEventListRestricted+0x58>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	3318      	adds	r3, #24
 800349e:	4619      	mov	r1, r3
 80034a0:	68f8      	ldr	r0, [r7, #12]
 80034a2:	f7fe fe1c 	bl	80020de <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d002      	beq.n	80034b2 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 80034ac:	f04f 33ff 	mov.w	r3, #4294967295
 80034b0:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80034b2:	2024      	movs	r0, #36	; 0x24
 80034b4:	f002 f962 	bl	800577c <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80034b8:	6879      	ldr	r1, [r7, #4]
 80034ba:	68b8      	ldr	r0, [r7, #8]
 80034bc:	f000 fa44 	bl	8003948 <prvAddCurrentTaskToDelayedList>
    }
 80034c0:	bf00      	nop
 80034c2:	3718      	adds	r7, #24
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	20000094 	.word	0x20000094

080034cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b086      	sub	sp, #24
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d10a      	bne.n	80034f8 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80034e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034e6:	f383 8811 	msr	BASEPRI, r3
 80034ea:	f3bf 8f6f 	isb	sy
 80034ee:	f3bf 8f4f 	dsb	sy
 80034f2:	60fb      	str	r3, [r7, #12]
    }
 80034f4:	bf00      	nop
 80034f6:	e7fe      	b.n	80034f6 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	3318      	adds	r3, #24
 80034fc:	4618      	mov	r0, r3
 80034fe:	f7fe fe4b 	bl	8002198 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003502:	4b1f      	ldr	r3, [pc, #124]	; (8003580 <xTaskRemoveFromEventList+0xb4>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d120      	bne.n	800354c <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	3304      	adds	r3, #4
 800350e:	4618      	mov	r0, r3
 8003510:	f7fe fe42 	bl	8002198 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	4618      	mov	r0, r3
 8003518:	f002 fece 	bl	80062b8 <SEGGER_SYSVIEW_OnTaskStartReady>
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003520:	2201      	movs	r2, #1
 8003522:	409a      	lsls	r2, r3
 8003524:	4b17      	ldr	r3, [pc, #92]	; (8003584 <xTaskRemoveFromEventList+0xb8>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4313      	orrs	r3, r2
 800352a:	4a16      	ldr	r2, [pc, #88]	; (8003584 <xTaskRemoveFromEventList+0xb8>)
 800352c:	6013      	str	r3, [r2, #0]
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003532:	4613      	mov	r3, r2
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	4413      	add	r3, r2
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	4a13      	ldr	r2, [pc, #76]	; (8003588 <xTaskRemoveFromEventList+0xbc>)
 800353c:	441a      	add	r2, r3
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	3304      	adds	r3, #4
 8003542:	4619      	mov	r1, r3
 8003544:	4610      	mov	r0, r2
 8003546:	f7fe fdca 	bl	80020de <vListInsertEnd>
 800354a:	e005      	b.n	8003558 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	3318      	adds	r3, #24
 8003550:	4619      	mov	r1, r3
 8003552:	480e      	ldr	r0, [pc, #56]	; (800358c <xTaskRemoveFromEventList+0xc0>)
 8003554:	f7fe fdc3 	bl	80020de <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800355c:	4b0c      	ldr	r3, [pc, #48]	; (8003590 <xTaskRemoveFromEventList+0xc4>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003562:	429a      	cmp	r2, r3
 8003564:	d905      	bls.n	8003572 <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003566:	2301      	movs	r3, #1
 8003568:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800356a:	4b0a      	ldr	r3, [pc, #40]	; (8003594 <xTaskRemoveFromEventList+0xc8>)
 800356c:	2201      	movs	r2, #1
 800356e:	601a      	str	r2, [r3, #0]
 8003570:	e001      	b.n	8003576 <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 8003572:	2300      	movs	r3, #0
 8003574:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8003576:	697b      	ldr	r3, [r7, #20]
}
 8003578:	4618      	mov	r0, r3
 800357a:	3718      	adds	r7, #24
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}
 8003580:	20000194 	.word	0x20000194
 8003584:	20000174 	.word	0x20000174
 8003588:	20000098 	.word	0x20000098
 800358c:	2000012c 	.word	0x2000012c
 8003590:	20000094 	.word	0x20000094
 8003594:	20000180 	.word	0x20000180

08003598 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80035a0:	4b06      	ldr	r3, [pc, #24]	; (80035bc <vTaskInternalSetTimeOutState+0x24>)
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80035a8:	4b05      	ldr	r3, [pc, #20]	; (80035c0 <vTaskInternalSetTimeOutState+0x28>)
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	605a      	str	r2, [r3, #4]
}
 80035b0:	bf00      	nop
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr
 80035bc:	20000184 	.word	0x20000184
 80035c0:	20000170 	.word	0x20000170

080035c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b088      	sub	sp, #32
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d10a      	bne.n	80035ea <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80035d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035d8:	f383 8811 	msr	BASEPRI, r3
 80035dc:	f3bf 8f6f 	isb	sy
 80035e0:	f3bf 8f4f 	dsb	sy
 80035e4:	613b      	str	r3, [r7, #16]
    }
 80035e6:	bf00      	nop
 80035e8:	e7fe      	b.n	80035e8 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d10a      	bne.n	8003606 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80035f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f4:	f383 8811 	msr	BASEPRI, r3
 80035f8:	f3bf 8f6f 	isb	sy
 80035fc:	f3bf 8f4f 	dsb	sy
 8003600:	60fb      	str	r3, [r7, #12]
    }
 8003602:	bf00      	nop
 8003604:	e7fe      	b.n	8003604 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003606:	f000 fed5 	bl	80043b4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800360a:	4b1f      	ldr	r3, [pc, #124]	; (8003688 <xTaskCheckForTimeOut+0xc4>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	69ba      	ldr	r2, [r7, #24]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003622:	d102      	bne.n	800362a <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003624:	2300      	movs	r3, #0
 8003626:	61fb      	str	r3, [r7, #28]
 8003628:	e026      	b.n	8003678 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	4b17      	ldr	r3, [pc, #92]	; (800368c <xTaskCheckForTimeOut+0xc8>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	429a      	cmp	r2, r3
 8003634:	d00a      	beq.n	800364c <xTaskCheckForTimeOut+0x88>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	69ba      	ldr	r2, [r7, #24]
 800363c:	429a      	cmp	r2, r3
 800363e:	d305      	bcc.n	800364c <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003640:	2301      	movs	r3, #1
 8003642:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	2200      	movs	r2, #0
 8003648:	601a      	str	r2, [r3, #0]
 800364a:	e015      	b.n	8003678 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	697a      	ldr	r2, [r7, #20]
 8003652:	429a      	cmp	r2, r3
 8003654:	d20b      	bcs.n	800366e <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	1ad2      	subs	r2, r2, r3
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f7ff ff98 	bl	8003598 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003668:	2300      	movs	r3, #0
 800366a:	61fb      	str	r3, [r7, #28]
 800366c:	e004      	b.n	8003678 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	2200      	movs	r2, #0
 8003672:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003674:	2301      	movs	r3, #1
 8003676:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003678:	f000 fecc 	bl	8004414 <vPortExitCritical>

    return xReturn;
 800367c:	69fb      	ldr	r3, [r7, #28]
}
 800367e:	4618      	mov	r0, r3
 8003680:	3720      	adds	r7, #32
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	20000170 	.word	0x20000170
 800368c:	20000184 	.word	0x20000184

08003690 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003690:	b480      	push	{r7}
 8003692:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003694:	4b03      	ldr	r3, [pc, #12]	; (80036a4 <vTaskMissedYield+0x14>)
 8003696:	2201      	movs	r2, #1
 8003698:	601a      	str	r2, [r3, #0]
}
 800369a:	bf00      	nop
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr
 80036a4:	20000180 	.word	0x20000180

080036a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80036b0:	f000 f852 	bl	8003758 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80036b4:	4b06      	ldr	r3, [pc, #24]	; (80036d0 <prvIdleTask+0x28>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d9f9      	bls.n	80036b0 <prvIdleTask+0x8>
                {
                    taskYIELD();
 80036bc:	4b05      	ldr	r3, [pc, #20]	; (80036d4 <prvIdleTask+0x2c>)
 80036be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036c2:	601a      	str	r2, [r3, #0]
 80036c4:	f3bf 8f4f 	dsb	sy
 80036c8:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80036cc:	e7f0      	b.n	80036b0 <prvIdleTask+0x8>
 80036ce:	bf00      	nop
 80036d0:	20000098 	.word	0x20000098
 80036d4:	e000ed04 	.word	0xe000ed04

080036d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b082      	sub	sp, #8
 80036dc:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80036de:	2300      	movs	r3, #0
 80036e0:	607b      	str	r3, [r7, #4]
 80036e2:	e00c      	b.n	80036fe <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	4613      	mov	r3, r2
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	4413      	add	r3, r2
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	4a12      	ldr	r2, [pc, #72]	; (8003738 <prvInitialiseTaskLists+0x60>)
 80036f0:	4413      	add	r3, r2
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7fe fcc6 	bl	8002084 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	3301      	adds	r3, #1
 80036fc:	607b      	str	r3, [r7, #4]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2b04      	cmp	r3, #4
 8003702:	d9ef      	bls.n	80036e4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003704:	480d      	ldr	r0, [pc, #52]	; (800373c <prvInitialiseTaskLists+0x64>)
 8003706:	f7fe fcbd 	bl	8002084 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800370a:	480d      	ldr	r0, [pc, #52]	; (8003740 <prvInitialiseTaskLists+0x68>)
 800370c:	f7fe fcba 	bl	8002084 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003710:	480c      	ldr	r0, [pc, #48]	; (8003744 <prvInitialiseTaskLists+0x6c>)
 8003712:	f7fe fcb7 	bl	8002084 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003716:	480c      	ldr	r0, [pc, #48]	; (8003748 <prvInitialiseTaskLists+0x70>)
 8003718:	f7fe fcb4 	bl	8002084 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 800371c:	480b      	ldr	r0, [pc, #44]	; (800374c <prvInitialiseTaskLists+0x74>)
 800371e:	f7fe fcb1 	bl	8002084 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003722:	4b0b      	ldr	r3, [pc, #44]	; (8003750 <prvInitialiseTaskLists+0x78>)
 8003724:	4a05      	ldr	r2, [pc, #20]	; (800373c <prvInitialiseTaskLists+0x64>)
 8003726:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003728:	4b0a      	ldr	r3, [pc, #40]	; (8003754 <prvInitialiseTaskLists+0x7c>)
 800372a:	4a05      	ldr	r2, [pc, #20]	; (8003740 <prvInitialiseTaskLists+0x68>)
 800372c:	601a      	str	r2, [r3, #0]
}
 800372e:	bf00      	nop
 8003730:	3708      	adds	r7, #8
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	20000098 	.word	0x20000098
 800373c:	200000fc 	.word	0x200000fc
 8003740:	20000110 	.word	0x20000110
 8003744:	2000012c 	.word	0x2000012c
 8003748:	20000140 	.word	0x20000140
 800374c:	20000158 	.word	0x20000158
 8003750:	20000124 	.word	0x20000124
 8003754:	20000128 	.word	0x20000128

08003758 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800375e:	e019      	b.n	8003794 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003760:	f000 fe28 	bl	80043b4 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003764:	4b10      	ldr	r3, [pc, #64]	; (80037a8 <prvCheckTasksWaitingTermination+0x50>)
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	3304      	adds	r3, #4
 8003770:	4618      	mov	r0, r3
 8003772:	f7fe fd11 	bl	8002198 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003776:	4b0d      	ldr	r3, [pc, #52]	; (80037ac <prvCheckTasksWaitingTermination+0x54>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	3b01      	subs	r3, #1
 800377c:	4a0b      	ldr	r2, [pc, #44]	; (80037ac <prvCheckTasksWaitingTermination+0x54>)
 800377e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003780:	4b0b      	ldr	r3, [pc, #44]	; (80037b0 <prvCheckTasksWaitingTermination+0x58>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	3b01      	subs	r3, #1
 8003786:	4a0a      	ldr	r2, [pc, #40]	; (80037b0 <prvCheckTasksWaitingTermination+0x58>)
 8003788:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800378a:	f000 fe43 	bl	8004414 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f000 f810 	bl	80037b4 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003794:	4b06      	ldr	r3, [pc, #24]	; (80037b0 <prvCheckTasksWaitingTermination+0x58>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d1e1      	bne.n	8003760 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 800379c:	bf00      	nop
 800379e:	bf00      	nop
 80037a0:	3708      	adds	r7, #8
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	20000140 	.word	0x20000140
 80037ac:	2000016c 	.word	0x2000016c
 80037b0:	20000154 	.word	0x20000154

080037b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c0:	4618      	mov	r0, r3
 80037c2:	f001 f803 	bl	80047cc <vPortFree>
                vPortFree( pxTCB );
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f001 f800 	bl	80047cc <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80037cc:	bf00      	nop
 80037ce:	3708      	adds	r7, #8
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80037d4:	b480      	push	{r7}
 80037d6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037d8:	4b0a      	ldr	r3, [pc, #40]	; (8003804 <prvResetNextTaskUnblockTime+0x30>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d104      	bne.n	80037ec <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80037e2:	4b09      	ldr	r3, [pc, #36]	; (8003808 <prvResetNextTaskUnblockTime+0x34>)
 80037e4:	f04f 32ff 	mov.w	r2, #4294967295
 80037e8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80037ea:	e005      	b.n	80037f8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80037ec:	4b05      	ldr	r3, [pc, #20]	; (8003804 <prvResetNextTaskUnblockTime+0x30>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a04      	ldr	r2, [pc, #16]	; (8003808 <prvResetNextTaskUnblockTime+0x34>)
 80037f6:	6013      	str	r3, [r2, #0]
}
 80037f8:	bf00      	nop
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr
 8003802:	bf00      	nop
 8003804:	20000124 	.word	0x20000124
 8003808:	2000018c 	.word	0x2000018c

0800380c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003812:	4b0b      	ldr	r3, [pc, #44]	; (8003840 <xTaskGetSchedulerState+0x34>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d102      	bne.n	8003820 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800381a:	2301      	movs	r3, #1
 800381c:	607b      	str	r3, [r7, #4]
 800381e:	e008      	b.n	8003832 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003820:	4b08      	ldr	r3, [pc, #32]	; (8003844 <xTaskGetSchedulerState+0x38>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d102      	bne.n	800382e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003828:	2302      	movs	r3, #2
 800382a:	607b      	str	r3, [r7, #4]
 800382c:	e001      	b.n	8003832 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800382e:	2300      	movs	r3, #0
 8003830:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003832:	687b      	ldr	r3, [r7, #4]
    }
 8003834:	4618      	mov	r0, r3
 8003836:	370c      	adds	r7, #12
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr
 8003840:	20000178 	.word	0x20000178
 8003844:	20000194 	.word	0x20000194

08003848 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003848:	b580      	push	{r7, lr}
 800384a:	b086      	sub	sp, #24
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003854:	2300      	movs	r3, #0
 8003856:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d068      	beq.n	8003930 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800385e:	4b37      	ldr	r3, [pc, #220]	; (800393c <xTaskPriorityDisinherit+0xf4>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	693a      	ldr	r2, [r7, #16]
 8003864:	429a      	cmp	r2, r3
 8003866:	d00a      	beq.n	800387e <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8003868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800386c:	f383 8811 	msr	BASEPRI, r3
 8003870:	f3bf 8f6f 	isb	sy
 8003874:	f3bf 8f4f 	dsb	sy
 8003878:	60fb      	str	r3, [r7, #12]
    }
 800387a:	bf00      	nop
 800387c:	e7fe      	b.n	800387c <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003882:	2b00      	cmp	r3, #0
 8003884:	d10a      	bne.n	800389c <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8003886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800388a:	f383 8811 	msr	BASEPRI, r3
 800388e:	f3bf 8f6f 	isb	sy
 8003892:	f3bf 8f4f 	dsb	sy
 8003896:	60bb      	str	r3, [r7, #8]
    }
 8003898:	bf00      	nop
 800389a:	e7fe      	b.n	800389a <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038a0:	1e5a      	subs	r2, r3, #1
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d03e      	beq.n	8003930 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d13a      	bne.n	8003930 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	3304      	adds	r3, #4
 80038be:	4618      	mov	r0, r3
 80038c0:	f7fe fc6a 	bl	8002198 <uxListRemove>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d10a      	bne.n	80038e0 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ce:	2201      	movs	r2, #1
 80038d0:	fa02 f303 	lsl.w	r3, r2, r3
 80038d4:	43da      	mvns	r2, r3
 80038d6:	4b1a      	ldr	r3, [pc, #104]	; (8003940 <xTaskPriorityDisinherit+0xf8>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4013      	ands	r3, r2
 80038dc:	4a18      	ldr	r2, [pc, #96]	; (8003940 <xTaskPriorityDisinherit+0xf8>)
 80038de:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	4619      	mov	r1, r3
 80038e4:	204a      	movs	r0, #74	; 0x4a
 80038e6:	f001 ff67 	bl	80057b8 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f6:	f1c3 0205 	rsb	r2, r3, #5
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003902:	2201      	movs	r2, #1
 8003904:	409a      	lsls	r2, r3
 8003906:	4b0e      	ldr	r3, [pc, #56]	; (8003940 <xTaskPriorityDisinherit+0xf8>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4313      	orrs	r3, r2
 800390c:	4a0c      	ldr	r2, [pc, #48]	; (8003940 <xTaskPriorityDisinherit+0xf8>)
 800390e:	6013      	str	r3, [r2, #0]
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003914:	4613      	mov	r3, r2
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	4413      	add	r3, r2
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	4a09      	ldr	r2, [pc, #36]	; (8003944 <xTaskPriorityDisinherit+0xfc>)
 800391e:	441a      	add	r2, r3
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	3304      	adds	r3, #4
 8003924:	4619      	mov	r1, r3
 8003926:	4610      	mov	r0, r2
 8003928:	f7fe fbd9 	bl	80020de <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800392c:	2301      	movs	r3, #1
 800392e:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003930:	697b      	ldr	r3, [r7, #20]
    }
 8003932:	4618      	mov	r0, r3
 8003934:	3718      	adds	r7, #24
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	20000094 	.word	0x20000094
 8003940:	20000174 	.word	0x20000174
 8003944:	20000098 	.word	0x20000098

08003948 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003952:	4b32      	ldr	r3, [pc, #200]	; (8003a1c <prvAddCurrentTaskToDelayedList+0xd4>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003958:	4b31      	ldr	r3, [pc, #196]	; (8003a20 <prvAddCurrentTaskToDelayedList+0xd8>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	3304      	adds	r3, #4
 800395e:	4618      	mov	r0, r3
 8003960:	f7fe fc1a 	bl	8002198 <uxListRemove>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d10b      	bne.n	8003982 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800396a:	4b2d      	ldr	r3, [pc, #180]	; (8003a20 <prvAddCurrentTaskToDelayedList+0xd8>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003970:	2201      	movs	r2, #1
 8003972:	fa02 f303 	lsl.w	r3, r2, r3
 8003976:	43da      	mvns	r2, r3
 8003978:	4b2a      	ldr	r3, [pc, #168]	; (8003a24 <prvAddCurrentTaskToDelayedList+0xdc>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4013      	ands	r3, r2
 800397e:	4a29      	ldr	r2, [pc, #164]	; (8003a24 <prvAddCurrentTaskToDelayedList+0xdc>)
 8003980:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003988:	d110      	bne.n	80039ac <prvAddCurrentTaskToDelayedList+0x64>
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d00d      	beq.n	80039ac <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8003990:	4b23      	ldr	r3, [pc, #140]	; (8003a20 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	211b      	movs	r1, #27
 8003996:	4618      	mov	r0, r3
 8003998:	f002 fcd0 	bl	800633c <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800399c:	4b20      	ldr	r3, [pc, #128]	; (8003a20 <prvAddCurrentTaskToDelayedList+0xd8>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	3304      	adds	r3, #4
 80039a2:	4619      	mov	r1, r3
 80039a4:	4820      	ldr	r0, [pc, #128]	; (8003a28 <prvAddCurrentTaskToDelayedList+0xe0>)
 80039a6:	f7fe fb9a 	bl	80020de <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80039aa:	e032      	b.n	8003a12 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4413      	add	r3, r2
 80039b2:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80039b4:	4b1a      	ldr	r3, [pc, #104]	; (8003a20 <prvAddCurrentTaskToDelayedList+0xd8>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	68ba      	ldr	r2, [r7, #8]
 80039ba:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80039bc:	68ba      	ldr	r2, [r7, #8]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d20f      	bcs.n	80039e4 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 80039c4:	4b16      	ldr	r3, [pc, #88]	; (8003a20 <prvAddCurrentTaskToDelayedList+0xd8>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2104      	movs	r1, #4
 80039ca:	4618      	mov	r0, r3
 80039cc:	f002 fcb6 	bl	800633c <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80039d0:	4b16      	ldr	r3, [pc, #88]	; (8003a2c <prvAddCurrentTaskToDelayedList+0xe4>)
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	4b12      	ldr	r3, [pc, #72]	; (8003a20 <prvAddCurrentTaskToDelayedList+0xd8>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	3304      	adds	r3, #4
 80039da:	4619      	mov	r1, r3
 80039dc:	4610      	mov	r0, r2
 80039de:	f7fe fba2 	bl	8002126 <vListInsert>
}
 80039e2:	e016      	b.n	8003a12 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 80039e4:	4b0e      	ldr	r3, [pc, #56]	; (8003a20 <prvAddCurrentTaskToDelayedList+0xd8>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2104      	movs	r1, #4
 80039ea:	4618      	mov	r0, r3
 80039ec:	f002 fca6 	bl	800633c <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80039f0:	4b0f      	ldr	r3, [pc, #60]	; (8003a30 <prvAddCurrentTaskToDelayedList+0xe8>)
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	4b0a      	ldr	r3, [pc, #40]	; (8003a20 <prvAddCurrentTaskToDelayedList+0xd8>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	3304      	adds	r3, #4
 80039fa:	4619      	mov	r1, r3
 80039fc:	4610      	mov	r0, r2
 80039fe:	f7fe fb92 	bl	8002126 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003a02:	4b0c      	ldr	r3, [pc, #48]	; (8003a34 <prvAddCurrentTaskToDelayedList+0xec>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	68ba      	ldr	r2, [r7, #8]
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d202      	bcs.n	8003a12 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8003a0c:	4a09      	ldr	r2, [pc, #36]	; (8003a34 <prvAddCurrentTaskToDelayedList+0xec>)
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	6013      	str	r3, [r2, #0]
}
 8003a12:	bf00      	nop
 8003a14:	3710      	adds	r7, #16
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	20000170 	.word	0x20000170
 8003a20:	20000094 	.word	0x20000094
 8003a24:	20000174 	.word	0x20000174
 8003a28:	20000158 	.word	0x20000158
 8003a2c:	20000128 	.word	0x20000128
 8003a30:	20000124 	.word	0x20000124
 8003a34:	2000018c 	.word	0x2000018c

08003a38 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003a42:	f000 fad5 	bl	8003ff0 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003a46:	4b11      	ldr	r3, [pc, #68]	; (8003a8c <xTimerCreateTimerTask+0x54>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00b      	beq.n	8003a66 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003a4e:	4b10      	ldr	r3, [pc, #64]	; (8003a90 <xTimerCreateTimerTask+0x58>)
 8003a50:	9301      	str	r3, [sp, #4]
 8003a52:	2302      	movs	r3, #2
 8003a54:	9300      	str	r3, [sp, #0]
 8003a56:	2300      	movs	r3, #0
 8003a58:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003a5c:	490d      	ldr	r1, [pc, #52]	; (8003a94 <xTimerCreateTimerTask+0x5c>)
 8003a5e:	480e      	ldr	r0, [pc, #56]	; (8003a98 <xTimerCreateTimerTask+0x60>)
 8003a60:	f7ff f91e 	bl	8002ca0 <xTaskCreate>
 8003a64:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d10a      	bne.n	8003a82 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a70:	f383 8811 	msr	BASEPRI, r3
 8003a74:	f3bf 8f6f 	isb	sy
 8003a78:	f3bf 8f4f 	dsb	sy
 8003a7c:	603b      	str	r3, [r7, #0]
    }
 8003a7e:	bf00      	nop
 8003a80:	e7fe      	b.n	8003a80 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003a82:	687b      	ldr	r3, [r7, #4]
    }
 8003a84:	4618      	mov	r0, r3
 8003a86:	3708      	adds	r7, #8
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	200001c8 	.word	0x200001c8
 8003a90:	200001cc 	.word	0x200001cc
 8003a94:	08007124 	.word	0x08007124
 8003a98:	08003bd1 	.word	0x08003bd1

08003a9c <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b08a      	sub	sp, #40	; 0x28
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	60b9      	str	r1, [r7, #8]
 8003aa6:	607a      	str	r2, [r7, #4]
 8003aa8:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d10a      	bne.n	8003aca <xTimerGenericCommand+0x2e>
        __asm volatile
 8003ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ab8:	f383 8811 	msr	BASEPRI, r3
 8003abc:	f3bf 8f6f 	isb	sy
 8003ac0:	f3bf 8f4f 	dsb	sy
 8003ac4:	623b      	str	r3, [r7, #32]
    }
 8003ac6:	bf00      	nop
 8003ac8:	e7fe      	b.n	8003ac8 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8003aca:	4b1a      	ldr	r3, [pc, #104]	; (8003b34 <xTimerGenericCommand+0x98>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d02a      	beq.n	8003b28 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	2b05      	cmp	r3, #5
 8003ae2:	dc18      	bgt.n	8003b16 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003ae4:	f7ff fe92 	bl	800380c <xTaskGetSchedulerState>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d109      	bne.n	8003b02 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003aee:	4b11      	ldr	r3, [pc, #68]	; (8003b34 <xTimerGenericCommand+0x98>)
 8003af0:	6818      	ldr	r0, [r3, #0]
 8003af2:	f107 0114 	add.w	r1, r7, #20
 8003af6:	2300      	movs	r3, #0
 8003af8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003afa:	f7fe fc67 	bl	80023cc <xQueueGenericSend>
 8003afe:	6278      	str	r0, [r7, #36]	; 0x24
 8003b00:	e012      	b.n	8003b28 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003b02:	4b0c      	ldr	r3, [pc, #48]	; (8003b34 <xTimerGenericCommand+0x98>)
 8003b04:	6818      	ldr	r0, [r3, #0]
 8003b06:	f107 0114 	add.w	r1, r7, #20
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f7fe fc5d 	bl	80023cc <xQueueGenericSend>
 8003b12:	6278      	str	r0, [r7, #36]	; 0x24
 8003b14:	e008      	b.n	8003b28 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003b16:	4b07      	ldr	r3, [pc, #28]	; (8003b34 <xTimerGenericCommand+0x98>)
 8003b18:	6818      	ldr	r0, [r3, #0]
 8003b1a:	f107 0114 	add.w	r1, r7, #20
 8003b1e:	2300      	movs	r3, #0
 8003b20:	683a      	ldr	r2, [r7, #0]
 8003b22:	f7fe fd79 	bl	8002618 <xQueueGenericSendFromISR>
 8003b26:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3728      	adds	r7, #40	; 0x28
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	200001c8 	.word	0x200001c8

08003b38 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b088      	sub	sp, #32
 8003b3c:	af02      	add	r7, sp, #8
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b42:	4b22      	ldr	r3, [pc, #136]	; (8003bcc <prvProcessExpiredTimer+0x94>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	3304      	adds	r3, #4
 8003b50:	4618      	mov	r0, r3
 8003b52:	f7fe fb21 	bl	8002198 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b5c:	f003 0304 	and.w	r3, r3, #4
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d022      	beq.n	8003baa <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	699a      	ldr	r2, [r3, #24]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	18d1      	adds	r1, r2, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	683a      	ldr	r2, [r7, #0]
 8003b70:	6978      	ldr	r0, [r7, #20]
 8003b72:	f000 f8d1 	bl	8003d18 <prvInsertTimerInActiveList>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d01f      	beq.n	8003bbc <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	9300      	str	r3, [sp, #0]
 8003b80:	2300      	movs	r3, #0
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	2100      	movs	r1, #0
 8003b86:	6978      	ldr	r0, [r7, #20]
 8003b88:	f7ff ff88 	bl	8003a9c <xTimerGenericCommand>
 8003b8c:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d113      	bne.n	8003bbc <prvProcessExpiredTimer+0x84>
        __asm volatile
 8003b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b98:	f383 8811 	msr	BASEPRI, r3
 8003b9c:	f3bf 8f6f 	isb	sy
 8003ba0:	f3bf 8f4f 	dsb	sy
 8003ba4:	60fb      	str	r3, [r7, #12]
    }
 8003ba6:	bf00      	nop
 8003ba8:	e7fe      	b.n	8003ba8 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003bb0:	f023 0301 	bic.w	r3, r3, #1
 8003bb4:	b2da      	uxtb	r2, r3
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	6a1b      	ldr	r3, [r3, #32]
 8003bc0:	6978      	ldr	r0, [r7, #20]
 8003bc2:	4798      	blx	r3
    }
 8003bc4:	bf00      	nop
 8003bc6:	3718      	adds	r7, #24
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	200001c0 	.word	0x200001c0

08003bd0 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003bd8:	f107 0308 	add.w	r3, r7, #8
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f000 f857 	bl	8003c90 <prvGetNextExpireTime>
 8003be2:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	4619      	mov	r1, r3
 8003be8:	68f8      	ldr	r0, [r7, #12]
 8003bea:	f000 f803 	bl	8003bf4 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003bee:	f000 f8d5 	bl	8003d9c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003bf2:	e7f1      	b.n	8003bd8 <prvTimerTask+0x8>

08003bf4 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003bfe:	f7ff fa19 	bl	8003034 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003c02:	f107 0308 	add.w	r3, r7, #8
 8003c06:	4618      	mov	r0, r3
 8003c08:	f000 f866 	bl	8003cd8 <prvSampleTimeNow>
 8003c0c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d130      	bne.n	8003c76 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d10a      	bne.n	8003c30 <prvProcessTimerOrBlockTask+0x3c>
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d806      	bhi.n	8003c30 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003c22:	f7ff fa15 	bl	8003050 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003c26:	68f9      	ldr	r1, [r7, #12]
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f7ff ff85 	bl	8003b38 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003c2e:	e024      	b.n	8003c7a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d008      	beq.n	8003c48 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003c36:	4b13      	ldr	r3, [pc, #76]	; (8003c84 <prvProcessTimerOrBlockTask+0x90>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d101      	bne.n	8003c44 <prvProcessTimerOrBlockTask+0x50>
 8003c40:	2301      	movs	r3, #1
 8003c42:	e000      	b.n	8003c46 <prvProcessTimerOrBlockTask+0x52>
 8003c44:	2300      	movs	r3, #0
 8003c46:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003c48:	4b0f      	ldr	r3, [pc, #60]	; (8003c88 <prvProcessTimerOrBlockTask+0x94>)
 8003c4a:	6818      	ldr	r0, [r3, #0]
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	683a      	ldr	r2, [r7, #0]
 8003c54:	4619      	mov	r1, r3
 8003c56:	f7fe ffef 	bl	8002c38 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003c5a:	f7ff f9f9 	bl	8003050 <xTaskResumeAll>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d10a      	bne.n	8003c7a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003c64:	4b09      	ldr	r3, [pc, #36]	; (8003c8c <prvProcessTimerOrBlockTask+0x98>)
 8003c66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c6a:	601a      	str	r2, [r3, #0]
 8003c6c:	f3bf 8f4f 	dsb	sy
 8003c70:	f3bf 8f6f 	isb	sy
    }
 8003c74:	e001      	b.n	8003c7a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003c76:	f7ff f9eb 	bl	8003050 <xTaskResumeAll>
    }
 8003c7a:	bf00      	nop
 8003c7c:	3710      	adds	r7, #16
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	200001c4 	.word	0x200001c4
 8003c88:	200001c8 	.word	0x200001c8
 8003c8c:	e000ed04 	.word	0xe000ed04

08003c90 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003c90:	b480      	push	{r7}
 8003c92:	b085      	sub	sp, #20
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003c98:	4b0e      	ldr	r3, [pc, #56]	; (8003cd4 <prvGetNextExpireTime+0x44>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d101      	bne.n	8003ca6 <prvGetNextExpireTime+0x16>
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	e000      	b.n	8003ca8 <prvGetNextExpireTime+0x18>
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d105      	bne.n	8003cc0 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003cb4:	4b07      	ldr	r3, [pc, #28]	; (8003cd4 <prvGetNextExpireTime+0x44>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	60fb      	str	r3, [r7, #12]
 8003cbe:	e001      	b.n	8003cc4 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
    }
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3714      	adds	r7, #20
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr
 8003cd2:	bf00      	nop
 8003cd4:	200001c0 	.word	0x200001c0

08003cd8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b084      	sub	sp, #16
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003ce0:	f7ff fa56 	bl	8003190 <xTaskGetTickCount>
 8003ce4:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003ce6:	4b0b      	ldr	r3, [pc, #44]	; (8003d14 <prvSampleTimeNow+0x3c>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	68fa      	ldr	r2, [r7, #12]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d205      	bcs.n	8003cfc <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003cf0:	f000 f91a 	bl	8003f28 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	601a      	str	r2, [r3, #0]
 8003cfa:	e002      	b.n	8003d02 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003d02:	4a04      	ldr	r2, [pc, #16]	; (8003d14 <prvSampleTimeNow+0x3c>)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003d08:	68fb      	ldr	r3, [r7, #12]
    }
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3710      	adds	r7, #16
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	200001d0 	.word	0x200001d0

08003d18 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b086      	sub	sp, #24
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	60b9      	str	r1, [r7, #8]
 8003d22:	607a      	str	r2, [r7, #4]
 8003d24:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003d26:	2300      	movs	r3, #0
 8003d28:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	68ba      	ldr	r2, [r7, #8]
 8003d2e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	68fa      	ldr	r2, [r7, #12]
 8003d34:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003d36:	68ba      	ldr	r2, [r7, #8]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d812      	bhi.n	8003d64 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	1ad2      	subs	r2, r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	699b      	ldr	r3, [r3, #24]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d302      	bcc.n	8003d52 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	617b      	str	r3, [r7, #20]
 8003d50:	e01b      	b.n	8003d8a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003d52:	4b10      	ldr	r3, [pc, #64]	; (8003d94 <prvInsertTimerInActiveList+0x7c>)
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	3304      	adds	r3, #4
 8003d5a:	4619      	mov	r1, r3
 8003d5c:	4610      	mov	r0, r2
 8003d5e:	f7fe f9e2 	bl	8002126 <vListInsert>
 8003d62:	e012      	b.n	8003d8a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d206      	bcs.n	8003d7a <prvInsertTimerInActiveList+0x62>
 8003d6c:	68ba      	ldr	r2, [r7, #8]
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d302      	bcc.n	8003d7a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003d74:	2301      	movs	r3, #1
 8003d76:	617b      	str	r3, [r7, #20]
 8003d78:	e007      	b.n	8003d8a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003d7a:	4b07      	ldr	r3, [pc, #28]	; (8003d98 <prvInsertTimerInActiveList+0x80>)
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	3304      	adds	r3, #4
 8003d82:	4619      	mov	r1, r3
 8003d84:	4610      	mov	r0, r2
 8003d86:	f7fe f9ce 	bl	8002126 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003d8a:	697b      	ldr	r3, [r7, #20]
    }
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3718      	adds	r7, #24
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	200001c4 	.word	0x200001c4
 8003d98:	200001c0 	.word	0x200001c0

08003d9c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b08c      	sub	sp, #48	; 0x30
 8003da0:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003da2:	e0ae      	b.n	8003f02 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	f2c0 80aa 	blt.w	8003f00 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db2:	695b      	ldr	r3, [r3, #20]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d004      	beq.n	8003dc2 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dba:	3304      	adds	r3, #4
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f7fe f9eb 	bl	8002198 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003dc2:	1d3b      	adds	r3, r7, #4
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f7ff ff87 	bl	8003cd8 <prvSampleTimeNow>
 8003dca:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	2b09      	cmp	r3, #9
 8003dd0:	f200 8097 	bhi.w	8003f02 <prvProcessReceivedCommands+0x166>
 8003dd4:	a201      	add	r2, pc, #4	; (adr r2, 8003ddc <prvProcessReceivedCommands+0x40>)
 8003dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dda:	bf00      	nop
 8003ddc:	08003e05 	.word	0x08003e05
 8003de0:	08003e05 	.word	0x08003e05
 8003de4:	08003e05 	.word	0x08003e05
 8003de8:	08003e79 	.word	0x08003e79
 8003dec:	08003e8d 	.word	0x08003e8d
 8003df0:	08003ed7 	.word	0x08003ed7
 8003df4:	08003e05 	.word	0x08003e05
 8003df8:	08003e05 	.word	0x08003e05
 8003dfc:	08003e79 	.word	0x08003e79
 8003e00:	08003e8d 	.word	0x08003e8d
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e0a:	f043 0301 	orr.w	r3, r3, #1
 8003e0e:	b2da      	uxtb	r2, r3
 8003e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003e16:	68fa      	ldr	r2, [r7, #12]
 8003e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1a:	699b      	ldr	r3, [r3, #24]
 8003e1c:	18d1      	adds	r1, r2, r3
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6a3a      	ldr	r2, [r7, #32]
 8003e22:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e24:	f7ff ff78 	bl	8003d18 <prvInsertTimerInActiveList>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d069      	beq.n	8003f02 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e30:	6a1b      	ldr	r3, [r3, #32]
 8003e32:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e34:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e3c:	f003 0304 	and.w	r3, r3, #4
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d05e      	beq.n	8003f02 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003e44:	68fa      	ldr	r2, [r7, #12]
 8003e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e48:	699b      	ldr	r3, [r3, #24]
 8003e4a:	441a      	add	r2, r3
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	9300      	str	r3, [sp, #0]
 8003e50:	2300      	movs	r3, #0
 8003e52:	2100      	movs	r1, #0
 8003e54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e56:	f7ff fe21 	bl	8003a9c <xTimerGenericCommand>
 8003e5a:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d14f      	bne.n	8003f02 <prvProcessReceivedCommands+0x166>
        __asm volatile
 8003e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e66:	f383 8811 	msr	BASEPRI, r3
 8003e6a:	f3bf 8f6f 	isb	sy
 8003e6e:	f3bf 8f4f 	dsb	sy
 8003e72:	61bb      	str	r3, [r7, #24]
    }
 8003e74:	bf00      	nop
 8003e76:	e7fe      	b.n	8003e76 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e7e:	f023 0301 	bic.w	r3, r3, #1
 8003e82:	b2da      	uxtb	r2, r3
 8003e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8003e8a:	e03a      	b.n	8003f02 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e92:	f043 0301 	orr.w	r3, r3, #1
 8003e96:	b2da      	uxtb	r2, r3
 8003e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003e9e:	68fa      	ldr	r2, [r7, #12]
 8003ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea2:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea6:	699b      	ldr	r3, [r3, #24]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d10a      	bne.n	8003ec2 <prvProcessReceivedCommands+0x126>
        __asm volatile
 8003eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb0:	f383 8811 	msr	BASEPRI, r3
 8003eb4:	f3bf 8f6f 	isb	sy
 8003eb8:	f3bf 8f4f 	dsb	sy
 8003ebc:	617b      	str	r3, [r7, #20]
    }
 8003ebe:	bf00      	nop
 8003ec0:	e7fe      	b.n	8003ec0 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec4:	699a      	ldr	r2, [r3, #24]
 8003ec6:	6a3b      	ldr	r3, [r7, #32]
 8003ec8:	18d1      	adds	r1, r2, r3
 8003eca:	6a3b      	ldr	r3, [r7, #32]
 8003ecc:	6a3a      	ldr	r2, [r7, #32]
 8003ece:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ed0:	f7ff ff22 	bl	8003d18 <prvInsertTimerInActiveList>
                        break;
 8003ed4:	e015      	b.n	8003f02 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003edc:	f003 0302 	and.w	r3, r3, #2
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d103      	bne.n	8003eec <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8003ee4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ee6:	f000 fc71 	bl	80047cc <vPortFree>
 8003eea:	e00a      	b.n	8003f02 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ef2:	f023 0301 	bic.w	r3, r3, #1
 8003ef6:	b2da      	uxtb	r2, r3
 8003ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003efe:	e000      	b.n	8003f02 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8003f00:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003f02:	4b08      	ldr	r3, [pc, #32]	; (8003f24 <prvProcessReceivedCommands+0x188>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f107 0108 	add.w	r1, r7, #8
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f7fe fc41 	bl	8002794 <xQueueReceive>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	f47f af45 	bne.w	8003da4 <prvProcessReceivedCommands+0x8>
        }
    }
 8003f1a:	bf00      	nop
 8003f1c:	bf00      	nop
 8003f1e:	3728      	adds	r7, #40	; 0x28
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	200001c8 	.word	0x200001c8

08003f28 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b088      	sub	sp, #32
 8003f2c:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003f2e:	e048      	b.n	8003fc2 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003f30:	4b2d      	ldr	r3, [pc, #180]	; (8003fe8 <prvSwitchTimerLists+0xc0>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f3a:	4b2b      	ldr	r3, [pc, #172]	; (8003fe8 <prvSwitchTimerLists+0xc0>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	3304      	adds	r3, #4
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f7fe f925 	bl	8002198 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6a1b      	ldr	r3, [r3, #32]
 8003f52:	68f8      	ldr	r0, [r7, #12]
 8003f54:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f5c:	f003 0304 	and.w	r3, r3, #4
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d02e      	beq.n	8003fc2 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	699b      	ldr	r3, [r3, #24]
 8003f68:	693a      	ldr	r2, [r7, #16]
 8003f6a:	4413      	add	r3, r2
 8003f6c:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8003f6e:	68ba      	ldr	r2, [r7, #8]
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d90e      	bls.n	8003f94 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	68ba      	ldr	r2, [r7, #8]
 8003f7a:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	68fa      	ldr	r2, [r7, #12]
 8003f80:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003f82:	4b19      	ldr	r3, [pc, #100]	; (8003fe8 <prvSwitchTimerLists+0xc0>)
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	3304      	adds	r3, #4
 8003f8a:	4619      	mov	r1, r3
 8003f8c:	4610      	mov	r0, r2
 8003f8e:	f7fe f8ca 	bl	8002126 <vListInsert>
 8003f92:	e016      	b.n	8003fc2 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003f94:	2300      	movs	r3, #0
 8003f96:	9300      	str	r3, [sp, #0]
 8003f98:	2300      	movs	r3, #0
 8003f9a:	693a      	ldr	r2, [r7, #16]
 8003f9c:	2100      	movs	r1, #0
 8003f9e:	68f8      	ldr	r0, [r7, #12]
 8003fa0:	f7ff fd7c 	bl	8003a9c <xTimerGenericCommand>
 8003fa4:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d10a      	bne.n	8003fc2 <prvSwitchTimerLists+0x9a>
        __asm volatile
 8003fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb0:	f383 8811 	msr	BASEPRI, r3
 8003fb4:	f3bf 8f6f 	isb	sy
 8003fb8:	f3bf 8f4f 	dsb	sy
 8003fbc:	603b      	str	r3, [r7, #0]
    }
 8003fbe:	bf00      	nop
 8003fc0:	e7fe      	b.n	8003fc0 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003fc2:	4b09      	ldr	r3, [pc, #36]	; (8003fe8 <prvSwitchTimerLists+0xc0>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d1b1      	bne.n	8003f30 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8003fcc:	4b06      	ldr	r3, [pc, #24]	; (8003fe8 <prvSwitchTimerLists+0xc0>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8003fd2:	4b06      	ldr	r3, [pc, #24]	; (8003fec <prvSwitchTimerLists+0xc4>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a04      	ldr	r2, [pc, #16]	; (8003fe8 <prvSwitchTimerLists+0xc0>)
 8003fd8:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003fda:	4a04      	ldr	r2, [pc, #16]	; (8003fec <prvSwitchTimerLists+0xc4>)
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	6013      	str	r3, [r2, #0]
    }
 8003fe0:	bf00      	nop
 8003fe2:	3718      	adds	r7, #24
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	200001c0 	.word	0x200001c0
 8003fec:	200001c4 	.word	0x200001c4

08003ff0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003ff4:	f000 f9de 	bl	80043b4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003ff8:	4b12      	ldr	r3, [pc, #72]	; (8004044 <prvCheckForValidListAndQueue+0x54>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d11d      	bne.n	800403c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004000:	4811      	ldr	r0, [pc, #68]	; (8004048 <prvCheckForValidListAndQueue+0x58>)
 8004002:	f7fe f83f 	bl	8002084 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004006:	4811      	ldr	r0, [pc, #68]	; (800404c <prvCheckForValidListAndQueue+0x5c>)
 8004008:	f7fe f83c 	bl	8002084 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800400c:	4b10      	ldr	r3, [pc, #64]	; (8004050 <prvCheckForValidListAndQueue+0x60>)
 800400e:	4a0e      	ldr	r2, [pc, #56]	; (8004048 <prvCheckForValidListAndQueue+0x58>)
 8004010:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004012:	4b10      	ldr	r3, [pc, #64]	; (8004054 <prvCheckForValidListAndQueue+0x64>)
 8004014:	4a0d      	ldr	r2, [pc, #52]	; (800404c <prvCheckForValidListAndQueue+0x5c>)
 8004016:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004018:	2200      	movs	r2, #0
 800401a:	210c      	movs	r1, #12
 800401c:	200a      	movs	r0, #10
 800401e:	f7fe f94d 	bl	80022bc <xQueueGenericCreate>
 8004022:	4603      	mov	r3, r0
 8004024:	4a07      	ldr	r2, [pc, #28]	; (8004044 <prvCheckForValidListAndQueue+0x54>)
 8004026:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8004028:	4b06      	ldr	r3, [pc, #24]	; (8004044 <prvCheckForValidListAndQueue+0x54>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d005      	beq.n	800403c <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004030:	4b04      	ldr	r3, [pc, #16]	; (8004044 <prvCheckForValidListAndQueue+0x54>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4908      	ldr	r1, [pc, #32]	; (8004058 <prvCheckForValidListAndQueue+0x68>)
 8004036:	4618      	mov	r0, r3
 8004038:	f7fe fdcc 	bl	8002bd4 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800403c:	f000 f9ea 	bl	8004414 <vPortExitCritical>
    }
 8004040:	bf00      	nop
 8004042:	bd80      	pop	{r7, pc}
 8004044:	200001c8 	.word	0x200001c8
 8004048:	20000198 	.word	0x20000198
 800404c:	200001ac 	.word	0x200001ac
 8004050:	200001c0 	.word	0x200001c0
 8004054:	200001c4 	.word	0x200001c4
 8004058:	0800712c 	.word	0x0800712c

0800405c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800405c:	b480      	push	{r7}
 800405e:	b085      	sub	sp, #20
 8004060:	af00      	add	r7, sp, #0
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	60b9      	str	r1, [r7, #8]
 8004066:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	3b04      	subs	r3, #4
 800406c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004074:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	3b04      	subs	r3, #4
 800407a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	f023 0201 	bic.w	r2, r3, #1
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	3b04      	subs	r3, #4
 800408a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800408c:	4a0c      	ldr	r2, [pc, #48]	; (80040c0 <pxPortInitialiseStack+0x64>)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	3b14      	subs	r3, #20
 8004096:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	3b04      	subs	r3, #4
 80040a2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f06f 0202 	mvn.w	r2, #2
 80040aa:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	3b20      	subs	r3, #32
 80040b0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80040b2:	68fb      	ldr	r3, [r7, #12]
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3714      	adds	r7, #20
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr
 80040c0:	080040c5 	.word	0x080040c5

080040c4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80040c4:	b480      	push	{r7}
 80040c6:	b085      	sub	sp, #20
 80040c8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80040ca:	2300      	movs	r3, #0
 80040cc:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80040ce:	4b12      	ldr	r3, [pc, #72]	; (8004118 <prvTaskExitError+0x54>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040d6:	d00a      	beq.n	80040ee <prvTaskExitError+0x2a>
        __asm volatile
 80040d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040dc:	f383 8811 	msr	BASEPRI, r3
 80040e0:	f3bf 8f6f 	isb	sy
 80040e4:	f3bf 8f4f 	dsb	sy
 80040e8:	60fb      	str	r3, [r7, #12]
    }
 80040ea:	bf00      	nop
 80040ec:	e7fe      	b.n	80040ec <prvTaskExitError+0x28>
        __asm volatile
 80040ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040f2:	f383 8811 	msr	BASEPRI, r3
 80040f6:	f3bf 8f6f 	isb	sy
 80040fa:	f3bf 8f4f 	dsb	sy
 80040fe:	60bb      	str	r3, [r7, #8]
    }
 8004100:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004102:	bf00      	nop
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d0fc      	beq.n	8004104 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800410a:	bf00      	nop
 800410c:	bf00      	nop
 800410e:	3714      	adds	r7, #20
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr
 8004118:	20000010 	.word	0x20000010
 800411c:	00000000 	.word	0x00000000

08004120 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004120:	4b07      	ldr	r3, [pc, #28]	; (8004140 <pxCurrentTCBConst2>)
 8004122:	6819      	ldr	r1, [r3, #0]
 8004124:	6808      	ldr	r0, [r1, #0]
 8004126:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800412a:	f380 8809 	msr	PSP, r0
 800412e:	f3bf 8f6f 	isb	sy
 8004132:	f04f 0000 	mov.w	r0, #0
 8004136:	f380 8811 	msr	BASEPRI, r0
 800413a:	4770      	bx	lr
 800413c:	f3af 8000 	nop.w

08004140 <pxCurrentTCBConst2>:
 8004140:	20000094 	.word	0x20000094
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004144:	bf00      	nop
 8004146:	bf00      	nop

08004148 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004148:	4808      	ldr	r0, [pc, #32]	; (800416c <prvPortStartFirstTask+0x24>)
 800414a:	6800      	ldr	r0, [r0, #0]
 800414c:	6800      	ldr	r0, [r0, #0]
 800414e:	f380 8808 	msr	MSP, r0
 8004152:	f04f 0000 	mov.w	r0, #0
 8004156:	f380 8814 	msr	CONTROL, r0
 800415a:	b662      	cpsie	i
 800415c:	b661      	cpsie	f
 800415e:	f3bf 8f4f 	dsb	sy
 8004162:	f3bf 8f6f 	isb	sy
 8004166:	df00      	svc	0
 8004168:	bf00      	nop
 800416a:	0000      	.short	0x0000
 800416c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004170:	bf00      	nop
 8004172:	bf00      	nop

08004174 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b086      	sub	sp, #24
 8004178:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800417a:	4b46      	ldr	r3, [pc, #280]	; (8004294 <xPortStartScheduler+0x120>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a46      	ldr	r2, [pc, #280]	; (8004298 <xPortStartScheduler+0x124>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d10a      	bne.n	800419a <xPortStartScheduler+0x26>
        __asm volatile
 8004184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004188:	f383 8811 	msr	BASEPRI, r3
 800418c:	f3bf 8f6f 	isb	sy
 8004190:	f3bf 8f4f 	dsb	sy
 8004194:	613b      	str	r3, [r7, #16]
    }
 8004196:	bf00      	nop
 8004198:	e7fe      	b.n	8004198 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800419a:	4b3e      	ldr	r3, [pc, #248]	; (8004294 <xPortStartScheduler+0x120>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a3f      	ldr	r2, [pc, #252]	; (800429c <xPortStartScheduler+0x128>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d10a      	bne.n	80041ba <xPortStartScheduler+0x46>
        __asm volatile
 80041a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a8:	f383 8811 	msr	BASEPRI, r3
 80041ac:	f3bf 8f6f 	isb	sy
 80041b0:	f3bf 8f4f 	dsb	sy
 80041b4:	60fb      	str	r3, [r7, #12]
    }
 80041b6:	bf00      	nop
 80041b8:	e7fe      	b.n	80041b8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80041ba:	4b39      	ldr	r3, [pc, #228]	; (80042a0 <xPortStartScheduler+0x12c>)
 80041bc:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	22ff      	movs	r2, #255	; 0xff
 80041ca:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80041d4:	78fb      	ldrb	r3, [r7, #3]
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80041dc:	b2da      	uxtb	r2, r3
 80041de:	4b31      	ldr	r3, [pc, #196]	; (80042a4 <xPortStartScheduler+0x130>)
 80041e0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80041e2:	4b31      	ldr	r3, [pc, #196]	; (80042a8 <xPortStartScheduler+0x134>)
 80041e4:	2207      	movs	r2, #7
 80041e6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80041e8:	e009      	b.n	80041fe <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80041ea:	4b2f      	ldr	r3, [pc, #188]	; (80042a8 <xPortStartScheduler+0x134>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	3b01      	subs	r3, #1
 80041f0:	4a2d      	ldr	r2, [pc, #180]	; (80042a8 <xPortStartScheduler+0x134>)
 80041f2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80041f4:	78fb      	ldrb	r3, [r7, #3]
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	005b      	lsls	r3, r3, #1
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80041fe:	78fb      	ldrb	r3, [r7, #3]
 8004200:	b2db      	uxtb	r3, r3
 8004202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004206:	2b80      	cmp	r3, #128	; 0x80
 8004208:	d0ef      	beq.n	80041ea <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800420a:	4b27      	ldr	r3, [pc, #156]	; (80042a8 <xPortStartScheduler+0x134>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f1c3 0307 	rsb	r3, r3, #7
 8004212:	2b04      	cmp	r3, #4
 8004214:	d00a      	beq.n	800422c <xPortStartScheduler+0xb8>
        __asm volatile
 8004216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800421a:	f383 8811 	msr	BASEPRI, r3
 800421e:	f3bf 8f6f 	isb	sy
 8004222:	f3bf 8f4f 	dsb	sy
 8004226:	60bb      	str	r3, [r7, #8]
    }
 8004228:	bf00      	nop
 800422a:	e7fe      	b.n	800422a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800422c:	4b1e      	ldr	r3, [pc, #120]	; (80042a8 <xPortStartScheduler+0x134>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	021b      	lsls	r3, r3, #8
 8004232:	4a1d      	ldr	r2, [pc, #116]	; (80042a8 <xPortStartScheduler+0x134>)
 8004234:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004236:	4b1c      	ldr	r3, [pc, #112]	; (80042a8 <xPortStartScheduler+0x134>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800423e:	4a1a      	ldr	r2, [pc, #104]	; (80042a8 <xPortStartScheduler+0x134>)
 8004240:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	b2da      	uxtb	r2, r3
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800424a:	4b18      	ldr	r3, [pc, #96]	; (80042ac <xPortStartScheduler+0x138>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a17      	ldr	r2, [pc, #92]	; (80042ac <xPortStartScheduler+0x138>)
 8004250:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004254:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004256:	4b15      	ldr	r3, [pc, #84]	; (80042ac <xPortStartScheduler+0x138>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a14      	ldr	r2, [pc, #80]	; (80042ac <xPortStartScheduler+0x138>)
 800425c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004260:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004262:	f000 f963 	bl	800452c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004266:	4b12      	ldr	r3, [pc, #72]	; (80042b0 <xPortStartScheduler+0x13c>)
 8004268:	2200      	movs	r2, #0
 800426a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800426c:	f000 f982 	bl	8004574 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004270:	4b10      	ldr	r3, [pc, #64]	; (80042b4 <xPortStartScheduler+0x140>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a0f      	ldr	r2, [pc, #60]	; (80042b4 <xPortStartScheduler+0x140>)
 8004276:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800427a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800427c:	f7ff ff64 	bl	8004148 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004280:	f7ff f864 	bl	800334c <vTaskSwitchContext>
    prvTaskExitError();
 8004284:	f7ff ff1e 	bl	80040c4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004288:	2300      	movs	r3, #0
}
 800428a:	4618      	mov	r0, r3
 800428c:	3718      	adds	r7, #24
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	e000ed00 	.word	0xe000ed00
 8004298:	410fc271 	.word	0x410fc271
 800429c:	410fc270 	.word	0x410fc270
 80042a0:	e000e400 	.word	0xe000e400
 80042a4:	200001d4 	.word	0x200001d4
 80042a8:	200001d8 	.word	0x200001d8
 80042ac:	e000ed20 	.word	0xe000ed20
 80042b0:	20000010 	.word	0x20000010
 80042b4:	e000ef34 	.word	0xe000ef34

080042b8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b087      	sub	sp, #28
 80042bc:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80042be:	4b37      	ldr	r3, [pc, #220]	; (800439c <vInitPrioGroupValue+0xe4>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a37      	ldr	r2, [pc, #220]	; (80043a0 <vInitPrioGroupValue+0xe8>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d10a      	bne.n	80042de <vInitPrioGroupValue+0x26>
        __asm volatile
 80042c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042cc:	f383 8811 	msr	BASEPRI, r3
 80042d0:	f3bf 8f6f 	isb	sy
 80042d4:	f3bf 8f4f 	dsb	sy
 80042d8:	613b      	str	r3, [r7, #16]
    }
 80042da:	bf00      	nop
 80042dc:	e7fe      	b.n	80042dc <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80042de:	4b2f      	ldr	r3, [pc, #188]	; (800439c <vInitPrioGroupValue+0xe4>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a30      	ldr	r2, [pc, #192]	; (80043a4 <vInitPrioGroupValue+0xec>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d10a      	bne.n	80042fe <vInitPrioGroupValue+0x46>
        __asm volatile
 80042e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ec:	f383 8811 	msr	BASEPRI, r3
 80042f0:	f3bf 8f6f 	isb	sy
 80042f4:	f3bf 8f4f 	dsb	sy
 80042f8:	60fb      	str	r3, [r7, #12]
    }
 80042fa:	bf00      	nop
 80042fc:	e7fe      	b.n	80042fc <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80042fe:	4b2a      	ldr	r3, [pc, #168]	; (80043a8 <vInitPrioGroupValue+0xf0>)
 8004300:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	b2db      	uxtb	r3, r3
 8004308:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	22ff      	movs	r2, #255	; 0xff
 800430e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	b2db      	uxtb	r3, r3
 8004316:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004318:	78fb      	ldrb	r3, [r7, #3]
 800431a:	b2db      	uxtb	r3, r3
 800431c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004320:	b2da      	uxtb	r2, r3
 8004322:	4b22      	ldr	r3, [pc, #136]	; (80043ac <vInitPrioGroupValue+0xf4>)
 8004324:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004326:	4b22      	ldr	r3, [pc, #136]	; (80043b0 <vInitPrioGroupValue+0xf8>)
 8004328:	2207      	movs	r2, #7
 800432a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800432c:	e009      	b.n	8004342 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800432e:	4b20      	ldr	r3, [pc, #128]	; (80043b0 <vInitPrioGroupValue+0xf8>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	3b01      	subs	r3, #1
 8004334:	4a1e      	ldr	r2, [pc, #120]	; (80043b0 <vInitPrioGroupValue+0xf8>)
 8004336:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004338:	78fb      	ldrb	r3, [r7, #3]
 800433a:	b2db      	uxtb	r3, r3
 800433c:	005b      	lsls	r3, r3, #1
 800433e:	b2db      	uxtb	r3, r3
 8004340:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004342:	78fb      	ldrb	r3, [r7, #3]
 8004344:	b2db      	uxtb	r3, r3
 8004346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800434a:	2b80      	cmp	r3, #128	; 0x80
 800434c:	d0ef      	beq.n	800432e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800434e:	4b18      	ldr	r3, [pc, #96]	; (80043b0 <vInitPrioGroupValue+0xf8>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f1c3 0307 	rsb	r3, r3, #7
 8004356:	2b04      	cmp	r3, #4
 8004358:	d00a      	beq.n	8004370 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800435a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800435e:	f383 8811 	msr	BASEPRI, r3
 8004362:	f3bf 8f6f 	isb	sy
 8004366:	f3bf 8f4f 	dsb	sy
 800436a:	60bb      	str	r3, [r7, #8]
    }
 800436c:	bf00      	nop
 800436e:	e7fe      	b.n	800436e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004370:	4b0f      	ldr	r3, [pc, #60]	; (80043b0 <vInitPrioGroupValue+0xf8>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	021b      	lsls	r3, r3, #8
 8004376:	4a0e      	ldr	r2, [pc, #56]	; (80043b0 <vInitPrioGroupValue+0xf8>)
 8004378:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800437a:	4b0d      	ldr	r3, [pc, #52]	; (80043b0 <vInitPrioGroupValue+0xf8>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004382:	4a0b      	ldr	r2, [pc, #44]	; (80043b0 <vInitPrioGroupValue+0xf8>)
 8004384:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	b2da      	uxtb	r2, r3
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800438e:	bf00      	nop
 8004390:	371c      	adds	r7, #28
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr
 800439a:	bf00      	nop
 800439c:	e000ed00 	.word	0xe000ed00
 80043a0:	410fc271 	.word	0x410fc271
 80043a4:	410fc270 	.word	0x410fc270
 80043a8:	e000e400 	.word	0xe000e400
 80043ac:	200001d4 	.word	0x200001d4
 80043b0:	200001d8 	.word	0x200001d8

080043b4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
        __asm volatile
 80043ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043be:	f383 8811 	msr	BASEPRI, r3
 80043c2:	f3bf 8f6f 	isb	sy
 80043c6:	f3bf 8f4f 	dsb	sy
 80043ca:	607b      	str	r3, [r7, #4]
    }
 80043cc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80043ce:	4b0f      	ldr	r3, [pc, #60]	; (800440c <vPortEnterCritical+0x58>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	3301      	adds	r3, #1
 80043d4:	4a0d      	ldr	r2, [pc, #52]	; (800440c <vPortEnterCritical+0x58>)
 80043d6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80043d8:	4b0c      	ldr	r3, [pc, #48]	; (800440c <vPortEnterCritical+0x58>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d10f      	bne.n	8004400 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80043e0:	4b0b      	ldr	r3, [pc, #44]	; (8004410 <vPortEnterCritical+0x5c>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d00a      	beq.n	8004400 <vPortEnterCritical+0x4c>
        __asm volatile
 80043ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ee:	f383 8811 	msr	BASEPRI, r3
 80043f2:	f3bf 8f6f 	isb	sy
 80043f6:	f3bf 8f4f 	dsb	sy
 80043fa:	603b      	str	r3, [r7, #0]
    }
 80043fc:	bf00      	nop
 80043fe:	e7fe      	b.n	80043fe <vPortEnterCritical+0x4a>
    }
}
 8004400:	bf00      	nop
 8004402:	370c      	adds	r7, #12
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr
 800440c:	20000010 	.word	0x20000010
 8004410:	e000ed04 	.word	0xe000ed04

08004414 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800441a:	4b12      	ldr	r3, [pc, #72]	; (8004464 <vPortExitCritical+0x50>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d10a      	bne.n	8004438 <vPortExitCritical+0x24>
        __asm volatile
 8004422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004426:	f383 8811 	msr	BASEPRI, r3
 800442a:	f3bf 8f6f 	isb	sy
 800442e:	f3bf 8f4f 	dsb	sy
 8004432:	607b      	str	r3, [r7, #4]
    }
 8004434:	bf00      	nop
 8004436:	e7fe      	b.n	8004436 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004438:	4b0a      	ldr	r3, [pc, #40]	; (8004464 <vPortExitCritical+0x50>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	3b01      	subs	r3, #1
 800443e:	4a09      	ldr	r2, [pc, #36]	; (8004464 <vPortExitCritical+0x50>)
 8004440:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004442:	4b08      	ldr	r3, [pc, #32]	; (8004464 <vPortExitCritical+0x50>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d105      	bne.n	8004456 <vPortExitCritical+0x42>
 800444a:	2300      	movs	r3, #0
 800444c:	603b      	str	r3, [r7, #0]
        __asm volatile
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	f383 8811 	msr	BASEPRI, r3
    }
 8004454:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004456:	bf00      	nop
 8004458:	370c      	adds	r7, #12
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop
 8004464:	20000010 	.word	0x20000010
	...

08004470 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004470:	f3ef 8009 	mrs	r0, PSP
 8004474:	f3bf 8f6f 	isb	sy
 8004478:	4b15      	ldr	r3, [pc, #84]	; (80044d0 <pxCurrentTCBConst>)
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	f01e 0f10 	tst.w	lr, #16
 8004480:	bf08      	it	eq
 8004482:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004486:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800448a:	6010      	str	r0, [r2, #0]
 800448c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004490:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004494:	f380 8811 	msr	BASEPRI, r0
 8004498:	f3bf 8f4f 	dsb	sy
 800449c:	f3bf 8f6f 	isb	sy
 80044a0:	f7fe ff54 	bl	800334c <vTaskSwitchContext>
 80044a4:	f04f 0000 	mov.w	r0, #0
 80044a8:	f380 8811 	msr	BASEPRI, r0
 80044ac:	bc09      	pop	{r0, r3}
 80044ae:	6819      	ldr	r1, [r3, #0]
 80044b0:	6808      	ldr	r0, [r1, #0]
 80044b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044b6:	f01e 0f10 	tst.w	lr, #16
 80044ba:	bf08      	it	eq
 80044bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80044c0:	f380 8809 	msr	PSP, r0
 80044c4:	f3bf 8f6f 	isb	sy
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	f3af 8000 	nop.w

080044d0 <pxCurrentTCBConst>:
 80044d0:	20000094 	.word	0x20000094
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80044d4:	bf00      	nop
 80044d6:	bf00      	nop

080044d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
        __asm volatile
 80044de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e2:	f383 8811 	msr	BASEPRI, r3
 80044e6:	f3bf 8f6f 	isb	sy
 80044ea:	f3bf 8f4f 	dsb	sy
 80044ee:	607b      	str	r3, [r7, #4]
    }
 80044f0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80044f2:	f001 fdc7 	bl	8006084 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80044f6:	f7fe fe6d 	bl	80031d4 <xTaskIncrementTick>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d006      	beq.n	800450e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004500:	f001 fe1e 	bl	8006140 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004504:	4b08      	ldr	r3, [pc, #32]	; (8004528 <SysTick_Handler+0x50>)
 8004506:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800450a:	601a      	str	r2, [r3, #0]
 800450c:	e001      	b.n	8004512 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800450e:	f001 fdfb 	bl	8006108 <SEGGER_SYSVIEW_RecordExitISR>
 8004512:	2300      	movs	r3, #0
 8004514:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	f383 8811 	msr	BASEPRI, r3
    }
 800451c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800451e:	bf00      	nop
 8004520:	3708      	adds	r7, #8
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	e000ed04 	.word	0xe000ed04

0800452c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800452c:	b480      	push	{r7}
 800452e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004530:	4b0b      	ldr	r3, [pc, #44]	; (8004560 <vPortSetupTimerInterrupt+0x34>)
 8004532:	2200      	movs	r2, #0
 8004534:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004536:	4b0b      	ldr	r3, [pc, #44]	; (8004564 <vPortSetupTimerInterrupt+0x38>)
 8004538:	2200      	movs	r2, #0
 800453a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800453c:	4b0a      	ldr	r3, [pc, #40]	; (8004568 <vPortSetupTimerInterrupt+0x3c>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a0a      	ldr	r2, [pc, #40]	; (800456c <vPortSetupTimerInterrupt+0x40>)
 8004542:	fba2 2303 	umull	r2, r3, r2, r3
 8004546:	099b      	lsrs	r3, r3, #6
 8004548:	4a09      	ldr	r2, [pc, #36]	; (8004570 <vPortSetupTimerInterrupt+0x44>)
 800454a:	3b01      	subs	r3, #1
 800454c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800454e:	4b04      	ldr	r3, [pc, #16]	; (8004560 <vPortSetupTimerInterrupt+0x34>)
 8004550:	2207      	movs	r2, #7
 8004552:	601a      	str	r2, [r3, #0]
}
 8004554:	bf00      	nop
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr
 800455e:	bf00      	nop
 8004560:	e000e010 	.word	0xe000e010
 8004564:	e000e018 	.word	0xe000e018
 8004568:	20000000 	.word	0x20000000
 800456c:	10624dd3 	.word	0x10624dd3
 8004570:	e000e014 	.word	0xe000e014

08004574 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004574:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004584 <vPortEnableVFP+0x10>
 8004578:	6801      	ldr	r1, [r0, #0]
 800457a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800457e:	6001      	str	r1, [r0, #0]
 8004580:	4770      	bx	lr
 8004582:	0000      	.short	0x0000
 8004584:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004588:	bf00      	nop
 800458a:	bf00      	nop

0800458c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800458c:	b480      	push	{r7}
 800458e:	b085      	sub	sp, #20
 8004590:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004592:	f3ef 8305 	mrs	r3, IPSR
 8004596:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2b0f      	cmp	r3, #15
 800459c:	d914      	bls.n	80045c8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800459e:	4a17      	ldr	r2, [pc, #92]	; (80045fc <vPortValidateInterruptPriority+0x70>)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	4413      	add	r3, r2
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80045a8:	4b15      	ldr	r3, [pc, #84]	; (8004600 <vPortValidateInterruptPriority+0x74>)
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	7afa      	ldrb	r2, [r7, #11]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d20a      	bcs.n	80045c8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80045b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b6:	f383 8811 	msr	BASEPRI, r3
 80045ba:	f3bf 8f6f 	isb	sy
 80045be:	f3bf 8f4f 	dsb	sy
 80045c2:	607b      	str	r3, [r7, #4]
    }
 80045c4:	bf00      	nop
 80045c6:	e7fe      	b.n	80045c6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80045c8:	4b0e      	ldr	r3, [pc, #56]	; (8004604 <vPortValidateInterruptPriority+0x78>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80045d0:	4b0d      	ldr	r3, [pc, #52]	; (8004608 <vPortValidateInterruptPriority+0x7c>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d90a      	bls.n	80045ee <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80045d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045dc:	f383 8811 	msr	BASEPRI, r3
 80045e0:	f3bf 8f6f 	isb	sy
 80045e4:	f3bf 8f4f 	dsb	sy
 80045e8:	603b      	str	r3, [r7, #0]
    }
 80045ea:	bf00      	nop
 80045ec:	e7fe      	b.n	80045ec <vPortValidateInterruptPriority+0x60>
    }
 80045ee:	bf00      	nop
 80045f0:	3714      	adds	r7, #20
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop
 80045fc:	e000e3f0 	.word	0xe000e3f0
 8004600:	200001d4 	.word	0x200001d4
 8004604:	e000ed0c 	.word	0xe000ed0c
 8004608:	200001d8 	.word	0x200001d8

0800460c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b08a      	sub	sp, #40	; 0x28
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004614:	2300      	movs	r3, #0
 8004616:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004618:	f7fe fd0c 	bl	8003034 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800461c:	4b65      	ldr	r3, [pc, #404]	; (80047b4 <pvPortMalloc+0x1a8>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d101      	bne.n	8004628 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004624:	f000 f934 	bl	8004890 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004628:	4b63      	ldr	r3, [pc, #396]	; (80047b8 <pvPortMalloc+0x1ac>)
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	4013      	ands	r3, r2
 8004630:	2b00      	cmp	r3, #0
 8004632:	f040 80a7 	bne.w	8004784 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d02d      	beq.n	8004698 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800463c:	2208      	movs	r2, #8
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	429a      	cmp	r2, r3
 8004646:	d227      	bcs.n	8004698 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004648:	2208      	movs	r2, #8
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	4413      	add	r3, r2
 800464e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f003 0307 	and.w	r3, r3, #7
 8004656:	2b00      	cmp	r3, #0
 8004658:	d021      	beq.n	800469e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f023 0307 	bic.w	r3, r3, #7
 8004660:	3308      	adds	r3, #8
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	429a      	cmp	r2, r3
 8004666:	d214      	bcs.n	8004692 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f023 0307 	bic.w	r3, r3, #7
 800466e:	3308      	adds	r3, #8
 8004670:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f003 0307 	and.w	r3, r3, #7
 8004678:	2b00      	cmp	r3, #0
 800467a:	d010      	beq.n	800469e <pvPortMalloc+0x92>
        __asm volatile
 800467c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004680:	f383 8811 	msr	BASEPRI, r3
 8004684:	f3bf 8f6f 	isb	sy
 8004688:	f3bf 8f4f 	dsb	sy
 800468c:	617b      	str	r3, [r7, #20]
    }
 800468e:	bf00      	nop
 8004690:	e7fe      	b.n	8004690 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004692:	2300      	movs	r3, #0
 8004694:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004696:	e002      	b.n	800469e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8004698:	2300      	movs	r3, #0
 800469a:	607b      	str	r3, [r7, #4]
 800469c:	e000      	b.n	80046a0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800469e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d06e      	beq.n	8004784 <pvPortMalloc+0x178>
 80046a6:	4b45      	ldr	r3, [pc, #276]	; (80047bc <pvPortMalloc+0x1b0>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d869      	bhi.n	8004784 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80046b0:	4b43      	ldr	r3, [pc, #268]	; (80047c0 <pvPortMalloc+0x1b4>)
 80046b2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80046b4:	4b42      	ldr	r3, [pc, #264]	; (80047c0 <pvPortMalloc+0x1b4>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80046ba:	e004      	b.n	80046c6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80046bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046be:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80046c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80046c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d903      	bls.n	80046d8 <pvPortMalloc+0xcc>
 80046d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d1f1      	bne.n	80046bc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80046d8:	4b36      	ldr	r3, [pc, #216]	; (80047b4 <pvPortMalloc+0x1a8>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046de:	429a      	cmp	r2, r3
 80046e0:	d050      	beq.n	8004784 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80046e2:	6a3b      	ldr	r3, [r7, #32]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	2208      	movs	r2, #8
 80046e8:	4413      	add	r3, r2
 80046ea:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80046ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	6a3b      	ldr	r3, [r7, #32]
 80046f2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80046f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f6:	685a      	ldr	r2, [r3, #4]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	1ad2      	subs	r2, r2, r3
 80046fc:	2308      	movs	r3, #8
 80046fe:	005b      	lsls	r3, r3, #1
 8004700:	429a      	cmp	r2, r3
 8004702:	d91f      	bls.n	8004744 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004704:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4413      	add	r3, r2
 800470a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	f003 0307 	and.w	r3, r3, #7
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00a      	beq.n	800472c <pvPortMalloc+0x120>
        __asm volatile
 8004716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800471a:	f383 8811 	msr	BASEPRI, r3
 800471e:	f3bf 8f6f 	isb	sy
 8004722:	f3bf 8f4f 	dsb	sy
 8004726:	613b      	str	r3, [r7, #16]
    }
 8004728:	bf00      	nop
 800472a:	e7fe      	b.n	800472a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800472c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472e:	685a      	ldr	r2, [r3, #4]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	1ad2      	subs	r2, r2, r3
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800473e:	69b8      	ldr	r0, [r7, #24]
 8004740:	f000 f908 	bl	8004954 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004744:	4b1d      	ldr	r3, [pc, #116]	; (80047bc <pvPortMalloc+0x1b0>)
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	4a1b      	ldr	r2, [pc, #108]	; (80047bc <pvPortMalloc+0x1b0>)
 8004750:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004752:	4b1a      	ldr	r3, [pc, #104]	; (80047bc <pvPortMalloc+0x1b0>)
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	4b1b      	ldr	r3, [pc, #108]	; (80047c4 <pvPortMalloc+0x1b8>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	429a      	cmp	r2, r3
 800475c:	d203      	bcs.n	8004766 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800475e:	4b17      	ldr	r3, [pc, #92]	; (80047bc <pvPortMalloc+0x1b0>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a18      	ldr	r2, [pc, #96]	; (80047c4 <pvPortMalloc+0x1b8>)
 8004764:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004768:	685a      	ldr	r2, [r3, #4]
 800476a:	4b13      	ldr	r3, [pc, #76]	; (80047b8 <pvPortMalloc+0x1ac>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	431a      	orrs	r2, r3
 8004770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004772:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004776:	2200      	movs	r2, #0
 8004778:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800477a:	4b13      	ldr	r3, [pc, #76]	; (80047c8 <pvPortMalloc+0x1bc>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	3301      	adds	r3, #1
 8004780:	4a11      	ldr	r2, [pc, #68]	; (80047c8 <pvPortMalloc+0x1bc>)
 8004782:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004784:	f7fe fc64 	bl	8003050 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	f003 0307 	and.w	r3, r3, #7
 800478e:	2b00      	cmp	r3, #0
 8004790:	d00a      	beq.n	80047a8 <pvPortMalloc+0x19c>
        __asm volatile
 8004792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004796:	f383 8811 	msr	BASEPRI, r3
 800479a:	f3bf 8f6f 	isb	sy
 800479e:	f3bf 8f4f 	dsb	sy
 80047a2:	60fb      	str	r3, [r7, #12]
    }
 80047a4:	bf00      	nop
 80047a6:	e7fe      	b.n	80047a6 <pvPortMalloc+0x19a>
    return pvReturn;
 80047a8:	69fb      	ldr	r3, [r7, #28]
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3728      	adds	r7, #40	; 0x28
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop
 80047b4:	200191e4 	.word	0x200191e4
 80047b8:	200191f8 	.word	0x200191f8
 80047bc:	200191e8 	.word	0x200191e8
 80047c0:	200191dc 	.word	0x200191dc
 80047c4:	200191ec 	.word	0x200191ec
 80047c8:	200191f0 	.word	0x200191f0

080047cc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b086      	sub	sp, #24
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d04d      	beq.n	800487a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80047de:	2308      	movs	r3, #8
 80047e0:	425b      	negs	r3, r3
 80047e2:	697a      	ldr	r2, [r7, #20]
 80047e4:	4413      	add	r3, r2
 80047e6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	685a      	ldr	r2, [r3, #4]
 80047f0:	4b24      	ldr	r3, [pc, #144]	; (8004884 <vPortFree+0xb8>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4013      	ands	r3, r2
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d10a      	bne.n	8004810 <vPortFree+0x44>
        __asm volatile
 80047fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047fe:	f383 8811 	msr	BASEPRI, r3
 8004802:	f3bf 8f6f 	isb	sy
 8004806:	f3bf 8f4f 	dsb	sy
 800480a:	60fb      	str	r3, [r7, #12]
    }
 800480c:	bf00      	nop
 800480e:	e7fe      	b.n	800480e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d00a      	beq.n	800482e <vPortFree+0x62>
        __asm volatile
 8004818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800481c:	f383 8811 	msr	BASEPRI, r3
 8004820:	f3bf 8f6f 	isb	sy
 8004824:	f3bf 8f4f 	dsb	sy
 8004828:	60bb      	str	r3, [r7, #8]
    }
 800482a:	bf00      	nop
 800482c:	e7fe      	b.n	800482c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	685a      	ldr	r2, [r3, #4]
 8004832:	4b14      	ldr	r3, [pc, #80]	; (8004884 <vPortFree+0xb8>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4013      	ands	r3, r2
 8004838:	2b00      	cmp	r3, #0
 800483a:	d01e      	beq.n	800487a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d11a      	bne.n	800487a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	685a      	ldr	r2, [r3, #4]
 8004848:	4b0e      	ldr	r3, [pc, #56]	; (8004884 <vPortFree+0xb8>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	43db      	mvns	r3, r3
 800484e:	401a      	ands	r2, r3
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004854:	f7fe fbee 	bl	8003034 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	685a      	ldr	r2, [r3, #4]
 800485c:	4b0a      	ldr	r3, [pc, #40]	; (8004888 <vPortFree+0xbc>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4413      	add	r3, r2
 8004862:	4a09      	ldr	r2, [pc, #36]	; (8004888 <vPortFree+0xbc>)
 8004864:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004866:	6938      	ldr	r0, [r7, #16]
 8004868:	f000 f874 	bl	8004954 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800486c:	4b07      	ldr	r3, [pc, #28]	; (800488c <vPortFree+0xc0>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	3301      	adds	r3, #1
 8004872:	4a06      	ldr	r2, [pc, #24]	; (800488c <vPortFree+0xc0>)
 8004874:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004876:	f7fe fbeb 	bl	8003050 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800487a:	bf00      	nop
 800487c:	3718      	adds	r7, #24
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	200191f8 	.word	0x200191f8
 8004888:	200191e8 	.word	0x200191e8
 800488c:	200191f4 	.word	0x200191f4

08004890 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004890:	b480      	push	{r7}
 8004892:	b085      	sub	sp, #20
 8004894:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004896:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 800489a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800489c:	4b27      	ldr	r3, [pc, #156]	; (800493c <prvHeapInit+0xac>)
 800489e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f003 0307 	and.w	r3, r3, #7
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d00c      	beq.n	80048c4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	3307      	adds	r3, #7
 80048ae:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f023 0307 	bic.w	r3, r3, #7
 80048b6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80048b8:	68ba      	ldr	r2, [r7, #8]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	4a1f      	ldr	r2, [pc, #124]	; (800493c <prvHeapInit+0xac>)
 80048c0:	4413      	add	r3, r2
 80048c2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80048c8:	4a1d      	ldr	r2, [pc, #116]	; (8004940 <prvHeapInit+0xb0>)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80048ce:	4b1c      	ldr	r3, [pc, #112]	; (8004940 <prvHeapInit+0xb0>)
 80048d0:	2200      	movs	r2, #0
 80048d2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	68ba      	ldr	r2, [r7, #8]
 80048d8:	4413      	add	r3, r2
 80048da:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80048dc:	2208      	movs	r2, #8
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	1a9b      	subs	r3, r3, r2
 80048e2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f023 0307 	bic.w	r3, r3, #7
 80048ea:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	4a15      	ldr	r2, [pc, #84]	; (8004944 <prvHeapInit+0xb4>)
 80048f0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80048f2:	4b14      	ldr	r3, [pc, #80]	; (8004944 <prvHeapInit+0xb4>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	2200      	movs	r2, #0
 80048f8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80048fa:	4b12      	ldr	r3, [pc, #72]	; (8004944 <prvHeapInit+0xb4>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	2200      	movs	r2, #0
 8004900:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	68fa      	ldr	r2, [r7, #12]
 800490a:	1ad2      	subs	r2, r2, r3
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004910:	4b0c      	ldr	r3, [pc, #48]	; (8004944 <prvHeapInit+0xb4>)
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	4a0a      	ldr	r2, [pc, #40]	; (8004948 <prvHeapInit+0xb8>)
 800491e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	4a09      	ldr	r2, [pc, #36]	; (800494c <prvHeapInit+0xbc>)
 8004926:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004928:	4b09      	ldr	r3, [pc, #36]	; (8004950 <prvHeapInit+0xc0>)
 800492a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800492e:	601a      	str	r2, [r3, #0]
}
 8004930:	bf00      	nop
 8004932:	3714      	adds	r7, #20
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr
 800493c:	200001dc 	.word	0x200001dc
 8004940:	200191dc 	.word	0x200191dc
 8004944:	200191e4 	.word	0x200191e4
 8004948:	200191ec 	.word	0x200191ec
 800494c:	200191e8 	.word	0x200191e8
 8004950:	200191f8 	.word	0x200191f8

08004954 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004954:	b480      	push	{r7}
 8004956:	b085      	sub	sp, #20
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800495c:	4b28      	ldr	r3, [pc, #160]	; (8004a00 <prvInsertBlockIntoFreeList+0xac>)
 800495e:	60fb      	str	r3, [r7, #12]
 8004960:	e002      	b.n	8004968 <prvInsertBlockIntoFreeList+0x14>
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	60fb      	str	r3, [r7, #12]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	429a      	cmp	r2, r3
 8004970:	d8f7      	bhi.n	8004962 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	68ba      	ldr	r2, [r7, #8]
 800497c:	4413      	add	r3, r2
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	429a      	cmp	r2, r3
 8004982:	d108      	bne.n	8004996 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	685a      	ldr	r2, [r3, #4]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	441a      	add	r2, r3
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	68ba      	ldr	r2, [r7, #8]
 80049a0:	441a      	add	r2, r3
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d118      	bne.n	80049dc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	4b15      	ldr	r3, [pc, #84]	; (8004a04 <prvInsertBlockIntoFreeList+0xb0>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d00d      	beq.n	80049d2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685a      	ldr	r2, [r3, #4]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	441a      	add	r2, r3
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	601a      	str	r2, [r3, #0]
 80049d0:	e008      	b.n	80049e4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80049d2:	4b0c      	ldr	r3, [pc, #48]	; (8004a04 <prvInsertBlockIntoFreeList+0xb0>)
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	601a      	str	r2, [r3, #0]
 80049da:	e003      	b.n	80049e4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80049e4:	68fa      	ldr	r2, [r7, #12]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d002      	beq.n	80049f2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80049f2:	bf00      	nop
 80049f4:	3714      	adds	r7, #20
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr
 80049fe:	bf00      	nop
 8004a00:	200191dc 	.word	0x200191dc
 8004a04:	200191e4 	.word	0x200191e4

08004a08 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004a0c:	4803      	ldr	r0, [pc, #12]	; (8004a1c <_cbSendSystemDesc+0x14>)
 8004a0e:	f001 fae3 	bl	8005fd8 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004a12:	4803      	ldr	r0, [pc, #12]	; (8004a20 <_cbSendSystemDesc+0x18>)
 8004a14:	f001 fae0 	bl	8005fd8 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004a18:	bf00      	nop
 8004a1a:	bd80      	pop	{r7, pc}
 8004a1c:	08007134 	.word	0x08007134
 8004a20:	08007178 	.word	0x08007178

08004a24 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004a24:	b580      	push	{r7, lr}
 8004a26:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004a28:	4b06      	ldr	r3, [pc, #24]	; (8004a44 <SEGGER_SYSVIEW_Conf+0x20>)
 8004a2a:	6818      	ldr	r0, [r3, #0]
 8004a2c:	4b05      	ldr	r3, [pc, #20]	; (8004a44 <SEGGER_SYSVIEW_Conf+0x20>)
 8004a2e:	6819      	ldr	r1, [r3, #0]
 8004a30:	4b05      	ldr	r3, [pc, #20]	; (8004a48 <SEGGER_SYSVIEW_Conf+0x24>)
 8004a32:	4a06      	ldr	r2, [pc, #24]	; (8004a4c <SEGGER_SYSVIEW_Conf+0x28>)
 8004a34:	f000 fe4e 	bl	80056d4 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004a38:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8004a3c:	f000 fe8e 	bl	800575c <SEGGER_SYSVIEW_SetRAMBase>
}
 8004a40:	bf00      	nop
 8004a42:	bd80      	pop	{r7, pc}
 8004a44:	20000000 	.word	0x20000000
 8004a48:	08004a09 	.word	0x08004a09
 8004a4c:	08007218 	.word	0x08007218

08004a50 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004a50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a52:	b085      	sub	sp, #20
 8004a54:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004a56:	2300      	movs	r3, #0
 8004a58:	607b      	str	r3, [r7, #4]
 8004a5a:	e033      	b.n	8004ac4 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004a5c:	491e      	ldr	r1, [pc, #120]	; (8004ad8 <_cbSendTaskList+0x88>)
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	4613      	mov	r3, r2
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	4413      	add	r3, r2
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	440b      	add	r3, r1
 8004a6a:	6818      	ldr	r0, [r3, #0]
 8004a6c:	491a      	ldr	r1, [pc, #104]	; (8004ad8 <_cbSendTaskList+0x88>)
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	4613      	mov	r3, r2
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	4413      	add	r3, r2
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	440b      	add	r3, r1
 8004a7a:	3304      	adds	r3, #4
 8004a7c:	6819      	ldr	r1, [r3, #0]
 8004a7e:	4c16      	ldr	r4, [pc, #88]	; (8004ad8 <_cbSendTaskList+0x88>)
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	4613      	mov	r3, r2
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	4413      	add	r3, r2
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	4423      	add	r3, r4
 8004a8c:	3308      	adds	r3, #8
 8004a8e:	681c      	ldr	r4, [r3, #0]
 8004a90:	4d11      	ldr	r5, [pc, #68]	; (8004ad8 <_cbSendTaskList+0x88>)
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	4613      	mov	r3, r2
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	4413      	add	r3, r2
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	442b      	add	r3, r5
 8004a9e:	330c      	adds	r3, #12
 8004aa0:	681d      	ldr	r5, [r3, #0]
 8004aa2:	4e0d      	ldr	r6, [pc, #52]	; (8004ad8 <_cbSendTaskList+0x88>)
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	4613      	mov	r3, r2
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	4413      	add	r3, r2
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	4433      	add	r3, r6
 8004ab0:	3310      	adds	r3, #16
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	9300      	str	r3, [sp, #0]
 8004ab6:	462b      	mov	r3, r5
 8004ab8:	4622      	mov	r2, r4
 8004aba:	f000 f8b5 	bl	8004c28 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	607b      	str	r3, [r7, #4]
 8004ac4:	4b05      	ldr	r3, [pc, #20]	; (8004adc <_cbSendTaskList+0x8c>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d3c6      	bcc.n	8004a5c <_cbSendTaskList+0xc>
  }
}
 8004ace:	bf00      	nop
 8004ad0:	bf00      	nop
 8004ad2:	370c      	adds	r7, #12
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ad8:	200191fc 	.word	0x200191fc
 8004adc:	2001929c 	.word	0x2001929c

08004ae0 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004ae0:	b5b0      	push	{r4, r5, r7, lr}
 8004ae2:	b082      	sub	sp, #8
 8004ae4:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004ae6:	f7fe fb63 	bl	80031b0 <xTaskGetTickCountFromISR>
 8004aea:	4603      	mov	r3, r0
 8004aec:	461a      	mov	r2, r3
 8004aee:	f04f 0300 	mov.w	r3, #0
 8004af2:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004af6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004afa:	4602      	mov	r2, r0
 8004afc:	460b      	mov	r3, r1
 8004afe:	f04f 0400 	mov.w	r4, #0
 8004b02:	f04f 0500 	mov.w	r5, #0
 8004b06:	015d      	lsls	r5, r3, #5
 8004b08:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8004b0c:	0154      	lsls	r4, r2, #5
 8004b0e:	4622      	mov	r2, r4
 8004b10:	462b      	mov	r3, r5
 8004b12:	1a12      	subs	r2, r2, r0
 8004b14:	eb63 0301 	sbc.w	r3, r3, r1
 8004b18:	f04f 0400 	mov.w	r4, #0
 8004b1c:	f04f 0500 	mov.w	r5, #0
 8004b20:	009d      	lsls	r5, r3, #2
 8004b22:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 8004b26:	0094      	lsls	r4, r2, #2
 8004b28:	4622      	mov	r2, r4
 8004b2a:	462b      	mov	r3, r5
 8004b2c:	1812      	adds	r2, r2, r0
 8004b2e:	eb41 0303 	adc.w	r3, r1, r3
 8004b32:	f04f 0000 	mov.w	r0, #0
 8004b36:	f04f 0100 	mov.w	r1, #0
 8004b3a:	00d9      	lsls	r1, r3, #3
 8004b3c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004b40:	00d0      	lsls	r0, r2, #3
 8004b42:	4602      	mov	r2, r0
 8004b44:	460b      	mov	r3, r1
 8004b46:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 8004b4a:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004b4e:	4610      	mov	r0, r2
 8004b50:	4619      	mov	r1, r3
 8004b52:	3708      	adds	r7, #8
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bdb0      	pop	{r4, r5, r7, pc}

08004b58 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b086      	sub	sp, #24
 8004b5c:	af02      	add	r7, sp, #8
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	60b9      	str	r1, [r7, #8]
 8004b62:	607a      	str	r2, [r7, #4]
 8004b64:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004b66:	2205      	movs	r2, #5
 8004b68:	492b      	ldr	r1, [pc, #172]	; (8004c18 <SYSVIEW_AddTask+0xc0>)
 8004b6a:	68b8      	ldr	r0, [r7, #8]
 8004b6c:	f001 fdc4 	bl	80066f8 <memcmp>
 8004b70:	4603      	mov	r3, r0
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d04b      	beq.n	8004c0e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004b76:	4b29      	ldr	r3, [pc, #164]	; (8004c1c <SYSVIEW_AddTask+0xc4>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	2b07      	cmp	r3, #7
 8004b7c:	d903      	bls.n	8004b86 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004b7e:	4828      	ldr	r0, [pc, #160]	; (8004c20 <SYSVIEW_AddTask+0xc8>)
 8004b80:	f001 fd28 	bl	80065d4 <SEGGER_SYSVIEW_Warn>
    return;
 8004b84:	e044      	b.n	8004c10 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004b86:	4b25      	ldr	r3, [pc, #148]	; (8004c1c <SYSVIEW_AddTask+0xc4>)
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	4926      	ldr	r1, [pc, #152]	; (8004c24 <SYSVIEW_AddTask+0xcc>)
 8004b8c:	4613      	mov	r3, r2
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	4413      	add	r3, r2
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	440b      	add	r3, r1
 8004b96:	68fa      	ldr	r2, [r7, #12]
 8004b98:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004b9a:	4b20      	ldr	r3, [pc, #128]	; (8004c1c <SYSVIEW_AddTask+0xc4>)
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	4921      	ldr	r1, [pc, #132]	; (8004c24 <SYSVIEW_AddTask+0xcc>)
 8004ba0:	4613      	mov	r3, r2
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	4413      	add	r3, r2
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	440b      	add	r3, r1
 8004baa:	3304      	adds	r3, #4
 8004bac:	68ba      	ldr	r2, [r7, #8]
 8004bae:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004bb0:	4b1a      	ldr	r3, [pc, #104]	; (8004c1c <SYSVIEW_AddTask+0xc4>)
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	491b      	ldr	r1, [pc, #108]	; (8004c24 <SYSVIEW_AddTask+0xcc>)
 8004bb6:	4613      	mov	r3, r2
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	4413      	add	r3, r2
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	440b      	add	r3, r1
 8004bc0:	3308      	adds	r3, #8
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004bc6:	4b15      	ldr	r3, [pc, #84]	; (8004c1c <SYSVIEW_AddTask+0xc4>)
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	4916      	ldr	r1, [pc, #88]	; (8004c24 <SYSVIEW_AddTask+0xcc>)
 8004bcc:	4613      	mov	r3, r2
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	4413      	add	r3, r2
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	440b      	add	r3, r1
 8004bd6:	330c      	adds	r3, #12
 8004bd8:	683a      	ldr	r2, [r7, #0]
 8004bda:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004bdc:	4b0f      	ldr	r3, [pc, #60]	; (8004c1c <SYSVIEW_AddTask+0xc4>)
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	4910      	ldr	r1, [pc, #64]	; (8004c24 <SYSVIEW_AddTask+0xcc>)
 8004be2:	4613      	mov	r3, r2
 8004be4:	009b      	lsls	r3, r3, #2
 8004be6:	4413      	add	r3, r2
 8004be8:	009b      	lsls	r3, r3, #2
 8004bea:	440b      	add	r3, r1
 8004bec:	3310      	adds	r3, #16
 8004bee:	69ba      	ldr	r2, [r7, #24]
 8004bf0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004bf2:	4b0a      	ldr	r3, [pc, #40]	; (8004c1c <SYSVIEW_AddTask+0xc4>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	4a08      	ldr	r2, [pc, #32]	; (8004c1c <SYSVIEW_AddTask+0xc4>)
 8004bfa:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004bfc:	69bb      	ldr	r3, [r7, #24]
 8004bfe:	9300      	str	r3, [sp, #0]
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	68b9      	ldr	r1, [r7, #8]
 8004c06:	68f8      	ldr	r0, [r7, #12]
 8004c08:	f000 f80e 	bl	8004c28 <SYSVIEW_SendTaskInfo>
 8004c0c:	e000      	b.n	8004c10 <SYSVIEW_AddTask+0xb8>
    return;
 8004c0e:	bf00      	nop

}
 8004c10:	3710      	adds	r7, #16
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	bf00      	nop
 8004c18:	08007188 	.word	0x08007188
 8004c1c:	2001929c 	.word	0x2001929c
 8004c20:	08007190 	.word	0x08007190
 8004c24:	200191fc 	.word	0x200191fc

08004c28 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b08a      	sub	sp, #40	; 0x28
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	607a      	str	r2, [r7, #4]
 8004c34:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004c36:	f107 0314 	add.w	r3, r7, #20
 8004c3a:	2214      	movs	r2, #20
 8004c3c:	2100      	movs	r1, #0
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f001 fd76 	bl	8006730 <memset>
  TaskInfo.TaskID     = TaskID;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c56:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004c58:	f107 0314 	add.w	r3, r7, #20
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f001 f8c3 	bl	8005de8 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004c62:	bf00      	nop
 8004c64:	3728      	adds	r7, #40	; 0x28
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
	...

08004c6c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8004c6c:	b480      	push	{r7}
 8004c6e:	b083      	sub	sp, #12
 8004c70:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004c72:	4b24      	ldr	r3, [pc, #144]	; (8004d04 <_DoInit+0x98>)
 8004c74:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2203      	movs	r2, #3
 8004c7a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2203      	movs	r2, #3
 8004c80:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4a20      	ldr	r2, [pc, #128]	; (8004d08 <_DoInit+0x9c>)
 8004c86:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4a20      	ldr	r2, [pc, #128]	; (8004d0c <_DoInit+0xa0>)
 8004c8c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004c94:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	4a17      	ldr	r2, [pc, #92]	; (8004d08 <_DoInit+0x9c>)
 8004cac:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4a17      	ldr	r2, [pc, #92]	; (8004d10 <_DoInit+0xa4>)
 8004cb2:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2210      	movs	r2, #16
 8004cb8:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	3307      	adds	r3, #7
 8004cd0:	4a10      	ldr	r2, [pc, #64]	; (8004d14 <_DoInit+0xa8>)
 8004cd2:	6810      	ldr	r0, [r2, #0]
 8004cd4:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004cd6:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a0e      	ldr	r2, [pc, #56]	; (8004d18 <_DoInit+0xac>)
 8004cde:	6810      	ldr	r0, [r2, #0]
 8004ce0:	6018      	str	r0, [r3, #0]
 8004ce2:	8891      	ldrh	r1, [r2, #4]
 8004ce4:	7992      	ldrb	r2, [r2, #6]
 8004ce6:	8099      	strh	r1, [r3, #4]
 8004ce8:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004cea:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2220      	movs	r2, #32
 8004cf2:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004cf4:	f3bf 8f5f 	dmb	sy
}
 8004cf8:	bf00      	nop
 8004cfa:	370c      	adds	r7, #12
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr
 8004d04:	2001a864 	.word	0x2001a864
 8004d08:	080071e0 	.word	0x080071e0
 8004d0c:	200192a0 	.word	0x200192a0
 8004d10:	200196a0 	.word	0x200196a0
 8004d14:	080071ec 	.word	0x080071ec
 8004d18:	080071f0 	.word	0x080071f0

08004d1c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b08a      	sub	sp, #40	; 0x28
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	60f8      	str	r0, [r7, #12]
 8004d24:	60b9      	str	r1, [r7, #8]
 8004d26:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	691b      	ldr	r3, [r3, #16]
 8004d36:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8004d38:	69ba      	ldr	r2, [r7, #24]
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d905      	bls.n	8004d4c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8004d40:	69ba      	ldr	r2, [r7, #24]
 8004d42:	69fb      	ldr	r3, [r7, #28]
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	3b01      	subs	r3, #1
 8004d48:	627b      	str	r3, [r7, #36]	; 0x24
 8004d4a:	e007      	b.n	8004d5c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	689a      	ldr	r2, [r3, #8]
 8004d50:	69b9      	ldr	r1, [r7, #24]
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	1acb      	subs	r3, r1, r3
 8004d56:	4413      	add	r3, r2
 8004d58:	3b01      	subs	r3, #1
 8004d5a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	689a      	ldr	r2, [r3, #8]
 8004d60:	69fb      	ldr	r3, [r7, #28]
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d66:	4293      	cmp	r3, r2
 8004d68:	bf28      	it	cs
 8004d6a:	4613      	movcs	r3, r2
 8004d6c:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8004d6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	4293      	cmp	r3, r2
 8004d74:	bf28      	it	cs
 8004d76:	4613      	movcs	r3, r2
 8004d78:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	685a      	ldr	r2, [r3, #4]
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	4413      	add	r3, r2
 8004d82:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8004d84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d86:	68b9      	ldr	r1, [r7, #8]
 8004d88:	6978      	ldr	r0, [r7, #20]
 8004d8a:	f001 fcc3 	bl	8006714 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8004d8e:	6a3a      	ldr	r2, [r7, #32]
 8004d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d92:	4413      	add	r3, r2
 8004d94:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8004d96:	68ba      	ldr	r2, [r7, #8]
 8004d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9a:	4413      	add	r3, r2
 8004d9c:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da2:	1ad3      	subs	r3, r2, r3
 8004da4:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8004da6:	69fa      	ldr	r2, [r7, #28]
 8004da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004daa:	4413      	add	r3, r2
 8004dac:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	69fa      	ldr	r2, [r7, #28]
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d101      	bne.n	8004dbc <_WriteBlocking+0xa0>
      WrOff = 0u;
 8004db8:	2300      	movs	r3, #0
 8004dba:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004dbc:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	69fa      	ldr	r2, [r7, #28]
 8004dc4:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d1b2      	bne.n	8004d32 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8004dcc:	6a3b      	ldr	r3, [r7, #32]
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3728      	adds	r7, #40	; 0x28
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}

08004dd6 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8004dd6:	b580      	push	{r7, lr}
 8004dd8:	b088      	sub	sp, #32
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	60f8      	str	r0, [r7, #12]
 8004dde:	60b9      	str	r1, [r7, #8]
 8004de0:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	689a      	ldr	r2, [r3, #8]
 8004dec:	69fb      	ldr	r3, [r7, #28]
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8004df2:	69ba      	ldr	r2, [r7, #24]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d911      	bls.n	8004e1e <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	685a      	ldr	r2, [r3, #4]
 8004dfe:	69fb      	ldr	r3, [r7, #28]
 8004e00:	4413      	add	r3, r2
 8004e02:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	68b9      	ldr	r1, [r7, #8]
 8004e08:	6938      	ldr	r0, [r7, #16]
 8004e0a:	f001 fc83 	bl	8006714 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004e0e:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8004e12:	69fa      	ldr	r2, [r7, #28]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	441a      	add	r2, r3
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8004e1c:	e01f      	b.n	8004e5e <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	685a      	ldr	r2, [r3, #4]
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	4413      	add	r3, r2
 8004e2a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8004e2c:	697a      	ldr	r2, [r7, #20]
 8004e2e:	68b9      	ldr	r1, [r7, #8]
 8004e30:	6938      	ldr	r0, [r7, #16]
 8004e32:	f001 fc6f 	bl	8006714 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8004e44:	68ba      	ldr	r2, [r7, #8]
 8004e46:	69bb      	ldr	r3, [r7, #24]
 8004e48:	4413      	add	r3, r2
 8004e4a:	697a      	ldr	r2, [r7, #20]
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	6938      	ldr	r0, [r7, #16]
 8004e50:	f001 fc60 	bl	8006714 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004e54:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	697a      	ldr	r2, [r7, #20]
 8004e5c:	60da      	str	r2, [r3, #12]
}
 8004e5e:	bf00      	nop
 8004e60:	3720      	adds	r7, #32
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}

08004e66 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8004e66:	b480      	push	{r7}
 8004e68:	b087      	sub	sp, #28
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	691b      	ldr	r3, [r3, #16]
 8004e72:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8004e7a:	693a      	ldr	r2, [r7, #16]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d808      	bhi.n	8004e94 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	689a      	ldr	r2, [r3, #8]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	1ad2      	subs	r2, r2, r3
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	4413      	add	r3, r2
 8004e8e:	3b01      	subs	r3, #1
 8004e90:	617b      	str	r3, [r7, #20]
 8004e92:	e004      	b.n	8004e9e <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8004e94:	693a      	ldr	r2, [r7, #16]
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	3b01      	subs	r3, #1
 8004e9c:	617b      	str	r3, [r7, #20]
  }
  return r;
 8004e9e:	697b      	ldr	r3, [r7, #20]
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	371c      	adds	r7, #28
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr

08004eac <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b08c      	sub	sp, #48	; 0x30
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	60b9      	str	r1, [r7, #8]
 8004eb6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004eb8:	4b3e      	ldr	r3, [pc, #248]	; (8004fb4 <SEGGER_RTT_ReadNoLock+0x108>)
 8004eba:	623b      	str	r3, [r7, #32]
 8004ebc:	6a3b      	ldr	r3, [r7, #32]
 8004ebe:	781b      	ldrb	r3, [r3, #0]
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d101      	bne.n	8004eca <SEGGER_RTT_ReadNoLock+0x1e>
 8004ec6:	f7ff fed1 	bl	8004c6c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004eca:	68fa      	ldr	r2, [r7, #12]
 8004ecc:	4613      	mov	r3, r2
 8004ece:	005b      	lsls	r3, r3, #1
 8004ed0:	4413      	add	r3, r2
 8004ed2:	00db      	lsls	r3, r3, #3
 8004ed4:	3360      	adds	r3, #96	; 0x60
 8004ed6:	4a37      	ldr	r2, [pc, #220]	; (8004fb4 <SEGGER_RTT_ReadNoLock+0x108>)
 8004ed8:	4413      	add	r3, r2
 8004eda:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004ee0:	69fb      	ldr	r3, [r7, #28]
 8004ee2:	691b      	ldr	r3, [r3, #16]
 8004ee4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004ee6:	69fb      	ldr	r3, [r7, #28]
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004eec:	2300      	movs	r3, #0
 8004eee:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004ef0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ef2:	69bb      	ldr	r3, [r7, #24]
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d92b      	bls.n	8004f50 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004ef8:	69fb      	ldr	r3, [r7, #28]
 8004efa:	689a      	ldr	r2, [r3, #8]
 8004efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004efe:	1ad3      	subs	r3, r2, r3
 8004f00:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004f02:	697a      	ldr	r2, [r7, #20]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	4293      	cmp	r3, r2
 8004f08:	bf28      	it	cs
 8004f0a:	4613      	movcs	r3, r2
 8004f0c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004f0e:	69fb      	ldr	r3, [r7, #28]
 8004f10:	685a      	ldr	r2, [r3, #4]
 8004f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f14:	4413      	add	r3, r2
 8004f16:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004f18:	697a      	ldr	r2, [r7, #20]
 8004f1a:	6939      	ldr	r1, [r7, #16]
 8004f1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f1e:	f001 fbf9 	bl	8006714 <memcpy>
    NumBytesRead += NumBytesRem;
 8004f22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	4413      	add	r3, r2
 8004f28:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004f2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	4413      	add	r3, r2
 8004f30:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	1ad3      	subs	r3, r2, r3
 8004f38:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004f3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	4413      	add	r3, r2
 8004f40:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d101      	bne.n	8004f50 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004f50:	69ba      	ldr	r2, [r7, #24]
 8004f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004f58:	697a      	ldr	r2, [r7, #20]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	bf28      	it	cs
 8004f60:	4613      	movcs	r3, r2
 8004f62:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d019      	beq.n	8004f9e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004f6a:	69fb      	ldr	r3, [r7, #28]
 8004f6c:	685a      	ldr	r2, [r3, #4]
 8004f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f70:	4413      	add	r3, r2
 8004f72:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004f74:	697a      	ldr	r2, [r7, #20]
 8004f76:	6939      	ldr	r1, [r7, #16]
 8004f78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f7a:	f001 fbcb 	bl	8006714 <memcpy>
    NumBytesRead += NumBytesRem;
 8004f7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	4413      	add	r3, r2
 8004f84:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004f86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	4413      	add	r3, r2
 8004f8c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	1ad3      	subs	r3, r2, r3
 8004f94:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004f96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	4413      	add	r3, r2
 8004f9c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8004f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d002      	beq.n	8004faa <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004fa4:	69fb      	ldr	r3, [r7, #28]
 8004fa6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fa8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3730      	adds	r7, #48	; 0x30
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	2001a864 	.word	0x2001a864

08004fb8 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b088      	sub	sp, #32
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	60b9      	str	r1, [r7, #8]
 8004fc2:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	1c5a      	adds	r2, r3, #1
 8004fcc:	4613      	mov	r3, r2
 8004fce:	005b      	lsls	r3, r3, #1
 8004fd0:	4413      	add	r3, r2
 8004fd2:	00db      	lsls	r3, r3, #3
 8004fd4:	4a1f      	ldr	r2, [pc, #124]	; (8005054 <SEGGER_RTT_WriteNoLock+0x9c>)
 8004fd6:	4413      	add	r3, r2
 8004fd8:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	695b      	ldr	r3, [r3, #20]
 8004fde:	2b02      	cmp	r3, #2
 8004fe0:	d029      	beq.n	8005036 <SEGGER_RTT_WriteNoLock+0x7e>
 8004fe2:	2b02      	cmp	r3, #2
 8004fe4:	d82e      	bhi.n	8005044 <SEGGER_RTT_WriteNoLock+0x8c>
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d002      	beq.n	8004ff0 <SEGGER_RTT_WriteNoLock+0x38>
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d013      	beq.n	8005016 <SEGGER_RTT_WriteNoLock+0x5e>
 8004fee:	e029      	b.n	8005044 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004ff0:	6978      	ldr	r0, [r7, #20]
 8004ff2:	f7ff ff38 	bl	8004e66 <_GetAvailWriteSpace>
 8004ff6:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8004ff8:	693a      	ldr	r2, [r7, #16]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d202      	bcs.n	8005006 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8005000:	2300      	movs	r3, #0
 8005002:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8005004:	e021      	b.n	800504a <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	69b9      	ldr	r1, [r7, #24]
 800500e:	6978      	ldr	r0, [r7, #20]
 8005010:	f7ff fee1 	bl	8004dd6 <_WriteNoCheck>
    break;
 8005014:	e019      	b.n	800504a <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005016:	6978      	ldr	r0, [r7, #20]
 8005018:	f7ff ff25 	bl	8004e66 <_GetAvailWriteSpace>
 800501c:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	4293      	cmp	r3, r2
 8005024:	bf28      	it	cs
 8005026:	4613      	movcs	r3, r2
 8005028:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800502a:	69fa      	ldr	r2, [r7, #28]
 800502c:	69b9      	ldr	r1, [r7, #24]
 800502e:	6978      	ldr	r0, [r7, #20]
 8005030:	f7ff fed1 	bl	8004dd6 <_WriteNoCheck>
    break;
 8005034:	e009      	b.n	800504a <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	69b9      	ldr	r1, [r7, #24]
 800503a:	6978      	ldr	r0, [r7, #20]
 800503c:	f7ff fe6e 	bl	8004d1c <_WriteBlocking>
 8005040:	61f8      	str	r0, [r7, #28]
    break;
 8005042:	e002      	b.n	800504a <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8005044:	2300      	movs	r3, #0
 8005046:	61fb      	str	r3, [r7, #28]
    break;
 8005048:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800504a:	69fb      	ldr	r3, [r7, #28]
}
 800504c:	4618      	mov	r0, r3
 800504e:	3720      	adds	r7, #32
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}
 8005054:	2001a864 	.word	0x2001a864

08005058 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005058:	b580      	push	{r7, lr}
 800505a:	b088      	sub	sp, #32
 800505c:	af00      	add	r7, sp, #0
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	60b9      	str	r1, [r7, #8]
 8005062:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8005064:	4b0e      	ldr	r3, [pc, #56]	; (80050a0 <SEGGER_RTT_Write+0x48>)
 8005066:	61fb      	str	r3, [r7, #28]
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	b2db      	uxtb	r3, r3
 800506e:	2b00      	cmp	r3, #0
 8005070:	d101      	bne.n	8005076 <SEGGER_RTT_Write+0x1e>
 8005072:	f7ff fdfb 	bl	8004c6c <_DoInit>
  SEGGER_RTT_LOCK();
 8005076:	f3ef 8311 	mrs	r3, BASEPRI
 800507a:	f04f 0120 	mov.w	r1, #32
 800507e:	f381 8811 	msr	BASEPRI, r1
 8005082:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	68b9      	ldr	r1, [r7, #8]
 8005088:	68f8      	ldr	r0, [r7, #12]
 800508a:	f7ff ff95 	bl	8004fb8 <SEGGER_RTT_WriteNoLock>
 800508e:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8005090:	69bb      	ldr	r3, [r7, #24]
 8005092:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8005096:	697b      	ldr	r3, [r7, #20]
}
 8005098:	4618      	mov	r0, r3
 800509a:	3720      	adds	r7, #32
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}
 80050a0:	2001a864 	.word	0x2001a864

080050a4 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b088      	sub	sp, #32
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	607a      	str	r2, [r7, #4]
 80050b0:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80050b2:	4b3d      	ldr	r3, [pc, #244]	; (80051a8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80050b4:	61bb      	str	r3, [r7, #24]
 80050b6:	69bb      	ldr	r3, [r7, #24]
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d101      	bne.n	80050c4 <SEGGER_RTT_AllocUpBuffer+0x20>
 80050c0:	f7ff fdd4 	bl	8004c6c <_DoInit>
  SEGGER_RTT_LOCK();
 80050c4:	f3ef 8311 	mrs	r3, BASEPRI
 80050c8:	f04f 0120 	mov.w	r1, #32
 80050cc:	f381 8811 	msr	BASEPRI, r1
 80050d0:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80050d2:	4b35      	ldr	r3, [pc, #212]	; (80051a8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80050d4:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80050d6:	2300      	movs	r3, #0
 80050d8:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80050da:	6939      	ldr	r1, [r7, #16]
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	1c5a      	adds	r2, r3, #1
 80050e0:	4613      	mov	r3, r2
 80050e2:	005b      	lsls	r3, r3, #1
 80050e4:	4413      	add	r3, r2
 80050e6:	00db      	lsls	r3, r3, #3
 80050e8:	440b      	add	r3, r1
 80050ea:	3304      	adds	r3, #4
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d008      	beq.n	8005104 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	3301      	adds	r3, #1
 80050f6:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	691b      	ldr	r3, [r3, #16]
 80050fc:	69fa      	ldr	r2, [r7, #28]
 80050fe:	429a      	cmp	r2, r3
 8005100:	dbeb      	blt.n	80050da <SEGGER_RTT_AllocUpBuffer+0x36>
 8005102:	e000      	b.n	8005106 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005104:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	691b      	ldr	r3, [r3, #16]
 800510a:	69fa      	ldr	r2, [r7, #28]
 800510c:	429a      	cmp	r2, r3
 800510e:	da3f      	bge.n	8005190 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005110:	6939      	ldr	r1, [r7, #16]
 8005112:	69fb      	ldr	r3, [r7, #28]
 8005114:	1c5a      	adds	r2, r3, #1
 8005116:	4613      	mov	r3, r2
 8005118:	005b      	lsls	r3, r3, #1
 800511a:	4413      	add	r3, r2
 800511c:	00db      	lsls	r3, r3, #3
 800511e:	440b      	add	r3, r1
 8005120:	68fa      	ldr	r2, [r7, #12]
 8005122:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005124:	6939      	ldr	r1, [r7, #16]
 8005126:	69fb      	ldr	r3, [r7, #28]
 8005128:	1c5a      	adds	r2, r3, #1
 800512a:	4613      	mov	r3, r2
 800512c:	005b      	lsls	r3, r3, #1
 800512e:	4413      	add	r3, r2
 8005130:	00db      	lsls	r3, r3, #3
 8005132:	440b      	add	r3, r1
 8005134:	3304      	adds	r3, #4
 8005136:	68ba      	ldr	r2, [r7, #8]
 8005138:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800513a:	6939      	ldr	r1, [r7, #16]
 800513c:	69fa      	ldr	r2, [r7, #28]
 800513e:	4613      	mov	r3, r2
 8005140:	005b      	lsls	r3, r3, #1
 8005142:	4413      	add	r3, r2
 8005144:	00db      	lsls	r3, r3, #3
 8005146:	440b      	add	r3, r1
 8005148:	3320      	adds	r3, #32
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800514e:	6939      	ldr	r1, [r7, #16]
 8005150:	69fa      	ldr	r2, [r7, #28]
 8005152:	4613      	mov	r3, r2
 8005154:	005b      	lsls	r3, r3, #1
 8005156:	4413      	add	r3, r2
 8005158:	00db      	lsls	r3, r3, #3
 800515a:	440b      	add	r3, r1
 800515c:	3328      	adds	r3, #40	; 0x28
 800515e:	2200      	movs	r2, #0
 8005160:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005162:	6939      	ldr	r1, [r7, #16]
 8005164:	69fa      	ldr	r2, [r7, #28]
 8005166:	4613      	mov	r3, r2
 8005168:	005b      	lsls	r3, r3, #1
 800516a:	4413      	add	r3, r2
 800516c:	00db      	lsls	r3, r3, #3
 800516e:	440b      	add	r3, r1
 8005170:	3324      	adds	r3, #36	; 0x24
 8005172:	2200      	movs	r2, #0
 8005174:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005176:	6939      	ldr	r1, [r7, #16]
 8005178:	69fa      	ldr	r2, [r7, #28]
 800517a:	4613      	mov	r3, r2
 800517c:	005b      	lsls	r3, r3, #1
 800517e:	4413      	add	r3, r2
 8005180:	00db      	lsls	r3, r3, #3
 8005182:	440b      	add	r3, r1
 8005184:	332c      	adds	r3, #44	; 0x2c
 8005186:	683a      	ldr	r2, [r7, #0]
 8005188:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800518a:	f3bf 8f5f 	dmb	sy
 800518e:	e002      	b.n	8005196 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005190:	f04f 33ff 	mov.w	r3, #4294967295
 8005194:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800519c:	69fb      	ldr	r3, [r7, #28]
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3720      	adds	r7, #32
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	bf00      	nop
 80051a8:	2001a864 	.word	0x2001a864

080051ac <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b088      	sub	sp, #32
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	60f8      	str	r0, [r7, #12]
 80051b4:	60b9      	str	r1, [r7, #8]
 80051b6:	607a      	str	r2, [r7, #4]
 80051b8:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80051ba:	4b33      	ldr	r3, [pc, #204]	; (8005288 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 80051bc:	61bb      	str	r3, [r7, #24]
 80051be:	69bb      	ldr	r3, [r7, #24]
 80051c0:	781b      	ldrb	r3, [r3, #0]
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d101      	bne.n	80051cc <SEGGER_RTT_ConfigDownBuffer+0x20>
 80051c8:	f7ff fd50 	bl	8004c6c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80051cc:	4b2e      	ldr	r3, [pc, #184]	; (8005288 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 80051ce:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	695b      	ldr	r3, [r3, #20]
 80051d4:	461a      	mov	r2, r3
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	4293      	cmp	r3, r2
 80051da:	d24d      	bcs.n	8005278 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 80051dc:	f3ef 8311 	mrs	r3, BASEPRI
 80051e0:	f04f 0120 	mov.w	r1, #32
 80051e4:	f381 8811 	msr	BASEPRI, r1
 80051e8:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d031      	beq.n	8005254 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 80051f0:	6979      	ldr	r1, [r7, #20]
 80051f2:	68fa      	ldr	r2, [r7, #12]
 80051f4:	4613      	mov	r3, r2
 80051f6:	005b      	lsls	r3, r3, #1
 80051f8:	4413      	add	r3, r2
 80051fa:	00db      	lsls	r3, r3, #3
 80051fc:	440b      	add	r3, r1
 80051fe:	3360      	adds	r3, #96	; 0x60
 8005200:	68ba      	ldr	r2, [r7, #8]
 8005202:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8005204:	6979      	ldr	r1, [r7, #20]
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	4613      	mov	r3, r2
 800520a:	005b      	lsls	r3, r3, #1
 800520c:	4413      	add	r3, r2
 800520e:	00db      	lsls	r3, r3, #3
 8005210:	440b      	add	r3, r1
 8005212:	3364      	adds	r3, #100	; 0x64
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8005218:	6979      	ldr	r1, [r7, #20]
 800521a:	68fa      	ldr	r2, [r7, #12]
 800521c:	4613      	mov	r3, r2
 800521e:	005b      	lsls	r3, r3, #1
 8005220:	4413      	add	r3, r2
 8005222:	00db      	lsls	r3, r3, #3
 8005224:	440b      	add	r3, r1
 8005226:	3368      	adds	r3, #104	; 0x68
 8005228:	683a      	ldr	r2, [r7, #0]
 800522a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 800522c:	6979      	ldr	r1, [r7, #20]
 800522e:	68fa      	ldr	r2, [r7, #12]
 8005230:	4613      	mov	r3, r2
 8005232:	005b      	lsls	r3, r3, #1
 8005234:	4413      	add	r3, r2
 8005236:	00db      	lsls	r3, r3, #3
 8005238:	440b      	add	r3, r1
 800523a:	3370      	adds	r3, #112	; 0x70
 800523c:	2200      	movs	r2, #0
 800523e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8005240:	6979      	ldr	r1, [r7, #20]
 8005242:	68fa      	ldr	r2, [r7, #12]
 8005244:	4613      	mov	r3, r2
 8005246:	005b      	lsls	r3, r3, #1
 8005248:	4413      	add	r3, r2
 800524a:	00db      	lsls	r3, r3, #3
 800524c:	440b      	add	r3, r1
 800524e:	336c      	adds	r3, #108	; 0x6c
 8005250:	2200      	movs	r2, #0
 8005252:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8005254:	6979      	ldr	r1, [r7, #20]
 8005256:	68fa      	ldr	r2, [r7, #12]
 8005258:	4613      	mov	r3, r2
 800525a:	005b      	lsls	r3, r3, #1
 800525c:	4413      	add	r3, r2
 800525e:	00db      	lsls	r3, r3, #3
 8005260:	440b      	add	r3, r1
 8005262:	3374      	adds	r3, #116	; 0x74
 8005264:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005266:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005268:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005272:	2300      	movs	r3, #0
 8005274:	61fb      	str	r3, [r7, #28]
 8005276:	e002      	b.n	800527e <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8005278:	f04f 33ff 	mov.w	r3, #4294967295
 800527c:	61fb      	str	r3, [r7, #28]
  }
  return r;
 800527e:	69fb      	ldr	r3, [r7, #28]
}
 8005280:	4618      	mov	r0, r3
 8005282:	3720      	adds	r7, #32
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}
 8005288:	2001a864 	.word	0x2001a864

0800528c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800528c:	b480      	push	{r7}
 800528e:	b087      	sub	sp, #28
 8005290:	af00      	add	r7, sp, #0
 8005292:	60f8      	str	r0, [r7, #12]
 8005294:	60b9      	str	r1, [r7, #8]
 8005296:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8005298:	2300      	movs	r3, #0
 800529a:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800529c:	e002      	b.n	80052a4 <_EncodeStr+0x18>
    Len++;
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	3301      	adds	r3, #1
 80052a2:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80052a4:	68ba      	ldr	r2, [r7, #8]
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	4413      	add	r3, r2
 80052aa:	781b      	ldrb	r3, [r3, #0]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d1f6      	bne.n	800529e <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 80052b0:	693a      	ldr	r2, [r7, #16]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d901      	bls.n	80052bc <_EncodeStr+0x30>
    Len = Limit;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	2bfe      	cmp	r3, #254	; 0xfe
 80052c0:	d806      	bhi.n	80052d0 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	1c5a      	adds	r2, r3, #1
 80052c6:	60fa      	str	r2, [r7, #12]
 80052c8:	693a      	ldr	r2, [r7, #16]
 80052ca:	b2d2      	uxtb	r2, r2
 80052cc:	701a      	strb	r2, [r3, #0]
 80052ce:	e011      	b.n	80052f4 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	1c5a      	adds	r2, r3, #1
 80052d4:	60fa      	str	r2, [r7, #12]
 80052d6:	22ff      	movs	r2, #255	; 0xff
 80052d8:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	1c5a      	adds	r2, r3, #1
 80052de:	60fa      	str	r2, [r7, #12]
 80052e0:	693a      	ldr	r2, [r7, #16]
 80052e2:	b2d2      	uxtb	r2, r2
 80052e4:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	0a19      	lsrs	r1, r3, #8
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	1c5a      	adds	r2, r3, #1
 80052ee:	60fa      	str	r2, [r7, #12]
 80052f0:	b2ca      	uxtb	r2, r1
 80052f2:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80052f4:	2300      	movs	r3, #0
 80052f6:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80052f8:	e00a      	b.n	8005310 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 80052fa:	68ba      	ldr	r2, [r7, #8]
 80052fc:	1c53      	adds	r3, r2, #1
 80052fe:	60bb      	str	r3, [r7, #8]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	1c59      	adds	r1, r3, #1
 8005304:	60f9      	str	r1, [r7, #12]
 8005306:	7812      	ldrb	r2, [r2, #0]
 8005308:	701a      	strb	r2, [r3, #0]
    n++;
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	3301      	adds	r3, #1
 800530e:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005310:	697a      	ldr	r2, [r7, #20]
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	429a      	cmp	r2, r3
 8005316:	d3f0      	bcc.n	80052fa <_EncodeStr+0x6e>
  }
  return pPayload;
 8005318:	68fb      	ldr	r3, [r7, #12]
}
 800531a:	4618      	mov	r0, r3
 800531c:	371c      	adds	r7, #28
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr

08005326 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005326:	b480      	push	{r7}
 8005328:	b083      	sub	sp, #12
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	3304      	adds	r3, #4
}
 8005332:	4618      	mov	r0, r3
 8005334:	370c      	adds	r7, #12
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr
	...

08005340 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005340:	b580      	push	{r7, lr}
 8005342:	b082      	sub	sp, #8
 8005344:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005346:	4b36      	ldr	r3, [pc, #216]	; (8005420 <_HandleIncomingPacket+0xe0>)
 8005348:	7e1b      	ldrb	r3, [r3, #24]
 800534a:	4618      	mov	r0, r3
 800534c:	1cfb      	adds	r3, r7, #3
 800534e:	2201      	movs	r2, #1
 8005350:	4619      	mov	r1, r3
 8005352:	f7ff fdab 	bl	8004eac <SEGGER_RTT_ReadNoLock>
 8005356:	4603      	mov	r3, r0
 8005358:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2b00      	cmp	r3, #0
 800535e:	dd54      	ble.n	800540a <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8005360:	78fb      	ldrb	r3, [r7, #3]
 8005362:	2b80      	cmp	r3, #128	; 0x80
 8005364:	d032      	beq.n	80053cc <_HandleIncomingPacket+0x8c>
 8005366:	2b80      	cmp	r3, #128	; 0x80
 8005368:	dc42      	bgt.n	80053f0 <_HandleIncomingPacket+0xb0>
 800536a:	2b07      	cmp	r3, #7
 800536c:	dc16      	bgt.n	800539c <_HandleIncomingPacket+0x5c>
 800536e:	2b00      	cmp	r3, #0
 8005370:	dd3e      	ble.n	80053f0 <_HandleIncomingPacket+0xb0>
 8005372:	3b01      	subs	r3, #1
 8005374:	2b06      	cmp	r3, #6
 8005376:	d83b      	bhi.n	80053f0 <_HandleIncomingPacket+0xb0>
 8005378:	a201      	add	r2, pc, #4	; (adr r2, 8005380 <_HandleIncomingPacket+0x40>)
 800537a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800537e:	bf00      	nop
 8005380:	080053a3 	.word	0x080053a3
 8005384:	080053a9 	.word	0x080053a9
 8005388:	080053af 	.word	0x080053af
 800538c:	080053b5 	.word	0x080053b5
 8005390:	080053bb 	.word	0x080053bb
 8005394:	080053c1 	.word	0x080053c1
 8005398:	080053c7 	.word	0x080053c7
 800539c:	2b7f      	cmp	r3, #127	; 0x7f
 800539e:	d036      	beq.n	800540e <_HandleIncomingPacket+0xce>
 80053a0:	e026      	b.n	80053f0 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80053a2:	f000 fba7 	bl	8005af4 <SEGGER_SYSVIEW_Start>
      break;
 80053a6:	e037      	b.n	8005418 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80053a8:	f000 fc5e 	bl	8005c68 <SEGGER_SYSVIEW_Stop>
      break;
 80053ac:	e034      	b.n	8005418 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80053ae:	f000 fe37 	bl	8006020 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80053b2:	e031      	b.n	8005418 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80053b4:	f000 fdfc 	bl	8005fb0 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80053b8:	e02e      	b.n	8005418 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80053ba:	f000 fc7b 	bl	8005cb4 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80053be:	e02b      	b.n	8005418 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80053c0:	f001 f8ca 	bl	8006558 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80053c4:	e028      	b.n	8005418 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80053c6:	f001 f8a9 	bl	800651c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80053ca:	e025      	b.n	8005418 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80053cc:	4b14      	ldr	r3, [pc, #80]	; (8005420 <_HandleIncomingPacket+0xe0>)
 80053ce:	7e1b      	ldrb	r3, [r3, #24]
 80053d0:	4618      	mov	r0, r3
 80053d2:	1cfb      	adds	r3, r7, #3
 80053d4:	2201      	movs	r2, #1
 80053d6:	4619      	mov	r1, r3
 80053d8:	f7ff fd68 	bl	8004eac <SEGGER_RTT_ReadNoLock>
 80053dc:	4603      	mov	r3, r0
 80053de:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	dd15      	ble.n	8005412 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80053e6:	78fb      	ldrb	r3, [r7, #3]
 80053e8:	4618      	mov	r0, r3
 80053ea:	f001 f817 	bl	800641c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80053ee:	e010      	b.n	8005412 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80053f0:	78fb      	ldrb	r3, [r7, #3]
 80053f2:	b25b      	sxtb	r3, r3
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	da0e      	bge.n	8005416 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80053f8:	4b09      	ldr	r3, [pc, #36]	; (8005420 <_HandleIncomingPacket+0xe0>)
 80053fa:	7e1b      	ldrb	r3, [r3, #24]
 80053fc:	4618      	mov	r0, r3
 80053fe:	1cfb      	adds	r3, r7, #3
 8005400:	2201      	movs	r2, #1
 8005402:	4619      	mov	r1, r3
 8005404:	f7ff fd52 	bl	8004eac <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005408:	e005      	b.n	8005416 <_HandleIncomingPacket+0xd6>
    }
  }
 800540a:	bf00      	nop
 800540c:	e004      	b.n	8005418 <_HandleIncomingPacket+0xd8>
      break;
 800540e:	bf00      	nop
 8005410:	e002      	b.n	8005418 <_HandleIncomingPacket+0xd8>
      break;
 8005412:	bf00      	nop
 8005414:	e000      	b.n	8005418 <_HandleIncomingPacket+0xd8>
      break;
 8005416:	bf00      	nop
}
 8005418:	bf00      	nop
 800541a:	3708      	adds	r7, #8
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}
 8005420:	2001a6b8 	.word	0x2001a6b8

08005424 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005424:	b580      	push	{r7, lr}
 8005426:	b08c      	sub	sp, #48	; 0x30
 8005428:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800542a:	2301      	movs	r3, #1
 800542c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800542e:	1d3b      	adds	r3, r7, #4
 8005430:	3301      	adds	r3, #1
 8005432:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005434:	69fb      	ldr	r3, [r7, #28]
 8005436:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005438:	4b31      	ldr	r3, [pc, #196]	; (8005500 <_TrySendOverflowPacket+0xdc>)
 800543a:	695b      	ldr	r3, [r3, #20]
 800543c:	62bb      	str	r3, [r7, #40]	; 0x28
 800543e:	e00b      	b.n	8005458 <_TrySendOverflowPacket+0x34>
 8005440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005442:	b2da      	uxtb	r2, r3
 8005444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005446:	1c59      	adds	r1, r3, #1
 8005448:	62f9      	str	r1, [r7, #44]	; 0x2c
 800544a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800544e:	b2d2      	uxtb	r2, r2
 8005450:	701a      	strb	r2, [r3, #0]
 8005452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005454:	09db      	lsrs	r3, r3, #7
 8005456:	62bb      	str	r3, [r7, #40]	; 0x28
 8005458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800545a:	2b7f      	cmp	r3, #127	; 0x7f
 800545c:	d8f0      	bhi.n	8005440 <_TrySendOverflowPacket+0x1c>
 800545e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005460:	1c5a      	adds	r2, r3, #1
 8005462:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005464:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005466:	b2d2      	uxtb	r2, r2
 8005468:	701a      	strb	r2, [r3, #0]
 800546a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800546c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800546e:	4b25      	ldr	r3, [pc, #148]	; (8005504 <_TrySendOverflowPacket+0xe0>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005474:	4b22      	ldr	r3, [pc, #136]	; (8005500 <_TrySendOverflowPacket+0xdc>)
 8005476:	68db      	ldr	r3, [r3, #12]
 8005478:	69ba      	ldr	r2, [r7, #24]
 800547a:	1ad3      	subs	r3, r2, r3
 800547c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800547e:	69fb      	ldr	r3, [r7, #28]
 8005480:	627b      	str	r3, [r7, #36]	; 0x24
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	623b      	str	r3, [r7, #32]
 8005486:	e00b      	b.n	80054a0 <_TrySendOverflowPacket+0x7c>
 8005488:	6a3b      	ldr	r3, [r7, #32]
 800548a:	b2da      	uxtb	r2, r3
 800548c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548e:	1c59      	adds	r1, r3, #1
 8005490:	6279      	str	r1, [r7, #36]	; 0x24
 8005492:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005496:	b2d2      	uxtb	r2, r2
 8005498:	701a      	strb	r2, [r3, #0]
 800549a:	6a3b      	ldr	r3, [r7, #32]
 800549c:	09db      	lsrs	r3, r3, #7
 800549e:	623b      	str	r3, [r7, #32]
 80054a0:	6a3b      	ldr	r3, [r7, #32]
 80054a2:	2b7f      	cmp	r3, #127	; 0x7f
 80054a4:	d8f0      	bhi.n	8005488 <_TrySendOverflowPacket+0x64>
 80054a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a8:	1c5a      	adds	r2, r3, #1
 80054aa:	627a      	str	r2, [r7, #36]	; 0x24
 80054ac:	6a3a      	ldr	r2, [r7, #32]
 80054ae:	b2d2      	uxtb	r2, r2
 80054b0:	701a      	strb	r2, [r3, #0]
 80054b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b4:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80054b6:	4b12      	ldr	r3, [pc, #72]	; (8005500 <_TrySendOverflowPacket+0xdc>)
 80054b8:	785b      	ldrb	r3, [r3, #1]
 80054ba:	4618      	mov	r0, r3
 80054bc:	1d3b      	adds	r3, r7, #4
 80054be:	69fa      	ldr	r2, [r7, #28]
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	461a      	mov	r2, r3
 80054c4:	1d3b      	adds	r3, r7, #4
 80054c6:	4619      	mov	r1, r3
 80054c8:	f7fa fe82 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80054cc:	4603      	mov	r3, r0
 80054ce:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d009      	beq.n	80054ea <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80054d6:	4a0a      	ldr	r2, [pc, #40]	; (8005500 <_TrySendOverflowPacket+0xdc>)
 80054d8:	69bb      	ldr	r3, [r7, #24]
 80054da:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80054dc:	4b08      	ldr	r3, [pc, #32]	; (8005500 <_TrySendOverflowPacket+0xdc>)
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	3b01      	subs	r3, #1
 80054e2:	b2da      	uxtb	r2, r3
 80054e4:	4b06      	ldr	r3, [pc, #24]	; (8005500 <_TrySendOverflowPacket+0xdc>)
 80054e6:	701a      	strb	r2, [r3, #0]
 80054e8:	e004      	b.n	80054f4 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80054ea:	4b05      	ldr	r3, [pc, #20]	; (8005500 <_TrySendOverflowPacket+0xdc>)
 80054ec:	695b      	ldr	r3, [r3, #20]
 80054ee:	3301      	adds	r3, #1
 80054f0:	4a03      	ldr	r2, [pc, #12]	; (8005500 <_TrySendOverflowPacket+0xdc>)
 80054f2:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80054f4:	693b      	ldr	r3, [r7, #16]
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3730      	adds	r7, #48	; 0x30
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}
 80054fe:	bf00      	nop
 8005500:	2001a6b8 	.word	0x2001a6b8
 8005504:	e0001004 	.word	0xe0001004

08005508 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005508:	b580      	push	{r7, lr}
 800550a:	b08a      	sub	sp, #40	; 0x28
 800550c:	af00      	add	r7, sp, #0
 800550e:	60f8      	str	r0, [r7, #12]
 8005510:	60b9      	str	r1, [r7, #8]
 8005512:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005514:	4b6c      	ldr	r3, [pc, #432]	; (80056c8 <_SendPacket+0x1c0>)
 8005516:	781b      	ldrb	r3, [r3, #0]
 8005518:	2b01      	cmp	r3, #1
 800551a:	d010      	beq.n	800553e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800551c:	4b6a      	ldr	r3, [pc, #424]	; (80056c8 <_SendPacket+0x1c0>)
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	2b00      	cmp	r3, #0
 8005522:	f000 80a3 	beq.w	800566c <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005526:	4b68      	ldr	r3, [pc, #416]	; (80056c8 <_SendPacket+0x1c0>)
 8005528:	781b      	ldrb	r3, [r3, #0]
 800552a:	2b02      	cmp	r3, #2
 800552c:	d109      	bne.n	8005542 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800552e:	f7ff ff79 	bl	8005424 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005532:	4b65      	ldr	r3, [pc, #404]	; (80056c8 <_SendPacket+0x1c0>)
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	2b01      	cmp	r3, #1
 8005538:	f040 809a 	bne.w	8005670 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 800553c:	e001      	b.n	8005542 <_SendPacket+0x3a>
    goto Send;
 800553e:	bf00      	nop
 8005540:	e000      	b.n	8005544 <_SendPacket+0x3c>
Send:
 8005542:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2b1f      	cmp	r3, #31
 8005548:	d809      	bhi.n	800555e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800554a:	4b5f      	ldr	r3, [pc, #380]	; (80056c8 <_SendPacket+0x1c0>)
 800554c:	69da      	ldr	r2, [r3, #28]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	fa22 f303 	lsr.w	r3, r2, r3
 8005554:	f003 0301 	and.w	r3, r3, #1
 8005558:	2b00      	cmp	r3, #0
 800555a:	f040 808b 	bne.w	8005674 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2b17      	cmp	r3, #23
 8005562:	d807      	bhi.n	8005574 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	3b01      	subs	r3, #1
 8005568:	60fb      	str	r3, [r7, #12]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	b2da      	uxtb	r2, r3
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	701a      	strb	r2, [r3, #0]
 8005572:	e03d      	b.n	80055f0 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8005574:	68ba      	ldr	r2, [r7, #8]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	1ad3      	subs	r3, r2, r3
 800557a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800557c:	69fb      	ldr	r3, [r7, #28]
 800557e:	2b7f      	cmp	r3, #127	; 0x7f
 8005580:	d912      	bls.n	80055a8 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8005582:	69fb      	ldr	r3, [r7, #28]
 8005584:	09da      	lsrs	r2, r3, #7
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	3b01      	subs	r3, #1
 800558a:	60fb      	str	r3, [r7, #12]
 800558c:	b2d2      	uxtb	r2, r2
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8005592:	69fb      	ldr	r3, [r7, #28]
 8005594:	b2db      	uxtb	r3, r3
 8005596:	68fa      	ldr	r2, [r7, #12]
 8005598:	3a01      	subs	r2, #1
 800559a:	60fa      	str	r2, [r7, #12]
 800559c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80055a0:	b2da      	uxtb	r2, r3
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	701a      	strb	r2, [r3, #0]
 80055a6:	e006      	b.n	80055b6 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	3b01      	subs	r3, #1
 80055ac:	60fb      	str	r3, [r7, #12]
 80055ae:	69fb      	ldr	r3, [r7, #28]
 80055b0:	b2da      	uxtb	r2, r3
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2b7f      	cmp	r3, #127	; 0x7f
 80055ba:	d912      	bls.n	80055e2 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	09da      	lsrs	r2, r3, #7
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	3b01      	subs	r3, #1
 80055c4:	60fb      	str	r3, [r7, #12]
 80055c6:	b2d2      	uxtb	r2, r2
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	68fa      	ldr	r2, [r7, #12]
 80055d2:	3a01      	subs	r2, #1
 80055d4:	60fa      	str	r2, [r7, #12]
 80055d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80055da:	b2da      	uxtb	r2, r3
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	701a      	strb	r2, [r3, #0]
 80055e0:	e006      	b.n	80055f0 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	3b01      	subs	r3, #1
 80055e6:	60fb      	str	r3, [r7, #12]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	b2da      	uxtb	r2, r3
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80055f0:	4b36      	ldr	r3, [pc, #216]	; (80056cc <_SendPacket+0x1c4>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80055f6:	4b34      	ldr	r3, [pc, #208]	; (80056c8 <_SendPacket+0x1c0>)
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	69ba      	ldr	r2, [r7, #24]
 80055fc:	1ad3      	subs	r3, r2, r3
 80055fe:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	627b      	str	r3, [r7, #36]	; 0x24
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	623b      	str	r3, [r7, #32]
 8005608:	e00b      	b.n	8005622 <_SendPacket+0x11a>
 800560a:	6a3b      	ldr	r3, [r7, #32]
 800560c:	b2da      	uxtb	r2, r3
 800560e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005610:	1c59      	adds	r1, r3, #1
 8005612:	6279      	str	r1, [r7, #36]	; 0x24
 8005614:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005618:	b2d2      	uxtb	r2, r2
 800561a:	701a      	strb	r2, [r3, #0]
 800561c:	6a3b      	ldr	r3, [r7, #32]
 800561e:	09db      	lsrs	r3, r3, #7
 8005620:	623b      	str	r3, [r7, #32]
 8005622:	6a3b      	ldr	r3, [r7, #32]
 8005624:	2b7f      	cmp	r3, #127	; 0x7f
 8005626:	d8f0      	bhi.n	800560a <_SendPacket+0x102>
 8005628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562a:	1c5a      	adds	r2, r3, #1
 800562c:	627a      	str	r2, [r7, #36]	; 0x24
 800562e:	6a3a      	ldr	r2, [r7, #32]
 8005630:	b2d2      	uxtb	r2, r2
 8005632:	701a      	strb	r2, [r3, #0]
 8005634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005636:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8005638:	4b23      	ldr	r3, [pc, #140]	; (80056c8 <_SendPacket+0x1c0>)
 800563a:	785b      	ldrb	r3, [r3, #1]
 800563c:	4618      	mov	r0, r3
 800563e:	68ba      	ldr	r2, [r7, #8]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	1ad3      	subs	r3, r2, r3
 8005644:	461a      	mov	r2, r3
 8005646:	68f9      	ldr	r1, [r7, #12]
 8005648:	f7fa fdc2 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800564c:	4603      	mov	r3, r0
 800564e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d003      	beq.n	800565e <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005656:	4a1c      	ldr	r2, [pc, #112]	; (80056c8 <_SendPacket+0x1c0>)
 8005658:	69bb      	ldr	r3, [r7, #24]
 800565a:	60d3      	str	r3, [r2, #12]
 800565c:	e00b      	b.n	8005676 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800565e:	4b1a      	ldr	r3, [pc, #104]	; (80056c8 <_SendPacket+0x1c0>)
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	3301      	adds	r3, #1
 8005664:	b2da      	uxtb	r2, r3
 8005666:	4b18      	ldr	r3, [pc, #96]	; (80056c8 <_SendPacket+0x1c0>)
 8005668:	701a      	strb	r2, [r3, #0]
 800566a:	e004      	b.n	8005676 <_SendPacket+0x16e>
    goto SendDone;
 800566c:	bf00      	nop
 800566e:	e002      	b.n	8005676 <_SendPacket+0x16e>
      goto SendDone;
 8005670:	bf00      	nop
 8005672:	e000      	b.n	8005676 <_SendPacket+0x16e>
      goto SendDone;
 8005674:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005676:	4b14      	ldr	r3, [pc, #80]	; (80056c8 <_SendPacket+0x1c0>)
 8005678:	7e1b      	ldrb	r3, [r3, #24]
 800567a:	4619      	mov	r1, r3
 800567c:	4a14      	ldr	r2, [pc, #80]	; (80056d0 <_SendPacket+0x1c8>)
 800567e:	460b      	mov	r3, r1
 8005680:	005b      	lsls	r3, r3, #1
 8005682:	440b      	add	r3, r1
 8005684:	00db      	lsls	r3, r3, #3
 8005686:	4413      	add	r3, r2
 8005688:	336c      	adds	r3, #108	; 0x6c
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	4b0e      	ldr	r3, [pc, #56]	; (80056c8 <_SendPacket+0x1c0>)
 800568e:	7e1b      	ldrb	r3, [r3, #24]
 8005690:	4618      	mov	r0, r3
 8005692:	490f      	ldr	r1, [pc, #60]	; (80056d0 <_SendPacket+0x1c8>)
 8005694:	4603      	mov	r3, r0
 8005696:	005b      	lsls	r3, r3, #1
 8005698:	4403      	add	r3, r0
 800569a:	00db      	lsls	r3, r3, #3
 800569c:	440b      	add	r3, r1
 800569e:	3370      	adds	r3, #112	; 0x70
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d00b      	beq.n	80056be <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80056a6:	4b08      	ldr	r3, [pc, #32]	; (80056c8 <_SendPacket+0x1c0>)
 80056a8:	789b      	ldrb	r3, [r3, #2]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d107      	bne.n	80056be <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80056ae:	4b06      	ldr	r3, [pc, #24]	; (80056c8 <_SendPacket+0x1c0>)
 80056b0:	2201      	movs	r2, #1
 80056b2:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80056b4:	f7ff fe44 	bl	8005340 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80056b8:	4b03      	ldr	r3, [pc, #12]	; (80056c8 <_SendPacket+0x1c0>)
 80056ba:	2200      	movs	r2, #0
 80056bc:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80056be:	bf00      	nop
 80056c0:	3728      	adds	r7, #40	; 0x28
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
 80056c6:	bf00      	nop
 80056c8:	2001a6b8 	.word	0x2001a6b8
 80056cc:	e0001004 	.word	0xe0001004
 80056d0:	2001a864 	.word	0x2001a864

080056d4 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b086      	sub	sp, #24
 80056d8:	af02      	add	r7, sp, #8
 80056da:	60f8      	str	r0, [r7, #12]
 80056dc:	60b9      	str	r1, [r7, #8]
 80056de:	607a      	str	r2, [r7, #4]
 80056e0:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80056e2:	2300      	movs	r3, #0
 80056e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80056e8:	4917      	ldr	r1, [pc, #92]	; (8005748 <SEGGER_SYSVIEW_Init+0x74>)
 80056ea:	4818      	ldr	r0, [pc, #96]	; (800574c <SEGGER_SYSVIEW_Init+0x78>)
 80056ec:	f7ff fcda 	bl	80050a4 <SEGGER_RTT_AllocUpBuffer>
 80056f0:	4603      	mov	r3, r0
 80056f2:	b2da      	uxtb	r2, r3
 80056f4:	4b16      	ldr	r3, [pc, #88]	; (8005750 <SEGGER_SYSVIEW_Init+0x7c>)
 80056f6:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80056f8:	4b15      	ldr	r3, [pc, #84]	; (8005750 <SEGGER_SYSVIEW_Init+0x7c>)
 80056fa:	785a      	ldrb	r2, [r3, #1]
 80056fc:	4b14      	ldr	r3, [pc, #80]	; (8005750 <SEGGER_SYSVIEW_Init+0x7c>)
 80056fe:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005700:	4b13      	ldr	r3, [pc, #76]	; (8005750 <SEGGER_SYSVIEW_Init+0x7c>)
 8005702:	7e1b      	ldrb	r3, [r3, #24]
 8005704:	4618      	mov	r0, r3
 8005706:	2300      	movs	r3, #0
 8005708:	9300      	str	r3, [sp, #0]
 800570a:	2308      	movs	r3, #8
 800570c:	4a11      	ldr	r2, [pc, #68]	; (8005754 <SEGGER_SYSVIEW_Init+0x80>)
 800570e:	490f      	ldr	r1, [pc, #60]	; (800574c <SEGGER_SYSVIEW_Init+0x78>)
 8005710:	f7ff fd4c 	bl	80051ac <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005714:	4b0e      	ldr	r3, [pc, #56]	; (8005750 <SEGGER_SYSVIEW_Init+0x7c>)
 8005716:	2200      	movs	r2, #0
 8005718:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800571a:	4b0f      	ldr	r3, [pc, #60]	; (8005758 <SEGGER_SYSVIEW_Init+0x84>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a0c      	ldr	r2, [pc, #48]	; (8005750 <SEGGER_SYSVIEW_Init+0x7c>)
 8005720:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005722:	4a0b      	ldr	r2, [pc, #44]	; (8005750 <SEGGER_SYSVIEW_Init+0x7c>)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005728:	4a09      	ldr	r2, [pc, #36]	; (8005750 <SEGGER_SYSVIEW_Init+0x7c>)
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800572e:	4a08      	ldr	r2, [pc, #32]	; (8005750 <SEGGER_SYSVIEW_Init+0x7c>)
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005734:	4a06      	ldr	r2, [pc, #24]	; (8005750 <SEGGER_SYSVIEW_Init+0x7c>)
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800573a:	4b05      	ldr	r3, [pc, #20]	; (8005750 <SEGGER_SYSVIEW_Init+0x7c>)
 800573c:	2200      	movs	r2, #0
 800573e:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005740:	bf00      	nop
 8005742:	3710      	adds	r7, #16
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}
 8005748:	200196b0 	.word	0x200196b0
 800574c:	080071f8 	.word	0x080071f8
 8005750:	2001a6b8 	.word	0x2001a6b8
 8005754:	2001a6b0 	.word	0x2001a6b0
 8005758:	e0001004 	.word	0xe0001004

0800575c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800575c:	b480      	push	{r7}
 800575e:	b083      	sub	sp, #12
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005764:	4a04      	ldr	r2, [pc, #16]	; (8005778 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6113      	str	r3, [r2, #16]
}
 800576a:	bf00      	nop
 800576c:	370c      	adds	r7, #12
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr
 8005776:	bf00      	nop
 8005778:	2001a6b8 	.word	0x2001a6b8

0800577c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800577c:	b580      	push	{r7, lr}
 800577e:	b084      	sub	sp, #16
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005784:	f3ef 8311 	mrs	r3, BASEPRI
 8005788:	f04f 0120 	mov.w	r1, #32
 800578c:	f381 8811 	msr	BASEPRI, r1
 8005790:	60fb      	str	r3, [r7, #12]
 8005792:	4808      	ldr	r0, [pc, #32]	; (80057b4 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005794:	f7ff fdc7 	bl	8005326 <_PreparePacket>
 8005798:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800579a:	687a      	ldr	r2, [r7, #4]
 800579c:	68b9      	ldr	r1, [r7, #8]
 800579e:	68b8      	ldr	r0, [r7, #8]
 80057a0:	f7ff feb2 	bl	8005508 <_SendPacket>
  RECORD_END();
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f383 8811 	msr	BASEPRI, r3
}
 80057aa:	bf00      	nop
 80057ac:	3710      	adds	r7, #16
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
 80057b2:	bf00      	nop
 80057b4:	2001a6e8 	.word	0x2001a6e8

080057b8 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b088      	sub	sp, #32
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80057c2:	f3ef 8311 	mrs	r3, BASEPRI
 80057c6:	f04f 0120 	mov.w	r1, #32
 80057ca:	f381 8811 	msr	BASEPRI, r1
 80057ce:	617b      	str	r3, [r7, #20]
 80057d0:	4816      	ldr	r0, [pc, #88]	; (800582c <SEGGER_SYSVIEW_RecordU32+0x74>)
 80057d2:	f7ff fda8 	bl	8005326 <_PreparePacket>
 80057d6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	61fb      	str	r3, [r7, #28]
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	61bb      	str	r3, [r7, #24]
 80057e4:	e00b      	b.n	80057fe <SEGGER_SYSVIEW_RecordU32+0x46>
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	b2da      	uxtb	r2, r3
 80057ea:	69fb      	ldr	r3, [r7, #28]
 80057ec:	1c59      	adds	r1, r3, #1
 80057ee:	61f9      	str	r1, [r7, #28]
 80057f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057f4:	b2d2      	uxtb	r2, r2
 80057f6:	701a      	strb	r2, [r3, #0]
 80057f8:	69bb      	ldr	r3, [r7, #24]
 80057fa:	09db      	lsrs	r3, r3, #7
 80057fc:	61bb      	str	r3, [r7, #24]
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	2b7f      	cmp	r3, #127	; 0x7f
 8005802:	d8f0      	bhi.n	80057e6 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005804:	69fb      	ldr	r3, [r7, #28]
 8005806:	1c5a      	adds	r2, r3, #1
 8005808:	61fa      	str	r2, [r7, #28]
 800580a:	69ba      	ldr	r2, [r7, #24]
 800580c:	b2d2      	uxtb	r2, r2
 800580e:	701a      	strb	r2, [r3, #0]
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	68f9      	ldr	r1, [r7, #12]
 8005818:	6938      	ldr	r0, [r7, #16]
 800581a:	f7ff fe75 	bl	8005508 <_SendPacket>
  RECORD_END();
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	f383 8811 	msr	BASEPRI, r3
}
 8005824:	bf00      	nop
 8005826:	3720      	adds	r7, #32
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}
 800582c:	2001a6e8 	.word	0x2001a6e8

08005830 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005830:	b580      	push	{r7, lr}
 8005832:	b08c      	sub	sp, #48	; 0x30
 8005834:	af00      	add	r7, sp, #0
 8005836:	60f8      	str	r0, [r7, #12]
 8005838:	60b9      	str	r1, [r7, #8]
 800583a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800583c:	f3ef 8311 	mrs	r3, BASEPRI
 8005840:	f04f 0120 	mov.w	r1, #32
 8005844:	f381 8811 	msr	BASEPRI, r1
 8005848:	61fb      	str	r3, [r7, #28]
 800584a:	4825      	ldr	r0, [pc, #148]	; (80058e0 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800584c:	f7ff fd6b 	bl	8005326 <_PreparePacket>
 8005850:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005852:	69bb      	ldr	r3, [r7, #24]
 8005854:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	62fb      	str	r3, [r7, #44]	; 0x2c
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	62bb      	str	r3, [r7, #40]	; 0x28
 800585e:	e00b      	b.n	8005878 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005862:	b2da      	uxtb	r2, r3
 8005864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005866:	1c59      	adds	r1, r3, #1
 8005868:	62f9      	str	r1, [r7, #44]	; 0x2c
 800586a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800586e:	b2d2      	uxtb	r2, r2
 8005870:	701a      	strb	r2, [r3, #0]
 8005872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005874:	09db      	lsrs	r3, r3, #7
 8005876:	62bb      	str	r3, [r7, #40]	; 0x28
 8005878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800587a:	2b7f      	cmp	r3, #127	; 0x7f
 800587c:	d8f0      	bhi.n	8005860 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800587e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005880:	1c5a      	adds	r2, r3, #1
 8005882:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005884:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005886:	b2d2      	uxtb	r2, r2
 8005888:	701a      	strb	r2, [r3, #0]
 800588a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800588c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	627b      	str	r3, [r7, #36]	; 0x24
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	623b      	str	r3, [r7, #32]
 8005896:	e00b      	b.n	80058b0 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005898:	6a3b      	ldr	r3, [r7, #32]
 800589a:	b2da      	uxtb	r2, r3
 800589c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589e:	1c59      	adds	r1, r3, #1
 80058a0:	6279      	str	r1, [r7, #36]	; 0x24
 80058a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058a6:	b2d2      	uxtb	r2, r2
 80058a8:	701a      	strb	r2, [r3, #0]
 80058aa:	6a3b      	ldr	r3, [r7, #32]
 80058ac:	09db      	lsrs	r3, r3, #7
 80058ae:	623b      	str	r3, [r7, #32]
 80058b0:	6a3b      	ldr	r3, [r7, #32]
 80058b2:	2b7f      	cmp	r3, #127	; 0x7f
 80058b4:	d8f0      	bhi.n	8005898 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80058b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b8:	1c5a      	adds	r2, r3, #1
 80058ba:	627a      	str	r2, [r7, #36]	; 0x24
 80058bc:	6a3a      	ldr	r2, [r7, #32]
 80058be:	b2d2      	uxtb	r2, r2
 80058c0:	701a      	strb	r2, [r3, #0]
 80058c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c4:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80058c6:	68fa      	ldr	r2, [r7, #12]
 80058c8:	6979      	ldr	r1, [r7, #20]
 80058ca:	69b8      	ldr	r0, [r7, #24]
 80058cc:	f7ff fe1c 	bl	8005508 <_SendPacket>
  RECORD_END();
 80058d0:	69fb      	ldr	r3, [r7, #28]
 80058d2:	f383 8811 	msr	BASEPRI, r3
}
 80058d6:	bf00      	nop
 80058d8:	3730      	adds	r7, #48	; 0x30
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
 80058de:	bf00      	nop
 80058e0:	2001a6e8 	.word	0x2001a6e8

080058e4 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b08e      	sub	sp, #56	; 0x38
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	60b9      	str	r1, [r7, #8]
 80058ee:	607a      	str	r2, [r7, #4]
 80058f0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 80058f2:	f3ef 8311 	mrs	r3, BASEPRI
 80058f6:	f04f 0120 	mov.w	r1, #32
 80058fa:	f381 8811 	msr	BASEPRI, r1
 80058fe:	61fb      	str	r3, [r7, #28]
 8005900:	4832      	ldr	r0, [pc, #200]	; (80059cc <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8005902:	f7ff fd10 	bl	8005326 <_PreparePacket>
 8005906:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005908:	69bb      	ldr	r3, [r7, #24]
 800590a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	637b      	str	r3, [r7, #52]	; 0x34
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	633b      	str	r3, [r7, #48]	; 0x30
 8005914:	e00b      	b.n	800592e <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8005916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005918:	b2da      	uxtb	r2, r3
 800591a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800591c:	1c59      	adds	r1, r3, #1
 800591e:	6379      	str	r1, [r7, #52]	; 0x34
 8005920:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005924:	b2d2      	uxtb	r2, r2
 8005926:	701a      	strb	r2, [r3, #0]
 8005928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800592a:	09db      	lsrs	r3, r3, #7
 800592c:	633b      	str	r3, [r7, #48]	; 0x30
 800592e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005930:	2b7f      	cmp	r3, #127	; 0x7f
 8005932:	d8f0      	bhi.n	8005916 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8005934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005936:	1c5a      	adds	r2, r3, #1
 8005938:	637a      	str	r2, [r7, #52]	; 0x34
 800593a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800593c:	b2d2      	uxtb	r2, r2
 800593e:	701a      	strb	r2, [r3, #0]
 8005940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005942:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	62bb      	str	r3, [r7, #40]	; 0x28
 800594c:	e00b      	b.n	8005966 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800594e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005950:	b2da      	uxtb	r2, r3
 8005952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005954:	1c59      	adds	r1, r3, #1
 8005956:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005958:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800595c:	b2d2      	uxtb	r2, r2
 800595e:	701a      	strb	r2, [r3, #0]
 8005960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005962:	09db      	lsrs	r3, r3, #7
 8005964:	62bb      	str	r3, [r7, #40]	; 0x28
 8005966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005968:	2b7f      	cmp	r3, #127	; 0x7f
 800596a:	d8f0      	bhi.n	800594e <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 800596c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800596e:	1c5a      	adds	r2, r3, #1
 8005970:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005972:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005974:	b2d2      	uxtb	r2, r2
 8005976:	701a      	strb	r2, [r3, #0]
 8005978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800597a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	627b      	str	r3, [r7, #36]	; 0x24
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	623b      	str	r3, [r7, #32]
 8005984:	e00b      	b.n	800599e <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8005986:	6a3b      	ldr	r3, [r7, #32]
 8005988:	b2da      	uxtb	r2, r3
 800598a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598c:	1c59      	adds	r1, r3, #1
 800598e:	6279      	str	r1, [r7, #36]	; 0x24
 8005990:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005994:	b2d2      	uxtb	r2, r2
 8005996:	701a      	strb	r2, [r3, #0]
 8005998:	6a3b      	ldr	r3, [r7, #32]
 800599a:	09db      	lsrs	r3, r3, #7
 800599c:	623b      	str	r3, [r7, #32]
 800599e:	6a3b      	ldr	r3, [r7, #32]
 80059a0:	2b7f      	cmp	r3, #127	; 0x7f
 80059a2:	d8f0      	bhi.n	8005986 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 80059a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a6:	1c5a      	adds	r2, r3, #1
 80059a8:	627a      	str	r2, [r7, #36]	; 0x24
 80059aa:	6a3a      	ldr	r2, [r7, #32]
 80059ac:	b2d2      	uxtb	r2, r2
 80059ae:	701a      	strb	r2, [r3, #0]
 80059b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b2:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80059b4:	68fa      	ldr	r2, [r7, #12]
 80059b6:	6979      	ldr	r1, [r7, #20]
 80059b8:	69b8      	ldr	r0, [r7, #24]
 80059ba:	f7ff fda5 	bl	8005508 <_SendPacket>
  RECORD_END();
 80059be:	69fb      	ldr	r3, [r7, #28]
 80059c0:	f383 8811 	msr	BASEPRI, r3
}
 80059c4:	bf00      	nop
 80059c6:	3738      	adds	r7, #56	; 0x38
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}
 80059cc:	2001a6e8 	.word	0x2001a6e8

080059d0 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b090      	sub	sp, #64	; 0x40
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	60f8      	str	r0, [r7, #12]
 80059d8:	60b9      	str	r1, [r7, #8]
 80059da:	607a      	str	r2, [r7, #4]
 80059dc:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80059de:	f3ef 8311 	mrs	r3, BASEPRI
 80059e2:	f04f 0120 	mov.w	r1, #32
 80059e6:	f381 8811 	msr	BASEPRI, r1
 80059ea:	61fb      	str	r3, [r7, #28]
 80059ec:	4840      	ldr	r0, [pc, #256]	; (8005af0 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80059ee:	f7ff fc9a 	bl	8005326 <_PreparePacket>
 80059f2:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80059f4:	69bb      	ldr	r3, [r7, #24]
 80059f6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a00:	e00b      	b.n	8005a1a <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8005a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a04:	b2da      	uxtb	r2, r3
 8005a06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a08:	1c59      	adds	r1, r3, #1
 8005a0a:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005a0c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a10:	b2d2      	uxtb	r2, r2
 8005a12:	701a      	strb	r2, [r3, #0]
 8005a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a16:	09db      	lsrs	r3, r3, #7
 8005a18:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a1c:	2b7f      	cmp	r3, #127	; 0x7f
 8005a1e:	d8f0      	bhi.n	8005a02 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8005a20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a22:	1c5a      	adds	r2, r3, #1
 8005a24:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005a26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a28:	b2d2      	uxtb	r2, r2
 8005a2a:	701a      	strb	r2, [r3, #0]
 8005a2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a2e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	637b      	str	r3, [r7, #52]	; 0x34
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	633b      	str	r3, [r7, #48]	; 0x30
 8005a38:	e00b      	b.n	8005a52 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8005a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a3c:	b2da      	uxtb	r2, r3
 8005a3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a40:	1c59      	adds	r1, r3, #1
 8005a42:	6379      	str	r1, [r7, #52]	; 0x34
 8005a44:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a48:	b2d2      	uxtb	r2, r2
 8005a4a:	701a      	strb	r2, [r3, #0]
 8005a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a4e:	09db      	lsrs	r3, r3, #7
 8005a50:	633b      	str	r3, [r7, #48]	; 0x30
 8005a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a54:	2b7f      	cmp	r3, #127	; 0x7f
 8005a56:	d8f0      	bhi.n	8005a3a <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8005a58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a5a:	1c5a      	adds	r2, r3, #1
 8005a5c:	637a      	str	r2, [r7, #52]	; 0x34
 8005a5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a60:	b2d2      	uxtb	r2, r2
 8005a62:	701a      	strb	r2, [r3, #0]
 8005a64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a66:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a70:	e00b      	b.n	8005a8a <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8005a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a74:	b2da      	uxtb	r2, r3
 8005a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a78:	1c59      	adds	r1, r3, #1
 8005a7a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005a7c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a80:	b2d2      	uxtb	r2, r2
 8005a82:	701a      	strb	r2, [r3, #0]
 8005a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a86:	09db      	lsrs	r3, r3, #7
 8005a88:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a8c:	2b7f      	cmp	r3, #127	; 0x7f
 8005a8e:	d8f0      	bhi.n	8005a72 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8005a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a92:	1c5a      	adds	r2, r3, #1
 8005a94:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a98:	b2d2      	uxtb	r2, r2
 8005a9a:	701a      	strb	r2, [r3, #0]
 8005a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a9e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	627b      	str	r3, [r7, #36]	; 0x24
 8005aa4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005aa6:	623b      	str	r3, [r7, #32]
 8005aa8:	e00b      	b.n	8005ac2 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8005aaa:	6a3b      	ldr	r3, [r7, #32]
 8005aac:	b2da      	uxtb	r2, r3
 8005aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab0:	1c59      	adds	r1, r3, #1
 8005ab2:	6279      	str	r1, [r7, #36]	; 0x24
 8005ab4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ab8:	b2d2      	uxtb	r2, r2
 8005aba:	701a      	strb	r2, [r3, #0]
 8005abc:	6a3b      	ldr	r3, [r7, #32]
 8005abe:	09db      	lsrs	r3, r3, #7
 8005ac0:	623b      	str	r3, [r7, #32]
 8005ac2:	6a3b      	ldr	r3, [r7, #32]
 8005ac4:	2b7f      	cmp	r3, #127	; 0x7f
 8005ac6:	d8f0      	bhi.n	8005aaa <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8005ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aca:	1c5a      	adds	r2, r3, #1
 8005acc:	627a      	str	r2, [r7, #36]	; 0x24
 8005ace:	6a3a      	ldr	r2, [r7, #32]
 8005ad0:	b2d2      	uxtb	r2, r2
 8005ad2:	701a      	strb	r2, [r3, #0]
 8005ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad6:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005ad8:	68fa      	ldr	r2, [r7, #12]
 8005ada:	6979      	ldr	r1, [r7, #20]
 8005adc:	69b8      	ldr	r0, [r7, #24]
 8005ade:	f7ff fd13 	bl	8005508 <_SendPacket>
  RECORD_END();
 8005ae2:	69fb      	ldr	r3, [r7, #28]
 8005ae4:	f383 8811 	msr	BASEPRI, r3
}
 8005ae8:	bf00      	nop
 8005aea:	3740      	adds	r7, #64	; 0x40
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}
 8005af0:	2001a6e8 	.word	0x2001a6e8

08005af4 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b08c      	sub	sp, #48	; 0x30
 8005af8:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8005afa:	4b58      	ldr	r3, [pc, #352]	; (8005c5c <SEGGER_SYSVIEW_Start+0x168>)
 8005afc:	2201      	movs	r2, #1
 8005afe:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005b00:	f3ef 8311 	mrs	r3, BASEPRI
 8005b04:	f04f 0120 	mov.w	r1, #32
 8005b08:	f381 8811 	msr	BASEPRI, r1
 8005b0c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005b0e:	4b53      	ldr	r3, [pc, #332]	; (8005c5c <SEGGER_SYSVIEW_Start+0x168>)
 8005b10:	785b      	ldrb	r3, [r3, #1]
 8005b12:	220a      	movs	r2, #10
 8005b14:	4952      	ldr	r1, [pc, #328]	; (8005c60 <SEGGER_SYSVIEW_Start+0x16c>)
 8005b16:	4618      	mov	r0, r3
 8005b18:	f7fa fb5a 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005b22:	200a      	movs	r0, #10
 8005b24:	f7ff fe2a 	bl	800577c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005b28:	f3ef 8311 	mrs	r3, BASEPRI
 8005b2c:	f04f 0120 	mov.w	r1, #32
 8005b30:	f381 8811 	msr	BASEPRI, r1
 8005b34:	60bb      	str	r3, [r7, #8]
 8005b36:	484b      	ldr	r0, [pc, #300]	; (8005c64 <SEGGER_SYSVIEW_Start+0x170>)
 8005b38:	f7ff fbf5 	bl	8005326 <_PreparePacket>
 8005b3c:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b46:	4b45      	ldr	r3, [pc, #276]	; (8005c5c <SEGGER_SYSVIEW_Start+0x168>)
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b4c:	e00b      	b.n	8005b66 <SEGGER_SYSVIEW_Start+0x72>
 8005b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b50:	b2da      	uxtb	r2, r3
 8005b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b54:	1c59      	adds	r1, r3, #1
 8005b56:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005b58:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b5c:	b2d2      	uxtb	r2, r2
 8005b5e:	701a      	strb	r2, [r3, #0]
 8005b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b62:	09db      	lsrs	r3, r3, #7
 8005b64:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b68:	2b7f      	cmp	r3, #127	; 0x7f
 8005b6a:	d8f0      	bhi.n	8005b4e <SEGGER_SYSVIEW_Start+0x5a>
 8005b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b6e:	1c5a      	adds	r2, r3, #1
 8005b70:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b74:	b2d2      	uxtb	r2, r2
 8005b76:	701a      	strb	r2, [r3, #0]
 8005b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b7a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	627b      	str	r3, [r7, #36]	; 0x24
 8005b80:	4b36      	ldr	r3, [pc, #216]	; (8005c5c <SEGGER_SYSVIEW_Start+0x168>)
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	623b      	str	r3, [r7, #32]
 8005b86:	e00b      	b.n	8005ba0 <SEGGER_SYSVIEW_Start+0xac>
 8005b88:	6a3b      	ldr	r3, [r7, #32]
 8005b8a:	b2da      	uxtb	r2, r3
 8005b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8e:	1c59      	adds	r1, r3, #1
 8005b90:	6279      	str	r1, [r7, #36]	; 0x24
 8005b92:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b96:	b2d2      	uxtb	r2, r2
 8005b98:	701a      	strb	r2, [r3, #0]
 8005b9a:	6a3b      	ldr	r3, [r7, #32]
 8005b9c:	09db      	lsrs	r3, r3, #7
 8005b9e:	623b      	str	r3, [r7, #32]
 8005ba0:	6a3b      	ldr	r3, [r7, #32]
 8005ba2:	2b7f      	cmp	r3, #127	; 0x7f
 8005ba4:	d8f0      	bhi.n	8005b88 <SEGGER_SYSVIEW_Start+0x94>
 8005ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba8:	1c5a      	adds	r2, r3, #1
 8005baa:	627a      	str	r2, [r7, #36]	; 0x24
 8005bac:	6a3a      	ldr	r2, [r7, #32]
 8005bae:	b2d2      	uxtb	r2, r2
 8005bb0:	701a      	strb	r2, [r3, #0]
 8005bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	61fb      	str	r3, [r7, #28]
 8005bba:	4b28      	ldr	r3, [pc, #160]	; (8005c5c <SEGGER_SYSVIEW_Start+0x168>)
 8005bbc:	691b      	ldr	r3, [r3, #16]
 8005bbe:	61bb      	str	r3, [r7, #24]
 8005bc0:	e00b      	b.n	8005bda <SEGGER_SYSVIEW_Start+0xe6>
 8005bc2:	69bb      	ldr	r3, [r7, #24]
 8005bc4:	b2da      	uxtb	r2, r3
 8005bc6:	69fb      	ldr	r3, [r7, #28]
 8005bc8:	1c59      	adds	r1, r3, #1
 8005bca:	61f9      	str	r1, [r7, #28]
 8005bcc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005bd0:	b2d2      	uxtb	r2, r2
 8005bd2:	701a      	strb	r2, [r3, #0]
 8005bd4:	69bb      	ldr	r3, [r7, #24]
 8005bd6:	09db      	lsrs	r3, r3, #7
 8005bd8:	61bb      	str	r3, [r7, #24]
 8005bda:	69bb      	ldr	r3, [r7, #24]
 8005bdc:	2b7f      	cmp	r3, #127	; 0x7f
 8005bde:	d8f0      	bhi.n	8005bc2 <SEGGER_SYSVIEW_Start+0xce>
 8005be0:	69fb      	ldr	r3, [r7, #28]
 8005be2:	1c5a      	adds	r2, r3, #1
 8005be4:	61fa      	str	r2, [r7, #28]
 8005be6:	69ba      	ldr	r2, [r7, #24]
 8005be8:	b2d2      	uxtb	r2, r2
 8005bea:	701a      	strb	r2, [r3, #0]
 8005bec:	69fb      	ldr	r3, [r7, #28]
 8005bee:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	617b      	str	r3, [r7, #20]
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	613b      	str	r3, [r7, #16]
 8005bf8:	e00b      	b.n	8005c12 <SEGGER_SYSVIEW_Start+0x11e>
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	b2da      	uxtb	r2, r3
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	1c59      	adds	r1, r3, #1
 8005c02:	6179      	str	r1, [r7, #20]
 8005c04:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c08:	b2d2      	uxtb	r2, r2
 8005c0a:	701a      	strb	r2, [r3, #0]
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	09db      	lsrs	r3, r3, #7
 8005c10:	613b      	str	r3, [r7, #16]
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	2b7f      	cmp	r3, #127	; 0x7f
 8005c16:	d8f0      	bhi.n	8005bfa <SEGGER_SYSVIEW_Start+0x106>
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	1c5a      	adds	r2, r3, #1
 8005c1c:	617a      	str	r2, [r7, #20]
 8005c1e:	693a      	ldr	r2, [r7, #16]
 8005c20:	b2d2      	uxtb	r2, r2
 8005c22:	701a      	strb	r2, [r3, #0]
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005c28:	2218      	movs	r2, #24
 8005c2a:	6839      	ldr	r1, [r7, #0]
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f7ff fc6b 	bl	8005508 <_SendPacket>
      RECORD_END();
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005c38:	4b08      	ldr	r3, [pc, #32]	; (8005c5c <SEGGER_SYSVIEW_Start+0x168>)
 8005c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d002      	beq.n	8005c46 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005c40:	4b06      	ldr	r3, [pc, #24]	; (8005c5c <SEGGER_SYSVIEW_Start+0x168>)
 8005c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c44:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8005c46:	f000 f9eb 	bl	8006020 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8005c4a:	f000 f9b1 	bl	8005fb0 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005c4e:	f000 fc83 	bl	8006558 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005c52:	bf00      	nop
 8005c54:	3730      	adds	r7, #48	; 0x30
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}
 8005c5a:	bf00      	nop
 8005c5c:	2001a6b8 	.word	0x2001a6b8
 8005c60:	08007220 	.word	0x08007220
 8005c64:	2001a6e8 	.word	0x2001a6e8

08005c68 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b082      	sub	sp, #8
 8005c6c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005c6e:	f3ef 8311 	mrs	r3, BASEPRI
 8005c72:	f04f 0120 	mov.w	r1, #32
 8005c76:	f381 8811 	msr	BASEPRI, r1
 8005c7a:	607b      	str	r3, [r7, #4]
 8005c7c:	480b      	ldr	r0, [pc, #44]	; (8005cac <SEGGER_SYSVIEW_Stop+0x44>)
 8005c7e:	f7ff fb52 	bl	8005326 <_PreparePacket>
 8005c82:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005c84:	4b0a      	ldr	r3, [pc, #40]	; (8005cb0 <SEGGER_SYSVIEW_Stop+0x48>)
 8005c86:	781b      	ldrb	r3, [r3, #0]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d007      	beq.n	8005c9c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005c8c:	220b      	movs	r2, #11
 8005c8e:	6839      	ldr	r1, [r7, #0]
 8005c90:	6838      	ldr	r0, [r7, #0]
 8005c92:	f7ff fc39 	bl	8005508 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8005c96:	4b06      	ldr	r3, [pc, #24]	; (8005cb0 <SEGGER_SYSVIEW_Stop+0x48>)
 8005c98:	2200      	movs	r2, #0
 8005c9a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f383 8811 	msr	BASEPRI, r3
}
 8005ca2:	bf00      	nop
 8005ca4:	3708      	adds	r7, #8
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}
 8005caa:	bf00      	nop
 8005cac:	2001a6e8 	.word	0x2001a6e8
 8005cb0:	2001a6b8 	.word	0x2001a6b8

08005cb4 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b08c      	sub	sp, #48	; 0x30
 8005cb8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005cba:	f3ef 8311 	mrs	r3, BASEPRI
 8005cbe:	f04f 0120 	mov.w	r1, #32
 8005cc2:	f381 8811 	msr	BASEPRI, r1
 8005cc6:	60fb      	str	r3, [r7, #12]
 8005cc8:	4845      	ldr	r0, [pc, #276]	; (8005de0 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005cca:	f7ff fb2c 	bl	8005326 <_PreparePacket>
 8005cce:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cd8:	4b42      	ldr	r3, [pc, #264]	; (8005de4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cde:	e00b      	b.n	8005cf8 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce2:	b2da      	uxtb	r2, r3
 8005ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ce6:	1c59      	adds	r1, r3, #1
 8005ce8:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005cea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005cee:	b2d2      	uxtb	r2, r2
 8005cf0:	701a      	strb	r2, [r3, #0]
 8005cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf4:	09db      	lsrs	r3, r3, #7
 8005cf6:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cfa:	2b7f      	cmp	r3, #127	; 0x7f
 8005cfc:	d8f0      	bhi.n	8005ce0 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d00:	1c5a      	adds	r2, r3, #1
 8005d02:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d06:	b2d2      	uxtb	r2, r2
 8005d08:	701a      	strb	r2, [r3, #0]
 8005d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d0c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	627b      	str	r3, [r7, #36]	; 0x24
 8005d12:	4b34      	ldr	r3, [pc, #208]	; (8005de4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	623b      	str	r3, [r7, #32]
 8005d18:	e00b      	b.n	8005d32 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005d1a:	6a3b      	ldr	r3, [r7, #32]
 8005d1c:	b2da      	uxtb	r2, r3
 8005d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d20:	1c59      	adds	r1, r3, #1
 8005d22:	6279      	str	r1, [r7, #36]	; 0x24
 8005d24:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d28:	b2d2      	uxtb	r2, r2
 8005d2a:	701a      	strb	r2, [r3, #0]
 8005d2c:	6a3b      	ldr	r3, [r7, #32]
 8005d2e:	09db      	lsrs	r3, r3, #7
 8005d30:	623b      	str	r3, [r7, #32]
 8005d32:	6a3b      	ldr	r3, [r7, #32]
 8005d34:	2b7f      	cmp	r3, #127	; 0x7f
 8005d36:	d8f0      	bhi.n	8005d1a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3a:	1c5a      	adds	r2, r3, #1
 8005d3c:	627a      	str	r2, [r7, #36]	; 0x24
 8005d3e:	6a3a      	ldr	r2, [r7, #32]
 8005d40:	b2d2      	uxtb	r2, r2
 8005d42:	701a      	strb	r2, [r3, #0]
 8005d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d46:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	61fb      	str	r3, [r7, #28]
 8005d4c:	4b25      	ldr	r3, [pc, #148]	; (8005de4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005d4e:	691b      	ldr	r3, [r3, #16]
 8005d50:	61bb      	str	r3, [r7, #24]
 8005d52:	e00b      	b.n	8005d6c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005d54:	69bb      	ldr	r3, [r7, #24]
 8005d56:	b2da      	uxtb	r2, r3
 8005d58:	69fb      	ldr	r3, [r7, #28]
 8005d5a:	1c59      	adds	r1, r3, #1
 8005d5c:	61f9      	str	r1, [r7, #28]
 8005d5e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d62:	b2d2      	uxtb	r2, r2
 8005d64:	701a      	strb	r2, [r3, #0]
 8005d66:	69bb      	ldr	r3, [r7, #24]
 8005d68:	09db      	lsrs	r3, r3, #7
 8005d6a:	61bb      	str	r3, [r7, #24]
 8005d6c:	69bb      	ldr	r3, [r7, #24]
 8005d6e:	2b7f      	cmp	r3, #127	; 0x7f
 8005d70:	d8f0      	bhi.n	8005d54 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005d72:	69fb      	ldr	r3, [r7, #28]
 8005d74:	1c5a      	adds	r2, r3, #1
 8005d76:	61fa      	str	r2, [r7, #28]
 8005d78:	69ba      	ldr	r2, [r7, #24]
 8005d7a:	b2d2      	uxtb	r2, r2
 8005d7c:	701a      	strb	r2, [r3, #0]
 8005d7e:	69fb      	ldr	r3, [r7, #28]
 8005d80:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	617b      	str	r3, [r7, #20]
 8005d86:	2300      	movs	r3, #0
 8005d88:	613b      	str	r3, [r7, #16]
 8005d8a:	e00b      	b.n	8005da4 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	b2da      	uxtb	r2, r3
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	1c59      	adds	r1, r3, #1
 8005d94:	6179      	str	r1, [r7, #20]
 8005d96:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d9a:	b2d2      	uxtb	r2, r2
 8005d9c:	701a      	strb	r2, [r3, #0]
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	09db      	lsrs	r3, r3, #7
 8005da2:	613b      	str	r3, [r7, #16]
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	2b7f      	cmp	r3, #127	; 0x7f
 8005da8:	d8f0      	bhi.n	8005d8c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	1c5a      	adds	r2, r3, #1
 8005dae:	617a      	str	r2, [r7, #20]
 8005db0:	693a      	ldr	r2, [r7, #16]
 8005db2:	b2d2      	uxtb	r2, r2
 8005db4:	701a      	strb	r2, [r3, #0]
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005dba:	2218      	movs	r2, #24
 8005dbc:	6879      	ldr	r1, [r7, #4]
 8005dbe:	68b8      	ldr	r0, [r7, #8]
 8005dc0:	f7ff fba2 	bl	8005508 <_SendPacket>
  RECORD_END();
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005dca:	4b06      	ldr	r3, [pc, #24]	; (8005de4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d002      	beq.n	8005dd8 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8005dd2:	4b04      	ldr	r3, [pc, #16]	; (8005de4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd6:	4798      	blx	r3
  }
}
 8005dd8:	bf00      	nop
 8005dda:	3730      	adds	r7, #48	; 0x30
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}
 8005de0:	2001a6e8 	.word	0x2001a6e8
 8005de4:	2001a6b8 	.word	0x2001a6b8

08005de8 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b092      	sub	sp, #72	; 0x48
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005df0:	f3ef 8311 	mrs	r3, BASEPRI
 8005df4:	f04f 0120 	mov.w	r1, #32
 8005df8:	f381 8811 	msr	BASEPRI, r1
 8005dfc:	617b      	str	r3, [r7, #20]
 8005dfe:	486a      	ldr	r0, [pc, #424]	; (8005fa8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005e00:	f7ff fa91 	bl	8005326 <_PreparePacket>
 8005e04:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	647b      	str	r3, [r7, #68]	; 0x44
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	4b66      	ldr	r3, [pc, #408]	; (8005fac <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005e14:	691b      	ldr	r3, [r3, #16]
 8005e16:	1ad3      	subs	r3, r2, r3
 8005e18:	643b      	str	r3, [r7, #64]	; 0x40
 8005e1a:	e00b      	b.n	8005e34 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005e1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e1e:	b2da      	uxtb	r2, r3
 8005e20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e22:	1c59      	adds	r1, r3, #1
 8005e24:	6479      	str	r1, [r7, #68]	; 0x44
 8005e26:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e2a:	b2d2      	uxtb	r2, r2
 8005e2c:	701a      	strb	r2, [r3, #0]
 8005e2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e30:	09db      	lsrs	r3, r3, #7
 8005e32:	643b      	str	r3, [r7, #64]	; 0x40
 8005e34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e36:	2b7f      	cmp	r3, #127	; 0x7f
 8005e38:	d8f0      	bhi.n	8005e1c <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005e3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e3c:	1c5a      	adds	r2, r3, #1
 8005e3e:	647a      	str	r2, [r7, #68]	; 0x44
 8005e40:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005e42:	b2d2      	uxtb	r2, r2
 8005e44:	701a      	strb	r2, [r3, #0]
 8005e46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e48:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e54:	e00b      	b.n	8005e6e <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8005e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e58:	b2da      	uxtb	r2, r3
 8005e5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e5c:	1c59      	adds	r1, r3, #1
 8005e5e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005e60:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e64:	b2d2      	uxtb	r2, r2
 8005e66:	701a      	strb	r2, [r3, #0]
 8005e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e6a:	09db      	lsrs	r3, r3, #7
 8005e6c:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e70:	2b7f      	cmp	r3, #127	; 0x7f
 8005e72:	d8f0      	bhi.n	8005e56 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005e74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e76:	1c5a      	adds	r2, r3, #1
 8005e78:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005e7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e7c:	b2d2      	uxtb	r2, r2
 8005e7e:	701a      	strb	r2, [r3, #0]
 8005e80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e82:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	2220      	movs	r2, #32
 8005e8a:	4619      	mov	r1, r3
 8005e8c:	68f8      	ldr	r0, [r7, #12]
 8005e8e:	f7ff f9fd 	bl	800528c <_EncodeStr>
 8005e92:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005e94:	2209      	movs	r2, #9
 8005e96:	68f9      	ldr	r1, [r7, #12]
 8005e98:	6938      	ldr	r0, [r7, #16]
 8005e9a:	f7ff fb35 	bl	8005508 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	637b      	str	r3, [r7, #52]	; 0x34
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	4b40      	ldr	r3, [pc, #256]	; (8005fac <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005eac:	691b      	ldr	r3, [r3, #16]
 8005eae:	1ad3      	subs	r3, r2, r3
 8005eb0:	633b      	str	r3, [r7, #48]	; 0x30
 8005eb2:	e00b      	b.n	8005ecc <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb6:	b2da      	uxtb	r2, r3
 8005eb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eba:	1c59      	adds	r1, r3, #1
 8005ebc:	6379      	str	r1, [r7, #52]	; 0x34
 8005ebe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ec2:	b2d2      	uxtb	r2, r2
 8005ec4:	701a      	strb	r2, [r3, #0]
 8005ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ec8:	09db      	lsrs	r3, r3, #7
 8005eca:	633b      	str	r3, [r7, #48]	; 0x30
 8005ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ece:	2b7f      	cmp	r3, #127	; 0x7f
 8005ed0:	d8f0      	bhi.n	8005eb4 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005ed2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ed4:	1c5a      	adds	r2, r3, #1
 8005ed6:	637a      	str	r2, [r7, #52]	; 0x34
 8005ed8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005eda:	b2d2      	uxtb	r2, r2
 8005edc:	701a      	strb	r2, [r3, #0]
 8005ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ee0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	68db      	ldr	r3, [r3, #12]
 8005eea:	62bb      	str	r3, [r7, #40]	; 0x28
 8005eec:	e00b      	b.n	8005f06 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef0:	b2da      	uxtb	r2, r3
 8005ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ef4:	1c59      	adds	r1, r3, #1
 8005ef6:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005ef8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005efc:	b2d2      	uxtb	r2, r2
 8005efe:	701a      	strb	r2, [r3, #0]
 8005f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f02:	09db      	lsrs	r3, r3, #7
 8005f04:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f08:	2b7f      	cmp	r3, #127	; 0x7f
 8005f0a:	d8f0      	bhi.n	8005eee <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f0e:	1c5a      	adds	r2, r3, #1
 8005f10:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f14:	b2d2      	uxtb	r2, r2
 8005f16:	701a      	strb	r2, [r3, #0]
 8005f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f1a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	627b      	str	r3, [r7, #36]	; 0x24
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	691b      	ldr	r3, [r3, #16]
 8005f24:	623b      	str	r3, [r7, #32]
 8005f26:	e00b      	b.n	8005f40 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005f28:	6a3b      	ldr	r3, [r7, #32]
 8005f2a:	b2da      	uxtb	r2, r3
 8005f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2e:	1c59      	adds	r1, r3, #1
 8005f30:	6279      	str	r1, [r7, #36]	; 0x24
 8005f32:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f36:	b2d2      	uxtb	r2, r2
 8005f38:	701a      	strb	r2, [r3, #0]
 8005f3a:	6a3b      	ldr	r3, [r7, #32]
 8005f3c:	09db      	lsrs	r3, r3, #7
 8005f3e:	623b      	str	r3, [r7, #32]
 8005f40:	6a3b      	ldr	r3, [r7, #32]
 8005f42:	2b7f      	cmp	r3, #127	; 0x7f
 8005f44:	d8f0      	bhi.n	8005f28 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8005f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f48:	1c5a      	adds	r2, r3, #1
 8005f4a:	627a      	str	r2, [r7, #36]	; 0x24
 8005f4c:	6a3a      	ldr	r2, [r7, #32]
 8005f4e:	b2d2      	uxtb	r2, r2
 8005f50:	701a      	strb	r2, [r3, #0]
 8005f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f54:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	61fb      	str	r3, [r7, #28]
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	61bb      	str	r3, [r7, #24]
 8005f5e:	e00b      	b.n	8005f78 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8005f60:	69bb      	ldr	r3, [r7, #24]
 8005f62:	b2da      	uxtb	r2, r3
 8005f64:	69fb      	ldr	r3, [r7, #28]
 8005f66:	1c59      	adds	r1, r3, #1
 8005f68:	61f9      	str	r1, [r7, #28]
 8005f6a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f6e:	b2d2      	uxtb	r2, r2
 8005f70:	701a      	strb	r2, [r3, #0]
 8005f72:	69bb      	ldr	r3, [r7, #24]
 8005f74:	09db      	lsrs	r3, r3, #7
 8005f76:	61bb      	str	r3, [r7, #24]
 8005f78:	69bb      	ldr	r3, [r7, #24]
 8005f7a:	2b7f      	cmp	r3, #127	; 0x7f
 8005f7c:	d8f0      	bhi.n	8005f60 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8005f7e:	69fb      	ldr	r3, [r7, #28]
 8005f80:	1c5a      	adds	r2, r3, #1
 8005f82:	61fa      	str	r2, [r7, #28]
 8005f84:	69ba      	ldr	r2, [r7, #24]
 8005f86:	b2d2      	uxtb	r2, r2
 8005f88:	701a      	strb	r2, [r3, #0]
 8005f8a:	69fb      	ldr	r3, [r7, #28]
 8005f8c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8005f8e:	2215      	movs	r2, #21
 8005f90:	68f9      	ldr	r1, [r7, #12]
 8005f92:	6938      	ldr	r0, [r7, #16]
 8005f94:	f7ff fab8 	bl	8005508 <_SendPacket>
  RECORD_END();
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	f383 8811 	msr	BASEPRI, r3
}
 8005f9e:	bf00      	nop
 8005fa0:	3748      	adds	r7, #72	; 0x48
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
 8005fa6:	bf00      	nop
 8005fa8:	2001a6e8 	.word	0x2001a6e8
 8005fac:	2001a6b8 	.word	0x2001a6b8

08005fb0 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005fb4:	4b07      	ldr	r3, [pc, #28]	; (8005fd4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005fb6:	6a1b      	ldr	r3, [r3, #32]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d008      	beq.n	8005fce <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005fbc:	4b05      	ldr	r3, [pc, #20]	; (8005fd4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005fbe:	6a1b      	ldr	r3, [r3, #32]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d003      	beq.n	8005fce <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8005fc6:	4b03      	ldr	r3, [pc, #12]	; (8005fd4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005fc8:	6a1b      	ldr	r3, [r3, #32]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	4798      	blx	r3
  }
}
 8005fce:	bf00      	nop
 8005fd0:	bd80      	pop	{r7, pc}
 8005fd2:	bf00      	nop
 8005fd4:	2001a6b8 	.word	0x2001a6b8

08005fd8 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b086      	sub	sp, #24
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005fe0:	f3ef 8311 	mrs	r3, BASEPRI
 8005fe4:	f04f 0120 	mov.w	r1, #32
 8005fe8:	f381 8811 	msr	BASEPRI, r1
 8005fec:	617b      	str	r3, [r7, #20]
 8005fee:	480b      	ldr	r0, [pc, #44]	; (800601c <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8005ff0:	f7ff f999 	bl	8005326 <_PreparePacket>
 8005ff4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005ff6:	2280      	movs	r2, #128	; 0x80
 8005ff8:	6879      	ldr	r1, [r7, #4]
 8005ffa:	6938      	ldr	r0, [r7, #16]
 8005ffc:	f7ff f946 	bl	800528c <_EncodeStr>
 8006000:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006002:	220e      	movs	r2, #14
 8006004:	68f9      	ldr	r1, [r7, #12]
 8006006:	6938      	ldr	r0, [r7, #16]
 8006008:	f7ff fa7e 	bl	8005508 <_SendPacket>
  RECORD_END();
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	f383 8811 	msr	BASEPRI, r3
}
 8006012:	bf00      	nop
 8006014:	3718      	adds	r7, #24
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
 800601a:	bf00      	nop
 800601c:	2001a6e8 	.word	0x2001a6e8

08006020 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006020:	b590      	push	{r4, r7, lr}
 8006022:	b083      	sub	sp, #12
 8006024:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006026:	4b15      	ldr	r3, [pc, #84]	; (800607c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006028:	6a1b      	ldr	r3, [r3, #32]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d01a      	beq.n	8006064 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800602e:	4b13      	ldr	r3, [pc, #76]	; (800607c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006030:	6a1b      	ldr	r3, [r3, #32]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d015      	beq.n	8006064 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006038:	4b10      	ldr	r3, [pc, #64]	; (800607c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800603a:	6a1b      	ldr	r3, [r3, #32]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4798      	blx	r3
 8006040:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006044:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006046:	e9d7 0100 	ldrd	r0, r1, [r7]
 800604a:	f04f 0200 	mov.w	r2, #0
 800604e:	f04f 0300 	mov.w	r3, #0
 8006052:	000a      	movs	r2, r1
 8006054:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006056:	4613      	mov	r3, r2
 8006058:	461a      	mov	r2, r3
 800605a:	4621      	mov	r1, r4
 800605c:	200d      	movs	r0, #13
 800605e:	f7ff fbe7 	bl	8005830 <SEGGER_SYSVIEW_RecordU32x2>
 8006062:	e006      	b.n	8006072 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006064:	4b06      	ldr	r3, [pc, #24]	; (8006080 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4619      	mov	r1, r3
 800606a:	200c      	movs	r0, #12
 800606c:	f7ff fba4 	bl	80057b8 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006070:	bf00      	nop
 8006072:	bf00      	nop
 8006074:	370c      	adds	r7, #12
 8006076:	46bd      	mov	sp, r7
 8006078:	bd90      	pop	{r4, r7, pc}
 800607a:	bf00      	nop
 800607c:	2001a6b8 	.word	0x2001a6b8
 8006080:	e0001004 	.word	0xe0001004

08006084 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006084:	b580      	push	{r7, lr}
 8006086:	b086      	sub	sp, #24
 8006088:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800608a:	f3ef 8311 	mrs	r3, BASEPRI
 800608e:	f04f 0120 	mov.w	r1, #32
 8006092:	f381 8811 	msr	BASEPRI, r1
 8006096:	60fb      	str	r3, [r7, #12]
 8006098:	4819      	ldr	r0, [pc, #100]	; (8006100 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800609a:	f7ff f944 	bl	8005326 <_PreparePacket>
 800609e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80060a4:	4b17      	ldr	r3, [pc, #92]	; (8006104 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060ac:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	617b      	str	r3, [r7, #20]
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	613b      	str	r3, [r7, #16]
 80060b6:	e00b      	b.n	80060d0 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	b2da      	uxtb	r2, r3
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	1c59      	adds	r1, r3, #1
 80060c0:	6179      	str	r1, [r7, #20]
 80060c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060c6:	b2d2      	uxtb	r2, r2
 80060c8:	701a      	strb	r2, [r3, #0]
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	09db      	lsrs	r3, r3, #7
 80060ce:	613b      	str	r3, [r7, #16]
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	2b7f      	cmp	r3, #127	; 0x7f
 80060d4:	d8f0      	bhi.n	80060b8 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	1c5a      	adds	r2, r3, #1
 80060da:	617a      	str	r2, [r7, #20]
 80060dc:	693a      	ldr	r2, [r7, #16]
 80060de:	b2d2      	uxtb	r2, r2
 80060e0:	701a      	strb	r2, [r3, #0]
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80060e6:	2202      	movs	r2, #2
 80060e8:	6879      	ldr	r1, [r7, #4]
 80060ea:	68b8      	ldr	r0, [r7, #8]
 80060ec:	f7ff fa0c 	bl	8005508 <_SendPacket>
  RECORD_END();
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f383 8811 	msr	BASEPRI, r3
}
 80060f6:	bf00      	nop
 80060f8:	3718      	adds	r7, #24
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}
 80060fe:	bf00      	nop
 8006100:	2001a6e8 	.word	0x2001a6e8
 8006104:	e000ed04 	.word	0xe000ed04

08006108 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006108:	b580      	push	{r7, lr}
 800610a:	b082      	sub	sp, #8
 800610c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800610e:	f3ef 8311 	mrs	r3, BASEPRI
 8006112:	f04f 0120 	mov.w	r1, #32
 8006116:	f381 8811 	msr	BASEPRI, r1
 800611a:	607b      	str	r3, [r7, #4]
 800611c:	4807      	ldr	r0, [pc, #28]	; (800613c <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800611e:	f7ff f902 	bl	8005326 <_PreparePacket>
 8006122:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006124:	2203      	movs	r2, #3
 8006126:	6839      	ldr	r1, [r7, #0]
 8006128:	6838      	ldr	r0, [r7, #0]
 800612a:	f7ff f9ed 	bl	8005508 <_SendPacket>
  RECORD_END();
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f383 8811 	msr	BASEPRI, r3
}
 8006134:	bf00      	nop
 8006136:	3708      	adds	r7, #8
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}
 800613c:	2001a6e8 	.word	0x2001a6e8

08006140 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006140:	b580      	push	{r7, lr}
 8006142:	b082      	sub	sp, #8
 8006144:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006146:	f3ef 8311 	mrs	r3, BASEPRI
 800614a:	f04f 0120 	mov.w	r1, #32
 800614e:	f381 8811 	msr	BASEPRI, r1
 8006152:	607b      	str	r3, [r7, #4]
 8006154:	4807      	ldr	r0, [pc, #28]	; (8006174 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006156:	f7ff f8e6 	bl	8005326 <_PreparePacket>
 800615a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800615c:	2212      	movs	r2, #18
 800615e:	6839      	ldr	r1, [r7, #0]
 8006160:	6838      	ldr	r0, [r7, #0]
 8006162:	f7ff f9d1 	bl	8005508 <_SendPacket>
  RECORD_END();
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f383 8811 	msr	BASEPRI, r3
}
 800616c:	bf00      	nop
 800616e:	3708      	adds	r7, #8
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}
 8006174:	2001a6e8 	.word	0x2001a6e8

08006178 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006178:	b580      	push	{r7, lr}
 800617a:	b082      	sub	sp, #8
 800617c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800617e:	f3ef 8311 	mrs	r3, BASEPRI
 8006182:	f04f 0120 	mov.w	r1, #32
 8006186:	f381 8811 	msr	BASEPRI, r1
 800618a:	607b      	str	r3, [r7, #4]
 800618c:	4807      	ldr	r0, [pc, #28]	; (80061ac <SEGGER_SYSVIEW_OnIdle+0x34>)
 800618e:	f7ff f8ca 	bl	8005326 <_PreparePacket>
 8006192:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006194:	2211      	movs	r2, #17
 8006196:	6839      	ldr	r1, [r7, #0]
 8006198:	6838      	ldr	r0, [r7, #0]
 800619a:	f7ff f9b5 	bl	8005508 <_SendPacket>
  RECORD_END();
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f383 8811 	msr	BASEPRI, r3
}
 80061a4:	bf00      	nop
 80061a6:	3708      	adds	r7, #8
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}
 80061ac:	2001a6e8 	.word	0x2001a6e8

080061b0 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b088      	sub	sp, #32
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80061b8:	f3ef 8311 	mrs	r3, BASEPRI
 80061bc:	f04f 0120 	mov.w	r1, #32
 80061c0:	f381 8811 	msr	BASEPRI, r1
 80061c4:	617b      	str	r3, [r7, #20]
 80061c6:	4819      	ldr	r0, [pc, #100]	; (800622c <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80061c8:	f7ff f8ad 	bl	8005326 <_PreparePacket>
 80061cc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80061d2:	4b17      	ldr	r3, [pc, #92]	; (8006230 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80061d4:	691b      	ldr	r3, [r3, #16]
 80061d6:	687a      	ldr	r2, [r7, #4]
 80061d8:	1ad3      	subs	r3, r2, r3
 80061da:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	61fb      	str	r3, [r7, #28]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	61bb      	str	r3, [r7, #24]
 80061e4:	e00b      	b.n	80061fe <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	b2da      	uxtb	r2, r3
 80061ea:	69fb      	ldr	r3, [r7, #28]
 80061ec:	1c59      	adds	r1, r3, #1
 80061ee:	61f9      	str	r1, [r7, #28]
 80061f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061f4:	b2d2      	uxtb	r2, r2
 80061f6:	701a      	strb	r2, [r3, #0]
 80061f8:	69bb      	ldr	r3, [r7, #24]
 80061fa:	09db      	lsrs	r3, r3, #7
 80061fc:	61bb      	str	r3, [r7, #24]
 80061fe:	69bb      	ldr	r3, [r7, #24]
 8006200:	2b7f      	cmp	r3, #127	; 0x7f
 8006202:	d8f0      	bhi.n	80061e6 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006204:	69fb      	ldr	r3, [r7, #28]
 8006206:	1c5a      	adds	r2, r3, #1
 8006208:	61fa      	str	r2, [r7, #28]
 800620a:	69ba      	ldr	r2, [r7, #24]
 800620c:	b2d2      	uxtb	r2, r2
 800620e:	701a      	strb	r2, [r3, #0]
 8006210:	69fb      	ldr	r3, [r7, #28]
 8006212:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006214:	2208      	movs	r2, #8
 8006216:	68f9      	ldr	r1, [r7, #12]
 8006218:	6938      	ldr	r0, [r7, #16]
 800621a:	f7ff f975 	bl	8005508 <_SendPacket>
  RECORD_END();
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	f383 8811 	msr	BASEPRI, r3
}
 8006224:	bf00      	nop
 8006226:	3720      	adds	r7, #32
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}
 800622c:	2001a6e8 	.word	0x2001a6e8
 8006230:	2001a6b8 	.word	0x2001a6b8

08006234 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006234:	b580      	push	{r7, lr}
 8006236:	b088      	sub	sp, #32
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800623c:	f3ef 8311 	mrs	r3, BASEPRI
 8006240:	f04f 0120 	mov.w	r1, #32
 8006244:	f381 8811 	msr	BASEPRI, r1
 8006248:	617b      	str	r3, [r7, #20]
 800624a:	4819      	ldr	r0, [pc, #100]	; (80062b0 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800624c:	f7ff f86b 	bl	8005326 <_PreparePacket>
 8006250:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006256:	4b17      	ldr	r3, [pc, #92]	; (80062b4 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006258:	691b      	ldr	r3, [r3, #16]
 800625a:	687a      	ldr	r2, [r7, #4]
 800625c:	1ad3      	subs	r3, r2, r3
 800625e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	61fb      	str	r3, [r7, #28]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	61bb      	str	r3, [r7, #24]
 8006268:	e00b      	b.n	8006282 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800626a:	69bb      	ldr	r3, [r7, #24]
 800626c:	b2da      	uxtb	r2, r3
 800626e:	69fb      	ldr	r3, [r7, #28]
 8006270:	1c59      	adds	r1, r3, #1
 8006272:	61f9      	str	r1, [r7, #28]
 8006274:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006278:	b2d2      	uxtb	r2, r2
 800627a:	701a      	strb	r2, [r3, #0]
 800627c:	69bb      	ldr	r3, [r7, #24]
 800627e:	09db      	lsrs	r3, r3, #7
 8006280:	61bb      	str	r3, [r7, #24]
 8006282:	69bb      	ldr	r3, [r7, #24]
 8006284:	2b7f      	cmp	r3, #127	; 0x7f
 8006286:	d8f0      	bhi.n	800626a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006288:	69fb      	ldr	r3, [r7, #28]
 800628a:	1c5a      	adds	r2, r3, #1
 800628c:	61fa      	str	r2, [r7, #28]
 800628e:	69ba      	ldr	r2, [r7, #24]
 8006290:	b2d2      	uxtb	r2, r2
 8006292:	701a      	strb	r2, [r3, #0]
 8006294:	69fb      	ldr	r3, [r7, #28]
 8006296:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006298:	2204      	movs	r2, #4
 800629a:	68f9      	ldr	r1, [r7, #12]
 800629c:	6938      	ldr	r0, [r7, #16]
 800629e:	f7ff f933 	bl	8005508 <_SendPacket>
  RECORD_END();
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	f383 8811 	msr	BASEPRI, r3
}
 80062a8:	bf00      	nop
 80062aa:	3720      	adds	r7, #32
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}
 80062b0:	2001a6e8 	.word	0x2001a6e8
 80062b4:	2001a6b8 	.word	0x2001a6b8

080062b8 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b088      	sub	sp, #32
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80062c0:	f3ef 8311 	mrs	r3, BASEPRI
 80062c4:	f04f 0120 	mov.w	r1, #32
 80062c8:	f381 8811 	msr	BASEPRI, r1
 80062cc:	617b      	str	r3, [r7, #20]
 80062ce:	4819      	ldr	r0, [pc, #100]	; (8006334 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80062d0:	f7ff f829 	bl	8005326 <_PreparePacket>
 80062d4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80062da:	4b17      	ldr	r3, [pc, #92]	; (8006338 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80062dc:	691b      	ldr	r3, [r3, #16]
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	1ad3      	subs	r3, r2, r3
 80062e2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	61fb      	str	r3, [r7, #28]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	61bb      	str	r3, [r7, #24]
 80062ec:	e00b      	b.n	8006306 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80062ee:	69bb      	ldr	r3, [r7, #24]
 80062f0:	b2da      	uxtb	r2, r3
 80062f2:	69fb      	ldr	r3, [r7, #28]
 80062f4:	1c59      	adds	r1, r3, #1
 80062f6:	61f9      	str	r1, [r7, #28]
 80062f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062fc:	b2d2      	uxtb	r2, r2
 80062fe:	701a      	strb	r2, [r3, #0]
 8006300:	69bb      	ldr	r3, [r7, #24]
 8006302:	09db      	lsrs	r3, r3, #7
 8006304:	61bb      	str	r3, [r7, #24]
 8006306:	69bb      	ldr	r3, [r7, #24]
 8006308:	2b7f      	cmp	r3, #127	; 0x7f
 800630a:	d8f0      	bhi.n	80062ee <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	1c5a      	adds	r2, r3, #1
 8006310:	61fa      	str	r2, [r7, #28]
 8006312:	69ba      	ldr	r2, [r7, #24]
 8006314:	b2d2      	uxtb	r2, r2
 8006316:	701a      	strb	r2, [r3, #0]
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800631c:	2206      	movs	r2, #6
 800631e:	68f9      	ldr	r1, [r7, #12]
 8006320:	6938      	ldr	r0, [r7, #16]
 8006322:	f7ff f8f1 	bl	8005508 <_SendPacket>
  RECORD_END();
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	f383 8811 	msr	BASEPRI, r3
}
 800632c:	bf00      	nop
 800632e:	3720      	adds	r7, #32
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}
 8006334:	2001a6e8 	.word	0x2001a6e8
 8006338:	2001a6b8 	.word	0x2001a6b8

0800633c <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 800633c:	b580      	push	{r7, lr}
 800633e:	b08a      	sub	sp, #40	; 0x28
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006346:	f3ef 8311 	mrs	r3, BASEPRI
 800634a:	f04f 0120 	mov.w	r1, #32
 800634e:	f381 8811 	msr	BASEPRI, r1
 8006352:	617b      	str	r3, [r7, #20]
 8006354:	4827      	ldr	r0, [pc, #156]	; (80063f4 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8006356:	f7fe ffe6 	bl	8005326 <_PreparePacket>
 800635a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006360:	4b25      	ldr	r3, [pc, #148]	; (80063f8 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8006362:	691b      	ldr	r3, [r3, #16]
 8006364:	687a      	ldr	r2, [r7, #4]
 8006366:	1ad3      	subs	r3, r2, r3
 8006368:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	627b      	str	r3, [r7, #36]	; 0x24
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	623b      	str	r3, [r7, #32]
 8006372:	e00b      	b.n	800638c <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006374:	6a3b      	ldr	r3, [r7, #32]
 8006376:	b2da      	uxtb	r2, r3
 8006378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800637a:	1c59      	adds	r1, r3, #1
 800637c:	6279      	str	r1, [r7, #36]	; 0x24
 800637e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006382:	b2d2      	uxtb	r2, r2
 8006384:	701a      	strb	r2, [r3, #0]
 8006386:	6a3b      	ldr	r3, [r7, #32]
 8006388:	09db      	lsrs	r3, r3, #7
 800638a:	623b      	str	r3, [r7, #32]
 800638c:	6a3b      	ldr	r3, [r7, #32]
 800638e:	2b7f      	cmp	r3, #127	; 0x7f
 8006390:	d8f0      	bhi.n	8006374 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8006392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006394:	1c5a      	adds	r2, r3, #1
 8006396:	627a      	str	r2, [r7, #36]	; 0x24
 8006398:	6a3a      	ldr	r2, [r7, #32]
 800639a:	b2d2      	uxtb	r2, r2
 800639c:	701a      	strb	r2, [r3, #0]
 800639e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	61fb      	str	r3, [r7, #28]
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	61bb      	str	r3, [r7, #24]
 80063aa:	e00b      	b.n	80063c4 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80063ac:	69bb      	ldr	r3, [r7, #24]
 80063ae:	b2da      	uxtb	r2, r3
 80063b0:	69fb      	ldr	r3, [r7, #28]
 80063b2:	1c59      	adds	r1, r3, #1
 80063b4:	61f9      	str	r1, [r7, #28]
 80063b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063ba:	b2d2      	uxtb	r2, r2
 80063bc:	701a      	strb	r2, [r3, #0]
 80063be:	69bb      	ldr	r3, [r7, #24]
 80063c0:	09db      	lsrs	r3, r3, #7
 80063c2:	61bb      	str	r3, [r7, #24]
 80063c4:	69bb      	ldr	r3, [r7, #24]
 80063c6:	2b7f      	cmp	r3, #127	; 0x7f
 80063c8:	d8f0      	bhi.n	80063ac <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 80063ca:	69fb      	ldr	r3, [r7, #28]
 80063cc:	1c5a      	adds	r2, r3, #1
 80063ce:	61fa      	str	r2, [r7, #28]
 80063d0:	69ba      	ldr	r2, [r7, #24]
 80063d2:	b2d2      	uxtb	r2, r2
 80063d4:	701a      	strb	r2, [r3, #0]
 80063d6:	69fb      	ldr	r3, [r7, #28]
 80063d8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80063da:	2207      	movs	r2, #7
 80063dc:	68f9      	ldr	r1, [r7, #12]
 80063de:	6938      	ldr	r0, [r7, #16]
 80063e0:	f7ff f892 	bl	8005508 <_SendPacket>
  RECORD_END();
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	f383 8811 	msr	BASEPRI, r3
}
 80063ea:	bf00      	nop
 80063ec:	3728      	adds	r7, #40	; 0x28
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}
 80063f2:	bf00      	nop
 80063f4:	2001a6e8 	.word	0x2001a6e8
 80063f8:	2001a6b8 	.word	0x2001a6b8

080063fc <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80063fc:	b480      	push	{r7}
 80063fe:	b083      	sub	sp, #12
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006404:	4b04      	ldr	r3, [pc, #16]	; (8006418 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006406:	691b      	ldr	r3, [r3, #16]
 8006408:	687a      	ldr	r2, [r7, #4]
 800640a:	1ad3      	subs	r3, r2, r3
}
 800640c:	4618      	mov	r0, r3
 800640e:	370c      	adds	r7, #12
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr
 8006418:	2001a6b8 	.word	0x2001a6b8

0800641c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800641c:	b580      	push	{r7, lr}
 800641e:	b08c      	sub	sp, #48	; 0x30
 8006420:	af00      	add	r7, sp, #0
 8006422:	4603      	mov	r3, r0
 8006424:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006426:	4b3b      	ldr	r3, [pc, #236]	; (8006514 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d06d      	beq.n	800650a <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800642e:	4b39      	ldr	r3, [pc, #228]	; (8006514 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006434:	2300      	movs	r3, #0
 8006436:	62bb      	str	r3, [r7, #40]	; 0x28
 8006438:	e008      	b.n	800644c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800643a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800643c:	691b      	ldr	r3, [r3, #16]
 800643e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8006440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006442:	2b00      	cmp	r3, #0
 8006444:	d007      	beq.n	8006456 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006448:	3301      	adds	r3, #1
 800644a:	62bb      	str	r3, [r7, #40]	; 0x28
 800644c:	79fb      	ldrb	r3, [r7, #7]
 800644e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006450:	429a      	cmp	r2, r3
 8006452:	d3f2      	bcc.n	800643a <SEGGER_SYSVIEW_SendModule+0x1e>
 8006454:	e000      	b.n	8006458 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006456:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800645a:	2b00      	cmp	r3, #0
 800645c:	d055      	beq.n	800650a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800645e:	f3ef 8311 	mrs	r3, BASEPRI
 8006462:	f04f 0120 	mov.w	r1, #32
 8006466:	f381 8811 	msr	BASEPRI, r1
 800646a:	617b      	str	r3, [r7, #20]
 800646c:	482a      	ldr	r0, [pc, #168]	; (8006518 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800646e:	f7fe ff5a 	bl	8005326 <_PreparePacket>
 8006472:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	627b      	str	r3, [r7, #36]	; 0x24
 800647c:	79fb      	ldrb	r3, [r7, #7]
 800647e:	623b      	str	r3, [r7, #32]
 8006480:	e00b      	b.n	800649a <SEGGER_SYSVIEW_SendModule+0x7e>
 8006482:	6a3b      	ldr	r3, [r7, #32]
 8006484:	b2da      	uxtb	r2, r3
 8006486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006488:	1c59      	adds	r1, r3, #1
 800648a:	6279      	str	r1, [r7, #36]	; 0x24
 800648c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006490:	b2d2      	uxtb	r2, r2
 8006492:	701a      	strb	r2, [r3, #0]
 8006494:	6a3b      	ldr	r3, [r7, #32]
 8006496:	09db      	lsrs	r3, r3, #7
 8006498:	623b      	str	r3, [r7, #32]
 800649a:	6a3b      	ldr	r3, [r7, #32]
 800649c:	2b7f      	cmp	r3, #127	; 0x7f
 800649e:	d8f0      	bhi.n	8006482 <SEGGER_SYSVIEW_SendModule+0x66>
 80064a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a2:	1c5a      	adds	r2, r3, #1
 80064a4:	627a      	str	r2, [r7, #36]	; 0x24
 80064a6:	6a3a      	ldr	r2, [r7, #32]
 80064a8:	b2d2      	uxtb	r2, r2
 80064aa:	701a      	strb	r2, [r3, #0]
 80064ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ae:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	61fb      	str	r3, [r7, #28]
 80064b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	61bb      	str	r3, [r7, #24]
 80064ba:	e00b      	b.n	80064d4 <SEGGER_SYSVIEW_SendModule+0xb8>
 80064bc:	69bb      	ldr	r3, [r7, #24]
 80064be:	b2da      	uxtb	r2, r3
 80064c0:	69fb      	ldr	r3, [r7, #28]
 80064c2:	1c59      	adds	r1, r3, #1
 80064c4:	61f9      	str	r1, [r7, #28]
 80064c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064ca:	b2d2      	uxtb	r2, r2
 80064cc:	701a      	strb	r2, [r3, #0]
 80064ce:	69bb      	ldr	r3, [r7, #24]
 80064d0:	09db      	lsrs	r3, r3, #7
 80064d2:	61bb      	str	r3, [r7, #24]
 80064d4:	69bb      	ldr	r3, [r7, #24]
 80064d6:	2b7f      	cmp	r3, #127	; 0x7f
 80064d8:	d8f0      	bhi.n	80064bc <SEGGER_SYSVIEW_SendModule+0xa0>
 80064da:	69fb      	ldr	r3, [r7, #28]
 80064dc:	1c5a      	adds	r2, r3, #1
 80064de:	61fa      	str	r2, [r7, #28]
 80064e0:	69ba      	ldr	r2, [r7, #24]
 80064e2:	b2d2      	uxtb	r2, r2
 80064e4:	701a      	strb	r2, [r3, #0]
 80064e6:	69fb      	ldr	r3, [r7, #28]
 80064e8:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80064ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	2280      	movs	r2, #128	; 0x80
 80064f0:	4619      	mov	r1, r3
 80064f2:	68f8      	ldr	r0, [r7, #12]
 80064f4:	f7fe feca 	bl	800528c <_EncodeStr>
 80064f8:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80064fa:	2216      	movs	r2, #22
 80064fc:	68f9      	ldr	r1, [r7, #12]
 80064fe:	6938      	ldr	r0, [r7, #16]
 8006500:	f7ff f802 	bl	8005508 <_SendPacket>
      RECORD_END();
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800650a:	bf00      	nop
 800650c:	3730      	adds	r7, #48	; 0x30
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}
 8006512:	bf00      	nop
 8006514:	2001a6e0 	.word	0x2001a6e0
 8006518:	2001a6e8 	.word	0x2001a6e8

0800651c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800651c:	b580      	push	{r7, lr}
 800651e:	b082      	sub	sp, #8
 8006520:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006522:	4b0c      	ldr	r3, [pc, #48]	; (8006554 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d00f      	beq.n	800654a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800652a:	4b0a      	ldr	r3, [pc, #40]	; (8006554 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	68db      	ldr	r3, [r3, #12]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d002      	beq.n	800653e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	68db      	ldr	r3, [r3, #12]
 800653c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	691b      	ldr	r3, [r3, #16]
 8006542:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d1f2      	bne.n	8006530 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800654a:	bf00      	nop
 800654c:	3708      	adds	r7, #8
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}
 8006552:	bf00      	nop
 8006554:	2001a6e0 	.word	0x2001a6e0

08006558 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006558:	b580      	push	{r7, lr}
 800655a:	b086      	sub	sp, #24
 800655c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800655e:	f3ef 8311 	mrs	r3, BASEPRI
 8006562:	f04f 0120 	mov.w	r1, #32
 8006566:	f381 8811 	msr	BASEPRI, r1
 800656a:	60fb      	str	r3, [r7, #12]
 800656c:	4817      	ldr	r0, [pc, #92]	; (80065cc <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800656e:	f7fe feda 	bl	8005326 <_PreparePacket>
 8006572:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	617b      	str	r3, [r7, #20]
 800657c:	4b14      	ldr	r3, [pc, #80]	; (80065d0 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800657e:	781b      	ldrb	r3, [r3, #0]
 8006580:	613b      	str	r3, [r7, #16]
 8006582:	e00b      	b.n	800659c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	b2da      	uxtb	r2, r3
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	1c59      	adds	r1, r3, #1
 800658c:	6179      	str	r1, [r7, #20]
 800658e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006592:	b2d2      	uxtb	r2, r2
 8006594:	701a      	strb	r2, [r3, #0]
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	09db      	lsrs	r3, r3, #7
 800659a:	613b      	str	r3, [r7, #16]
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	2b7f      	cmp	r3, #127	; 0x7f
 80065a0:	d8f0      	bhi.n	8006584 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	1c5a      	adds	r2, r3, #1
 80065a6:	617a      	str	r2, [r7, #20]
 80065a8:	693a      	ldr	r2, [r7, #16]
 80065aa:	b2d2      	uxtb	r2, r2
 80065ac:	701a      	strb	r2, [r3, #0]
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80065b2:	221b      	movs	r2, #27
 80065b4:	6879      	ldr	r1, [r7, #4]
 80065b6:	68b8      	ldr	r0, [r7, #8]
 80065b8:	f7fe ffa6 	bl	8005508 <_SendPacket>
  RECORD_END();
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f383 8811 	msr	BASEPRI, r3
}
 80065c2:	bf00      	nop
 80065c4:	3718      	adds	r7, #24
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}
 80065ca:	bf00      	nop
 80065cc:	2001a6e8 	.word	0x2001a6e8
 80065d0:	2001a6e4 	.word	0x2001a6e4

080065d4 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b08a      	sub	sp, #40	; 0x28
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80065dc:	f3ef 8311 	mrs	r3, BASEPRI
 80065e0:	f04f 0120 	mov.w	r1, #32
 80065e4:	f381 8811 	msr	BASEPRI, r1
 80065e8:	617b      	str	r3, [r7, #20]
 80065ea:	4827      	ldr	r0, [pc, #156]	; (8006688 <SEGGER_SYSVIEW_Warn+0xb4>)
 80065ec:	f7fe fe9b 	bl	8005326 <_PreparePacket>
 80065f0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80065f2:	2280      	movs	r2, #128	; 0x80
 80065f4:	6879      	ldr	r1, [r7, #4]
 80065f6:	6938      	ldr	r0, [r7, #16]
 80065f8:	f7fe fe48 	bl	800528c <_EncodeStr>
 80065fc:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	627b      	str	r3, [r7, #36]	; 0x24
 8006602:	2301      	movs	r3, #1
 8006604:	623b      	str	r3, [r7, #32]
 8006606:	e00b      	b.n	8006620 <SEGGER_SYSVIEW_Warn+0x4c>
 8006608:	6a3b      	ldr	r3, [r7, #32]
 800660a:	b2da      	uxtb	r2, r3
 800660c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660e:	1c59      	adds	r1, r3, #1
 8006610:	6279      	str	r1, [r7, #36]	; 0x24
 8006612:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006616:	b2d2      	uxtb	r2, r2
 8006618:	701a      	strb	r2, [r3, #0]
 800661a:	6a3b      	ldr	r3, [r7, #32]
 800661c:	09db      	lsrs	r3, r3, #7
 800661e:	623b      	str	r3, [r7, #32]
 8006620:	6a3b      	ldr	r3, [r7, #32]
 8006622:	2b7f      	cmp	r3, #127	; 0x7f
 8006624:	d8f0      	bhi.n	8006608 <SEGGER_SYSVIEW_Warn+0x34>
 8006626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006628:	1c5a      	adds	r2, r3, #1
 800662a:	627a      	str	r2, [r7, #36]	; 0x24
 800662c:	6a3a      	ldr	r2, [r7, #32]
 800662e:	b2d2      	uxtb	r2, r2
 8006630:	701a      	strb	r2, [r3, #0]
 8006632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006634:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	61fb      	str	r3, [r7, #28]
 800663a:	2300      	movs	r3, #0
 800663c:	61bb      	str	r3, [r7, #24]
 800663e:	e00b      	b.n	8006658 <SEGGER_SYSVIEW_Warn+0x84>
 8006640:	69bb      	ldr	r3, [r7, #24]
 8006642:	b2da      	uxtb	r2, r3
 8006644:	69fb      	ldr	r3, [r7, #28]
 8006646:	1c59      	adds	r1, r3, #1
 8006648:	61f9      	str	r1, [r7, #28]
 800664a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800664e:	b2d2      	uxtb	r2, r2
 8006650:	701a      	strb	r2, [r3, #0]
 8006652:	69bb      	ldr	r3, [r7, #24]
 8006654:	09db      	lsrs	r3, r3, #7
 8006656:	61bb      	str	r3, [r7, #24]
 8006658:	69bb      	ldr	r3, [r7, #24]
 800665a:	2b7f      	cmp	r3, #127	; 0x7f
 800665c:	d8f0      	bhi.n	8006640 <SEGGER_SYSVIEW_Warn+0x6c>
 800665e:	69fb      	ldr	r3, [r7, #28]
 8006660:	1c5a      	adds	r2, r3, #1
 8006662:	61fa      	str	r2, [r7, #28]
 8006664:	69ba      	ldr	r2, [r7, #24]
 8006666:	b2d2      	uxtb	r2, r2
 8006668:	701a      	strb	r2, [r3, #0]
 800666a:	69fb      	ldr	r3, [r7, #28]
 800666c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800666e:	221a      	movs	r2, #26
 8006670:	68f9      	ldr	r1, [r7, #12]
 8006672:	6938      	ldr	r0, [r7, #16]
 8006674:	f7fe ff48 	bl	8005508 <_SendPacket>
  RECORD_END();
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	f383 8811 	msr	BASEPRI, r3
}
 800667e:	bf00      	nop
 8006680:	3728      	adds	r7, #40	; 0x28
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
 8006686:	bf00      	nop
 8006688:	2001a6e8 	.word	0x2001a6e8

0800668c <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 800668c:	b580      	push	{r7, lr}
 800668e:	b084      	sub	sp, #16
 8006690:	af00      	add	r7, sp, #0
 8006692:	60f8      	str	r0, [r7, #12]
 8006694:	60b9      	str	r1, [r7, #8]
 8006696:	607a      	str	r2, [r7, #4]
 8006698:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 800669a:	683a      	ldr	r2, [r7, #0]
 800669c:	6879      	ldr	r1, [r7, #4]
 800669e:	2000      	movs	r0, #0
 80066a0:	f7fe fcda 	bl	8005058 <SEGGER_RTT_Write>
  return len;
 80066a4:	683b      	ldr	r3, [r7, #0]
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3710      	adds	r7, #16
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}
	...

080066b0 <__libc_init_array>:
 80066b0:	b570      	push	{r4, r5, r6, lr}
 80066b2:	4d0d      	ldr	r5, [pc, #52]	; (80066e8 <__libc_init_array+0x38>)
 80066b4:	4c0d      	ldr	r4, [pc, #52]	; (80066ec <__libc_init_array+0x3c>)
 80066b6:	1b64      	subs	r4, r4, r5
 80066b8:	10a4      	asrs	r4, r4, #2
 80066ba:	2600      	movs	r6, #0
 80066bc:	42a6      	cmp	r6, r4
 80066be:	d109      	bne.n	80066d4 <__libc_init_array+0x24>
 80066c0:	4d0b      	ldr	r5, [pc, #44]	; (80066f0 <__libc_init_array+0x40>)
 80066c2:	4c0c      	ldr	r4, [pc, #48]	; (80066f4 <__libc_init_array+0x44>)
 80066c4:	f000 fcfe 	bl	80070c4 <_init>
 80066c8:	1b64      	subs	r4, r4, r5
 80066ca:	10a4      	asrs	r4, r4, #2
 80066cc:	2600      	movs	r6, #0
 80066ce:	42a6      	cmp	r6, r4
 80066d0:	d105      	bne.n	80066de <__libc_init_array+0x2e>
 80066d2:	bd70      	pop	{r4, r5, r6, pc}
 80066d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80066d8:	4798      	blx	r3
 80066da:	3601      	adds	r6, #1
 80066dc:	e7ee      	b.n	80066bc <__libc_init_array+0xc>
 80066de:	f855 3b04 	ldr.w	r3, [r5], #4
 80066e2:	4798      	blx	r3
 80066e4:	3601      	adds	r6, #1
 80066e6:	e7f2      	b.n	80066ce <__libc_init_array+0x1e>
 80066e8:	08007298 	.word	0x08007298
 80066ec:	08007298 	.word	0x08007298
 80066f0:	08007298 	.word	0x08007298
 80066f4:	0800729c 	.word	0x0800729c

080066f8 <memcmp>:
 80066f8:	b530      	push	{r4, r5, lr}
 80066fa:	3901      	subs	r1, #1
 80066fc:	2400      	movs	r4, #0
 80066fe:	42a2      	cmp	r2, r4
 8006700:	d101      	bne.n	8006706 <memcmp+0xe>
 8006702:	2000      	movs	r0, #0
 8006704:	e005      	b.n	8006712 <memcmp+0x1a>
 8006706:	5d03      	ldrb	r3, [r0, r4]
 8006708:	3401      	adds	r4, #1
 800670a:	5d0d      	ldrb	r5, [r1, r4]
 800670c:	42ab      	cmp	r3, r5
 800670e:	d0f6      	beq.n	80066fe <memcmp+0x6>
 8006710:	1b58      	subs	r0, r3, r5
 8006712:	bd30      	pop	{r4, r5, pc}

08006714 <memcpy>:
 8006714:	440a      	add	r2, r1
 8006716:	4291      	cmp	r1, r2
 8006718:	f100 33ff 	add.w	r3, r0, #4294967295
 800671c:	d100      	bne.n	8006720 <memcpy+0xc>
 800671e:	4770      	bx	lr
 8006720:	b510      	push	{r4, lr}
 8006722:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006726:	f803 4f01 	strb.w	r4, [r3, #1]!
 800672a:	4291      	cmp	r1, r2
 800672c:	d1f9      	bne.n	8006722 <memcpy+0xe>
 800672e:	bd10      	pop	{r4, pc}

08006730 <memset>:
 8006730:	4402      	add	r2, r0
 8006732:	4603      	mov	r3, r0
 8006734:	4293      	cmp	r3, r2
 8006736:	d100      	bne.n	800673a <memset+0xa>
 8006738:	4770      	bx	lr
 800673a:	f803 1b01 	strb.w	r1, [r3], #1
 800673e:	e7f9      	b.n	8006734 <memset+0x4>

08006740 <_puts_r>:
 8006740:	b570      	push	{r4, r5, r6, lr}
 8006742:	460e      	mov	r6, r1
 8006744:	4605      	mov	r5, r0
 8006746:	b118      	cbz	r0, 8006750 <_puts_r+0x10>
 8006748:	6983      	ldr	r3, [r0, #24]
 800674a:	b90b      	cbnz	r3, 8006750 <_puts_r+0x10>
 800674c:	f000 fa48 	bl	8006be0 <__sinit>
 8006750:	69ab      	ldr	r3, [r5, #24]
 8006752:	68ac      	ldr	r4, [r5, #8]
 8006754:	b913      	cbnz	r3, 800675c <_puts_r+0x1c>
 8006756:	4628      	mov	r0, r5
 8006758:	f000 fa42 	bl	8006be0 <__sinit>
 800675c:	4b2c      	ldr	r3, [pc, #176]	; (8006810 <_puts_r+0xd0>)
 800675e:	429c      	cmp	r4, r3
 8006760:	d120      	bne.n	80067a4 <_puts_r+0x64>
 8006762:	686c      	ldr	r4, [r5, #4]
 8006764:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006766:	07db      	lsls	r3, r3, #31
 8006768:	d405      	bmi.n	8006776 <_puts_r+0x36>
 800676a:	89a3      	ldrh	r3, [r4, #12]
 800676c:	0598      	lsls	r0, r3, #22
 800676e:	d402      	bmi.n	8006776 <_puts_r+0x36>
 8006770:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006772:	f000 fad3 	bl	8006d1c <__retarget_lock_acquire_recursive>
 8006776:	89a3      	ldrh	r3, [r4, #12]
 8006778:	0719      	lsls	r1, r3, #28
 800677a:	d51d      	bpl.n	80067b8 <_puts_r+0x78>
 800677c:	6923      	ldr	r3, [r4, #16]
 800677e:	b1db      	cbz	r3, 80067b8 <_puts_r+0x78>
 8006780:	3e01      	subs	r6, #1
 8006782:	68a3      	ldr	r3, [r4, #8]
 8006784:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006788:	3b01      	subs	r3, #1
 800678a:	60a3      	str	r3, [r4, #8]
 800678c:	bb39      	cbnz	r1, 80067de <_puts_r+0x9e>
 800678e:	2b00      	cmp	r3, #0
 8006790:	da38      	bge.n	8006804 <_puts_r+0xc4>
 8006792:	4622      	mov	r2, r4
 8006794:	210a      	movs	r1, #10
 8006796:	4628      	mov	r0, r5
 8006798:	f000 f848 	bl	800682c <__swbuf_r>
 800679c:	3001      	adds	r0, #1
 800679e:	d011      	beq.n	80067c4 <_puts_r+0x84>
 80067a0:	250a      	movs	r5, #10
 80067a2:	e011      	b.n	80067c8 <_puts_r+0x88>
 80067a4:	4b1b      	ldr	r3, [pc, #108]	; (8006814 <_puts_r+0xd4>)
 80067a6:	429c      	cmp	r4, r3
 80067a8:	d101      	bne.n	80067ae <_puts_r+0x6e>
 80067aa:	68ac      	ldr	r4, [r5, #8]
 80067ac:	e7da      	b.n	8006764 <_puts_r+0x24>
 80067ae:	4b1a      	ldr	r3, [pc, #104]	; (8006818 <_puts_r+0xd8>)
 80067b0:	429c      	cmp	r4, r3
 80067b2:	bf08      	it	eq
 80067b4:	68ec      	ldreq	r4, [r5, #12]
 80067b6:	e7d5      	b.n	8006764 <_puts_r+0x24>
 80067b8:	4621      	mov	r1, r4
 80067ba:	4628      	mov	r0, r5
 80067bc:	f000 f888 	bl	80068d0 <__swsetup_r>
 80067c0:	2800      	cmp	r0, #0
 80067c2:	d0dd      	beq.n	8006780 <_puts_r+0x40>
 80067c4:	f04f 35ff 	mov.w	r5, #4294967295
 80067c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80067ca:	07da      	lsls	r2, r3, #31
 80067cc:	d405      	bmi.n	80067da <_puts_r+0x9a>
 80067ce:	89a3      	ldrh	r3, [r4, #12]
 80067d0:	059b      	lsls	r3, r3, #22
 80067d2:	d402      	bmi.n	80067da <_puts_r+0x9a>
 80067d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067d6:	f000 faa2 	bl	8006d1e <__retarget_lock_release_recursive>
 80067da:	4628      	mov	r0, r5
 80067dc:	bd70      	pop	{r4, r5, r6, pc}
 80067de:	2b00      	cmp	r3, #0
 80067e0:	da04      	bge.n	80067ec <_puts_r+0xac>
 80067e2:	69a2      	ldr	r2, [r4, #24]
 80067e4:	429a      	cmp	r2, r3
 80067e6:	dc06      	bgt.n	80067f6 <_puts_r+0xb6>
 80067e8:	290a      	cmp	r1, #10
 80067ea:	d004      	beq.n	80067f6 <_puts_r+0xb6>
 80067ec:	6823      	ldr	r3, [r4, #0]
 80067ee:	1c5a      	adds	r2, r3, #1
 80067f0:	6022      	str	r2, [r4, #0]
 80067f2:	7019      	strb	r1, [r3, #0]
 80067f4:	e7c5      	b.n	8006782 <_puts_r+0x42>
 80067f6:	4622      	mov	r2, r4
 80067f8:	4628      	mov	r0, r5
 80067fa:	f000 f817 	bl	800682c <__swbuf_r>
 80067fe:	3001      	adds	r0, #1
 8006800:	d1bf      	bne.n	8006782 <_puts_r+0x42>
 8006802:	e7df      	b.n	80067c4 <_puts_r+0x84>
 8006804:	6823      	ldr	r3, [r4, #0]
 8006806:	250a      	movs	r5, #10
 8006808:	1c5a      	adds	r2, r3, #1
 800680a:	6022      	str	r2, [r4, #0]
 800680c:	701d      	strb	r5, [r3, #0]
 800680e:	e7db      	b.n	80067c8 <_puts_r+0x88>
 8006810:	08007250 	.word	0x08007250
 8006814:	08007270 	.word	0x08007270
 8006818:	08007230 	.word	0x08007230

0800681c <puts>:
 800681c:	4b02      	ldr	r3, [pc, #8]	; (8006828 <puts+0xc>)
 800681e:	4601      	mov	r1, r0
 8006820:	6818      	ldr	r0, [r3, #0]
 8006822:	f7ff bf8d 	b.w	8006740 <_puts_r>
 8006826:	bf00      	nop
 8006828:	20000014 	.word	0x20000014

0800682c <__swbuf_r>:
 800682c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800682e:	460e      	mov	r6, r1
 8006830:	4614      	mov	r4, r2
 8006832:	4605      	mov	r5, r0
 8006834:	b118      	cbz	r0, 800683e <__swbuf_r+0x12>
 8006836:	6983      	ldr	r3, [r0, #24]
 8006838:	b90b      	cbnz	r3, 800683e <__swbuf_r+0x12>
 800683a:	f000 f9d1 	bl	8006be0 <__sinit>
 800683e:	4b21      	ldr	r3, [pc, #132]	; (80068c4 <__swbuf_r+0x98>)
 8006840:	429c      	cmp	r4, r3
 8006842:	d12b      	bne.n	800689c <__swbuf_r+0x70>
 8006844:	686c      	ldr	r4, [r5, #4]
 8006846:	69a3      	ldr	r3, [r4, #24]
 8006848:	60a3      	str	r3, [r4, #8]
 800684a:	89a3      	ldrh	r3, [r4, #12]
 800684c:	071a      	lsls	r2, r3, #28
 800684e:	d52f      	bpl.n	80068b0 <__swbuf_r+0x84>
 8006850:	6923      	ldr	r3, [r4, #16]
 8006852:	b36b      	cbz	r3, 80068b0 <__swbuf_r+0x84>
 8006854:	6923      	ldr	r3, [r4, #16]
 8006856:	6820      	ldr	r0, [r4, #0]
 8006858:	1ac0      	subs	r0, r0, r3
 800685a:	6963      	ldr	r3, [r4, #20]
 800685c:	b2f6      	uxtb	r6, r6
 800685e:	4283      	cmp	r3, r0
 8006860:	4637      	mov	r7, r6
 8006862:	dc04      	bgt.n	800686e <__swbuf_r+0x42>
 8006864:	4621      	mov	r1, r4
 8006866:	4628      	mov	r0, r5
 8006868:	f000 f926 	bl	8006ab8 <_fflush_r>
 800686c:	bb30      	cbnz	r0, 80068bc <__swbuf_r+0x90>
 800686e:	68a3      	ldr	r3, [r4, #8]
 8006870:	3b01      	subs	r3, #1
 8006872:	60a3      	str	r3, [r4, #8]
 8006874:	6823      	ldr	r3, [r4, #0]
 8006876:	1c5a      	adds	r2, r3, #1
 8006878:	6022      	str	r2, [r4, #0]
 800687a:	701e      	strb	r6, [r3, #0]
 800687c:	6963      	ldr	r3, [r4, #20]
 800687e:	3001      	adds	r0, #1
 8006880:	4283      	cmp	r3, r0
 8006882:	d004      	beq.n	800688e <__swbuf_r+0x62>
 8006884:	89a3      	ldrh	r3, [r4, #12]
 8006886:	07db      	lsls	r3, r3, #31
 8006888:	d506      	bpl.n	8006898 <__swbuf_r+0x6c>
 800688a:	2e0a      	cmp	r6, #10
 800688c:	d104      	bne.n	8006898 <__swbuf_r+0x6c>
 800688e:	4621      	mov	r1, r4
 8006890:	4628      	mov	r0, r5
 8006892:	f000 f911 	bl	8006ab8 <_fflush_r>
 8006896:	b988      	cbnz	r0, 80068bc <__swbuf_r+0x90>
 8006898:	4638      	mov	r0, r7
 800689a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800689c:	4b0a      	ldr	r3, [pc, #40]	; (80068c8 <__swbuf_r+0x9c>)
 800689e:	429c      	cmp	r4, r3
 80068a0:	d101      	bne.n	80068a6 <__swbuf_r+0x7a>
 80068a2:	68ac      	ldr	r4, [r5, #8]
 80068a4:	e7cf      	b.n	8006846 <__swbuf_r+0x1a>
 80068a6:	4b09      	ldr	r3, [pc, #36]	; (80068cc <__swbuf_r+0xa0>)
 80068a8:	429c      	cmp	r4, r3
 80068aa:	bf08      	it	eq
 80068ac:	68ec      	ldreq	r4, [r5, #12]
 80068ae:	e7ca      	b.n	8006846 <__swbuf_r+0x1a>
 80068b0:	4621      	mov	r1, r4
 80068b2:	4628      	mov	r0, r5
 80068b4:	f000 f80c 	bl	80068d0 <__swsetup_r>
 80068b8:	2800      	cmp	r0, #0
 80068ba:	d0cb      	beq.n	8006854 <__swbuf_r+0x28>
 80068bc:	f04f 37ff 	mov.w	r7, #4294967295
 80068c0:	e7ea      	b.n	8006898 <__swbuf_r+0x6c>
 80068c2:	bf00      	nop
 80068c4:	08007250 	.word	0x08007250
 80068c8:	08007270 	.word	0x08007270
 80068cc:	08007230 	.word	0x08007230

080068d0 <__swsetup_r>:
 80068d0:	4b32      	ldr	r3, [pc, #200]	; (800699c <__swsetup_r+0xcc>)
 80068d2:	b570      	push	{r4, r5, r6, lr}
 80068d4:	681d      	ldr	r5, [r3, #0]
 80068d6:	4606      	mov	r6, r0
 80068d8:	460c      	mov	r4, r1
 80068da:	b125      	cbz	r5, 80068e6 <__swsetup_r+0x16>
 80068dc:	69ab      	ldr	r3, [r5, #24]
 80068de:	b913      	cbnz	r3, 80068e6 <__swsetup_r+0x16>
 80068e0:	4628      	mov	r0, r5
 80068e2:	f000 f97d 	bl	8006be0 <__sinit>
 80068e6:	4b2e      	ldr	r3, [pc, #184]	; (80069a0 <__swsetup_r+0xd0>)
 80068e8:	429c      	cmp	r4, r3
 80068ea:	d10f      	bne.n	800690c <__swsetup_r+0x3c>
 80068ec:	686c      	ldr	r4, [r5, #4]
 80068ee:	89a3      	ldrh	r3, [r4, #12]
 80068f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80068f4:	0719      	lsls	r1, r3, #28
 80068f6:	d42c      	bmi.n	8006952 <__swsetup_r+0x82>
 80068f8:	06dd      	lsls	r5, r3, #27
 80068fa:	d411      	bmi.n	8006920 <__swsetup_r+0x50>
 80068fc:	2309      	movs	r3, #9
 80068fe:	6033      	str	r3, [r6, #0]
 8006900:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006904:	81a3      	strh	r3, [r4, #12]
 8006906:	f04f 30ff 	mov.w	r0, #4294967295
 800690a:	e03e      	b.n	800698a <__swsetup_r+0xba>
 800690c:	4b25      	ldr	r3, [pc, #148]	; (80069a4 <__swsetup_r+0xd4>)
 800690e:	429c      	cmp	r4, r3
 8006910:	d101      	bne.n	8006916 <__swsetup_r+0x46>
 8006912:	68ac      	ldr	r4, [r5, #8]
 8006914:	e7eb      	b.n	80068ee <__swsetup_r+0x1e>
 8006916:	4b24      	ldr	r3, [pc, #144]	; (80069a8 <__swsetup_r+0xd8>)
 8006918:	429c      	cmp	r4, r3
 800691a:	bf08      	it	eq
 800691c:	68ec      	ldreq	r4, [r5, #12]
 800691e:	e7e6      	b.n	80068ee <__swsetup_r+0x1e>
 8006920:	0758      	lsls	r0, r3, #29
 8006922:	d512      	bpl.n	800694a <__swsetup_r+0x7a>
 8006924:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006926:	b141      	cbz	r1, 800693a <__swsetup_r+0x6a>
 8006928:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800692c:	4299      	cmp	r1, r3
 800692e:	d002      	beq.n	8006936 <__swsetup_r+0x66>
 8006930:	4630      	mov	r0, r6
 8006932:	f000 fa59 	bl	8006de8 <_free_r>
 8006936:	2300      	movs	r3, #0
 8006938:	6363      	str	r3, [r4, #52]	; 0x34
 800693a:	89a3      	ldrh	r3, [r4, #12]
 800693c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006940:	81a3      	strh	r3, [r4, #12]
 8006942:	2300      	movs	r3, #0
 8006944:	6063      	str	r3, [r4, #4]
 8006946:	6923      	ldr	r3, [r4, #16]
 8006948:	6023      	str	r3, [r4, #0]
 800694a:	89a3      	ldrh	r3, [r4, #12]
 800694c:	f043 0308 	orr.w	r3, r3, #8
 8006950:	81a3      	strh	r3, [r4, #12]
 8006952:	6923      	ldr	r3, [r4, #16]
 8006954:	b94b      	cbnz	r3, 800696a <__swsetup_r+0x9a>
 8006956:	89a3      	ldrh	r3, [r4, #12]
 8006958:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800695c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006960:	d003      	beq.n	800696a <__swsetup_r+0x9a>
 8006962:	4621      	mov	r1, r4
 8006964:	4630      	mov	r0, r6
 8006966:	f000 f9ff 	bl	8006d68 <__smakebuf_r>
 800696a:	89a0      	ldrh	r0, [r4, #12]
 800696c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006970:	f010 0301 	ands.w	r3, r0, #1
 8006974:	d00a      	beq.n	800698c <__swsetup_r+0xbc>
 8006976:	2300      	movs	r3, #0
 8006978:	60a3      	str	r3, [r4, #8]
 800697a:	6963      	ldr	r3, [r4, #20]
 800697c:	425b      	negs	r3, r3
 800697e:	61a3      	str	r3, [r4, #24]
 8006980:	6923      	ldr	r3, [r4, #16]
 8006982:	b943      	cbnz	r3, 8006996 <__swsetup_r+0xc6>
 8006984:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006988:	d1ba      	bne.n	8006900 <__swsetup_r+0x30>
 800698a:	bd70      	pop	{r4, r5, r6, pc}
 800698c:	0781      	lsls	r1, r0, #30
 800698e:	bf58      	it	pl
 8006990:	6963      	ldrpl	r3, [r4, #20]
 8006992:	60a3      	str	r3, [r4, #8]
 8006994:	e7f4      	b.n	8006980 <__swsetup_r+0xb0>
 8006996:	2000      	movs	r0, #0
 8006998:	e7f7      	b.n	800698a <__swsetup_r+0xba>
 800699a:	bf00      	nop
 800699c:	20000014 	.word	0x20000014
 80069a0:	08007250 	.word	0x08007250
 80069a4:	08007270 	.word	0x08007270
 80069a8:	08007230 	.word	0x08007230

080069ac <__sflush_r>:
 80069ac:	898a      	ldrh	r2, [r1, #12]
 80069ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069b2:	4605      	mov	r5, r0
 80069b4:	0710      	lsls	r0, r2, #28
 80069b6:	460c      	mov	r4, r1
 80069b8:	d458      	bmi.n	8006a6c <__sflush_r+0xc0>
 80069ba:	684b      	ldr	r3, [r1, #4]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	dc05      	bgt.n	80069cc <__sflush_r+0x20>
 80069c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	dc02      	bgt.n	80069cc <__sflush_r+0x20>
 80069c6:	2000      	movs	r0, #0
 80069c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80069ce:	2e00      	cmp	r6, #0
 80069d0:	d0f9      	beq.n	80069c6 <__sflush_r+0x1a>
 80069d2:	2300      	movs	r3, #0
 80069d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80069d8:	682f      	ldr	r7, [r5, #0]
 80069da:	602b      	str	r3, [r5, #0]
 80069dc:	d032      	beq.n	8006a44 <__sflush_r+0x98>
 80069de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80069e0:	89a3      	ldrh	r3, [r4, #12]
 80069e2:	075a      	lsls	r2, r3, #29
 80069e4:	d505      	bpl.n	80069f2 <__sflush_r+0x46>
 80069e6:	6863      	ldr	r3, [r4, #4]
 80069e8:	1ac0      	subs	r0, r0, r3
 80069ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80069ec:	b10b      	cbz	r3, 80069f2 <__sflush_r+0x46>
 80069ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80069f0:	1ac0      	subs	r0, r0, r3
 80069f2:	2300      	movs	r3, #0
 80069f4:	4602      	mov	r2, r0
 80069f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80069f8:	6a21      	ldr	r1, [r4, #32]
 80069fa:	4628      	mov	r0, r5
 80069fc:	47b0      	blx	r6
 80069fe:	1c43      	adds	r3, r0, #1
 8006a00:	89a3      	ldrh	r3, [r4, #12]
 8006a02:	d106      	bne.n	8006a12 <__sflush_r+0x66>
 8006a04:	6829      	ldr	r1, [r5, #0]
 8006a06:	291d      	cmp	r1, #29
 8006a08:	d82c      	bhi.n	8006a64 <__sflush_r+0xb8>
 8006a0a:	4a2a      	ldr	r2, [pc, #168]	; (8006ab4 <__sflush_r+0x108>)
 8006a0c:	40ca      	lsrs	r2, r1
 8006a0e:	07d6      	lsls	r6, r2, #31
 8006a10:	d528      	bpl.n	8006a64 <__sflush_r+0xb8>
 8006a12:	2200      	movs	r2, #0
 8006a14:	6062      	str	r2, [r4, #4]
 8006a16:	04d9      	lsls	r1, r3, #19
 8006a18:	6922      	ldr	r2, [r4, #16]
 8006a1a:	6022      	str	r2, [r4, #0]
 8006a1c:	d504      	bpl.n	8006a28 <__sflush_r+0x7c>
 8006a1e:	1c42      	adds	r2, r0, #1
 8006a20:	d101      	bne.n	8006a26 <__sflush_r+0x7a>
 8006a22:	682b      	ldr	r3, [r5, #0]
 8006a24:	b903      	cbnz	r3, 8006a28 <__sflush_r+0x7c>
 8006a26:	6560      	str	r0, [r4, #84]	; 0x54
 8006a28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a2a:	602f      	str	r7, [r5, #0]
 8006a2c:	2900      	cmp	r1, #0
 8006a2e:	d0ca      	beq.n	80069c6 <__sflush_r+0x1a>
 8006a30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a34:	4299      	cmp	r1, r3
 8006a36:	d002      	beq.n	8006a3e <__sflush_r+0x92>
 8006a38:	4628      	mov	r0, r5
 8006a3a:	f000 f9d5 	bl	8006de8 <_free_r>
 8006a3e:	2000      	movs	r0, #0
 8006a40:	6360      	str	r0, [r4, #52]	; 0x34
 8006a42:	e7c1      	b.n	80069c8 <__sflush_r+0x1c>
 8006a44:	6a21      	ldr	r1, [r4, #32]
 8006a46:	2301      	movs	r3, #1
 8006a48:	4628      	mov	r0, r5
 8006a4a:	47b0      	blx	r6
 8006a4c:	1c41      	adds	r1, r0, #1
 8006a4e:	d1c7      	bne.n	80069e0 <__sflush_r+0x34>
 8006a50:	682b      	ldr	r3, [r5, #0]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d0c4      	beq.n	80069e0 <__sflush_r+0x34>
 8006a56:	2b1d      	cmp	r3, #29
 8006a58:	d001      	beq.n	8006a5e <__sflush_r+0xb2>
 8006a5a:	2b16      	cmp	r3, #22
 8006a5c:	d101      	bne.n	8006a62 <__sflush_r+0xb6>
 8006a5e:	602f      	str	r7, [r5, #0]
 8006a60:	e7b1      	b.n	80069c6 <__sflush_r+0x1a>
 8006a62:	89a3      	ldrh	r3, [r4, #12]
 8006a64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a68:	81a3      	strh	r3, [r4, #12]
 8006a6a:	e7ad      	b.n	80069c8 <__sflush_r+0x1c>
 8006a6c:	690f      	ldr	r7, [r1, #16]
 8006a6e:	2f00      	cmp	r7, #0
 8006a70:	d0a9      	beq.n	80069c6 <__sflush_r+0x1a>
 8006a72:	0793      	lsls	r3, r2, #30
 8006a74:	680e      	ldr	r6, [r1, #0]
 8006a76:	bf08      	it	eq
 8006a78:	694b      	ldreq	r3, [r1, #20]
 8006a7a:	600f      	str	r7, [r1, #0]
 8006a7c:	bf18      	it	ne
 8006a7e:	2300      	movne	r3, #0
 8006a80:	eba6 0807 	sub.w	r8, r6, r7
 8006a84:	608b      	str	r3, [r1, #8]
 8006a86:	f1b8 0f00 	cmp.w	r8, #0
 8006a8a:	dd9c      	ble.n	80069c6 <__sflush_r+0x1a>
 8006a8c:	6a21      	ldr	r1, [r4, #32]
 8006a8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006a90:	4643      	mov	r3, r8
 8006a92:	463a      	mov	r2, r7
 8006a94:	4628      	mov	r0, r5
 8006a96:	47b0      	blx	r6
 8006a98:	2800      	cmp	r0, #0
 8006a9a:	dc06      	bgt.n	8006aaa <__sflush_r+0xfe>
 8006a9c:	89a3      	ldrh	r3, [r4, #12]
 8006a9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006aa2:	81a3      	strh	r3, [r4, #12]
 8006aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8006aa8:	e78e      	b.n	80069c8 <__sflush_r+0x1c>
 8006aaa:	4407      	add	r7, r0
 8006aac:	eba8 0800 	sub.w	r8, r8, r0
 8006ab0:	e7e9      	b.n	8006a86 <__sflush_r+0xda>
 8006ab2:	bf00      	nop
 8006ab4:	20400001 	.word	0x20400001

08006ab8 <_fflush_r>:
 8006ab8:	b538      	push	{r3, r4, r5, lr}
 8006aba:	690b      	ldr	r3, [r1, #16]
 8006abc:	4605      	mov	r5, r0
 8006abe:	460c      	mov	r4, r1
 8006ac0:	b913      	cbnz	r3, 8006ac8 <_fflush_r+0x10>
 8006ac2:	2500      	movs	r5, #0
 8006ac4:	4628      	mov	r0, r5
 8006ac6:	bd38      	pop	{r3, r4, r5, pc}
 8006ac8:	b118      	cbz	r0, 8006ad2 <_fflush_r+0x1a>
 8006aca:	6983      	ldr	r3, [r0, #24]
 8006acc:	b90b      	cbnz	r3, 8006ad2 <_fflush_r+0x1a>
 8006ace:	f000 f887 	bl	8006be0 <__sinit>
 8006ad2:	4b14      	ldr	r3, [pc, #80]	; (8006b24 <_fflush_r+0x6c>)
 8006ad4:	429c      	cmp	r4, r3
 8006ad6:	d11b      	bne.n	8006b10 <_fflush_r+0x58>
 8006ad8:	686c      	ldr	r4, [r5, #4]
 8006ada:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d0ef      	beq.n	8006ac2 <_fflush_r+0xa>
 8006ae2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006ae4:	07d0      	lsls	r0, r2, #31
 8006ae6:	d404      	bmi.n	8006af2 <_fflush_r+0x3a>
 8006ae8:	0599      	lsls	r1, r3, #22
 8006aea:	d402      	bmi.n	8006af2 <_fflush_r+0x3a>
 8006aec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006aee:	f000 f915 	bl	8006d1c <__retarget_lock_acquire_recursive>
 8006af2:	4628      	mov	r0, r5
 8006af4:	4621      	mov	r1, r4
 8006af6:	f7ff ff59 	bl	80069ac <__sflush_r>
 8006afa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006afc:	07da      	lsls	r2, r3, #31
 8006afe:	4605      	mov	r5, r0
 8006b00:	d4e0      	bmi.n	8006ac4 <_fflush_r+0xc>
 8006b02:	89a3      	ldrh	r3, [r4, #12]
 8006b04:	059b      	lsls	r3, r3, #22
 8006b06:	d4dd      	bmi.n	8006ac4 <_fflush_r+0xc>
 8006b08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b0a:	f000 f908 	bl	8006d1e <__retarget_lock_release_recursive>
 8006b0e:	e7d9      	b.n	8006ac4 <_fflush_r+0xc>
 8006b10:	4b05      	ldr	r3, [pc, #20]	; (8006b28 <_fflush_r+0x70>)
 8006b12:	429c      	cmp	r4, r3
 8006b14:	d101      	bne.n	8006b1a <_fflush_r+0x62>
 8006b16:	68ac      	ldr	r4, [r5, #8]
 8006b18:	e7df      	b.n	8006ada <_fflush_r+0x22>
 8006b1a:	4b04      	ldr	r3, [pc, #16]	; (8006b2c <_fflush_r+0x74>)
 8006b1c:	429c      	cmp	r4, r3
 8006b1e:	bf08      	it	eq
 8006b20:	68ec      	ldreq	r4, [r5, #12]
 8006b22:	e7da      	b.n	8006ada <_fflush_r+0x22>
 8006b24:	08007250 	.word	0x08007250
 8006b28:	08007270 	.word	0x08007270
 8006b2c:	08007230 	.word	0x08007230

08006b30 <std>:
 8006b30:	2300      	movs	r3, #0
 8006b32:	b510      	push	{r4, lr}
 8006b34:	4604      	mov	r4, r0
 8006b36:	e9c0 3300 	strd	r3, r3, [r0]
 8006b3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006b3e:	6083      	str	r3, [r0, #8]
 8006b40:	8181      	strh	r1, [r0, #12]
 8006b42:	6643      	str	r3, [r0, #100]	; 0x64
 8006b44:	81c2      	strh	r2, [r0, #14]
 8006b46:	6183      	str	r3, [r0, #24]
 8006b48:	4619      	mov	r1, r3
 8006b4a:	2208      	movs	r2, #8
 8006b4c:	305c      	adds	r0, #92	; 0x5c
 8006b4e:	f7ff fdef 	bl	8006730 <memset>
 8006b52:	4b05      	ldr	r3, [pc, #20]	; (8006b68 <std+0x38>)
 8006b54:	6263      	str	r3, [r4, #36]	; 0x24
 8006b56:	4b05      	ldr	r3, [pc, #20]	; (8006b6c <std+0x3c>)
 8006b58:	62a3      	str	r3, [r4, #40]	; 0x28
 8006b5a:	4b05      	ldr	r3, [pc, #20]	; (8006b70 <std+0x40>)
 8006b5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006b5e:	4b05      	ldr	r3, [pc, #20]	; (8006b74 <std+0x44>)
 8006b60:	6224      	str	r4, [r4, #32]
 8006b62:	6323      	str	r3, [r4, #48]	; 0x30
 8006b64:	bd10      	pop	{r4, pc}
 8006b66:	bf00      	nop
 8006b68:	08006f5d 	.word	0x08006f5d
 8006b6c:	08006f7f 	.word	0x08006f7f
 8006b70:	08006fb7 	.word	0x08006fb7
 8006b74:	08006fdb 	.word	0x08006fdb

08006b78 <_cleanup_r>:
 8006b78:	4901      	ldr	r1, [pc, #4]	; (8006b80 <_cleanup_r+0x8>)
 8006b7a:	f000 b8af 	b.w	8006cdc <_fwalk_reent>
 8006b7e:	bf00      	nop
 8006b80:	08006ab9 	.word	0x08006ab9

08006b84 <__sfmoreglue>:
 8006b84:	b570      	push	{r4, r5, r6, lr}
 8006b86:	1e4a      	subs	r2, r1, #1
 8006b88:	2568      	movs	r5, #104	; 0x68
 8006b8a:	4355      	muls	r5, r2
 8006b8c:	460e      	mov	r6, r1
 8006b8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006b92:	f000 f979 	bl	8006e88 <_malloc_r>
 8006b96:	4604      	mov	r4, r0
 8006b98:	b140      	cbz	r0, 8006bac <__sfmoreglue+0x28>
 8006b9a:	2100      	movs	r1, #0
 8006b9c:	e9c0 1600 	strd	r1, r6, [r0]
 8006ba0:	300c      	adds	r0, #12
 8006ba2:	60a0      	str	r0, [r4, #8]
 8006ba4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006ba8:	f7ff fdc2 	bl	8006730 <memset>
 8006bac:	4620      	mov	r0, r4
 8006bae:	bd70      	pop	{r4, r5, r6, pc}

08006bb0 <__sfp_lock_acquire>:
 8006bb0:	4801      	ldr	r0, [pc, #4]	; (8006bb8 <__sfp_lock_acquire+0x8>)
 8006bb2:	f000 b8b3 	b.w	8006d1c <__retarget_lock_acquire_recursive>
 8006bb6:	bf00      	nop
 8006bb8:	2001a914 	.word	0x2001a914

08006bbc <__sfp_lock_release>:
 8006bbc:	4801      	ldr	r0, [pc, #4]	; (8006bc4 <__sfp_lock_release+0x8>)
 8006bbe:	f000 b8ae 	b.w	8006d1e <__retarget_lock_release_recursive>
 8006bc2:	bf00      	nop
 8006bc4:	2001a914 	.word	0x2001a914

08006bc8 <__sinit_lock_acquire>:
 8006bc8:	4801      	ldr	r0, [pc, #4]	; (8006bd0 <__sinit_lock_acquire+0x8>)
 8006bca:	f000 b8a7 	b.w	8006d1c <__retarget_lock_acquire_recursive>
 8006bce:	bf00      	nop
 8006bd0:	2001a90f 	.word	0x2001a90f

08006bd4 <__sinit_lock_release>:
 8006bd4:	4801      	ldr	r0, [pc, #4]	; (8006bdc <__sinit_lock_release+0x8>)
 8006bd6:	f000 b8a2 	b.w	8006d1e <__retarget_lock_release_recursive>
 8006bda:	bf00      	nop
 8006bdc:	2001a90f 	.word	0x2001a90f

08006be0 <__sinit>:
 8006be0:	b510      	push	{r4, lr}
 8006be2:	4604      	mov	r4, r0
 8006be4:	f7ff fff0 	bl	8006bc8 <__sinit_lock_acquire>
 8006be8:	69a3      	ldr	r3, [r4, #24]
 8006bea:	b11b      	cbz	r3, 8006bf4 <__sinit+0x14>
 8006bec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bf0:	f7ff bff0 	b.w	8006bd4 <__sinit_lock_release>
 8006bf4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006bf8:	6523      	str	r3, [r4, #80]	; 0x50
 8006bfa:	4b13      	ldr	r3, [pc, #76]	; (8006c48 <__sinit+0x68>)
 8006bfc:	4a13      	ldr	r2, [pc, #76]	; (8006c4c <__sinit+0x6c>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	62a2      	str	r2, [r4, #40]	; 0x28
 8006c02:	42a3      	cmp	r3, r4
 8006c04:	bf04      	itt	eq
 8006c06:	2301      	moveq	r3, #1
 8006c08:	61a3      	streq	r3, [r4, #24]
 8006c0a:	4620      	mov	r0, r4
 8006c0c:	f000 f820 	bl	8006c50 <__sfp>
 8006c10:	6060      	str	r0, [r4, #4]
 8006c12:	4620      	mov	r0, r4
 8006c14:	f000 f81c 	bl	8006c50 <__sfp>
 8006c18:	60a0      	str	r0, [r4, #8]
 8006c1a:	4620      	mov	r0, r4
 8006c1c:	f000 f818 	bl	8006c50 <__sfp>
 8006c20:	2200      	movs	r2, #0
 8006c22:	60e0      	str	r0, [r4, #12]
 8006c24:	2104      	movs	r1, #4
 8006c26:	6860      	ldr	r0, [r4, #4]
 8006c28:	f7ff ff82 	bl	8006b30 <std>
 8006c2c:	68a0      	ldr	r0, [r4, #8]
 8006c2e:	2201      	movs	r2, #1
 8006c30:	2109      	movs	r1, #9
 8006c32:	f7ff ff7d 	bl	8006b30 <std>
 8006c36:	68e0      	ldr	r0, [r4, #12]
 8006c38:	2202      	movs	r2, #2
 8006c3a:	2112      	movs	r1, #18
 8006c3c:	f7ff ff78 	bl	8006b30 <std>
 8006c40:	2301      	movs	r3, #1
 8006c42:	61a3      	str	r3, [r4, #24]
 8006c44:	e7d2      	b.n	8006bec <__sinit+0xc>
 8006c46:	bf00      	nop
 8006c48:	0800722c 	.word	0x0800722c
 8006c4c:	08006b79 	.word	0x08006b79

08006c50 <__sfp>:
 8006c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c52:	4607      	mov	r7, r0
 8006c54:	f7ff ffac 	bl	8006bb0 <__sfp_lock_acquire>
 8006c58:	4b1e      	ldr	r3, [pc, #120]	; (8006cd4 <__sfp+0x84>)
 8006c5a:	681e      	ldr	r6, [r3, #0]
 8006c5c:	69b3      	ldr	r3, [r6, #24]
 8006c5e:	b913      	cbnz	r3, 8006c66 <__sfp+0x16>
 8006c60:	4630      	mov	r0, r6
 8006c62:	f7ff ffbd 	bl	8006be0 <__sinit>
 8006c66:	3648      	adds	r6, #72	; 0x48
 8006c68:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006c6c:	3b01      	subs	r3, #1
 8006c6e:	d503      	bpl.n	8006c78 <__sfp+0x28>
 8006c70:	6833      	ldr	r3, [r6, #0]
 8006c72:	b30b      	cbz	r3, 8006cb8 <__sfp+0x68>
 8006c74:	6836      	ldr	r6, [r6, #0]
 8006c76:	e7f7      	b.n	8006c68 <__sfp+0x18>
 8006c78:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006c7c:	b9d5      	cbnz	r5, 8006cb4 <__sfp+0x64>
 8006c7e:	4b16      	ldr	r3, [pc, #88]	; (8006cd8 <__sfp+0x88>)
 8006c80:	60e3      	str	r3, [r4, #12]
 8006c82:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006c86:	6665      	str	r5, [r4, #100]	; 0x64
 8006c88:	f000 f847 	bl	8006d1a <__retarget_lock_init_recursive>
 8006c8c:	f7ff ff96 	bl	8006bbc <__sfp_lock_release>
 8006c90:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006c94:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006c98:	6025      	str	r5, [r4, #0]
 8006c9a:	61a5      	str	r5, [r4, #24]
 8006c9c:	2208      	movs	r2, #8
 8006c9e:	4629      	mov	r1, r5
 8006ca0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006ca4:	f7ff fd44 	bl	8006730 <memset>
 8006ca8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006cac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006cb0:	4620      	mov	r0, r4
 8006cb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cb4:	3468      	adds	r4, #104	; 0x68
 8006cb6:	e7d9      	b.n	8006c6c <__sfp+0x1c>
 8006cb8:	2104      	movs	r1, #4
 8006cba:	4638      	mov	r0, r7
 8006cbc:	f7ff ff62 	bl	8006b84 <__sfmoreglue>
 8006cc0:	4604      	mov	r4, r0
 8006cc2:	6030      	str	r0, [r6, #0]
 8006cc4:	2800      	cmp	r0, #0
 8006cc6:	d1d5      	bne.n	8006c74 <__sfp+0x24>
 8006cc8:	f7ff ff78 	bl	8006bbc <__sfp_lock_release>
 8006ccc:	230c      	movs	r3, #12
 8006cce:	603b      	str	r3, [r7, #0]
 8006cd0:	e7ee      	b.n	8006cb0 <__sfp+0x60>
 8006cd2:	bf00      	nop
 8006cd4:	0800722c 	.word	0x0800722c
 8006cd8:	ffff0001 	.word	0xffff0001

08006cdc <_fwalk_reent>:
 8006cdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ce0:	4606      	mov	r6, r0
 8006ce2:	4688      	mov	r8, r1
 8006ce4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006ce8:	2700      	movs	r7, #0
 8006cea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006cee:	f1b9 0901 	subs.w	r9, r9, #1
 8006cf2:	d505      	bpl.n	8006d00 <_fwalk_reent+0x24>
 8006cf4:	6824      	ldr	r4, [r4, #0]
 8006cf6:	2c00      	cmp	r4, #0
 8006cf8:	d1f7      	bne.n	8006cea <_fwalk_reent+0xe>
 8006cfa:	4638      	mov	r0, r7
 8006cfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d00:	89ab      	ldrh	r3, [r5, #12]
 8006d02:	2b01      	cmp	r3, #1
 8006d04:	d907      	bls.n	8006d16 <_fwalk_reent+0x3a>
 8006d06:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006d0a:	3301      	adds	r3, #1
 8006d0c:	d003      	beq.n	8006d16 <_fwalk_reent+0x3a>
 8006d0e:	4629      	mov	r1, r5
 8006d10:	4630      	mov	r0, r6
 8006d12:	47c0      	blx	r8
 8006d14:	4307      	orrs	r7, r0
 8006d16:	3568      	adds	r5, #104	; 0x68
 8006d18:	e7e9      	b.n	8006cee <_fwalk_reent+0x12>

08006d1a <__retarget_lock_init_recursive>:
 8006d1a:	4770      	bx	lr

08006d1c <__retarget_lock_acquire_recursive>:
 8006d1c:	4770      	bx	lr

08006d1e <__retarget_lock_release_recursive>:
 8006d1e:	4770      	bx	lr

08006d20 <__swhatbuf_r>:
 8006d20:	b570      	push	{r4, r5, r6, lr}
 8006d22:	460e      	mov	r6, r1
 8006d24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d28:	2900      	cmp	r1, #0
 8006d2a:	b096      	sub	sp, #88	; 0x58
 8006d2c:	4614      	mov	r4, r2
 8006d2e:	461d      	mov	r5, r3
 8006d30:	da07      	bge.n	8006d42 <__swhatbuf_r+0x22>
 8006d32:	2300      	movs	r3, #0
 8006d34:	602b      	str	r3, [r5, #0]
 8006d36:	89b3      	ldrh	r3, [r6, #12]
 8006d38:	061a      	lsls	r2, r3, #24
 8006d3a:	d410      	bmi.n	8006d5e <__swhatbuf_r+0x3e>
 8006d3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d40:	e00e      	b.n	8006d60 <__swhatbuf_r+0x40>
 8006d42:	466a      	mov	r2, sp
 8006d44:	f000 f95e 	bl	8007004 <_fstat_r>
 8006d48:	2800      	cmp	r0, #0
 8006d4a:	dbf2      	blt.n	8006d32 <__swhatbuf_r+0x12>
 8006d4c:	9a01      	ldr	r2, [sp, #4]
 8006d4e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006d52:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006d56:	425a      	negs	r2, r3
 8006d58:	415a      	adcs	r2, r3
 8006d5a:	602a      	str	r2, [r5, #0]
 8006d5c:	e7ee      	b.n	8006d3c <__swhatbuf_r+0x1c>
 8006d5e:	2340      	movs	r3, #64	; 0x40
 8006d60:	2000      	movs	r0, #0
 8006d62:	6023      	str	r3, [r4, #0]
 8006d64:	b016      	add	sp, #88	; 0x58
 8006d66:	bd70      	pop	{r4, r5, r6, pc}

08006d68 <__smakebuf_r>:
 8006d68:	898b      	ldrh	r3, [r1, #12]
 8006d6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006d6c:	079d      	lsls	r5, r3, #30
 8006d6e:	4606      	mov	r6, r0
 8006d70:	460c      	mov	r4, r1
 8006d72:	d507      	bpl.n	8006d84 <__smakebuf_r+0x1c>
 8006d74:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006d78:	6023      	str	r3, [r4, #0]
 8006d7a:	6123      	str	r3, [r4, #16]
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	6163      	str	r3, [r4, #20]
 8006d80:	b002      	add	sp, #8
 8006d82:	bd70      	pop	{r4, r5, r6, pc}
 8006d84:	ab01      	add	r3, sp, #4
 8006d86:	466a      	mov	r2, sp
 8006d88:	f7ff ffca 	bl	8006d20 <__swhatbuf_r>
 8006d8c:	9900      	ldr	r1, [sp, #0]
 8006d8e:	4605      	mov	r5, r0
 8006d90:	4630      	mov	r0, r6
 8006d92:	f000 f879 	bl	8006e88 <_malloc_r>
 8006d96:	b948      	cbnz	r0, 8006dac <__smakebuf_r+0x44>
 8006d98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d9c:	059a      	lsls	r2, r3, #22
 8006d9e:	d4ef      	bmi.n	8006d80 <__smakebuf_r+0x18>
 8006da0:	f023 0303 	bic.w	r3, r3, #3
 8006da4:	f043 0302 	orr.w	r3, r3, #2
 8006da8:	81a3      	strh	r3, [r4, #12]
 8006daa:	e7e3      	b.n	8006d74 <__smakebuf_r+0xc>
 8006dac:	4b0d      	ldr	r3, [pc, #52]	; (8006de4 <__smakebuf_r+0x7c>)
 8006dae:	62b3      	str	r3, [r6, #40]	; 0x28
 8006db0:	89a3      	ldrh	r3, [r4, #12]
 8006db2:	6020      	str	r0, [r4, #0]
 8006db4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006db8:	81a3      	strh	r3, [r4, #12]
 8006dba:	9b00      	ldr	r3, [sp, #0]
 8006dbc:	6163      	str	r3, [r4, #20]
 8006dbe:	9b01      	ldr	r3, [sp, #4]
 8006dc0:	6120      	str	r0, [r4, #16]
 8006dc2:	b15b      	cbz	r3, 8006ddc <__smakebuf_r+0x74>
 8006dc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006dc8:	4630      	mov	r0, r6
 8006dca:	f000 f92d 	bl	8007028 <_isatty_r>
 8006dce:	b128      	cbz	r0, 8006ddc <__smakebuf_r+0x74>
 8006dd0:	89a3      	ldrh	r3, [r4, #12]
 8006dd2:	f023 0303 	bic.w	r3, r3, #3
 8006dd6:	f043 0301 	orr.w	r3, r3, #1
 8006dda:	81a3      	strh	r3, [r4, #12]
 8006ddc:	89a0      	ldrh	r0, [r4, #12]
 8006dde:	4305      	orrs	r5, r0
 8006de0:	81a5      	strh	r5, [r4, #12]
 8006de2:	e7cd      	b.n	8006d80 <__smakebuf_r+0x18>
 8006de4:	08006b79 	.word	0x08006b79

08006de8 <_free_r>:
 8006de8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006dea:	2900      	cmp	r1, #0
 8006dec:	d048      	beq.n	8006e80 <_free_r+0x98>
 8006dee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006df2:	9001      	str	r0, [sp, #4]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	f1a1 0404 	sub.w	r4, r1, #4
 8006dfa:	bfb8      	it	lt
 8006dfc:	18e4      	addlt	r4, r4, r3
 8006dfe:	f000 f935 	bl	800706c <__malloc_lock>
 8006e02:	4a20      	ldr	r2, [pc, #128]	; (8006e84 <_free_r+0x9c>)
 8006e04:	9801      	ldr	r0, [sp, #4]
 8006e06:	6813      	ldr	r3, [r2, #0]
 8006e08:	4615      	mov	r5, r2
 8006e0a:	b933      	cbnz	r3, 8006e1a <_free_r+0x32>
 8006e0c:	6063      	str	r3, [r4, #4]
 8006e0e:	6014      	str	r4, [r2, #0]
 8006e10:	b003      	add	sp, #12
 8006e12:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e16:	f000 b92f 	b.w	8007078 <__malloc_unlock>
 8006e1a:	42a3      	cmp	r3, r4
 8006e1c:	d90b      	bls.n	8006e36 <_free_r+0x4e>
 8006e1e:	6821      	ldr	r1, [r4, #0]
 8006e20:	1862      	adds	r2, r4, r1
 8006e22:	4293      	cmp	r3, r2
 8006e24:	bf04      	itt	eq
 8006e26:	681a      	ldreq	r2, [r3, #0]
 8006e28:	685b      	ldreq	r3, [r3, #4]
 8006e2a:	6063      	str	r3, [r4, #4]
 8006e2c:	bf04      	itt	eq
 8006e2e:	1852      	addeq	r2, r2, r1
 8006e30:	6022      	streq	r2, [r4, #0]
 8006e32:	602c      	str	r4, [r5, #0]
 8006e34:	e7ec      	b.n	8006e10 <_free_r+0x28>
 8006e36:	461a      	mov	r2, r3
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	b10b      	cbz	r3, 8006e40 <_free_r+0x58>
 8006e3c:	42a3      	cmp	r3, r4
 8006e3e:	d9fa      	bls.n	8006e36 <_free_r+0x4e>
 8006e40:	6811      	ldr	r1, [r2, #0]
 8006e42:	1855      	adds	r5, r2, r1
 8006e44:	42a5      	cmp	r5, r4
 8006e46:	d10b      	bne.n	8006e60 <_free_r+0x78>
 8006e48:	6824      	ldr	r4, [r4, #0]
 8006e4a:	4421      	add	r1, r4
 8006e4c:	1854      	adds	r4, r2, r1
 8006e4e:	42a3      	cmp	r3, r4
 8006e50:	6011      	str	r1, [r2, #0]
 8006e52:	d1dd      	bne.n	8006e10 <_free_r+0x28>
 8006e54:	681c      	ldr	r4, [r3, #0]
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	6053      	str	r3, [r2, #4]
 8006e5a:	4421      	add	r1, r4
 8006e5c:	6011      	str	r1, [r2, #0]
 8006e5e:	e7d7      	b.n	8006e10 <_free_r+0x28>
 8006e60:	d902      	bls.n	8006e68 <_free_r+0x80>
 8006e62:	230c      	movs	r3, #12
 8006e64:	6003      	str	r3, [r0, #0]
 8006e66:	e7d3      	b.n	8006e10 <_free_r+0x28>
 8006e68:	6825      	ldr	r5, [r4, #0]
 8006e6a:	1961      	adds	r1, r4, r5
 8006e6c:	428b      	cmp	r3, r1
 8006e6e:	bf04      	itt	eq
 8006e70:	6819      	ldreq	r1, [r3, #0]
 8006e72:	685b      	ldreq	r3, [r3, #4]
 8006e74:	6063      	str	r3, [r4, #4]
 8006e76:	bf04      	itt	eq
 8006e78:	1949      	addeq	r1, r1, r5
 8006e7a:	6021      	streq	r1, [r4, #0]
 8006e7c:	6054      	str	r4, [r2, #4]
 8006e7e:	e7c7      	b.n	8006e10 <_free_r+0x28>
 8006e80:	b003      	add	sp, #12
 8006e82:	bd30      	pop	{r4, r5, pc}
 8006e84:	2001a7cc 	.word	0x2001a7cc

08006e88 <_malloc_r>:
 8006e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e8a:	1ccd      	adds	r5, r1, #3
 8006e8c:	f025 0503 	bic.w	r5, r5, #3
 8006e90:	3508      	adds	r5, #8
 8006e92:	2d0c      	cmp	r5, #12
 8006e94:	bf38      	it	cc
 8006e96:	250c      	movcc	r5, #12
 8006e98:	2d00      	cmp	r5, #0
 8006e9a:	4606      	mov	r6, r0
 8006e9c:	db01      	blt.n	8006ea2 <_malloc_r+0x1a>
 8006e9e:	42a9      	cmp	r1, r5
 8006ea0:	d903      	bls.n	8006eaa <_malloc_r+0x22>
 8006ea2:	230c      	movs	r3, #12
 8006ea4:	6033      	str	r3, [r6, #0]
 8006ea6:	2000      	movs	r0, #0
 8006ea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006eaa:	f000 f8df 	bl	800706c <__malloc_lock>
 8006eae:	4921      	ldr	r1, [pc, #132]	; (8006f34 <_malloc_r+0xac>)
 8006eb0:	680a      	ldr	r2, [r1, #0]
 8006eb2:	4614      	mov	r4, r2
 8006eb4:	b99c      	cbnz	r4, 8006ede <_malloc_r+0x56>
 8006eb6:	4f20      	ldr	r7, [pc, #128]	; (8006f38 <_malloc_r+0xb0>)
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	b923      	cbnz	r3, 8006ec6 <_malloc_r+0x3e>
 8006ebc:	4621      	mov	r1, r4
 8006ebe:	4630      	mov	r0, r6
 8006ec0:	f000 f83c 	bl	8006f3c <_sbrk_r>
 8006ec4:	6038      	str	r0, [r7, #0]
 8006ec6:	4629      	mov	r1, r5
 8006ec8:	4630      	mov	r0, r6
 8006eca:	f000 f837 	bl	8006f3c <_sbrk_r>
 8006ece:	1c43      	adds	r3, r0, #1
 8006ed0:	d123      	bne.n	8006f1a <_malloc_r+0x92>
 8006ed2:	230c      	movs	r3, #12
 8006ed4:	6033      	str	r3, [r6, #0]
 8006ed6:	4630      	mov	r0, r6
 8006ed8:	f000 f8ce 	bl	8007078 <__malloc_unlock>
 8006edc:	e7e3      	b.n	8006ea6 <_malloc_r+0x1e>
 8006ede:	6823      	ldr	r3, [r4, #0]
 8006ee0:	1b5b      	subs	r3, r3, r5
 8006ee2:	d417      	bmi.n	8006f14 <_malloc_r+0x8c>
 8006ee4:	2b0b      	cmp	r3, #11
 8006ee6:	d903      	bls.n	8006ef0 <_malloc_r+0x68>
 8006ee8:	6023      	str	r3, [r4, #0]
 8006eea:	441c      	add	r4, r3
 8006eec:	6025      	str	r5, [r4, #0]
 8006eee:	e004      	b.n	8006efa <_malloc_r+0x72>
 8006ef0:	6863      	ldr	r3, [r4, #4]
 8006ef2:	42a2      	cmp	r2, r4
 8006ef4:	bf0c      	ite	eq
 8006ef6:	600b      	streq	r3, [r1, #0]
 8006ef8:	6053      	strne	r3, [r2, #4]
 8006efa:	4630      	mov	r0, r6
 8006efc:	f000 f8bc 	bl	8007078 <__malloc_unlock>
 8006f00:	f104 000b 	add.w	r0, r4, #11
 8006f04:	1d23      	adds	r3, r4, #4
 8006f06:	f020 0007 	bic.w	r0, r0, #7
 8006f0a:	1ac2      	subs	r2, r0, r3
 8006f0c:	d0cc      	beq.n	8006ea8 <_malloc_r+0x20>
 8006f0e:	1a1b      	subs	r3, r3, r0
 8006f10:	50a3      	str	r3, [r4, r2]
 8006f12:	e7c9      	b.n	8006ea8 <_malloc_r+0x20>
 8006f14:	4622      	mov	r2, r4
 8006f16:	6864      	ldr	r4, [r4, #4]
 8006f18:	e7cc      	b.n	8006eb4 <_malloc_r+0x2c>
 8006f1a:	1cc4      	adds	r4, r0, #3
 8006f1c:	f024 0403 	bic.w	r4, r4, #3
 8006f20:	42a0      	cmp	r0, r4
 8006f22:	d0e3      	beq.n	8006eec <_malloc_r+0x64>
 8006f24:	1a21      	subs	r1, r4, r0
 8006f26:	4630      	mov	r0, r6
 8006f28:	f000 f808 	bl	8006f3c <_sbrk_r>
 8006f2c:	3001      	adds	r0, #1
 8006f2e:	d1dd      	bne.n	8006eec <_malloc_r+0x64>
 8006f30:	e7cf      	b.n	8006ed2 <_malloc_r+0x4a>
 8006f32:	bf00      	nop
 8006f34:	2001a7cc 	.word	0x2001a7cc
 8006f38:	2001a7d0 	.word	0x2001a7d0

08006f3c <_sbrk_r>:
 8006f3c:	b538      	push	{r3, r4, r5, lr}
 8006f3e:	4d06      	ldr	r5, [pc, #24]	; (8006f58 <_sbrk_r+0x1c>)
 8006f40:	2300      	movs	r3, #0
 8006f42:	4604      	mov	r4, r0
 8006f44:	4608      	mov	r0, r1
 8006f46:	602b      	str	r3, [r5, #0]
 8006f48:	f000 f8ae 	bl	80070a8 <_sbrk>
 8006f4c:	1c43      	adds	r3, r0, #1
 8006f4e:	d102      	bne.n	8006f56 <_sbrk_r+0x1a>
 8006f50:	682b      	ldr	r3, [r5, #0]
 8006f52:	b103      	cbz	r3, 8006f56 <_sbrk_r+0x1a>
 8006f54:	6023      	str	r3, [r4, #0]
 8006f56:	bd38      	pop	{r3, r4, r5, pc}
 8006f58:	2001a918 	.word	0x2001a918

08006f5c <__sread>:
 8006f5c:	b510      	push	{r4, lr}
 8006f5e:	460c      	mov	r4, r1
 8006f60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f64:	f000 f88e 	bl	8007084 <_read_r>
 8006f68:	2800      	cmp	r0, #0
 8006f6a:	bfab      	itete	ge
 8006f6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006f6e:	89a3      	ldrhlt	r3, [r4, #12]
 8006f70:	181b      	addge	r3, r3, r0
 8006f72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006f76:	bfac      	ite	ge
 8006f78:	6563      	strge	r3, [r4, #84]	; 0x54
 8006f7a:	81a3      	strhlt	r3, [r4, #12]
 8006f7c:	bd10      	pop	{r4, pc}

08006f7e <__swrite>:
 8006f7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f82:	461f      	mov	r7, r3
 8006f84:	898b      	ldrh	r3, [r1, #12]
 8006f86:	05db      	lsls	r3, r3, #23
 8006f88:	4605      	mov	r5, r0
 8006f8a:	460c      	mov	r4, r1
 8006f8c:	4616      	mov	r6, r2
 8006f8e:	d505      	bpl.n	8006f9c <__swrite+0x1e>
 8006f90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f94:	2302      	movs	r3, #2
 8006f96:	2200      	movs	r2, #0
 8006f98:	f000 f856 	bl	8007048 <_lseek_r>
 8006f9c:	89a3      	ldrh	r3, [r4, #12]
 8006f9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006fa2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006fa6:	81a3      	strh	r3, [r4, #12]
 8006fa8:	4632      	mov	r2, r6
 8006faa:	463b      	mov	r3, r7
 8006fac:	4628      	mov	r0, r5
 8006fae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006fb2:	f7ff bb6b 	b.w	800668c <_write_r>

08006fb6 <__sseek>:
 8006fb6:	b510      	push	{r4, lr}
 8006fb8:	460c      	mov	r4, r1
 8006fba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fbe:	f000 f843 	bl	8007048 <_lseek_r>
 8006fc2:	1c43      	adds	r3, r0, #1
 8006fc4:	89a3      	ldrh	r3, [r4, #12]
 8006fc6:	bf15      	itete	ne
 8006fc8:	6560      	strne	r0, [r4, #84]	; 0x54
 8006fca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006fce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006fd2:	81a3      	strheq	r3, [r4, #12]
 8006fd4:	bf18      	it	ne
 8006fd6:	81a3      	strhne	r3, [r4, #12]
 8006fd8:	bd10      	pop	{r4, pc}

08006fda <__sclose>:
 8006fda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fde:	f000 b801 	b.w	8006fe4 <_close_r>
	...

08006fe4 <_close_r>:
 8006fe4:	b538      	push	{r3, r4, r5, lr}
 8006fe6:	4d06      	ldr	r5, [pc, #24]	; (8007000 <_close_r+0x1c>)
 8006fe8:	2300      	movs	r3, #0
 8006fea:	4604      	mov	r4, r0
 8006fec:	4608      	mov	r0, r1
 8006fee:	602b      	str	r3, [r5, #0]
 8006ff0:	f7f9 fdbd 	bl	8000b6e <_close>
 8006ff4:	1c43      	adds	r3, r0, #1
 8006ff6:	d102      	bne.n	8006ffe <_close_r+0x1a>
 8006ff8:	682b      	ldr	r3, [r5, #0]
 8006ffa:	b103      	cbz	r3, 8006ffe <_close_r+0x1a>
 8006ffc:	6023      	str	r3, [r4, #0]
 8006ffe:	bd38      	pop	{r3, r4, r5, pc}
 8007000:	2001a918 	.word	0x2001a918

08007004 <_fstat_r>:
 8007004:	b538      	push	{r3, r4, r5, lr}
 8007006:	4d07      	ldr	r5, [pc, #28]	; (8007024 <_fstat_r+0x20>)
 8007008:	2300      	movs	r3, #0
 800700a:	4604      	mov	r4, r0
 800700c:	4608      	mov	r0, r1
 800700e:	4611      	mov	r1, r2
 8007010:	602b      	str	r3, [r5, #0]
 8007012:	f7f9 fdb8 	bl	8000b86 <_fstat>
 8007016:	1c43      	adds	r3, r0, #1
 8007018:	d102      	bne.n	8007020 <_fstat_r+0x1c>
 800701a:	682b      	ldr	r3, [r5, #0]
 800701c:	b103      	cbz	r3, 8007020 <_fstat_r+0x1c>
 800701e:	6023      	str	r3, [r4, #0]
 8007020:	bd38      	pop	{r3, r4, r5, pc}
 8007022:	bf00      	nop
 8007024:	2001a918 	.word	0x2001a918

08007028 <_isatty_r>:
 8007028:	b538      	push	{r3, r4, r5, lr}
 800702a:	4d06      	ldr	r5, [pc, #24]	; (8007044 <_isatty_r+0x1c>)
 800702c:	2300      	movs	r3, #0
 800702e:	4604      	mov	r4, r0
 8007030:	4608      	mov	r0, r1
 8007032:	602b      	str	r3, [r5, #0]
 8007034:	f7f9 fdb7 	bl	8000ba6 <_isatty>
 8007038:	1c43      	adds	r3, r0, #1
 800703a:	d102      	bne.n	8007042 <_isatty_r+0x1a>
 800703c:	682b      	ldr	r3, [r5, #0]
 800703e:	b103      	cbz	r3, 8007042 <_isatty_r+0x1a>
 8007040:	6023      	str	r3, [r4, #0]
 8007042:	bd38      	pop	{r3, r4, r5, pc}
 8007044:	2001a918 	.word	0x2001a918

08007048 <_lseek_r>:
 8007048:	b538      	push	{r3, r4, r5, lr}
 800704a:	4d07      	ldr	r5, [pc, #28]	; (8007068 <_lseek_r+0x20>)
 800704c:	4604      	mov	r4, r0
 800704e:	4608      	mov	r0, r1
 8007050:	4611      	mov	r1, r2
 8007052:	2200      	movs	r2, #0
 8007054:	602a      	str	r2, [r5, #0]
 8007056:	461a      	mov	r2, r3
 8007058:	f7f9 fdb0 	bl	8000bbc <_lseek>
 800705c:	1c43      	adds	r3, r0, #1
 800705e:	d102      	bne.n	8007066 <_lseek_r+0x1e>
 8007060:	682b      	ldr	r3, [r5, #0]
 8007062:	b103      	cbz	r3, 8007066 <_lseek_r+0x1e>
 8007064:	6023      	str	r3, [r4, #0]
 8007066:	bd38      	pop	{r3, r4, r5, pc}
 8007068:	2001a918 	.word	0x2001a918

0800706c <__malloc_lock>:
 800706c:	4801      	ldr	r0, [pc, #4]	; (8007074 <__malloc_lock+0x8>)
 800706e:	f7ff be55 	b.w	8006d1c <__retarget_lock_acquire_recursive>
 8007072:	bf00      	nop
 8007074:	2001a910 	.word	0x2001a910

08007078 <__malloc_unlock>:
 8007078:	4801      	ldr	r0, [pc, #4]	; (8007080 <__malloc_unlock+0x8>)
 800707a:	f7ff be50 	b.w	8006d1e <__retarget_lock_release_recursive>
 800707e:	bf00      	nop
 8007080:	2001a910 	.word	0x2001a910

08007084 <_read_r>:
 8007084:	b538      	push	{r3, r4, r5, lr}
 8007086:	4d07      	ldr	r5, [pc, #28]	; (80070a4 <_read_r+0x20>)
 8007088:	4604      	mov	r4, r0
 800708a:	4608      	mov	r0, r1
 800708c:	4611      	mov	r1, r2
 800708e:	2200      	movs	r2, #0
 8007090:	602a      	str	r2, [r5, #0]
 8007092:	461a      	mov	r2, r3
 8007094:	f7f9 fd4e 	bl	8000b34 <_read>
 8007098:	1c43      	adds	r3, r0, #1
 800709a:	d102      	bne.n	80070a2 <_read_r+0x1e>
 800709c:	682b      	ldr	r3, [r5, #0]
 800709e:	b103      	cbz	r3, 80070a2 <_read_r+0x1e>
 80070a0:	6023      	str	r3, [r4, #0]
 80070a2:	bd38      	pop	{r3, r4, r5, pc}
 80070a4:	2001a918 	.word	0x2001a918

080070a8 <_sbrk>:
 80070a8:	4b04      	ldr	r3, [pc, #16]	; (80070bc <_sbrk+0x14>)
 80070aa:	6819      	ldr	r1, [r3, #0]
 80070ac:	4602      	mov	r2, r0
 80070ae:	b909      	cbnz	r1, 80070b4 <_sbrk+0xc>
 80070b0:	4903      	ldr	r1, [pc, #12]	; (80070c0 <_sbrk+0x18>)
 80070b2:	6019      	str	r1, [r3, #0]
 80070b4:	6818      	ldr	r0, [r3, #0]
 80070b6:	4402      	add	r2, r0
 80070b8:	601a      	str	r2, [r3, #0]
 80070ba:	4770      	bx	lr
 80070bc:	2001a7d4 	.word	0x2001a7d4
 80070c0:	2001a920 	.word	0x2001a920

080070c4 <_init>:
 80070c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070c6:	bf00      	nop
 80070c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070ca:	bc08      	pop	{r3}
 80070cc:	469e      	mov	lr, r3
 80070ce:	4770      	bx	lr

080070d0 <_fini>:
 80070d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070d2:	bf00      	nop
 80070d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070d6:	bc08      	pop	{r3}
 80070d8:	469e      	mov	lr, r3
 80070da:	4770      	bx	lr
