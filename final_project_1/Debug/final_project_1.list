
final_project_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008aa4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000494  08008c34  08008c34  00018c34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080090c8  080090c8  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  080090c8  080090c8  000190c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080090d0  080090d0  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080090d0  080090d0  000190d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080090d4  080090d4  000190d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  080090d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00019324  2000008c  08009164  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200193b0  08009164  000293b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fb0a  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e34  00000000  00000000  0003fbc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001468  00000000  00000000  00043a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012f0  00000000  00000000  00044e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025712  00000000  00000000  00046158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019290  00000000  00000000  0006b86a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db636  00000000  00000000  00084afa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00160130  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d80  00000000  00000000  00160184  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000008c 	.word	0x2000008c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008c1c 	.word	0x08008c1c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000090 	.word	0x20000090
 80001cc:	08008c1c 	.word	0x08008c1c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <led_effect_stop>:


#include "main.h"

void led_effect_stop(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af02      	add	r7, sp, #8
	for(int i = 0 ; i < 4 ; i++)
 800059e:	2300      	movs	r3, #0
 80005a0:	607b      	str	r3, [r7, #4]
 80005a2:	e00e      	b.n	80005c2 <led_effect_stop+0x2a>
		xTimerStop(handle_led_timer[i],portMAX_DELAY);
 80005a4:	4a0b      	ldr	r2, [pc, #44]	; (80005d4 <led_effect_stop+0x3c>)
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80005ac:	f04f 33ff 	mov.w	r3, #4294967295
 80005b0:	9300      	str	r3, [sp, #0]
 80005b2:	2300      	movs	r3, #0
 80005b4:	2200      	movs	r2, #0
 80005b6:	2103      	movs	r1, #3
 80005b8:	f006 fa60 	bl	8006a7c <xTimerGenericCommand>
	for(int i = 0 ; i < 4 ; i++)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	3301      	adds	r3, #1
 80005c0:	607b      	str	r3, [r7, #4]
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	2b03      	cmp	r3, #3
 80005c6:	dded      	ble.n	80005a4 <led_effect_stop+0xc>
}
 80005c8:	bf00      	nop
 80005ca:	bf00      	nop
 80005cc:	3708      	adds	r7, #8
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	2001927c 	.word	0x2001927c

080005d8 <led_effect>:

void led_effect(int n )
{
 80005d8:	b590      	push	{r4, r7, lr}
 80005da:	b085      	sub	sp, #20
 80005dc:	af02      	add	r7, sp, #8
 80005de:	6078      	str	r0, [r7, #4]
	led_effect_stop();
 80005e0:	f7ff ffda 	bl	8000598 <led_effect_stop>
	xTimerStart(handle_led_timer[n-1], portMAX_DELAY);
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	3b01      	subs	r3, #1
 80005e8:	4a08      	ldr	r2, [pc, #32]	; (800060c <led_effect+0x34>)
 80005ea:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80005ee:	f005 fb47 	bl	8005c80 <xTaskGetTickCount>
 80005f2:	4602      	mov	r2, r0
 80005f4:	f04f 33ff 	mov.w	r3, #4294967295
 80005f8:	9300      	str	r3, [sp, #0]
 80005fa:	2300      	movs	r3, #0
 80005fc:	2101      	movs	r1, #1
 80005fe:	4620      	mov	r0, r4
 8000600:	f006 fa3c 	bl	8006a7c <xTimerGenericCommand>

}
 8000604:	bf00      	nop
 8000606:	370c      	adds	r7, #12
 8000608:	46bd      	mov	sp, r7
 800060a:	bd90      	pop	{r4, r7, pc}
 800060c:	2001927c 	.word	0x2001927c

08000610 <turn_off_all_leds>:

void turn_off_all_leds(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin,GPIO_PIN_RESET);
 8000614:	2200      	movs	r2, #0
 8000616:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800061a:	480b      	ldr	r0, [pc, #44]	; (8000648 <turn_off_all_leds+0x38>)
 800061c:	f001 ff3c 	bl	8002498 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin,GPIO_PIN_RESET);
 8000620:	2200      	movs	r2, #0
 8000622:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000626:	4808      	ldr	r0, [pc, #32]	; (8000648 <turn_off_all_leds+0x38>)
 8000628:	f001 ff36 	bl	8002498 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin,GPIO_PIN_RESET);
 800062c:	2200      	movs	r2, #0
 800062e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000632:	4805      	ldr	r0, [pc, #20]	; (8000648 <turn_off_all_leds+0x38>)
 8000634:	f001 ff30 	bl	8002498 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin,GPIO_PIN_RESET);
 8000638:	2200      	movs	r2, #0
 800063a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800063e:	4802      	ldr	r0, [pc, #8]	; (8000648 <turn_off_all_leds+0x38>)
 8000640:	f001 ff2a 	bl	8002498 <HAL_GPIO_WritePin>
}
 8000644:	bf00      	nop
 8000646:	bd80      	pop	{r7, pc}
 8000648:	40020c00 	.word	0x40020c00

0800064c <turn_on_all_leds>:


void turn_on_all_leds(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin,GPIO_PIN_SET);
 8000650:	2201      	movs	r2, #1
 8000652:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000656:	480b      	ldr	r0, [pc, #44]	; (8000684 <turn_on_all_leds+0x38>)
 8000658:	f001 ff1e 	bl	8002498 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin,GPIO_PIN_SET);
 800065c:	2201      	movs	r2, #1
 800065e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000662:	4808      	ldr	r0, [pc, #32]	; (8000684 <turn_on_all_leds+0x38>)
 8000664:	f001 ff18 	bl	8002498 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin,GPIO_PIN_SET);
 8000668:	2201      	movs	r2, #1
 800066a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800066e:	4805      	ldr	r0, [pc, #20]	; (8000684 <turn_on_all_leds+0x38>)
 8000670:	f001 ff12 	bl	8002498 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin,GPIO_PIN_SET);
 8000674:	2201      	movs	r2, #1
 8000676:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800067a:	4802      	ldr	r0, [pc, #8]	; (8000684 <turn_on_all_leds+0x38>)
 800067c:	f001 ff0c 	bl	8002498 <HAL_GPIO_WritePin>
}
 8000680:	bf00      	nop
 8000682:	bd80      	pop	{r7, pc}
 8000684:	40020c00 	.word	0x40020c00

08000688 <turn_on_odd_leds>:

void turn_on_odd_leds(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD3_GPIO_Port, LED1,GPIO_PIN_SET);
 800068c:	2201      	movs	r2, #1
 800068e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000692:	480b      	ldr	r0, [pc, #44]	; (80006c0 <turn_on_odd_leds+0x38>)
 8000694:	f001 ff00 	bl	8002498 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD4_GPIO_Port, LED2,GPIO_PIN_RESET);
 8000698:	2200      	movs	r2, #0
 800069a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800069e:	4808      	ldr	r0, [pc, #32]	; (80006c0 <turn_on_odd_leds+0x38>)
 80006a0:	f001 fefa 	bl	8002498 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD5_GPIO_Port, LED3,GPIO_PIN_SET);
 80006a4:	2201      	movs	r2, #1
 80006a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006aa:	4805      	ldr	r0, [pc, #20]	; (80006c0 <turn_on_odd_leds+0x38>)
 80006ac:	f001 fef4 	bl	8002498 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD6_GPIO_Port, LED4,GPIO_PIN_RESET);
 80006b0:	2200      	movs	r2, #0
 80006b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006b6:	4802      	ldr	r0, [pc, #8]	; (80006c0 <turn_on_odd_leds+0x38>)
 80006b8:	f001 feee 	bl	8002498 <HAL_GPIO_WritePin>
}
 80006bc:	bf00      	nop
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40020c00 	.word	0x40020c00

080006c4 <turn_on_even_leds>:


void turn_on_even_leds(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD3_GPIO_Port, LED1,GPIO_PIN_RESET);
 80006c8:	2200      	movs	r2, #0
 80006ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006ce:	480b      	ldr	r0, [pc, #44]	; (80006fc <turn_on_even_leds+0x38>)
 80006d0:	f001 fee2 	bl	8002498 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD4_GPIO_Port, LED2,GPIO_PIN_SET);
 80006d4:	2201      	movs	r2, #1
 80006d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006da:	4808      	ldr	r0, [pc, #32]	; (80006fc <turn_on_even_leds+0x38>)
 80006dc:	f001 fedc 	bl	8002498 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD5_GPIO_Port, LED3,GPIO_PIN_RESET);
 80006e0:	2200      	movs	r2, #0
 80006e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006e6:	4805      	ldr	r0, [pc, #20]	; (80006fc <turn_on_even_leds+0x38>)
 80006e8:	f001 fed6 	bl	8002498 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD6_GPIO_Port, LED4,GPIO_PIN_SET);
 80006ec:	2201      	movs	r2, #1
 80006ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006f2:	4802      	ldr	r0, [pc, #8]	; (80006fc <turn_on_even_leds+0x38>)
 80006f4:	f001 fed0 	bl	8002498 <HAL_GPIO_WritePin>
}
 80006f8:	bf00      	nop
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	40020c00 	.word	0x40020c00

08000700 <LED_control>:

void LED_control( int value )
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  for(int i = 0 ; i < 4 ; i++)
 8000708:	2300      	movs	r3, #0
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	e014      	b.n	8000738 <LED_control+0x38>
	  HAL_GPIO_WritePin(LD3_GPIO_Port, (LED1 << i), ((value >> i)& 0x1));
 800070e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	fa02 f303 	lsl.w	r3, r2, r3
 8000718:	b299      	uxth	r1, r3
 800071a:	687a      	ldr	r2, [r7, #4]
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	fa42 f303 	asr.w	r3, r2, r3
 8000722:	b2db      	uxtb	r3, r3
 8000724:	f003 0301 	and.w	r3, r3, #1
 8000728:	b2db      	uxtb	r3, r3
 800072a:	461a      	mov	r2, r3
 800072c:	4806      	ldr	r0, [pc, #24]	; (8000748 <LED_control+0x48>)
 800072e:	f001 feb3 	bl	8002498 <HAL_GPIO_WritePin>
  for(int i = 0 ; i < 4 ; i++)
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	3301      	adds	r3, #1
 8000736:	60fb      	str	r3, [r7, #12]
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	2b03      	cmp	r3, #3
 800073c:	dde7      	ble.n	800070e <LED_control+0xe>
}
 800073e:	bf00      	nop
 8000740:	bf00      	nop
 8000742:	3710      	adds	r7, #16
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	40020c00 	.word	0x40020c00

0800074c <LED_effect1>:


void LED_effect1(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
	static int flag = 1;
	(flag ^= 1) ? turn_off_all_leds() : turn_on_all_leds();
 8000750:	4b08      	ldr	r3, [pc, #32]	; (8000774 <LED_effect1+0x28>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f083 0301 	eor.w	r3, r3, #1
 8000758:	4a06      	ldr	r2, [pc, #24]	; (8000774 <LED_effect1+0x28>)
 800075a:	6013      	str	r3, [r2, #0]
 800075c:	4b05      	ldr	r3, [pc, #20]	; (8000774 <LED_effect1+0x28>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d002      	beq.n	800076a <LED_effect1+0x1e>
 8000764:	f7ff ff54 	bl	8000610 <turn_off_all_leds>
}
 8000768:	e001      	b.n	800076e <LED_effect1+0x22>
	(flag ^= 1) ? turn_off_all_leds() : turn_on_all_leds();
 800076a:	f7ff ff6f 	bl	800064c <turn_on_all_leds>
}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	20000000 	.word	0x20000000

08000778 <LED_effect2>:


void LED_effect2(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
	static int flag = 1;
	(flag ^= 1) ? turn_on_even_leds() : turn_on_odd_leds();
 800077c:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <LED_effect2+0x28>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	f083 0301 	eor.w	r3, r3, #1
 8000784:	4a06      	ldr	r2, [pc, #24]	; (80007a0 <LED_effect2+0x28>)
 8000786:	6013      	str	r3, [r2, #0]
 8000788:	4b05      	ldr	r3, [pc, #20]	; (80007a0 <LED_effect2+0x28>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d002      	beq.n	8000796 <LED_effect2+0x1e>
 8000790:	f7ff ff98 	bl	80006c4 <turn_on_even_leds>
}
 8000794:	e001      	b.n	800079a <LED_effect2+0x22>
	(flag ^= 1) ? turn_on_even_leds() : turn_on_odd_leds();
 8000796:	f7ff ff77 	bl	8000688 <turn_on_odd_leds>
}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	20000004 	.word	0x20000004

080007a4 <LED_effect3>:

void LED_effect3(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
	static int i = 0;
	LED_control( 0x1 << (i++ % 4) );
 80007a8:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <LED_effect3+0x2c>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	1c5a      	adds	r2, r3, #1
 80007ae:	4908      	ldr	r1, [pc, #32]	; (80007d0 <LED_effect3+0x2c>)
 80007b0:	600a      	str	r2, [r1, #0]
 80007b2:	425a      	negs	r2, r3
 80007b4:	f003 0303 	and.w	r3, r3, #3
 80007b8:	f002 0203 	and.w	r2, r2, #3
 80007bc:	bf58      	it	pl
 80007be:	4253      	negpl	r3, r2
 80007c0:	2201      	movs	r2, #1
 80007c2:	fa02 f303 	lsl.w	r3, r2, r3
 80007c6:	4618      	mov	r0, r3
 80007c8:	f7ff ff9a 	bl	8000700 <LED_control>
}
 80007cc:	bf00      	nop
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	200000a8 	.word	0x200000a8

080007d4 <LED_effect4>:


void LED_effect4(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
	static int i = 0;
	LED_control( 0x08 >> (i++ % 4) );
 80007d8:	4b09      	ldr	r3, [pc, #36]	; (8000800 <LED_effect4+0x2c>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	1c5a      	adds	r2, r3, #1
 80007de:	4908      	ldr	r1, [pc, #32]	; (8000800 <LED_effect4+0x2c>)
 80007e0:	600a      	str	r2, [r1, #0]
 80007e2:	425a      	negs	r2, r3
 80007e4:	f003 0303 	and.w	r3, r3, #3
 80007e8:	f002 0203 	and.w	r2, r2, #3
 80007ec:	bf58      	it	pl
 80007ee:	4253      	negpl	r3, r2
 80007f0:	2208      	movs	r2, #8
 80007f2:	fa42 f303 	asr.w	r3, r2, r3
 80007f6:	4618      	mov	r0, r3
 80007f8:	f7ff ff82 	bl	8000700 <LED_control>
}
 80007fc:	bf00      	nop
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	200000ac 	.word	0x200000ac

08000804 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b08c      	sub	sp, #48	; 0x30
 8000808:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800080a:	f001 faf3 	bl	8001df4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800080e:	f000 f911 	bl	8000a34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000812:	f000 f9e1 	bl	8000bd8 <MX_GPIO_Init>
  MX_RTC_Init();
 8000816:	f000 f98f 	bl	8000b38 <MX_RTC_Init>
  MX_USART2_UART_Init();
 800081a:	f000 f9b3 	bl	8000b84 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */


	status = xTaskCreate(menu_task, "menu_task", 250, NULL, 2, &handle_menu_task);
 800081e:	4b6c      	ldr	r3, [pc, #432]	; (80009d0 <main+0x1cc>)
 8000820:	9301      	str	r3, [sp, #4]
 8000822:	2302      	movs	r3, #2
 8000824:	9300      	str	r3, [sp, #0]
 8000826:	2300      	movs	r3, #0
 8000828:	22fa      	movs	r2, #250	; 0xfa
 800082a:	496a      	ldr	r1, [pc, #424]	; (80009d4 <main+0x1d0>)
 800082c:	486a      	ldr	r0, [pc, #424]	; (80009d8 <main+0x1d4>)
 800082e:	f004 ffe5 	bl	80057fc <xTaskCreate>
 8000832:	6238      	str	r0, [r7, #32]

	configASSERT(status == pdPASS);
 8000834:	6a3b      	ldr	r3, [r7, #32]
 8000836:	2b01      	cmp	r3, #1
 8000838:	d00a      	beq.n	8000850 <main+0x4c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800083a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800083e:	f383 8811 	msr	BASEPRI, r3
 8000842:	f3bf 8f6f 	isb	sy
 8000846:	f3bf 8f4f 	dsb	sy
 800084a:	61fb      	str	r3, [r7, #28]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800084c:	bf00      	nop
 800084e:	e7fe      	b.n	800084e <main+0x4a>

	status = xTaskCreate(cmd_handler_task, "cmd_task", 250, NULL, 2, &handle_cmd_task);
 8000850:	4b62      	ldr	r3, [pc, #392]	; (80009dc <main+0x1d8>)
 8000852:	9301      	str	r3, [sp, #4]
 8000854:	2302      	movs	r3, #2
 8000856:	9300      	str	r3, [sp, #0]
 8000858:	2300      	movs	r3, #0
 800085a:	22fa      	movs	r2, #250	; 0xfa
 800085c:	4960      	ldr	r1, [pc, #384]	; (80009e0 <main+0x1dc>)
 800085e:	4861      	ldr	r0, [pc, #388]	; (80009e4 <main+0x1e0>)
 8000860:	f004 ffcc 	bl	80057fc <xTaskCreate>
 8000864:	6238      	str	r0, [r7, #32]

	configASSERT(status == pdPASS);
 8000866:	6a3b      	ldr	r3, [r7, #32]
 8000868:	2b01      	cmp	r3, #1
 800086a:	d00a      	beq.n	8000882 <main+0x7e>
        __asm volatile
 800086c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000870:	f383 8811 	msr	BASEPRI, r3
 8000874:	f3bf 8f6f 	isb	sy
 8000878:	f3bf 8f4f 	dsb	sy
 800087c:	61bb      	str	r3, [r7, #24]
    }
 800087e:	bf00      	nop
 8000880:	e7fe      	b.n	8000880 <main+0x7c>

	status = xTaskCreate(print_task, "print_task", 250, NULL, 2, &handle_print_task);
 8000882:	4b59      	ldr	r3, [pc, #356]	; (80009e8 <main+0x1e4>)
 8000884:	9301      	str	r3, [sp, #4]
 8000886:	2302      	movs	r3, #2
 8000888:	9300      	str	r3, [sp, #0]
 800088a:	2300      	movs	r3, #0
 800088c:	22fa      	movs	r2, #250	; 0xfa
 800088e:	4957      	ldr	r1, [pc, #348]	; (80009ec <main+0x1e8>)
 8000890:	4857      	ldr	r0, [pc, #348]	; (80009f0 <main+0x1ec>)
 8000892:	f004 ffb3 	bl	80057fc <xTaskCreate>
 8000896:	6238      	str	r0, [r7, #32]

	configASSERT(status == pdPASS);
 8000898:	6a3b      	ldr	r3, [r7, #32]
 800089a:	2b01      	cmp	r3, #1
 800089c:	d00a      	beq.n	80008b4 <main+0xb0>
        __asm volatile
 800089e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008a2:	f383 8811 	msr	BASEPRI, r3
 80008a6:	f3bf 8f6f 	isb	sy
 80008aa:	f3bf 8f4f 	dsb	sy
 80008ae:	617b      	str	r3, [r7, #20]
    }
 80008b0:	bf00      	nop
 80008b2:	e7fe      	b.n	80008b2 <main+0xae>

	status = xTaskCreate(led_task, "led_task", 250, NULL, 2, &handle_led_task);
 80008b4:	4b4f      	ldr	r3, [pc, #316]	; (80009f4 <main+0x1f0>)
 80008b6:	9301      	str	r3, [sp, #4]
 80008b8:	2302      	movs	r3, #2
 80008ba:	9300      	str	r3, [sp, #0]
 80008bc:	2300      	movs	r3, #0
 80008be:	22fa      	movs	r2, #250	; 0xfa
 80008c0:	494d      	ldr	r1, [pc, #308]	; (80009f8 <main+0x1f4>)
 80008c2:	484e      	ldr	r0, [pc, #312]	; (80009fc <main+0x1f8>)
 80008c4:	f004 ff9a 	bl	80057fc <xTaskCreate>
 80008c8:	6238      	str	r0, [r7, #32]

	configASSERT(status == pdPASS);
 80008ca:	6a3b      	ldr	r3, [r7, #32]
 80008cc:	2b01      	cmp	r3, #1
 80008ce:	d00a      	beq.n	80008e6 <main+0xe2>
        __asm volatile
 80008d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008d4:	f383 8811 	msr	BASEPRI, r3
 80008d8:	f3bf 8f6f 	isb	sy
 80008dc:	f3bf 8f4f 	dsb	sy
 80008e0:	613b      	str	r3, [r7, #16]
    }
 80008e2:	bf00      	nop
 80008e4:	e7fe      	b.n	80008e4 <main+0xe0>

	status = xTaskCreate(rtc_task, "rtc_task", 250, NULL, 2, &handle_rtc_task);
 80008e6:	4b46      	ldr	r3, [pc, #280]	; (8000a00 <main+0x1fc>)
 80008e8:	9301      	str	r3, [sp, #4]
 80008ea:	2302      	movs	r3, #2
 80008ec:	9300      	str	r3, [sp, #0]
 80008ee:	2300      	movs	r3, #0
 80008f0:	22fa      	movs	r2, #250	; 0xfa
 80008f2:	4944      	ldr	r1, [pc, #272]	; (8000a04 <main+0x200>)
 80008f4:	4844      	ldr	r0, [pc, #272]	; (8000a08 <main+0x204>)
 80008f6:	f004 ff81 	bl	80057fc <xTaskCreate>
 80008fa:	6238      	str	r0, [r7, #32]

	configASSERT(status == pdPASS);
 80008fc:	6a3b      	ldr	r3, [r7, #32]
 80008fe:	2b01      	cmp	r3, #1
 8000900:	d00a      	beq.n	8000918 <main+0x114>
        __asm volatile
 8000902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000906:	f383 8811 	msr	BASEPRI, r3
 800090a:	f3bf 8f6f 	isb	sy
 800090e:	f3bf 8f4f 	dsb	sy
 8000912:	60fb      	str	r3, [r7, #12]
    }
 8000914:	bf00      	nop
 8000916:	e7fe      	b.n	8000916 <main+0x112>

	q_data = xQueueCreate (10, sizeof(char));
 8000918:	2200      	movs	r2, #0
 800091a:	2101      	movs	r1, #1
 800091c:	200a      	movs	r0, #10
 800091e:	f004 fa21 	bl	8004d64 <xQueueGenericCreate>
 8000922:	4603      	mov	r3, r0
 8000924:	4a39      	ldr	r2, [pc, #228]	; (8000a0c <main+0x208>)
 8000926:	6013      	str	r3, [r2, #0]

	configASSERT(q_data != NULL);
 8000928:	4b38      	ldr	r3, [pc, #224]	; (8000a0c <main+0x208>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d10a      	bne.n	8000946 <main+0x142>
        __asm volatile
 8000930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000934:	f383 8811 	msr	BASEPRI, r3
 8000938:	f3bf 8f6f 	isb	sy
 800093c:	f3bf 8f4f 	dsb	sy
 8000940:	60bb      	str	r3, [r7, #8]
    }
 8000942:	bf00      	nop
 8000944:	e7fe      	b.n	8000944 <main+0x140>

	q_print = xQueueCreate (10, sizeof(size_t));
 8000946:	2200      	movs	r2, #0
 8000948:	2104      	movs	r1, #4
 800094a:	200a      	movs	r0, #10
 800094c:	f004 fa0a 	bl	8004d64 <xQueueGenericCreate>
 8000950:	4603      	mov	r3, r0
 8000952:	4a2f      	ldr	r2, [pc, #188]	; (8000a10 <main+0x20c>)
 8000954:	6013      	str	r3, [r2, #0]

	configASSERT(q_print != NULL);
 8000956:	4b2e      	ldr	r3, [pc, #184]	; (8000a10 <main+0x20c>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d10a      	bne.n	8000974 <main+0x170>
        __asm volatile
 800095e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000962:	f383 8811 	msr	BASEPRI, r3
 8000966:	f3bf 8f6f 	isb	sy
 800096a:	f3bf 8f4f 	dsb	sy
 800096e:	607b      	str	r3, [r7, #4]
    }
 8000970:	bf00      	nop
 8000972:	e7fe      	b.n	8000972 <main+0x16e>


	//Create software timers for LED effects
	for(int i = 0 ; i < 4 ; i++)
 8000974:	2300      	movs	r3, #0
 8000976:	627b      	str	r3, [r7, #36]	; 0x24
 8000978:	e013      	b.n	80009a2 <main+0x19e>
		handle_led_timer[i] = xTimerCreate("led_timer",pdMS_TO_TICKS(500),pdTRUE, (void*)(i+1),led_effect_callback);
 800097a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800097c:	3301      	adds	r3, #1
 800097e:	461a      	mov	r2, r3
 8000980:	4b24      	ldr	r3, [pc, #144]	; (8000a14 <main+0x210>)
 8000982:	9300      	str	r3, [sp, #0]
 8000984:	4613      	mov	r3, r2
 8000986:	2201      	movs	r2, #1
 8000988:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800098c:	4822      	ldr	r0, [pc, #136]	; (8000a18 <main+0x214>)
 800098e:	f006 f819 	bl	80069c4 <xTimerCreate>
 8000992:	4602      	mov	r2, r0
 8000994:	4921      	ldr	r1, [pc, #132]	; (8000a1c <main+0x218>)
 8000996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000998:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0 ; i < 4 ; i++)
 800099c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800099e:	3301      	adds	r3, #1
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24
 80009a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a4:	2b03      	cmp	r3, #3
 80009a6:	dde8      	ble.n	800097a <main+0x176>


	rtc_timer = xTimerCreate ("rtc_report_timer",pdMS_TO_TICKS(1000),pdTRUE,NULL,rtc_report_callback);
 80009a8:	4b1d      	ldr	r3, [pc, #116]	; (8000a20 <main+0x21c>)
 80009aa:	9300      	str	r3, [sp, #0]
 80009ac:	2300      	movs	r3, #0
 80009ae:	2201      	movs	r2, #1
 80009b0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80009b4:	481b      	ldr	r0, [pc, #108]	; (8000a24 <main+0x220>)
 80009b6:	f006 f805 	bl	80069c4 <xTimerCreate>
 80009ba:	4603      	mov	r3, r0
 80009bc:	4a1a      	ldr	r2, [pc, #104]	; (8000a28 <main+0x224>)
 80009be:	6013      	str	r3, [r2, #0]

	HAL_UART_Receive_IT(&huart2, (uint8_t*)&user_data, 1);
 80009c0:	2201      	movs	r2, #1
 80009c2:	491a      	ldr	r1, [pc, #104]	; (8000a2c <main+0x228>)
 80009c4:	481a      	ldr	r0, [pc, #104]	; (8000a30 <main+0x22c>)
 80009c6:	f003 f9c8 	bl	8003d5a <HAL_UART_Receive_IT>

	vTaskStartScheduler();
 80009ca:	f005 f85d 	bl	8005a88 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009ce:	e7fe      	b.n	80009ce <main+0x1ca>
 80009d0:	2001929c 	.word	0x2001929c
 80009d4:	08008c34 	.word	0x08008c34
 80009d8:	0800157d 	.word	0x0800157d
 80009dc:	20019294 	.word	0x20019294
 80009e0:	08008c40 	.word	0x08008c40
 80009e4:	08001c85 	.word	0x08001c85
 80009e8:	200192c4 	.word	0x200192c4
 80009ec:	08008c4c 	.word	0x08008c4c
 80009f0:	08001c45 	.word	0x08001c45
 80009f4:	200192c8 	.word	0x200192c8
 80009f8:	08008c58 	.word	0x08008c58
 80009fc:	08001665 	.word	0x08001665
 8000a00:	20019290 	.word	0x20019290
 8000a04:	08008c64 	.word	0x08008c64
 8000a08:	080017d9 	.word	0x080017d9
 8000a0c:	20019298 	.word	0x20019298
 8000a10:	200192a0 	.word	0x200192a0
 8000a14:	08000ea9 	.word	0x08000ea9
 8000a18:	08008c70 	.word	0x08008c70
 8000a1c:	2001927c 	.word	0x2001927c
 8000a20:	08000e95 	.word	0x08000e95
 8000a24:	08008c7c 	.word	0x08008c7c
 8000a28:	2001928c 	.word	0x2001928c
 8000a2c:	200192cc 	.word	0x200192cc
 8000a30:	200192d0 	.word	0x200192d0

08000a34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b098      	sub	sp, #96	; 0x60
 8000a38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a3a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a3e:	2230      	movs	r2, #48	; 0x30
 8000a40:	2100      	movs	r1, #0
 8000a42:	4618      	mov	r0, r3
 8000a44:	f006 ffc8 	bl	80079d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a48:	f107 031c 	add.w	r3, r7, #28
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	60da      	str	r2, [r3, #12]
 8000a56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a58:	f107 030c 	add.w	r3, r7, #12
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	60bb      	str	r3, [r7, #8]
 8000a6a:	4b31      	ldr	r3, [pc, #196]	; (8000b30 <SystemClock_Config+0xfc>)
 8000a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6e:	4a30      	ldr	r2, [pc, #192]	; (8000b30 <SystemClock_Config+0xfc>)
 8000a70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a74:	6413      	str	r3, [r2, #64]	; 0x40
 8000a76:	4b2e      	ldr	r3, [pc, #184]	; (8000b30 <SystemClock_Config+0xfc>)
 8000a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a7e:	60bb      	str	r3, [r7, #8]
 8000a80:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a82:	2300      	movs	r3, #0
 8000a84:	607b      	str	r3, [r7, #4]
 8000a86:	4b2b      	ldr	r3, [pc, #172]	; (8000b34 <SystemClock_Config+0x100>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4a2a      	ldr	r2, [pc, #168]	; (8000b34 <SystemClock_Config+0x100>)
 8000a8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a90:	6013      	str	r3, [r2, #0]
 8000a92:	4b28      	ldr	r3, [pc, #160]	; (8000b34 <SystemClock_Config+0x100>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a9a:	607b      	str	r3, [r7, #4]
 8000a9c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000a9e:	230a      	movs	r3, #10
 8000aa0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000aa6:	2310      	movs	r3, #16
 8000aa8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ab6:	2308      	movs	r3, #8
 8000ab8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000aba:	2332      	movs	r3, #50	; 0x32
 8000abc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000abe:	2304      	movs	r3, #4
 8000ac0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ac2:	2307      	movs	r3, #7
 8000ac4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ac6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000aca:	4618      	mov	r0, r3
 8000acc:	f001 fcfe 	bl	80024cc <HAL_RCC_OscConfig>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000ad6:	f000 fa75 	bl	8000fc4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ada:	230f      	movs	r3, #15
 8000adc:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ae6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000aea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000aec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000af0:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000af2:	f107 031c 	add.w	r3, r7, #28
 8000af6:	2100      	movs	r1, #0
 8000af8:	4618      	mov	r0, r3
 8000afa:	f001 ff5f 	bl	80029bc <HAL_RCC_ClockConfig>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000b04:	f000 fa5e 	bl	8000fc4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000b0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b10:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b12:	f107 030c 	add.w	r3, r7, #12
 8000b16:	4618      	mov	r0, r3
 8000b18:	f002 f97e 	bl	8002e18 <HAL_RCCEx_PeriphCLKConfig>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000b22:	f000 fa4f 	bl	8000fc4 <Error_Handler>
  }
}
 8000b26:	bf00      	nop
 8000b28:	3760      	adds	r7, #96	; 0x60
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40023800 	.word	0x40023800
 8000b34:	40007000 	.word	0x40007000

08000b38 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000b3c:	4b0f      	ldr	r3, [pc, #60]	; (8000b7c <MX_RTC_Init+0x44>)
 8000b3e:	4a10      	ldr	r2, [pc, #64]	; (8000b80 <MX_RTC_Init+0x48>)
 8000b40:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000b42:	4b0e      	ldr	r3, [pc, #56]	; (8000b7c <MX_RTC_Init+0x44>)
 8000b44:	2240      	movs	r2, #64	; 0x40
 8000b46:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000b48:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <MX_RTC_Init+0x44>)
 8000b4a:	227f      	movs	r2, #127	; 0x7f
 8000b4c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000b4e:	4b0b      	ldr	r3, [pc, #44]	; (8000b7c <MX_RTC_Init+0x44>)
 8000b50:	22ff      	movs	r2, #255	; 0xff
 8000b52:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000b54:	4b09      	ldr	r3, [pc, #36]	; (8000b7c <MX_RTC_Init+0x44>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000b5a:	4b08      	ldr	r3, [pc, #32]	; (8000b7c <MX_RTC_Init+0x44>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000b60:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <MX_RTC_Init+0x44>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b66:	4805      	ldr	r0, [pc, #20]	; (8000b7c <MX_RTC_Init+0x44>)
 8000b68:	f002 fa38 	bl	8002fdc <HAL_RTC_Init>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000b72:	f000 fa27 	bl	8000fc4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	200192a4 	.word	0x200192a4
 8000b80:	40002800 	.word	0x40002800

08000b84 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b88:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <MX_USART2_UART_Init+0x4c>)
 8000b8a:	4a12      	ldr	r2, [pc, #72]	; (8000bd4 <MX_USART2_UART_Init+0x50>)
 8000b8c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b8e:	4b10      	ldr	r3, [pc, #64]	; (8000bd0 <MX_USART2_UART_Init+0x4c>)
 8000b90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b94:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b96:	4b0e      	ldr	r3, [pc, #56]	; (8000bd0 <MX_USART2_UART_Init+0x4c>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b9c:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <MX_USART2_UART_Init+0x4c>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ba2:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <MX_USART2_UART_Init+0x4c>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ba8:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <MX_USART2_UART_Init+0x4c>)
 8000baa:	220c      	movs	r2, #12
 8000bac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bae:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <MX_USART2_UART_Init+0x4c>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bb4:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <MX_USART2_UART_Init+0x4c>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bba:	4805      	ldr	r0, [pc, #20]	; (8000bd0 <MX_USART2_UART_Init+0x4c>)
 8000bbc:	f002 ffee 	bl	8003b9c <HAL_UART_Init>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000bc6:	f000 f9fd 	bl	8000fc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	200192d0 	.word	0x200192d0
 8000bd4:	40004400 	.word	0x40004400

08000bd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08c      	sub	sp, #48	; 0x30
 8000bdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bde:	f107 031c 	add.w	r3, r7, #28
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	605a      	str	r2, [r3, #4]
 8000be8:	609a      	str	r2, [r3, #8]
 8000bea:	60da      	str	r2, [r3, #12]
 8000bec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	61bb      	str	r3, [r7, #24]
 8000bf2:	4ba2      	ldr	r3, [pc, #648]	; (8000e7c <MX_GPIO_Init+0x2a4>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	4aa1      	ldr	r2, [pc, #644]	; (8000e7c <MX_GPIO_Init+0x2a4>)
 8000bf8:	f043 0310 	orr.w	r3, r3, #16
 8000bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfe:	4b9f      	ldr	r3, [pc, #636]	; (8000e7c <MX_GPIO_Init+0x2a4>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	f003 0310 	and.w	r3, r3, #16
 8000c06:	61bb      	str	r3, [r7, #24]
 8000c08:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	617b      	str	r3, [r7, #20]
 8000c0e:	4b9b      	ldr	r3, [pc, #620]	; (8000e7c <MX_GPIO_Init+0x2a4>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	4a9a      	ldr	r2, [pc, #616]	; (8000e7c <MX_GPIO_Init+0x2a4>)
 8000c14:	f043 0304 	orr.w	r3, r3, #4
 8000c18:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1a:	4b98      	ldr	r3, [pc, #608]	; (8000e7c <MX_GPIO_Init+0x2a4>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	f003 0304 	and.w	r3, r3, #4
 8000c22:	617b      	str	r3, [r7, #20]
 8000c24:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	613b      	str	r3, [r7, #16]
 8000c2a:	4b94      	ldr	r3, [pc, #592]	; (8000e7c <MX_GPIO_Init+0x2a4>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	4a93      	ldr	r2, [pc, #588]	; (8000e7c <MX_GPIO_Init+0x2a4>)
 8000c30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c34:	6313      	str	r3, [r2, #48]	; 0x30
 8000c36:	4b91      	ldr	r3, [pc, #580]	; (8000e7c <MX_GPIO_Init+0x2a4>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c3e:	613b      	str	r3, [r7, #16]
 8000c40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	60fb      	str	r3, [r7, #12]
 8000c46:	4b8d      	ldr	r3, [pc, #564]	; (8000e7c <MX_GPIO_Init+0x2a4>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	4a8c      	ldr	r2, [pc, #560]	; (8000e7c <MX_GPIO_Init+0x2a4>)
 8000c4c:	f043 0301 	orr.w	r3, r3, #1
 8000c50:	6313      	str	r3, [r2, #48]	; 0x30
 8000c52:	4b8a      	ldr	r3, [pc, #552]	; (8000e7c <MX_GPIO_Init+0x2a4>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	f003 0301 	and.w	r3, r3, #1
 8000c5a:	60fb      	str	r3, [r7, #12]
 8000c5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60bb      	str	r3, [r7, #8]
 8000c62:	4b86      	ldr	r3, [pc, #536]	; (8000e7c <MX_GPIO_Init+0x2a4>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	4a85      	ldr	r2, [pc, #532]	; (8000e7c <MX_GPIO_Init+0x2a4>)
 8000c68:	f043 0302 	orr.w	r3, r3, #2
 8000c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6e:	4b83      	ldr	r3, [pc, #524]	; (8000e7c <MX_GPIO_Init+0x2a4>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	f003 0302 	and.w	r3, r3, #2
 8000c76:	60bb      	str	r3, [r7, #8]
 8000c78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	607b      	str	r3, [r7, #4]
 8000c7e:	4b7f      	ldr	r3, [pc, #508]	; (8000e7c <MX_GPIO_Init+0x2a4>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	4a7e      	ldr	r2, [pc, #504]	; (8000e7c <MX_GPIO_Init+0x2a4>)
 8000c84:	f043 0308 	orr.w	r3, r3, #8
 8000c88:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8a:	4b7c      	ldr	r3, [pc, #496]	; (8000e7c <MX_GPIO_Init+0x2a4>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	f003 0308 	and.w	r3, r3, #8
 8000c92:	607b      	str	r3, [r7, #4]
 8000c94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000c96:	2200      	movs	r2, #0
 8000c98:	2108      	movs	r1, #8
 8000c9a:	4879      	ldr	r0, [pc, #484]	; (8000e80 <MX_GPIO_Init+0x2a8>)
 8000c9c:	f001 fbfc 	bl	8002498 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	2101      	movs	r1, #1
 8000ca4:	4877      	ldr	r0, [pc, #476]	; (8000e84 <MX_GPIO_Init+0x2ac>)
 8000ca6:	f001 fbf7 	bl	8002498 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000caa:	2200      	movs	r2, #0
 8000cac:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000cb0:	4875      	ldr	r0, [pc, #468]	; (8000e88 <MX_GPIO_Init+0x2b0>)
 8000cb2:	f001 fbf1 	bl	8002498 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000cb6:	2308      	movs	r3, #8
 8000cb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000cc6:	f107 031c 	add.w	r3, r7, #28
 8000cca:	4619      	mov	r1, r3
 8000ccc:	486c      	ldr	r0, [pc, #432]	; (8000e80 <MX_GPIO_Init+0x2a8>)
 8000cce:	f001 fa47 	bl	8002160 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ce2:	f107 031c 	add.w	r3, r7, #28
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4866      	ldr	r0, [pc, #408]	; (8000e84 <MX_GPIO_Init+0x2ac>)
 8000cea:	f001 fa39 	bl	8002160 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000cee:	2308      	movs	r3, #8
 8000cf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cfe:	2305      	movs	r3, #5
 8000d00:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000d02:	f107 031c 	add.w	r3, r7, #28
 8000d06:	4619      	mov	r1, r3
 8000d08:	485e      	ldr	r0, [pc, #376]	; (8000e84 <MX_GPIO_Init+0x2ac>)
 8000d0a:	f001 fa29 	bl	8002160 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d12:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d1c:	f107 031c 	add.w	r3, r7, #28
 8000d20:	4619      	mov	r1, r3
 8000d22:	485a      	ldr	r0, [pc, #360]	; (8000e8c <MX_GPIO_Init+0x2b4>)
 8000d24:	f001 fa1c 	bl	8002160 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000d28:	2310      	movs	r3, #16
 8000d2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d34:	2300      	movs	r3, #0
 8000d36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d38:	2306      	movs	r3, #6
 8000d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000d3c:	f107 031c 	add.w	r3, r7, #28
 8000d40:	4619      	mov	r1, r3
 8000d42:	4852      	ldr	r0, [pc, #328]	; (8000e8c <MX_GPIO_Init+0x2b4>)
 8000d44:	f001 fa0c 	bl	8002160 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000d48:	23e0      	movs	r3, #224	; 0xe0
 8000d4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d54:	2300      	movs	r3, #0
 8000d56:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d58:	2305      	movs	r3, #5
 8000d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d5c:	f107 031c 	add.w	r3, r7, #28
 8000d60:	4619      	mov	r1, r3
 8000d62:	484a      	ldr	r0, [pc, #296]	; (8000e8c <MX_GPIO_Init+0x2b4>)
 8000d64:	f001 f9fc 	bl	8002160 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000d68:	2304      	movs	r3, #4
 8000d6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000d74:	f107 031c 	add.w	r3, r7, #28
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4845      	ldr	r0, [pc, #276]	; (8000e90 <MX_GPIO_Init+0x2b8>)
 8000d7c:	f001 f9f0 	bl	8002160 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000d80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d86:	2302      	movs	r3, #2
 8000d88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d92:	2305      	movs	r3, #5
 8000d94:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000d96:	f107 031c 	add.w	r3, r7, #28
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	483c      	ldr	r0, [pc, #240]	; (8000e90 <MX_GPIO_Init+0x2b8>)
 8000d9e:	f001 f9df 	bl	8002160 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000da2:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000da6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da8:	2301      	movs	r3, #1
 8000daa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db0:	2300      	movs	r3, #0
 8000db2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000db4:	f107 031c 	add.w	r3, r7, #28
 8000db8:	4619      	mov	r1, r3
 8000dba:	4833      	ldr	r0, [pc, #204]	; (8000e88 <MX_GPIO_Init+0x2b0>)
 8000dbc:	f001 f9d0 	bl	8002160 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000dc0:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000dc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000dd2:	2306      	movs	r3, #6
 8000dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dd6:	f107 031c 	add.w	r3, r7, #28
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4829      	ldr	r0, [pc, #164]	; (8000e84 <MX_GPIO_Init+0x2ac>)
 8000dde:	f001 f9bf 	bl	8002160 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000de2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000de6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000de8:	2300      	movs	r3, #0
 8000dea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000df0:	f107 031c 	add.w	r3, r7, #28
 8000df4:	4619      	mov	r1, r3
 8000df6:	4825      	ldr	r0, [pc, #148]	; (8000e8c <MX_GPIO_Init+0x2b4>)
 8000df8:	f001 f9b2 	bl	8002160 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000dfc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000e00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e02:	2302      	movs	r3, #2
 8000e04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e0e:	230a      	movs	r3, #10
 8000e10:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e12:	f107 031c 	add.w	r3, r7, #28
 8000e16:	4619      	mov	r1, r3
 8000e18:	481c      	ldr	r0, [pc, #112]	; (8000e8c <MX_GPIO_Init+0x2b4>)
 8000e1a:	f001 f9a1 	bl	8002160 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000e1e:	2320      	movs	r3, #32
 8000e20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e22:	2300      	movs	r3, #0
 8000e24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000e2a:	f107 031c 	add.w	r3, r7, #28
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4815      	ldr	r0, [pc, #84]	; (8000e88 <MX_GPIO_Init+0x2b0>)
 8000e32:	f001 f995 	bl	8002160 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000e36:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000e3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e3c:	2312      	movs	r3, #18
 8000e3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e40:	2301      	movs	r3, #1
 8000e42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e44:	2300      	movs	r3, #0
 8000e46:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e48:	2304      	movs	r3, #4
 8000e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e4c:	f107 031c 	add.w	r3, r7, #28
 8000e50:	4619      	mov	r1, r3
 8000e52:	480f      	ldr	r0, [pc, #60]	; (8000e90 <MX_GPIO_Init+0x2b8>)
 8000e54:	f001 f984 	bl	8002160 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e5c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000e60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000e66:	f107 031c 	add.w	r3, r7, #28
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4804      	ldr	r0, [pc, #16]	; (8000e80 <MX_GPIO_Init+0x2a8>)
 8000e6e:	f001 f977 	bl	8002160 <HAL_GPIO_Init>

}
 8000e72:	bf00      	nop
 8000e74:	3730      	adds	r7, #48	; 0x30
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40023800 	.word	0x40023800
 8000e80:	40021000 	.word	0x40021000
 8000e84:	40020800 	.word	0x40020800
 8000e88:	40020c00 	.word	0x40020c00
 8000e8c:	40020000 	.word	0x40020000
 8000e90:	40020400 	.word	0x40020400

08000e94 <rtc_report_callback>:

/* USER CODE BEGIN 4 */

void rtc_report_callback( TimerHandle_t xTimer )
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
	 show_time_date_itm();
 8000e9c:	f000 f898 	bl	8000fd0 <show_time_date_itm>

}
 8000ea0:	bf00      	nop
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <led_effect_callback>:


void led_effect_callback(TimerHandle_t xTimer)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
	 int id;
	 id = ( uint32_t ) pvTimerGetTimerID( xTimer );
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	f006 f8ec 	bl	800708e <pvTimerGetTimerID>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	60fb      	str	r3, [r7, #12]
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	3b01      	subs	r3, #1
 8000ebe:	2b03      	cmp	r3, #3
 8000ec0:	d816      	bhi.n	8000ef0 <led_effect_callback+0x48>
 8000ec2:	a201      	add	r2, pc, #4	; (adr r2, 8000ec8 <led_effect_callback+0x20>)
 8000ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ec8:	08000ed9 	.word	0x08000ed9
 8000ecc:	08000edf 	.word	0x08000edf
 8000ed0:	08000ee5 	.word	0x08000ee5
 8000ed4:	08000eeb 	.word	0x08000eeb

	 switch(id)
	 {
	 case 1 :
		 LED_effect1();
 8000ed8:	f7ff fc38 	bl	800074c <LED_effect1>
		 break;
 8000edc:	e008      	b.n	8000ef0 <led_effect_callback+0x48>
	 case 2:
		 LED_effect2();
 8000ede:	f7ff fc4b 	bl	8000778 <LED_effect2>
		 break;
 8000ee2:	e005      	b.n	8000ef0 <led_effect_callback+0x48>
	 case 3:
		 LED_effect3();
 8000ee4:	f7ff fc5e 	bl	80007a4 <LED_effect3>
		 break;
 8000ee8:	e002      	b.n	8000ef0 <led_effect_callback+0x48>
	 case 4:
		 LED_effect4();
 8000eea:	f7ff fc73 	bl	80007d4 <LED_effect4>
	 }


}
 8000eee:	e7ff      	b.n	8000ef0 <led_effect_callback+0x48>
 8000ef0:	bf00      	nop
 8000ef2:	3710      	adds	r7, #16
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <HAL_UART_RxCpltCallback>:


/* This function called from UART interrupt handler , hence executes in interrupt context */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b086      	sub	sp, #24
 8000efc:	af02      	add	r7, sp, #8
 8000efe:	6078      	str	r0, [r7, #4]
	uint8_t dummy;

	for(uint32_t i = 0 ; i < 4000 ; i++);
 8000f00:	2300      	movs	r3, #0
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	e002      	b.n	8000f0c <HAL_UART_RxCpltCallback+0x14>
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000f12:	d3f8      	bcc.n	8000f06 <HAL_UART_RxCpltCallback+0xe>

	if(! xQueueIsQueueFullFromISR(q_data))
 8000f14:	4b1e      	ldr	r3, [pc, #120]	; (8000f90 <HAL_UART_RxCpltCallback+0x98>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f004 fbea 	bl	80056f2 <xQueueIsQueueFullFromISR>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d107      	bne.n	8000f34 <HAL_UART_RxCpltCallback+0x3c>
	{
		/*Enqueue data byte */
		xQueueSendFromISR(q_data , (void*)&user_data , NULL);
 8000f24:	4b1a      	ldr	r3, [pc, #104]	; (8000f90 <HAL_UART_RxCpltCallback+0x98>)
 8000f26:	6818      	ldr	r0, [r3, #0]
 8000f28:	2300      	movs	r3, #0
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	4919      	ldr	r1, [pc, #100]	; (8000f94 <HAL_UART_RxCpltCallback+0x9c>)
 8000f2e:	f004 f899 	bl	8005064 <xQueueGenericSendFromISR>
 8000f32:	e013      	b.n	8000f5c <HAL_UART_RxCpltCallback+0x64>
	}else{
		if(user_data == '\n')
 8000f34:	4b17      	ldr	r3, [pc, #92]	; (8000f94 <HAL_UART_RxCpltCallback+0x9c>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	2b0a      	cmp	r3, #10
 8000f3c:	d10e      	bne.n	8000f5c <HAL_UART_RxCpltCallback+0x64>
		{
			/*Make sure that last data byte of the queue is '\n' */
			xQueueReceiveFromISR(q_data,(void*)&dummy,NULL);
 8000f3e:	4b14      	ldr	r3, [pc, #80]	; (8000f90 <HAL_UART_RxCpltCallback+0x98>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f107 010b 	add.w	r1, r7, #11
 8000f46:	2200      	movs	r2, #0
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f004 fa15 	bl	8005378 <xQueueReceiveFromISR>
			xQueueSendFromISR(q_data ,(void*)&user_data , NULL);
 8000f4e:	4b10      	ldr	r3, [pc, #64]	; (8000f90 <HAL_UART_RxCpltCallback+0x98>)
 8000f50:	6818      	ldr	r0, [r3, #0]
 8000f52:	2300      	movs	r3, #0
 8000f54:	2200      	movs	r2, #0
 8000f56:	490f      	ldr	r1, [pc, #60]	; (8000f94 <HAL_UART_RxCpltCallback+0x9c>)
 8000f58:	f004 f884 	bl	8005064 <xQueueGenericSendFromISR>
		}
	}

	/*Send notification to command handling task if user_data = '\n' */
	if( user_data == '\n' ){
 8000f5c:	4b0d      	ldr	r3, [pc, #52]	; (8000f94 <HAL_UART_RxCpltCallback+0x9c>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	2b0a      	cmp	r3, #10
 8000f64:	d10a      	bne.n	8000f7c <HAL_UART_RxCpltCallback+0x84>
		/*send notification to command handling task */
		xTaskNotifyFromISR (handle_cmd_task,0,eNoAction,NULL);
 8000f66:	4b0c      	ldr	r3, [pc, #48]	; (8000f98 <HAL_UART_RxCpltCallback+0xa0>)
 8000f68:	6818      	ldr	r0, [r3, #0]
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	9301      	str	r3, [sp, #4]
 8000f6e:	2300      	movs	r3, #0
 8000f70:	9300      	str	r3, [sp, #0]
 8000f72:	2300      	movs	r3, #0
 8000f74:	2200      	movs	r2, #0
 8000f76:	2100      	movs	r1, #0
 8000f78:	f005 fb8a 	bl	8006690 <xTaskGenericNotifyFromISR>
	}

	/* Enable UART data byte reception again in IT mode */
	 HAL_UART_Receive_IT(&huart2, (uint8_t*)&user_data, 1);
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	4905      	ldr	r1, [pc, #20]	; (8000f94 <HAL_UART_RxCpltCallback+0x9c>)
 8000f80:	4806      	ldr	r0, [pc, #24]	; (8000f9c <HAL_UART_RxCpltCallback+0xa4>)
 8000f82:	f002 feea 	bl	8003d5a <HAL_UART_Receive_IT>


}
 8000f86:	bf00      	nop
 8000f88:	3710      	adds	r7, #16
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	20019298 	.word	0x20019298
 8000f94:	200192cc 	.word	0x200192cc
 8000f98:	20019294 	.word	0x20019294
 8000f9c:	200192d0 	.word	0x200192d0

08000fa0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a04      	ldr	r2, [pc, #16]	; (8000fc0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d101      	bne.n	8000fb6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000fb2:	f000 ff41 	bl	8001e38 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40001000 	.word	0x40001000

08000fc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fc8:	b672      	cpsid	i
}
 8000fca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fcc:	e7fe      	b.n	8000fcc <Error_Handler+0x8>
	...

08000fd0 <show_time_date_itm>:

#include "main.h"

 void show_time_date_itm(void)
 {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b08a      	sub	sp, #40	; 0x28
 8000fd4:	af02      	add	r7, sp, #8
	RTC_DateTypeDef rtc_date;
	RTC_TimeTypeDef rtc_time;

	memset(&rtc_date,0,sizeof(rtc_date));
 8000fd6:	f107 0318 	add.w	r3, r7, #24
 8000fda:	2204      	movs	r2, #4
 8000fdc:	2100      	movs	r1, #0
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f006 fcfa 	bl	80079d8 <memset>
	memset(&rtc_time,0,sizeof(rtc_time));
 8000fe4:	1d3b      	adds	r3, r7, #4
 8000fe6:	2214      	movs	r2, #20
 8000fe8:	2100      	movs	r1, #0
 8000fea:	4618      	mov	r0, r3
 8000fec:	f006 fcf4 	bl	80079d8 <memset>

	/* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 8000ff0:	1d3b      	adds	r3, r7, #4
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4815      	ldr	r0, [pc, #84]	; (800104c <show_time_date_itm+0x7c>)
 8000ff8:	f002 f93e 	bl	8003278 <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 8000ffc:	f107 0318 	add.w	r3, r7, #24
 8001000:	2200      	movs	r2, #0
 8001002:	4619      	mov	r1, r3
 8001004:	4811      	ldr	r0, [pc, #68]	; (800104c <show_time_date_itm+0x7c>)
 8001006:	f002 fa3c 	bl	8003482 <HAL_RTC_GetDate>

	char *format;
	format = (rtc_time.TimeFormat == RTC_HOURFORMAT12_AM) ? "AM" : "PM";
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d101      	bne.n	8001014 <show_time_date_itm+0x44>
 8001010:	4b0f      	ldr	r3, [pc, #60]	; (8001050 <show_time_date_itm+0x80>)
 8001012:	e000      	b.n	8001016 <show_time_date_itm+0x46>
 8001014:	4b0f      	ldr	r3, [pc, #60]	; (8001054 <show_time_date_itm+0x84>)
 8001016:	61fb      	str	r3, [r7, #28]


	printf("%02d:%02d:%02d [%s]",rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds,format);
 8001018:	793b      	ldrb	r3, [r7, #4]
 800101a:	4619      	mov	r1, r3
 800101c:	797b      	ldrb	r3, [r7, #5]
 800101e:	461a      	mov	r2, r3
 8001020:	79bb      	ldrb	r3, [r7, #6]
 8001022:	4618      	mov	r0, r3
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	9300      	str	r3, [sp, #0]
 8001028:	4603      	mov	r3, r0
 800102a:	480b      	ldr	r0, [pc, #44]	; (8001058 <show_time_date_itm+0x88>)
 800102c:	f006 fcdc 	bl	80079e8 <iprintf>
	printf("\t%02d-%02d-%2d\n",rtc_date.Month, rtc_date.Date, 2000 + rtc_date.Year);
 8001030:	7e7b      	ldrb	r3, [r7, #25]
 8001032:	4619      	mov	r1, r3
 8001034:	7ebb      	ldrb	r3, [r7, #26]
 8001036:	461a      	mov	r2, r3
 8001038:	7efb      	ldrb	r3, [r7, #27]
 800103a:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800103e:	4807      	ldr	r0, [pc, #28]	; (800105c <show_time_date_itm+0x8c>)
 8001040:	f006 fcd2 	bl	80079e8 <iprintf>

 }
 8001044:	bf00      	nop
 8001046:	3720      	adds	r7, #32
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	200192a4 	.word	0x200192a4
 8001050:	08008c90 	.word	0x08008c90
 8001054:	08008c94 	.word	0x08008c94
 8001058:	08008c98 	.word	0x08008c98
 800105c:	08008cac 	.word	0x08008cac

08001060 <show_time_date>:

void show_time_date(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b08c      	sub	sp, #48	; 0x30
 8001064:	af04      	add	r7, sp, #16
	RTC_TimeTypeDef rtc_time;

	static char *time = showtime;
	static char *date = showdate;

	memset(&rtc_date,0,sizeof(rtc_date));
 8001066:	f107 0318 	add.w	r3, r7, #24
 800106a:	2204      	movs	r2, #4
 800106c:	2100      	movs	r1, #0
 800106e:	4618      	mov	r0, r3
 8001070:	f006 fcb2 	bl	80079d8 <memset>
	memset(&rtc_time,0,sizeof(rtc_time));
 8001074:	1d3b      	adds	r3, r7, #4
 8001076:	2214      	movs	r2, #20
 8001078:	2100      	movs	r1, #0
 800107a:	4618      	mov	r0, r3
 800107c:	f006 fcac 	bl	80079d8 <memset>

	/* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 8001080:	1d3b      	adds	r3, r7, #4
 8001082:	2200      	movs	r2, #0
 8001084:	4619      	mov	r1, r3
 8001086:	4821      	ldr	r0, [pc, #132]	; (800110c <show_time_date+0xac>)
 8001088:	f002 f8f6 	bl	8003278 <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 800108c:	f107 0318 	add.w	r3, r7, #24
 8001090:	2200      	movs	r2, #0
 8001092:	4619      	mov	r1, r3
 8001094:	481d      	ldr	r0, [pc, #116]	; (800110c <show_time_date+0xac>)
 8001096:	f002 f9f4 	bl	8003482 <HAL_RTC_GetDate>

	char *format;
	format = (rtc_time.TimeFormat == RTC_HOURFORMAT12_AM) ? "AM" : "PM";
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d101      	bne.n	80010a4 <show_time_date+0x44>
 80010a0:	4b1b      	ldr	r3, [pc, #108]	; (8001110 <show_time_date+0xb0>)
 80010a2:	e000      	b.n	80010a6 <show_time_date+0x46>
 80010a4:	4b1b      	ldr	r3, [pc, #108]	; (8001114 <show_time_date+0xb4>)
 80010a6:	61fb      	str	r3, [r7, #28]

	/* Display time Format : hh:mm:ss [AM/PM] */
	sprintf((char*)showtime,"%s:\t%02d:%02d:%02d [%s]","\nCurrent Time&Date",rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds,format);
 80010a8:	793b      	ldrb	r3, [r7, #4]
 80010aa:	4618      	mov	r0, r3
 80010ac:	797b      	ldrb	r3, [r7, #5]
 80010ae:	461a      	mov	r2, r3
 80010b0:	79bb      	ldrb	r3, [r7, #6]
 80010b2:	4619      	mov	r1, r3
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	9302      	str	r3, [sp, #8]
 80010b8:	9101      	str	r1, [sp, #4]
 80010ba:	9200      	str	r2, [sp, #0]
 80010bc:	4603      	mov	r3, r0
 80010be:	4a16      	ldr	r2, [pc, #88]	; (8001118 <show_time_date+0xb8>)
 80010c0:	4916      	ldr	r1, [pc, #88]	; (800111c <show_time_date+0xbc>)
 80010c2:	4817      	ldr	r0, [pc, #92]	; (8001120 <show_time_date+0xc0>)
 80010c4:	f006 fca8 	bl	8007a18 <siprintf>
	xQueueSend(q_print,&time,portMAX_DELAY);
 80010c8:	4b16      	ldr	r3, [pc, #88]	; (8001124 <show_time_date+0xc4>)
 80010ca:	6818      	ldr	r0, [r3, #0]
 80010cc:	2300      	movs	r3, #0
 80010ce:	f04f 32ff 	mov.w	r2, #4294967295
 80010d2:	4915      	ldr	r1, [pc, #84]	; (8001128 <show_time_date+0xc8>)
 80010d4:	f003 fec8 	bl	8004e68 <xQueueGenericSend>

	/* Display date Format : date-month-year */
	sprintf((char*)showdate,"\t%02d-%02d-%2d\n",rtc_date.Month, rtc_date.Date, 2000 + rtc_date.Year);
 80010d8:	7e7b      	ldrb	r3, [r7, #25]
 80010da:	461a      	mov	r2, r3
 80010dc:	7ebb      	ldrb	r3, [r7, #26]
 80010de:	4619      	mov	r1, r3
 80010e0:	7efb      	ldrb	r3, [r7, #27]
 80010e2:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80010e6:	9300      	str	r3, [sp, #0]
 80010e8:	460b      	mov	r3, r1
 80010ea:	4910      	ldr	r1, [pc, #64]	; (800112c <show_time_date+0xcc>)
 80010ec:	4810      	ldr	r0, [pc, #64]	; (8001130 <show_time_date+0xd0>)
 80010ee:	f006 fc93 	bl	8007a18 <siprintf>
	xQueueSend(q_print,&date,portMAX_DELAY);
 80010f2:	4b0c      	ldr	r3, [pc, #48]	; (8001124 <show_time_date+0xc4>)
 80010f4:	6818      	ldr	r0, [r3, #0]
 80010f6:	2300      	movs	r3, #0
 80010f8:	f04f 32ff 	mov.w	r2, #4294967295
 80010fc:	490d      	ldr	r1, [pc, #52]	; (8001134 <show_time_date+0xd4>)
 80010fe:	f003 feb3 	bl	8004e68 <xQueueGenericSend>
}
 8001102:	bf00      	nop
 8001104:	3720      	adds	r7, #32
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	200192a4 	.word	0x200192a4
 8001110:	08008c90 	.word	0x08008c90
 8001114:	08008c94 	.word	0x08008c94
 8001118:	08008cbc 	.word	0x08008cbc
 800111c:	08008cd0 	.word	0x08008cd0
 8001120:	200000b4 	.word	0x200000b4
 8001124:	200192a0 	.word	0x200192a0
 8001128:	20000008 	.word	0x20000008
 800112c:	08008cac 	.word	0x08008cac
 8001130:	200000dc 	.word	0x200000dc
 8001134:	2000000c 	.word	0x2000000c

08001138 <rtc_configure_time>:


void rtc_configure_time(RTC_TimeTypeDef *time)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]

	time->TimeFormat = RTC_HOURFORMAT12_AM;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2200      	movs	r2, #0
 8001144:	70da      	strb	r2, [r3, #3]
	time->DayLightSaving = RTC_DAYLIGHTSAVING_NONE ;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2200      	movs	r2, #0
 800114a:	60da      	str	r2, [r3, #12]
	time->StoreOperation = RTC_STOREOPERATION_RESET;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2200      	movs	r2, #0
 8001150:	611a      	str	r2, [r3, #16]

	HAL_RTC_SetTime(&hrtc,time,RTC_FORMAT_BIN);
 8001152:	2200      	movs	r2, #0
 8001154:	6879      	ldr	r1, [r7, #4]
 8001156:	4803      	ldr	r0, [pc, #12]	; (8001164 <rtc_configure_time+0x2c>)
 8001158:	f001 ffd1 	bl	80030fe <HAL_RTC_SetTime>
}
 800115c:	bf00      	nop
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	200192a4 	.word	0x200192a4

08001168 <rtc_configure_date>:


void rtc_configure_date(RTC_DateTypeDef *date)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
	HAL_RTC_SetDate(&hrtc,date,RTC_FORMAT_BIN);
 8001170:	2200      	movs	r2, #0
 8001172:	6879      	ldr	r1, [r7, #4]
 8001174:	4803      	ldr	r0, [pc, #12]	; (8001184 <rtc_configure_date+0x1c>)
 8001176:	f002 f8dd 	bl	8003334 <HAL_RTC_SetDate>
}
 800117a:	bf00      	nop
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	200192a4 	.word	0x200192a4

08001188 <validate_rtc_information>:


int validate_rtc_information(RTC_TimeTypeDef *time , RTC_DateTypeDef *date)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]
	if(time){
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d00d      	beq.n	80011b4 <validate_rtc_information+0x2c>
		if( (time->Hours > 12) || (time->Minutes > 59) || (time->Seconds > 59) )
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	2b0c      	cmp	r3, #12
 800119e:	d807      	bhi.n	80011b0 <validate_rtc_information+0x28>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	785b      	ldrb	r3, [r3, #1]
 80011a4:	2b3b      	cmp	r3, #59	; 0x3b
 80011a6:	d803      	bhi.n	80011b0 <validate_rtc_information+0x28>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	789b      	ldrb	r3, [r3, #2]
 80011ac:	2b3b      	cmp	r3, #59	; 0x3b
 80011ae:	d901      	bls.n	80011b4 <validate_rtc_information+0x2c>
			return 1;
 80011b0:	2301      	movs	r3, #1
 80011b2:	e015      	b.n	80011e0 <validate_rtc_information+0x58>
	}

	if(date){
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d011      	beq.n	80011de <validate_rtc_information+0x56>
		if( (date->Date > 31) || (date->WeekDay > 7) || (date->Year > 99) || (date->Month > 12) )
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	789b      	ldrb	r3, [r3, #2]
 80011be:	2b1f      	cmp	r3, #31
 80011c0:	d80b      	bhi.n	80011da <validate_rtc_information+0x52>
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	2b07      	cmp	r3, #7
 80011c8:	d807      	bhi.n	80011da <validate_rtc_information+0x52>
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	78db      	ldrb	r3, [r3, #3]
 80011ce:	2b63      	cmp	r3, #99	; 0x63
 80011d0:	d803      	bhi.n	80011da <validate_rtc_information+0x52>
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	785b      	ldrb	r3, [r3, #1]
 80011d6:	2b0c      	cmp	r3, #12
 80011d8:	d901      	bls.n	80011de <validate_rtc_information+0x56>
			return 1;
 80011da:	2301      	movs	r3, #1
 80011dc:	e000      	b.n	80011e0 <validate_rtc_information+0x58>
	}

	return 0;
 80011de:	2300      	movs	r3, #0
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	607b      	str	r3, [r7, #4]
 80011f6:	4b10      	ldr	r3, [pc, #64]	; (8001238 <HAL_MspInit+0x4c>)
 80011f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fa:	4a0f      	ldr	r2, [pc, #60]	; (8001238 <HAL_MspInit+0x4c>)
 80011fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001200:	6453      	str	r3, [r2, #68]	; 0x44
 8001202:	4b0d      	ldr	r3, [pc, #52]	; (8001238 <HAL_MspInit+0x4c>)
 8001204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001206:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800120a:	607b      	str	r3, [r7, #4]
 800120c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	603b      	str	r3, [r7, #0]
 8001212:	4b09      	ldr	r3, [pc, #36]	; (8001238 <HAL_MspInit+0x4c>)
 8001214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001216:	4a08      	ldr	r2, [pc, #32]	; (8001238 <HAL_MspInit+0x4c>)
 8001218:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800121c:	6413      	str	r3, [r2, #64]	; 0x40
 800121e:	4b06      	ldr	r3, [pc, #24]	; (8001238 <HAL_MspInit+0x4c>)
 8001220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001226:	603b      	str	r3, [r7, #0]
 8001228:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800122a:	bf00      	nop
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	40023800 	.word	0x40023800

0800123c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a05      	ldr	r2, [pc, #20]	; (8001260 <HAL_RTC_MspInit+0x24>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d102      	bne.n	8001254 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800124e:	4b05      	ldr	r3, [pc, #20]	; (8001264 <HAL_RTC_MspInit+0x28>)
 8001250:	2201      	movs	r2, #1
 8001252:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001254:	bf00      	nop
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr
 8001260:	40002800 	.word	0x40002800
 8001264:	42470e3c 	.word	0x42470e3c

08001268 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b08a      	sub	sp, #40	; 0x28
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001270:	f107 0314 	add.w	r3, r7, #20
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]
 800127e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a1d      	ldr	r2, [pc, #116]	; (80012fc <HAL_UART_MspInit+0x94>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d133      	bne.n	80012f2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	613b      	str	r3, [r7, #16]
 800128e:	4b1c      	ldr	r3, [pc, #112]	; (8001300 <HAL_UART_MspInit+0x98>)
 8001290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001292:	4a1b      	ldr	r2, [pc, #108]	; (8001300 <HAL_UART_MspInit+0x98>)
 8001294:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001298:	6413      	str	r3, [r2, #64]	; 0x40
 800129a:	4b19      	ldr	r3, [pc, #100]	; (8001300 <HAL_UART_MspInit+0x98>)
 800129c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a2:	613b      	str	r3, [r7, #16]
 80012a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	60fb      	str	r3, [r7, #12]
 80012aa:	4b15      	ldr	r3, [pc, #84]	; (8001300 <HAL_UART_MspInit+0x98>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	4a14      	ldr	r2, [pc, #80]	; (8001300 <HAL_UART_MspInit+0x98>)
 80012b0:	f043 0301 	orr.w	r3, r3, #1
 80012b4:	6313      	str	r3, [r2, #48]	; 0x30
 80012b6:	4b12      	ldr	r3, [pc, #72]	; (8001300 <HAL_UART_MspInit+0x98>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80012c2:	230c      	movs	r3, #12
 80012c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c6:	2302      	movs	r3, #2
 80012c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ca:	2300      	movs	r3, #0
 80012cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ce:	2303      	movs	r3, #3
 80012d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012d2:	2307      	movs	r3, #7
 80012d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d6:	f107 0314 	add.w	r3, r7, #20
 80012da:	4619      	mov	r1, r3
 80012dc:	4809      	ldr	r0, [pc, #36]	; (8001304 <HAL_UART_MspInit+0x9c>)
 80012de:	f000 ff3f 	bl	8002160 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 80012e2:	2200      	movs	r2, #0
 80012e4:	2106      	movs	r1, #6
 80012e6:	2026      	movs	r0, #38	; 0x26
 80012e8:	f000 fe7e 	bl	8001fe8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80012ec:	2026      	movs	r0, #38	; 0x26
 80012ee:	f000 fe97 	bl	8002020 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80012f2:	bf00      	nop
 80012f4:	3728      	adds	r7, #40	; 0x28
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40004400 	.word	0x40004400
 8001300:	40023800 	.word	0x40023800
 8001304:	40020000 	.word	0x40020000

08001308 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b08c      	sub	sp, #48	; 0x30
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001310:	2300      	movs	r3, #0
 8001312:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001314:	2300      	movs	r3, #0
 8001316:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001318:	2200      	movs	r2, #0
 800131a:	6879      	ldr	r1, [r7, #4]
 800131c:	2036      	movs	r0, #54	; 0x36
 800131e:	f000 fe63 	bl	8001fe8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001322:	2036      	movs	r0, #54	; 0x36
 8001324:	f000 fe7c 	bl	8002020 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001328:	2300      	movs	r3, #0
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	4b1f      	ldr	r3, [pc, #124]	; (80013ac <HAL_InitTick+0xa4>)
 800132e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001330:	4a1e      	ldr	r2, [pc, #120]	; (80013ac <HAL_InitTick+0xa4>)
 8001332:	f043 0310 	orr.w	r3, r3, #16
 8001336:	6413      	str	r3, [r2, #64]	; 0x40
 8001338:	4b1c      	ldr	r3, [pc, #112]	; (80013ac <HAL_InitTick+0xa4>)
 800133a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133c:	f003 0310 	and.w	r3, r3, #16
 8001340:	60fb      	str	r3, [r7, #12]
 8001342:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001344:	f107 0210 	add.w	r2, r7, #16
 8001348:	f107 0314 	add.w	r3, r7, #20
 800134c:	4611      	mov	r1, r2
 800134e:	4618      	mov	r0, r3
 8001350:	f001 fd30 	bl	8002db4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001354:	f001 fd06 	bl	8002d64 <HAL_RCC_GetPCLK1Freq>
 8001358:	4603      	mov	r3, r0
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800135e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001360:	4a13      	ldr	r2, [pc, #76]	; (80013b0 <HAL_InitTick+0xa8>)
 8001362:	fba2 2303 	umull	r2, r3, r2, r3
 8001366:	0c9b      	lsrs	r3, r3, #18
 8001368:	3b01      	subs	r3, #1
 800136a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800136c:	4b11      	ldr	r3, [pc, #68]	; (80013b4 <HAL_InitTick+0xac>)
 800136e:	4a12      	ldr	r2, [pc, #72]	; (80013b8 <HAL_InitTick+0xb0>)
 8001370:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001372:	4b10      	ldr	r3, [pc, #64]	; (80013b4 <HAL_InitTick+0xac>)
 8001374:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001378:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800137a:	4a0e      	ldr	r2, [pc, #56]	; (80013b4 <HAL_InitTick+0xac>)
 800137c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800137e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001380:	4b0c      	ldr	r3, [pc, #48]	; (80013b4 <HAL_InitTick+0xac>)
 8001382:	2200      	movs	r2, #0
 8001384:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001386:	4b0b      	ldr	r3, [pc, #44]	; (80013b4 <HAL_InitTick+0xac>)
 8001388:	2200      	movs	r2, #0
 800138a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800138c:	4809      	ldr	r0, [pc, #36]	; (80013b4 <HAL_InitTick+0xac>)
 800138e:	f002 f957 	bl	8003640 <HAL_TIM_Base_Init>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d104      	bne.n	80013a2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001398:	4806      	ldr	r0, [pc, #24]	; (80013b4 <HAL_InitTick+0xac>)
 800139a:	f002 f9ab 	bl	80036f4 <HAL_TIM_Base_Start_IT>
 800139e:	4603      	mov	r3, r0
 80013a0:	e000      	b.n	80013a4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3730      	adds	r7, #48	; 0x30
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40023800 	.word	0x40023800
 80013b0:	431bde83 	.word	0x431bde83
 80013b4:	20019314 	.word	0x20019314
 80013b8:	40001000 	.word	0x40001000

080013bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013c0:	e7fe      	b.n	80013c0 <NMI_Handler+0x4>

080013c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013c2:	b480      	push	{r7}
 80013c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013c6:	e7fe      	b.n	80013c6 <HardFault_Handler+0x4>

080013c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013cc:	e7fe      	b.n	80013cc <MemManage_Handler+0x4>

080013ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ce:	b480      	push	{r7}
 80013d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013d2:	e7fe      	b.n	80013d2 <BusFault_Handler+0x4>

080013d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013d8:	e7fe      	b.n	80013d8 <UsageFault_Handler+0x4>

080013da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013da:	b480      	push	{r7}
 80013dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013de:	bf00      	nop
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80013ec:	4802      	ldr	r0, [pc, #8]	; (80013f8 <USART2_IRQHandler+0x10>)
 80013ee:	f002 fce5 	bl	8003dbc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	200192d0 	.word	0x200192d0

080013fc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001400:	4802      	ldr	r0, [pc, #8]	; (800140c <TIM6_DAC_IRQHandler+0x10>)
 8001402:	f002 f9e7 	bl	80037d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	20019314 	.word	0x20019314

08001410 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af00      	add	r7, sp, #0
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	60b9      	str	r1, [r7, #8]
 800141a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800141c:	2300      	movs	r3, #0
 800141e:	617b      	str	r3, [r7, #20]
 8001420:	e00a      	b.n	8001438 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001422:	f3af 8000 	nop.w
 8001426:	4601      	mov	r1, r0
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	1c5a      	adds	r2, r3, #1
 800142c:	60ba      	str	r2, [r7, #8]
 800142e:	b2ca      	uxtb	r2, r1
 8001430:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	3301      	adds	r3, #1
 8001436:	617b      	str	r3, [r7, #20]
 8001438:	697a      	ldr	r2, [r7, #20]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	429a      	cmp	r2, r3
 800143e:	dbf0      	blt.n	8001422 <_read+0x12>
	}

return len;
 8001440:	687b      	ldr	r3, [r7, #4]
}
 8001442:	4618      	mov	r0, r3
 8001444:	3718      	adds	r7, #24
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	b086      	sub	sp, #24
 800144e:	af00      	add	r7, sp, #0
 8001450:	60f8      	str	r0, [r7, #12]
 8001452:	60b9      	str	r1, [r7, #8]
 8001454:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001456:	2300      	movs	r3, #0
 8001458:	617b      	str	r3, [r7, #20]
 800145a:	e009      	b.n	8001470 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	1c5a      	adds	r2, r3, #1
 8001460:	60ba      	str	r2, [r7, #8]
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	4618      	mov	r0, r3
 8001466:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	3301      	adds	r3, #1
 800146e:	617b      	str	r3, [r7, #20]
 8001470:	697a      	ldr	r2, [r7, #20]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	429a      	cmp	r2, r3
 8001476:	dbf1      	blt.n	800145c <_write+0x12>
	}
	return len;
 8001478:	687b      	ldr	r3, [r7, #4]
}
 800147a:	4618      	mov	r0, r3
 800147c:	3718      	adds	r7, #24
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <_close>:

int _close(int file)
{
 8001482:	b480      	push	{r7}
 8001484:	b083      	sub	sp, #12
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]
	return -1;
 800148a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800148e:	4618      	mov	r0, r3
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr

0800149a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800149a:	b480      	push	{r7}
 800149c:	b083      	sub	sp, #12
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]
 80014a2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014aa:	605a      	str	r2, [r3, #4]
	return 0;
 80014ac:	2300      	movs	r3, #0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr

080014ba <_isatty>:

int _isatty(int file)
{
 80014ba:	b480      	push	{r7}
 80014bc:	b083      	sub	sp, #12
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
	return 1;
 80014c2:	2301      	movs	r3, #1
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b085      	sub	sp, #20
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	60f8      	str	r0, [r7, #12]
 80014d8:	60b9      	str	r1, [r7, #8]
 80014da:	607a      	str	r2, [r7, #4]
	return 0;
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3714      	adds	r7, #20
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
	...

080014ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b086      	sub	sp, #24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014f4:	4a14      	ldr	r2, [pc, #80]	; (8001548 <_sbrk+0x5c>)
 80014f6:	4b15      	ldr	r3, [pc, #84]	; (800154c <_sbrk+0x60>)
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001500:	4b13      	ldr	r3, [pc, #76]	; (8001550 <_sbrk+0x64>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d102      	bne.n	800150e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001508:	4b11      	ldr	r3, [pc, #68]	; (8001550 <_sbrk+0x64>)
 800150a:	4a12      	ldr	r2, [pc, #72]	; (8001554 <_sbrk+0x68>)
 800150c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800150e:	4b10      	ldr	r3, [pc, #64]	; (8001550 <_sbrk+0x64>)
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4413      	add	r3, r2
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	429a      	cmp	r2, r3
 800151a:	d207      	bcs.n	800152c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800151c:	f006 fa24 	bl	8007968 <__errno>
 8001520:	4603      	mov	r3, r0
 8001522:	220c      	movs	r2, #12
 8001524:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001526:	f04f 33ff 	mov.w	r3, #4294967295
 800152a:	e009      	b.n	8001540 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800152c:	4b08      	ldr	r3, [pc, #32]	; (8001550 <_sbrk+0x64>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001532:	4b07      	ldr	r3, [pc, #28]	; (8001550 <_sbrk+0x64>)
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4413      	add	r3, r2
 800153a:	4a05      	ldr	r2, [pc, #20]	; (8001550 <_sbrk+0x64>)
 800153c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800153e:	68fb      	ldr	r3, [r7, #12]
}
 8001540:	4618      	mov	r0, r3
 8001542:	3718      	adds	r7, #24
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	20020000 	.word	0x20020000
 800154c:	00000400 	.word	0x00000400
 8001550:	20000104 	.word	0x20000104
 8001554:	200193b0 	.word	0x200193b0

08001558 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800155c:	4b06      	ldr	r3, [pc, #24]	; (8001578 <SystemInit+0x20>)
 800155e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001562:	4a05      	ldr	r2, [pc, #20]	; (8001578 <SystemInit+0x20>)
 8001564:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001568:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	e000ed00 	.word	0xe000ed00

0800157c <menu_task>:

const char *msg_inv = "////Invalid option////\n";


void menu_task(void *param)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b088      	sub	sp, #32
 8001580:	af02      	add	r7, sp, #8
 8001582:	6078      	str	r0, [r7, #4]

	command_t *cmd;

	int option;

	const char* msg_menu = "\n========================\n"
 8001584:	4b31      	ldr	r3, [pc, #196]	; (800164c <menu_task+0xd0>)
 8001586:	60bb      	str	r3, [r7, #8]
								"Date and time ----> 1\n"
								"Exit          ----> 2\n"
								"Enter your choice here : ";

	while(1){
		xQueueSend(q_print,&msg_menu,portMAX_DELAY);
 8001588:	4b31      	ldr	r3, [pc, #196]	; (8001650 <menu_task+0xd4>)
 800158a:	6818      	ldr	r0, [r3, #0]
 800158c:	f107 0108 	add.w	r1, r7, #8
 8001590:	2300      	movs	r3, #0
 8001592:	f04f 32ff 	mov.w	r2, #4294967295
 8001596:	f003 fc67 	bl	8004e68 <xQueueGenericSend>

		//wait for menu commands
		xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);
 800159a:	f107 030c 	add.w	r3, r7, #12
 800159e:	f04f 32ff 	mov.w	r2, #4294967295
 80015a2:	9200      	str	r2, [sp, #0]
 80015a4:	2200      	movs	r2, #0
 80015a6:	2100      	movs	r1, #0
 80015a8:	2000      	movs	r0, #0
 80015aa:	f004 ff11 	bl	80063d0 <xTaskGenericNotifyWait>
		cmd = (command_t*)cmd_addr;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	617b      	str	r3, [r7, #20]

		if(cmd->len == 1)
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	68db      	ldr	r3, [r3, #12]
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d133      	bne.n	8001622 <menu_task+0xa6>
		{
			option = cmd->payload[0] - 48;
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	3b30      	subs	r3, #48	; 0x30
 80015c0:	613b      	str	r3, [r7, #16]
			switch(option)
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d035      	beq.n	8001634 <menu_task+0xb8>
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	dc20      	bgt.n	8001610 <menu_task+0x94>
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d003      	beq.n	80015dc <menu_task+0x60>
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d00d      	beq.n	80015f6 <menu_task+0x7a>
 80015da:	e019      	b.n	8001610 <menu_task+0x94>
			{
				case 0:
					curr_state = sLedEffect;
 80015dc:	4b1d      	ldr	r3, [pc, #116]	; (8001654 <menu_task+0xd8>)
 80015de:	2201      	movs	r2, #1
 80015e0:	701a      	strb	r2, [r3, #0]
					xTaskNotify(handle_led_task,0,eNoAction);
 80015e2:	4b1d      	ldr	r3, [pc, #116]	; (8001658 <menu_task+0xdc>)
 80015e4:	6818      	ldr	r0, [r3, #0]
 80015e6:	2300      	movs	r3, #0
 80015e8:	9300      	str	r3, [sp, #0]
 80015ea:	2300      	movs	r3, #0
 80015ec:	2200      	movs	r2, #0
 80015ee:	2100      	movs	r1, #0
 80015f0:	f004 ff6e 	bl	80064d0 <xTaskGenericNotify>
					break;
 80015f4:	e01f      	b.n	8001636 <menu_task+0xba>
				case 1:
					curr_state = sRtcMenu;
 80015f6:	4b17      	ldr	r3, [pc, #92]	; (8001654 <menu_task+0xd8>)
 80015f8:	2202      	movs	r2, #2
 80015fa:	701a      	strb	r2, [r3, #0]
					xTaskNotify(handle_rtc_task,0,eNoAction);
 80015fc:	4b17      	ldr	r3, [pc, #92]	; (800165c <menu_task+0xe0>)
 80015fe:	6818      	ldr	r0, [r3, #0]
 8001600:	2300      	movs	r3, #0
 8001602:	9300      	str	r3, [sp, #0]
 8001604:	2300      	movs	r3, #0
 8001606:	2200      	movs	r2, #0
 8001608:	2100      	movs	r1, #0
 800160a:	f004 ff61 	bl	80064d0 <xTaskGenericNotify>
					break;
 800160e:	e012      	b.n	8001636 <menu_task+0xba>
				case 2: /*implement exit */
					break;
				default:
					xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8001610:	4b0f      	ldr	r3, [pc, #60]	; (8001650 <menu_task+0xd4>)
 8001612:	6818      	ldr	r0, [r3, #0]
 8001614:	2300      	movs	r3, #0
 8001616:	f04f 32ff 	mov.w	r2, #4294967295
 800161a:	4911      	ldr	r1, [pc, #68]	; (8001660 <menu_task+0xe4>)
 800161c:	f003 fc24 	bl	8004e68 <xQueueGenericSend>
					continue;
 8001620:	e012      	b.n	8001648 <menu_task+0xcc>
			}

		}else{
			//invalid entry
			xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8001622:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <menu_task+0xd4>)
 8001624:	6818      	ldr	r0, [r3, #0]
 8001626:	2300      	movs	r3, #0
 8001628:	f04f 32ff 	mov.w	r2, #4294967295
 800162c:	490c      	ldr	r1, [pc, #48]	; (8001660 <menu_task+0xe4>)
 800162e:	f003 fc1b 	bl	8004e68 <xQueueGenericSend>
			continue;
 8001632:	e009      	b.n	8001648 <menu_task+0xcc>
					break;
 8001634:	bf00      	nop
		}


		//wait to run again when some other task notifies
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001636:	f04f 33ff 	mov.w	r3, #4294967295
 800163a:	9300      	str	r3, [sp, #0]
 800163c:	2300      	movs	r3, #0
 800163e:	2200      	movs	r2, #0
 8001640:	2100      	movs	r1, #0
 8001642:	2000      	movs	r0, #0
 8001644:	f004 fec4 	bl	80063d0 <xTaskGenericNotifyWait>
		xQueueSend(q_print,&msg_menu,portMAX_DELAY);
 8001648:	e79e      	b.n	8001588 <menu_task+0xc>
 800164a:	bf00      	nop
 800164c:	08008d00 	.word	0x08008d00
 8001650:	200192a0 	.word	0x200192a0
 8001654:	200000b0 	.word	0x200000b0
 8001658:	200192c8 	.word	0x200192c8
 800165c:	20019290 	.word	0x20019290
 8001660:	20000014 	.word	0x20000014

08001664 <led_task>:

	}//while super loop
}

void led_task(void *param)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b088      	sub	sp, #32
 8001668:	af02      	add	r7, sp, #8
 800166a:	6078      	str	r0, [r7, #4]
	uint32_t cmd_addr;
	command_t *cmd;
	const char* msg_led = "========================\n"
 800166c:	4b3e      	ldr	r3, [pc, #248]	; (8001768 <led_task+0x104>)
 800166e:	60fb      	str	r3, [r7, #12]
						  "(none,e1,e2,e3,e4)\n"
						  "Enter your choice here : ";

	while(1){
		/*Wait for notification (Notify wait) */
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001670:	f04f 33ff 	mov.w	r3, #4294967295
 8001674:	9300      	str	r3, [sp, #0]
 8001676:	2300      	movs	r3, #0
 8001678:	2200      	movs	r2, #0
 800167a:	2100      	movs	r1, #0
 800167c:	2000      	movs	r0, #0
 800167e:	f004 fea7 	bl	80063d0 <xTaskGenericNotifyWait>

		/*Print LED menu */
		xQueueSend(q_print,&msg_led,portMAX_DELAY);
 8001682:	4b3a      	ldr	r3, [pc, #232]	; (800176c <led_task+0x108>)
 8001684:	6818      	ldr	r0, [r3, #0]
 8001686:	f107 010c 	add.w	r1, r7, #12
 800168a:	2300      	movs	r3, #0
 800168c:	f04f 32ff 	mov.w	r2, #4294967295
 8001690:	f003 fbea 	bl	8004e68 <xQueueGenericSend>

		/*wait for LED command (Notify wait) */
		xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);
 8001694:	f107 0310 	add.w	r3, r7, #16
 8001698:	f04f 32ff 	mov.w	r2, #4294967295
 800169c:	9200      	str	r2, [sp, #0]
 800169e:	2200      	movs	r2, #0
 80016a0:	2100      	movs	r1, #0
 80016a2:	2000      	movs	r0, #0
 80016a4:	f004 fe94 	bl	80063d0 <xTaskGenericNotifyWait>
		cmd = (command_t*)cmd_addr;
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	617b      	str	r3, [r7, #20]

		if(cmd->len <= 4)
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	2b04      	cmp	r3, #4
 80016b2:	d843      	bhi.n	800173c <led_task+0xd8>
		{
			if(! strcmp((char*)cmd->payload,"none"))
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	492e      	ldr	r1, [pc, #184]	; (8001770 <led_task+0x10c>)
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7fe fd89 	bl	80001d0 <strcmp>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d102      	bne.n	80016ca <led_task+0x66>
				led_effect_stop();
 80016c4:	f7fe ff68 	bl	8000598 <led_effect_stop>
 80016c8:	e040      	b.n	800174c <led_task+0xe8>
			else if (! strcmp((char*)cmd->payload,"e1"))
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	4929      	ldr	r1, [pc, #164]	; (8001774 <led_task+0x110>)
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7fe fd7e 	bl	80001d0 <strcmp>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d103      	bne.n	80016e2 <led_task+0x7e>
				led_effect(1);
 80016da:	2001      	movs	r0, #1
 80016dc:	f7fe ff7c 	bl	80005d8 <led_effect>
 80016e0:	e034      	b.n	800174c <led_task+0xe8>
			else if (! strcmp((char*)cmd->payload,"e2"))
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	4924      	ldr	r1, [pc, #144]	; (8001778 <led_task+0x114>)
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7fe fd72 	bl	80001d0 <strcmp>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d103      	bne.n	80016fa <led_task+0x96>
				led_effect(2);
 80016f2:	2002      	movs	r0, #2
 80016f4:	f7fe ff70 	bl	80005d8 <led_effect>
 80016f8:	e028      	b.n	800174c <led_task+0xe8>
			else if (! strcmp((char*)cmd->payload,"e3"))
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	491f      	ldr	r1, [pc, #124]	; (800177c <led_task+0x118>)
 80016fe:	4618      	mov	r0, r3
 8001700:	f7fe fd66 	bl	80001d0 <strcmp>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d103      	bne.n	8001712 <led_task+0xae>
				led_effect(3);
 800170a:	2003      	movs	r0, #3
 800170c:	f7fe ff64 	bl	80005d8 <led_effect>
 8001710:	e01c      	b.n	800174c <led_task+0xe8>
			else if (! strcmp((char*)cmd->payload,"e4"))
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	491a      	ldr	r1, [pc, #104]	; (8001780 <led_task+0x11c>)
 8001716:	4618      	mov	r0, r3
 8001718:	f7fe fd5a 	bl	80001d0 <strcmp>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d103      	bne.n	800172a <led_task+0xc6>
				led_effect(4);
 8001722:	2004      	movs	r0, #4
 8001724:	f7fe ff58 	bl	80005d8 <led_effect>
 8001728:	e010      	b.n	800174c <led_task+0xe8>
			else
				xQueueSend(q_print,&msg_inv,portMAX_DELAY); /*print invalid message */
 800172a:	4b10      	ldr	r3, [pc, #64]	; (800176c <led_task+0x108>)
 800172c:	6818      	ldr	r0, [r3, #0]
 800172e:	2300      	movs	r3, #0
 8001730:	f04f 32ff 	mov.w	r2, #4294967295
 8001734:	4913      	ldr	r1, [pc, #76]	; (8001784 <led_task+0x120>)
 8001736:	f003 fb97 	bl	8004e68 <xQueueGenericSend>
 800173a:	e007      	b.n	800174c <led_task+0xe8>
		}else
			xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 800173c:	4b0b      	ldr	r3, [pc, #44]	; (800176c <led_task+0x108>)
 800173e:	6818      	ldr	r0, [r3, #0]
 8001740:	2300      	movs	r3, #0
 8001742:	f04f 32ff 	mov.w	r2, #4294967295
 8001746:	490f      	ldr	r1, [pc, #60]	; (8001784 <led_task+0x120>)
 8001748:	f003 fb8e 	bl	8004e68 <xQueueGenericSend>

		/* update state variable */
		curr_state = sMainMenu;
 800174c:	4b0e      	ldr	r3, [pc, #56]	; (8001788 <led_task+0x124>)
 800174e:	2200      	movs	r2, #0
 8001750:	701a      	strb	r2, [r3, #0]

		/*Notify menu task */
		xTaskNotify(handle_menu_task,0,eNoAction);
 8001752:	4b0e      	ldr	r3, [pc, #56]	; (800178c <led_task+0x128>)
 8001754:	6818      	ldr	r0, [r3, #0]
 8001756:	2300      	movs	r3, #0
 8001758:	9300      	str	r3, [sp, #0]
 800175a:	2300      	movs	r3, #0
 800175c:	2200      	movs	r2, #0
 800175e:	2100      	movs	r1, #0
 8001760:	f004 feb6 	bl	80064d0 <xTaskGenericNotify>
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001764:	e784      	b.n	8001670 <led_task+0xc>
 8001766:	bf00      	nop
 8001768:	08008da8 	.word	0x08008da8
 800176c:	200192a0 	.word	0x200192a0
 8001770:	08008e20 	.word	0x08008e20
 8001774:	08008e28 	.word	0x08008e28
 8001778:	08008e2c 	.word	0x08008e2c
 800177c:	08008e30 	.word	0x08008e30
 8001780:	08008e34 	.word	0x08008e34
 8001784:	20000014 	.word	0x20000014
 8001788:	200000b0 	.word	0x200000b0
 800178c:	2001929c 	.word	0x2001929c

08001790 <getnumber>:

	}
}

uint8_t getnumber(uint8_t *p , int len)
{
 8001790:	b480      	push	{r7}
 8001792:	b085      	sub	sp, #20
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6039      	str	r1, [r7, #0]

	int value ;

	if(len > 1)
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	2b01      	cmp	r3, #1
 800179e:	dd0f      	ble.n	80017c0 <getnumber+0x30>
	   value =  ( ((p[0]-48) * 10) + (p[1] - 48) );
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80017a8:	4613      	mov	r3, r2
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	4413      	add	r3, r2
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	461a      	mov	r2, r3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	3301      	adds	r3, #1
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	3b30      	subs	r3, #48	; 0x30
 80017ba:	4413      	add	r3, r2
 80017bc:	60fb      	str	r3, [r7, #12]
 80017be:	e003      	b.n	80017c8 <getnumber+0x38>
	else
		value = p[0] - 48;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	3b30      	subs	r3, #48	; 0x30
 80017c6:	60fb      	str	r3, [r7, #12]

	return value;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	b2db      	uxtb	r3, r3

}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3714      	adds	r7, #20
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <rtc_task>:

void rtc_task(void *param)
{
 80017d8:	b590      	push	{r4, r7, lr}
 80017da:	b09b      	sub	sp, #108	; 0x6c
 80017dc:	af02      	add	r7, sp, #8
 80017de:	6078      	str	r0, [r7, #4]
	const char* msg_rtc1 = "========================\n"
 80017e0:	4bb2      	ldr	r3, [pc, #712]	; (8001aac <rtc_task+0x2d4>)
 80017e2:	64fb      	str	r3, [r7, #76]	; 0x4c
							"|         RTC          |\n"
							"========================\n";

	const char* msg_rtc2 = "Configure Time            ----> 0\n"
 80017e4:	4bb2      	ldr	r3, [pc, #712]	; (8001ab0 <rtc_task+0x2d8>)
 80017e6:	64bb      	str	r3, [r7, #72]	; 0x48
							"Enable reporting          ----> 2\n"
							"Exit                      ----> 3\n"
							"Enter your choice here : ";


	const char *msg_rtc_hh = "Enter hour(1-12):";
 80017e8:	4bb2      	ldr	r3, [pc, #712]	; (8001ab4 <rtc_task+0x2dc>)
 80017ea:	647b      	str	r3, [r7, #68]	; 0x44
	const char *msg_rtc_mm = "Enter minutes(0-59):";
 80017ec:	4bb2      	ldr	r3, [pc, #712]	; (8001ab8 <rtc_task+0x2e0>)
 80017ee:	643b      	str	r3, [r7, #64]	; 0x40
	const char *msg_rtc_ss = "Enter seconds(0-59):";
 80017f0:	4bb2      	ldr	r3, [pc, #712]	; (8001abc <rtc_task+0x2e4>)
 80017f2:	63fb      	str	r3, [r7, #60]	; 0x3c

	const char *msg_rtc_dd  = "Enter date(1-31):";
 80017f4:	4bb2      	ldr	r3, [pc, #712]	; (8001ac0 <rtc_task+0x2e8>)
 80017f6:	63bb      	str	r3, [r7, #56]	; 0x38
	const char *msg_rtc_mo  ="Enter month(1-12):";
 80017f8:	4bb2      	ldr	r3, [pc, #712]	; (8001ac4 <rtc_task+0x2ec>)
 80017fa:	637b      	str	r3, [r7, #52]	; 0x34
	const char *msg_rtc_dow  = "Enter day(1-7 sun:1):";
 80017fc:	4bb2      	ldr	r3, [pc, #712]	; (8001ac8 <rtc_task+0x2f0>)
 80017fe:	633b      	str	r3, [r7, #48]	; 0x30
	const char *msg_rtc_yr  = "Enter year(0-99):";
 8001800:	4bb2      	ldr	r3, [pc, #712]	; (8001acc <rtc_task+0x2f4>)
 8001802:	62fb      	str	r3, [r7, #44]	; 0x2c

	const char *msg_conf = "Configuration successful\n";
 8001804:	4bb2      	ldr	r3, [pc, #712]	; (8001ad0 <rtc_task+0x2f8>)
 8001806:	62bb      	str	r3, [r7, #40]	; 0x28
	const char *msg_rtc_report = "Enable time&date reporting(y/n)?: ";
 8001808:	4bb2      	ldr	r3, [pc, #712]	; (8001ad4 <rtc_task+0x2fc>)
 800180a:	627b      	str	r3, [r7, #36]	; 0x24
#define DAY_CONFIG 		3


	while(1){
		/*Notify wait (wait till someone notifies) */
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 800180c:	f04f 33ff 	mov.w	r3, #4294967295
 8001810:	9300      	str	r3, [sp, #0]
 8001812:	2300      	movs	r3, #0
 8001814:	2200      	movs	r2, #0
 8001816:	2100      	movs	r1, #0
 8001818:	2000      	movs	r0, #0
 800181a:	f004 fdd9 	bl	80063d0 <xTaskGenericNotifyWait>

		/*Print the menu and show current date and time information */
		xQueueSend(q_print,&msg_rtc1,portMAX_DELAY);
 800181e:	4bae      	ldr	r3, [pc, #696]	; (8001ad8 <rtc_task+0x300>)
 8001820:	6818      	ldr	r0, [r3, #0]
 8001822:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8001826:	2300      	movs	r3, #0
 8001828:	f04f 32ff 	mov.w	r2, #4294967295
 800182c:	f003 fb1c 	bl	8004e68 <xQueueGenericSend>
		show_time_date();
 8001830:	f7ff fc16 	bl	8001060 <show_time_date>
		xQueueSend(q_print,&msg_rtc2,portMAX_DELAY);
 8001834:	4ba8      	ldr	r3, [pc, #672]	; (8001ad8 <rtc_task+0x300>)
 8001836:	6818      	ldr	r0, [r3, #0]
 8001838:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800183c:	2300      	movs	r3, #0
 800183e:	f04f 32ff 	mov.w	r2, #4294967295
 8001842:	f003 fb11 	bl	8004e68 <xQueueGenericSend>


		while(curr_state != sMainMenu){
 8001846:	bf00      	nop
 8001848:	e1e1      	b.n	8001c0e <rtc_task+0x436>

			/*Wait for command notification (Notify wait) */
			xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);
 800184a:	f107 0320 	add.w	r3, r7, #32
 800184e:	f04f 32ff 	mov.w	r2, #4294967295
 8001852:	9200      	str	r2, [sp, #0]
 8001854:	2200      	movs	r2, #0
 8001856:	2100      	movs	r1, #0
 8001858:	2000      	movs	r0, #0
 800185a:	f004 fdb9 	bl	80063d0 <xTaskGenericNotifyWait>
			cmd = (command_t*)cmd_addr;
 800185e:	6a3b      	ldr	r3, [r7, #32]
 8001860:	65fb      	str	r3, [r7, #92]	; 0x5c

			switch(curr_state)
 8001862:	4b9e      	ldr	r3, [pc, #632]	; (8001adc <rtc_task+0x304>)
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	3b02      	subs	r3, #2
 8001868:	2b03      	cmp	r3, #3
 800186a:	f200 81d0 	bhi.w	8001c0e <rtc_task+0x436>
 800186e:	a201      	add	r2, pc, #4	; (adr r2, 8001874 <rtc_task+0x9c>)
 8001870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001874:	08001885 	.word	0x08001885
 8001878:	08001937 	.word	0x08001937
 800187c:	08001a25 	.word	0x08001a25
 8001880:	08001b8b 	.word	0x08001b8b
			{
				case sRtcMenu:{
					/*process RTC menu commands */
					if(cmd->len == 1)
 8001884:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	2b01      	cmp	r3, #1
 800188a:	d148      	bne.n	800191e <rtc_task+0x146>
					{
						menu_code = cmd->payload[0] - 48;
 800188c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	3b30      	subs	r3, #48	; 0x30
 8001892:	653b      	str	r3, [r7, #80]	; 0x50
 8001894:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001896:	2b03      	cmp	r3, #3
 8001898:	d835      	bhi.n	8001906 <rtc_task+0x12e>
 800189a:	a201      	add	r2, pc, #4	; (adr r2, 80018a0 <rtc_task+0xc8>)
 800189c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018a0:	080018b1 	.word	0x080018b1
 80018a4:	080018cb 	.word	0x080018cb
 80018a8:	080018e5 	.word	0x080018e5
 80018ac:	080018ff 	.word	0x080018ff
						switch(menu_code)
						{
						case 0:
							curr_state = sRtcTimeConfig;
 80018b0:	4b8a      	ldr	r3, [pc, #552]	; (8001adc <rtc_task+0x304>)
 80018b2:	2203      	movs	r2, #3
 80018b4:	701a      	strb	r2, [r3, #0]
							xQueueSend(q_print,&msg_rtc_hh,portMAX_DELAY);
 80018b6:	4b88      	ldr	r3, [pc, #544]	; (8001ad8 <rtc_task+0x300>)
 80018b8:	6818      	ldr	r0, [r3, #0]
 80018ba:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80018be:	2300      	movs	r3, #0
 80018c0:	f04f 32ff 	mov.w	r2, #4294967295
 80018c4:	f003 fad0 	bl	8004e68 <xQueueGenericSend>
							break;
 80018c8:	e034      	b.n	8001934 <rtc_task+0x15c>
						case 1:
							curr_state = sRtcDateConfig;
 80018ca:	4b84      	ldr	r3, [pc, #528]	; (8001adc <rtc_task+0x304>)
 80018cc:	2204      	movs	r2, #4
 80018ce:	701a      	strb	r2, [r3, #0]
							xQueueSend(q_print,&msg_rtc_dd,portMAX_DELAY);
 80018d0:	4b81      	ldr	r3, [pc, #516]	; (8001ad8 <rtc_task+0x300>)
 80018d2:	6818      	ldr	r0, [r3, #0]
 80018d4:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80018d8:	2300      	movs	r3, #0
 80018da:	f04f 32ff 	mov.w	r2, #4294967295
 80018de:	f003 fac3 	bl	8004e68 <xQueueGenericSend>
							break;
 80018e2:	e027      	b.n	8001934 <rtc_task+0x15c>
						case 2 :
							curr_state = sRtcReport;
 80018e4:	4b7d      	ldr	r3, [pc, #500]	; (8001adc <rtc_task+0x304>)
 80018e6:	2205      	movs	r2, #5
 80018e8:	701a      	strb	r2, [r3, #0]
							xQueueSend(q_print,&msg_rtc_report,portMAX_DELAY);
 80018ea:	4b7b      	ldr	r3, [pc, #492]	; (8001ad8 <rtc_task+0x300>)
 80018ec:	6818      	ldr	r0, [r3, #0]
 80018ee:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80018f2:	2300      	movs	r3, #0
 80018f4:	f04f 32ff 	mov.w	r2, #4294967295
 80018f8:	f003 fab6 	bl	8004e68 <xQueueGenericSend>
							break;
 80018fc:	e01a      	b.n	8001934 <rtc_task+0x15c>
						case 3 :
							curr_state = sMainMenu;
 80018fe:	4b77      	ldr	r3, [pc, #476]	; (8001adc <rtc_task+0x304>)
 8001900:	2200      	movs	r2, #0
 8001902:	701a      	strb	r2, [r3, #0]
							break;
 8001904:	e016      	b.n	8001934 <rtc_task+0x15c>
						default:
							curr_state = sMainMenu;
 8001906:	4b75      	ldr	r3, [pc, #468]	; (8001adc <rtc_task+0x304>)
 8001908:	2200      	movs	r2, #0
 800190a:	701a      	strb	r2, [r3, #0]
							xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 800190c:	4b72      	ldr	r3, [pc, #456]	; (8001ad8 <rtc_task+0x300>)
 800190e:	6818      	ldr	r0, [r3, #0]
 8001910:	2300      	movs	r3, #0
 8001912:	f04f 32ff 	mov.w	r2, #4294967295
 8001916:	4972      	ldr	r1, [pc, #456]	; (8001ae0 <rtc_task+0x308>)
 8001918:	f003 faa6 	bl	8004e68 <xQueueGenericSend>
 800191c:	e177      	b.n	8001c0e <rtc_task+0x436>
						}

					}else{
						curr_state = sMainMenu;
 800191e:	4b6f      	ldr	r3, [pc, #444]	; (8001adc <rtc_task+0x304>)
 8001920:	2200      	movs	r2, #0
 8001922:	701a      	strb	r2, [r3, #0]
						xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8001924:	4b6c      	ldr	r3, [pc, #432]	; (8001ad8 <rtc_task+0x300>)
 8001926:	6818      	ldr	r0, [r3, #0]
 8001928:	2300      	movs	r3, #0
 800192a:	f04f 32ff 	mov.w	r2, #4294967295
 800192e:	496c      	ldr	r1, [pc, #432]	; (8001ae0 <rtc_task+0x308>)
 8001930:	f003 fa9a 	bl	8004e68 <xQueueGenericSend>
					}
					break;}
 8001934:	e16b      	b.n	8001c0e <rtc_task+0x436>

				case sRtcTimeConfig:{
					/*get hh, mm, ss infor and configure RTC */
					/*take care of invalid entries */
					switch(rtc_state)
 8001936:	4b6b      	ldr	r3, [pc, #428]	; (8001ae4 <rtc_task+0x30c>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	2b02      	cmp	r3, #2
 800193c:	d03b      	beq.n	80019b6 <rtc_task+0x1de>
 800193e:	2b02      	cmp	r3, #2
 8001940:	f300 8165 	bgt.w	8001c0e <rtc_task+0x436>
 8001944:	2b00      	cmp	r3, #0
 8001946:	d002      	beq.n	800194e <rtc_task+0x176>
 8001948:	2b01      	cmp	r3, #1
 800194a:	d01a      	beq.n	8001982 <rtc_task+0x1aa>
 800194c:	e15f      	b.n	8001c0e <rtc_task+0x436>
						{
							case HH_CONFIG:{
								uint8_t hour = getnumber(cmd->payload , cmd->len);
 800194e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001950:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	4619      	mov	r1, r3
 8001956:	4610      	mov	r0, r2
 8001958:	f7ff ff1a 	bl	8001790 <getnumber>
 800195c:	4603      	mov	r3, r0
 800195e:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
								time.Hours = hour;
 8001962:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001966:	733b      	strb	r3, [r7, #12]
								rtc_state = MM_CONFIG;
 8001968:	4b5e      	ldr	r3, [pc, #376]	; (8001ae4 <rtc_task+0x30c>)
 800196a:	2201      	movs	r2, #1
 800196c:	601a      	str	r2, [r3, #0]
								xQueueSend(q_print,&msg_rtc_mm,portMAX_DELAY);
 800196e:	4b5a      	ldr	r3, [pc, #360]	; (8001ad8 <rtc_task+0x300>)
 8001970:	6818      	ldr	r0, [r3, #0]
 8001972:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001976:	2300      	movs	r3, #0
 8001978:	f04f 32ff 	mov.w	r2, #4294967295
 800197c:	f003 fa74 	bl	8004e68 <xQueueGenericSend>
								break;}
 8001980:	e04f      	b.n	8001a22 <rtc_task+0x24a>
							case MM_CONFIG:{
								uint8_t min = getnumber(cmd->payload , cmd->len);
 8001982:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001984:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	4619      	mov	r1, r3
 800198a:	4610      	mov	r0, r2
 800198c:	f7ff ff00 	bl	8001790 <getnumber>
 8001990:	4603      	mov	r3, r0
 8001992:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
								time.Minutes = min;
 8001996:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 800199a:	737b      	strb	r3, [r7, #13]
								rtc_state = SS_CONFIG;
 800199c:	4b51      	ldr	r3, [pc, #324]	; (8001ae4 <rtc_task+0x30c>)
 800199e:	2202      	movs	r2, #2
 80019a0:	601a      	str	r2, [r3, #0]
								xQueueSend(q_print,&msg_rtc_ss,portMAX_DELAY);
 80019a2:	4b4d      	ldr	r3, [pc, #308]	; (8001ad8 <rtc_task+0x300>)
 80019a4:	6818      	ldr	r0, [r3, #0]
 80019a6:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80019aa:	2300      	movs	r3, #0
 80019ac:	f04f 32ff 	mov.w	r2, #4294967295
 80019b0:	f003 fa5a 	bl	8004e68 <xQueueGenericSend>
								break;}
 80019b4:	e035      	b.n	8001a22 <rtc_task+0x24a>
							case SS_CONFIG:{
								uint8_t sec = getnumber(cmd->payload , cmd->len);
 80019b6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80019b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	4619      	mov	r1, r3
 80019be:	4610      	mov	r0, r2
 80019c0:	f7ff fee6 	bl	8001790 <getnumber>
 80019c4:	4603      	mov	r3, r0
 80019c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
								time.Seconds = sec;
 80019ca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80019ce:	73bb      	strb	r3, [r7, #14]
								if(!validate_rtc_information(&time,NULL))
 80019d0:	f107 030c 	add.w	r3, r7, #12
 80019d4:	2100      	movs	r1, #0
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7ff fbd6 	bl	8001188 <validate_rtc_information>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d110      	bne.n	8001a04 <rtc_task+0x22c>
								{
									rtc_configure_time(&time);
 80019e2:	f107 030c 	add.w	r3, r7, #12
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7ff fba6 	bl	8001138 <rtc_configure_time>
									xQueueSend(q_print,&msg_conf,portMAX_DELAY);
 80019ec:	4b3a      	ldr	r3, [pc, #232]	; (8001ad8 <rtc_task+0x300>)
 80019ee:	6818      	ldr	r0, [r3, #0]
 80019f0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80019f4:	2300      	movs	r3, #0
 80019f6:	f04f 32ff 	mov.w	r2, #4294967295
 80019fa:	f003 fa35 	bl	8004e68 <xQueueGenericSend>
									show_time_date();
 80019fe:	f7ff fb2f 	bl	8001060 <show_time_date>
 8001a02:	e007      	b.n	8001a14 <rtc_task+0x23c>
								}else
									xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8001a04:	4b34      	ldr	r3, [pc, #208]	; (8001ad8 <rtc_task+0x300>)
 8001a06:	6818      	ldr	r0, [r3, #0]
 8001a08:	2300      	movs	r3, #0
 8001a0a:	f04f 32ff 	mov.w	r2, #4294967295
 8001a0e:	4934      	ldr	r1, [pc, #208]	; (8001ae0 <rtc_task+0x308>)
 8001a10:	f003 fa2a 	bl	8004e68 <xQueueGenericSend>

								curr_state = sMainMenu;
 8001a14:	4b31      	ldr	r3, [pc, #196]	; (8001adc <rtc_task+0x304>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	701a      	strb	r2, [r3, #0]
								rtc_state = 0;
 8001a1a:	4b32      	ldr	r3, [pc, #200]	; (8001ae4 <rtc_task+0x30c>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]
								break;}
 8001a20:	bf00      	nop
						}

					break;}
 8001a22:	e0f4      	b.n	8001c0e <rtc_task+0x436>
				case sRtcDateConfig:{

					/*get date, month, day , year info and configure RTC */

					/*take care of invalid entries */
					switch(rtc_state)
 8001a24:	4b2f      	ldr	r3, [pc, #188]	; (8001ae4 <rtc_task+0x30c>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2b03      	cmp	r3, #3
 8001a2a:	f200 80f0 	bhi.w	8001c0e <rtc_task+0x436>
 8001a2e:	a201      	add	r2, pc, #4	; (adr r2, 8001a34 <rtc_task+0x25c>)
 8001a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a34:	08001a45 	.word	0x08001a45
 8001a38:	08001a79 	.word	0x08001a79
 8001a3c:	08001b1d 	.word	0x08001b1d
 8001a40:	08001ae9 	.word	0x08001ae9
						{
							case DATE_CONFIG:{
								uint8_t d = getnumber(cmd->payload , cmd->len);
 8001a44:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001a46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a48:	68db      	ldr	r3, [r3, #12]
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4610      	mov	r0, r2
 8001a4e:	f7ff fe9f 	bl	8001790 <getnumber>
 8001a52:	4603      	mov	r3, r0
 8001a54:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
								date.Date = d;
 8001a58:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8001a5c:	72bb      	strb	r3, [r7, #10]
								rtc_state = MONTH_CONFIG;
 8001a5e:	4b21      	ldr	r3, [pc, #132]	; (8001ae4 <rtc_task+0x30c>)
 8001a60:	2201      	movs	r2, #1
 8001a62:	601a      	str	r2, [r3, #0]
								xQueueSend(q_print,&msg_rtc_mo,portMAX_DELAY);
 8001a64:	4b1c      	ldr	r3, [pc, #112]	; (8001ad8 <rtc_task+0x300>)
 8001a66:	6818      	ldr	r0, [r3, #0]
 8001a68:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	f04f 32ff 	mov.w	r2, #4294967295
 8001a72:	f003 f9f9 	bl	8004e68 <xQueueGenericSend>
								break;}
 8001a76:	e087      	b.n	8001b88 <rtc_task+0x3b0>
							case MONTH_CONFIG:{
								uint8_t month = getnumber(cmd->payload , cmd->len);
 8001a78:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001a7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a7c:	68db      	ldr	r3, [r3, #12]
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4610      	mov	r0, r2
 8001a82:	f7ff fe85 	bl	8001790 <getnumber>
 8001a86:	4603      	mov	r3, r0
 8001a88:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
								date.Month = month;
 8001a8c:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8001a90:	727b      	strb	r3, [r7, #9]
								rtc_state = DAY_CONFIG;
 8001a92:	4b14      	ldr	r3, [pc, #80]	; (8001ae4 <rtc_task+0x30c>)
 8001a94:	2203      	movs	r2, #3
 8001a96:	601a      	str	r2, [r3, #0]
								xQueueSend(q_print,&msg_rtc_dow,portMAX_DELAY);
 8001a98:	4b0f      	ldr	r3, [pc, #60]	; (8001ad8 <rtc_task+0x300>)
 8001a9a:	6818      	ldr	r0, [r3, #0]
 8001a9c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	f04f 32ff 	mov.w	r2, #4294967295
 8001aa6:	f003 f9df 	bl	8004e68 <xQueueGenericSend>
								break;}
 8001aaa:	e06d      	b.n	8001b88 <rtc_task+0x3b0>
 8001aac:	08008e38 	.word	0x08008e38
 8001ab0:	08008e84 	.word	0x08008e84
 8001ab4:	08008f28 	.word	0x08008f28
 8001ab8:	08008f3c 	.word	0x08008f3c
 8001abc:	08008f54 	.word	0x08008f54
 8001ac0:	08008f6c 	.word	0x08008f6c
 8001ac4:	08008f80 	.word	0x08008f80
 8001ac8:	08008f94 	.word	0x08008f94
 8001acc:	08008fac 	.word	0x08008fac
 8001ad0:	08008fc0 	.word	0x08008fc0
 8001ad4:	08008fdc 	.word	0x08008fdc
 8001ad8:	200192a0 	.word	0x200192a0
 8001adc:	200000b0 	.word	0x200000b0
 8001ae0:	20000014 	.word	0x20000014
 8001ae4:	20000108 	.word	0x20000108
							case DAY_CONFIG:{
								uint8_t day = getnumber(cmd->payload , cmd->len);
 8001ae8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001aea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	4619      	mov	r1, r3
 8001af0:	4610      	mov	r0, r2
 8001af2:	f7ff fe4d 	bl	8001790 <getnumber>
 8001af6:	4603      	mov	r3, r0
 8001af8:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
								date.WeekDay = day;
 8001afc:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001b00:	723b      	strb	r3, [r7, #8]
								rtc_state = YEAR_CONFIG;
 8001b02:	4b4a      	ldr	r3, [pc, #296]	; (8001c2c <rtc_task+0x454>)
 8001b04:	2202      	movs	r2, #2
 8001b06:	601a      	str	r2, [r3, #0]
								xQueueSend(q_print,&msg_rtc_yr,portMAX_DELAY);
 8001b08:	4b49      	ldr	r3, [pc, #292]	; (8001c30 <rtc_task+0x458>)
 8001b0a:	6818      	ldr	r0, [r3, #0]
 8001b0c:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001b10:	2300      	movs	r3, #0
 8001b12:	f04f 32ff 	mov.w	r2, #4294967295
 8001b16:	f003 f9a7 	bl	8004e68 <xQueueGenericSend>
								break;}
 8001b1a:	e035      	b.n	8001b88 <rtc_task+0x3b0>
							case YEAR_CONFIG:{
								uint8_t year = getnumber(cmd->payload , cmd->len);
 8001b1c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001b1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b20:	68db      	ldr	r3, [r3, #12]
 8001b22:	4619      	mov	r1, r3
 8001b24:	4610      	mov	r0, r2
 8001b26:	f7ff fe33 	bl	8001790 <getnumber>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
								date.Year = year;
 8001b30:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8001b34:	72fb      	strb	r3, [r7, #11]

								if(!validate_rtc_information(NULL,&date))
 8001b36:	f107 0308 	add.w	r3, r7, #8
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	2000      	movs	r0, #0
 8001b3e:	f7ff fb23 	bl	8001188 <validate_rtc_information>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d110      	bne.n	8001b6a <rtc_task+0x392>
								{
									rtc_configure_date(&date);
 8001b48:	f107 0308 	add.w	r3, r7, #8
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff fb0b 	bl	8001168 <rtc_configure_date>
									xQueueSend(q_print,&msg_conf,portMAX_DELAY);
 8001b52:	4b37      	ldr	r3, [pc, #220]	; (8001c30 <rtc_task+0x458>)
 8001b54:	6818      	ldr	r0, [r3, #0]
 8001b56:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b60:	f003 f982 	bl	8004e68 <xQueueGenericSend>
									show_time_date();
 8001b64:	f7ff fa7c 	bl	8001060 <show_time_date>
 8001b68:	e007      	b.n	8001b7a <rtc_task+0x3a2>
								}else
									xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8001b6a:	4b31      	ldr	r3, [pc, #196]	; (8001c30 <rtc_task+0x458>)
 8001b6c:	6818      	ldr	r0, [r3, #0]
 8001b6e:	2300      	movs	r3, #0
 8001b70:	f04f 32ff 	mov.w	r2, #4294967295
 8001b74:	492f      	ldr	r1, [pc, #188]	; (8001c34 <rtc_task+0x45c>)
 8001b76:	f003 f977 	bl	8004e68 <xQueueGenericSend>

								curr_state = sMainMenu;
 8001b7a:	4b2f      	ldr	r3, [pc, #188]	; (8001c38 <rtc_task+0x460>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	701a      	strb	r2, [r3, #0]
								rtc_state = 0;
 8001b80:	4b2a      	ldr	r3, [pc, #168]	; (8001c2c <rtc_task+0x454>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	601a      	str	r2, [r3, #0]
								break;}
 8001b86:	bf00      	nop
						}


					break;}
 8001b88:	e041      	b.n	8001c0e <rtc_task+0x436>

				case sRtcReport:{
					/*enable or disable RTC current time reporting over ITM printf */
					if(cmd->len == 1)
 8001b8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b8c:	68db      	ldr	r3, [r3, #12]
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d131      	bne.n	8001bf6 <rtc_task+0x41e>
					{
						if(cmd->payload[0] == 'y'){
 8001b92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	2b79      	cmp	r3, #121	; 0x79
 8001b98:	d115      	bne.n	8001bc6 <rtc_task+0x3ee>
							if(xTimerIsTimerActive(rtc_timer) == pdFALSE)
 8001b9a:	4b28      	ldr	r3, [pc, #160]	; (8001c3c <rtc_task+0x464>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f005 fa4c 	bl	800703c <xTimerIsTimerActive>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d12d      	bne.n	8001c06 <rtc_task+0x42e>
								xTimerStart(rtc_timer,portMAX_DELAY);
 8001baa:	4b24      	ldr	r3, [pc, #144]	; (8001c3c <rtc_task+0x464>)
 8001bac:	681c      	ldr	r4, [r3, #0]
 8001bae:	f004 f867 	bl	8005c80 <xTaskGetTickCount>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	f04f 33ff 	mov.w	r3, #4294967295
 8001bb8:	9300      	str	r3, [sp, #0]
 8001bba:	2300      	movs	r3, #0
 8001bbc:	2101      	movs	r1, #1
 8001bbe:	4620      	mov	r0, r4
 8001bc0:	f004 ff5c 	bl	8006a7c <xTimerGenericCommand>
 8001bc4:	e01f      	b.n	8001c06 <rtc_task+0x42e>
						}else if (cmd->payload[0] == 'n'){
 8001bc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	2b6e      	cmp	r3, #110	; 0x6e
 8001bcc:	d10a      	bne.n	8001be4 <rtc_task+0x40c>
							xTimerStop(rtc_timer,portMAX_DELAY);
 8001bce:	4b1b      	ldr	r3, [pc, #108]	; (8001c3c <rtc_task+0x464>)
 8001bd0:	6818      	ldr	r0, [r3, #0]
 8001bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8001bd6:	9300      	str	r3, [sp, #0]
 8001bd8:	2300      	movs	r3, #0
 8001bda:	2200      	movs	r2, #0
 8001bdc:	2103      	movs	r1, #3
 8001bde:	f004 ff4d 	bl	8006a7c <xTimerGenericCommand>
 8001be2:	e010      	b.n	8001c06 <rtc_task+0x42e>
						}else{
							xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8001be4:	4b12      	ldr	r3, [pc, #72]	; (8001c30 <rtc_task+0x458>)
 8001be6:	6818      	ldr	r0, [r3, #0]
 8001be8:	2300      	movs	r3, #0
 8001bea:	f04f 32ff 	mov.w	r2, #4294967295
 8001bee:	4911      	ldr	r1, [pc, #68]	; (8001c34 <rtc_task+0x45c>)
 8001bf0:	f003 f93a 	bl	8004e68 <xQueueGenericSend>
 8001bf4:	e007      	b.n	8001c06 <rtc_task+0x42e>
						}

					}else
					    xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8001bf6:	4b0e      	ldr	r3, [pc, #56]	; (8001c30 <rtc_task+0x458>)
 8001bf8:	6818      	ldr	r0, [r3, #0]
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8001c00:	490c      	ldr	r1, [pc, #48]	; (8001c34 <rtc_task+0x45c>)
 8001c02:	f003 f931 	bl	8004e68 <xQueueGenericSend>

					curr_state = sMainMenu;
 8001c06:	4b0c      	ldr	r3, [pc, #48]	; (8001c38 <rtc_task+0x460>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	701a      	strb	r2, [r3, #0]
					break;}
 8001c0c:	bf00      	nop
		while(curr_state != sMainMenu){
 8001c0e:	4b0a      	ldr	r3, [pc, #40]	; (8001c38 <rtc_task+0x460>)
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	f47f ae19 	bne.w	800184a <rtc_task+0x72>

		} //while end


		/*Notify menu task */
		xTaskNotify(handle_menu_task,0,eNoAction);
 8001c18:	4b09      	ldr	r3, [pc, #36]	; (8001c40 <rtc_task+0x468>)
 8001c1a:	6818      	ldr	r0, [r3, #0]
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	9300      	str	r3, [sp, #0]
 8001c20:	2300      	movs	r3, #0
 8001c22:	2200      	movs	r2, #0
 8001c24:	2100      	movs	r1, #0
 8001c26:	f004 fc53 	bl	80064d0 <xTaskGenericNotify>
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001c2a:	e5ef      	b.n	800180c <rtc_task+0x34>
 8001c2c:	20000108 	.word	0x20000108
 8001c30:	200192a0 	.word	0x200192a0
 8001c34:	20000014 	.word	0x20000014
 8001c38:	200000b0 	.word	0x200000b0
 8001c3c:	2001928c 	.word	0x2001928c
 8001c40:	2001929c 	.word	0x2001929c

08001c44 <print_task>:
}



void print_task(void *param)
{
 8001c44:	b590      	push	{r4, r7, lr}
 8001c46:	b085      	sub	sp, #20
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]

	uint32_t *msg;
	while(1){
		xQueueReceive(q_print, &msg, portMAX_DELAY);
 8001c4c:	4b0b      	ldr	r3, [pc, #44]	; (8001c7c <print_task+0x38>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f107 010c 	add.w	r1, r7, #12
 8001c54:	f04f 32ff 	mov.w	r2, #4294967295
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f003 faad 	bl	80051b8 <xQueueReceive>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen((char*)msg),HAL_MAX_DELAY);
 8001c5e:	68fc      	ldr	r4, [r7, #12]
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7fe fabe 	bl	80001e4 <strlen>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	b29a      	uxth	r2, r3
 8001c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c70:	4621      	mov	r1, r4
 8001c72:	4803      	ldr	r0, [pc, #12]	; (8001c80 <print_task+0x3c>)
 8001c74:	f001 ffdf 	bl	8003c36 <HAL_UART_Transmit>
		xQueueReceive(q_print, &msg, portMAX_DELAY);
 8001c78:	e7e8      	b.n	8001c4c <print_task+0x8>
 8001c7a:	bf00      	nop
 8001c7c:	200192a0 	.word	0x200192a0
 8001c80:	200192d0 	.word	0x200192d0

08001c84 <cmd_handler_task>:
}



void cmd_handler_task(void *param)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b08a      	sub	sp, #40	; 0x28
 8001c88:	af02      	add	r7, sp, #8
 8001c8a:	6078      	str	r0, [r7, #4]
	BaseType_t ret;
	command_t cmd;

	while(1){
		/*Implement notify wait */
		ret = xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001c8c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c90:	9300      	str	r3, [sp, #0]
 8001c92:	2300      	movs	r3, #0
 8001c94:	2200      	movs	r2, #0
 8001c96:	2100      	movs	r1, #0
 8001c98:	2000      	movs	r0, #0
 8001c9a:	f004 fb99 	bl	80063d0 <xTaskGenericNotifyWait>
 8001c9e:	61f8      	str	r0, [r7, #28]

		if(ret == pdTRUE){
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d1f2      	bne.n	8001c8c <cmd_handler_task+0x8>
			/*process the user data(command) stored in input data queue */
			process_command(&cmd);
 8001ca6:	f107 030c 	add.w	r3, r7, #12
 8001caa:	4618      	mov	r0, r3
 8001cac:	f000 f802 	bl	8001cb4 <process_command>
		ret = xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001cb0:	e7ec      	b.n	8001c8c <cmd_handler_task+0x8>
	...

08001cb4 <process_command>:

}


void process_command(command_t *cmd)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af02      	add	r7, sp, #8
 8001cba:	6078      	str	r0, [r7, #4]
	extract_command(cmd);
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f000 f835 	bl	8001d2c <extract_command>

	switch(curr_state)
 8001cc2:	4b16      	ldr	r3, [pc, #88]	; (8001d1c <process_command+0x68>)
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	2b05      	cmp	r3, #5
 8001cc8:	dc24      	bgt.n	8001d14 <process_command+0x60>
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	da18      	bge.n	8001d00 <process_command+0x4c>
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d002      	beq.n	8001cd8 <process_command+0x24>
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d00a      	beq.n	8001cec <process_command+0x38>
			xTaskNotify(handle_rtc_task,(uint32_t)cmd , eSetValueWithOverwrite);
		break;

	}

}
 8001cd6:	e01d      	b.n	8001d14 <process_command+0x60>
			xTaskNotify(handle_menu_task,(uint32_t)cmd , eSetValueWithOverwrite);
 8001cd8:	4b11      	ldr	r3, [pc, #68]	; (8001d20 <process_command+0x6c>)
 8001cda:	6818      	ldr	r0, [r3, #0]
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	2300      	movs	r3, #0
 8001ce0:	9300      	str	r3, [sp, #0]
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	f004 fbf3 	bl	80064d0 <xTaskGenericNotify>
		break;
 8001cea:	e013      	b.n	8001d14 <process_command+0x60>
			xTaskNotify(handle_led_task,(uint32_t)cmd , eSetValueWithOverwrite);
 8001cec:	4b0d      	ldr	r3, [pc, #52]	; (8001d24 <process_command+0x70>)
 8001cee:	6818      	ldr	r0, [r3, #0]
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	9300      	str	r3, [sp, #0]
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	f004 fbe9 	bl	80064d0 <xTaskGenericNotify>
		break;
 8001cfe:	e009      	b.n	8001d14 <process_command+0x60>
			xTaskNotify(handle_rtc_task,(uint32_t)cmd , eSetValueWithOverwrite);
 8001d00:	4b09      	ldr	r3, [pc, #36]	; (8001d28 <process_command+0x74>)
 8001d02:	6818      	ldr	r0, [r3, #0]
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	2300      	movs	r3, #0
 8001d08:	9300      	str	r3, [sp, #0]
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	f004 fbdf 	bl	80064d0 <xTaskGenericNotify>
		break;
 8001d12:	bf00      	nop
}
 8001d14:	bf00      	nop
 8001d16:	3708      	adds	r7, #8
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	200000b0 	.word	0x200000b0
 8001d20:	2001929c 	.word	0x2001929c
 8001d24:	200192c8 	.word	0x200192c8
 8001d28:	20019290 	.word	0x20019290

08001d2c <extract_command>:


int extract_command(command_t *cmd)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b086      	sub	sp, #24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
	uint8_t item;
	BaseType_t  status;

	status = uxQueueMessagesWaiting(q_data );
 8001d34:	4b19      	ldr	r3, [pc, #100]	; (8001d9c <extract_command+0x70>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f003 fbac 	bl	8005496 <uxQueueMessagesWaiting>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	613b      	str	r3, [r7, #16]
	if(!status) return -1;
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d102      	bne.n	8001d4e <extract_command+0x22>
 8001d48:	f04f 33ff 	mov.w	r3, #4294967295
 8001d4c:	e022      	b.n	8001d94 <extract_command+0x68>
	uint8_t i =0;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	75fb      	strb	r3, [r7, #23]

	do
	{
		status = xQueueReceive(q_data,&item,0);
 8001d52:	4b12      	ldr	r3, [pc, #72]	; (8001d9c <extract_command+0x70>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f107 010f 	add.w	r1, r7, #15
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f003 fa2b 	bl	80051b8 <xQueueReceive>
 8001d62:	6138      	str	r0, [r7, #16]
		if(status == pdTRUE) cmd->payload[i++] = item;
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d106      	bne.n	8001d78 <extract_command+0x4c>
 8001d6a:	7dfb      	ldrb	r3, [r7, #23]
 8001d6c:	1c5a      	adds	r2, r3, #1
 8001d6e:	75fa      	strb	r2, [r7, #23]
 8001d70:	461a      	mov	r2, r3
 8001d72:	7bf9      	ldrb	r1, [r7, #15]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	5499      	strb	r1, [r3, r2]
	}while(item != '\n');
 8001d78:	7bfb      	ldrb	r3, [r7, #15]
 8001d7a:	2b0a      	cmp	r3, #10
 8001d7c:	d1e9      	bne.n	8001d52 <extract_command+0x26>

	cmd->payload[i-1] = '\0';
 8001d7e:	7dfb      	ldrb	r3, [r7, #23]
 8001d80:	3b01      	subs	r3, #1
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	2100      	movs	r1, #0
 8001d86:	54d1      	strb	r1, [r2, r3]
	cmd->len = i-1; /*save  length of the command excluding null char */
 8001d88:	7dfb      	ldrb	r3, [r7, #23]
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	60da      	str	r2, [r3, #12]

	return 0;
 8001d92:	2300      	movs	r3, #0
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3718      	adds	r7, #24
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	20019298 	.word	0x20019298

08001da0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001da0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001dd8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001da4:	480d      	ldr	r0, [pc, #52]	; (8001ddc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001da6:	490e      	ldr	r1, [pc, #56]	; (8001de0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001da8:	4a0e      	ldr	r2, [pc, #56]	; (8001de4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001daa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dac:	e002      	b.n	8001db4 <LoopCopyDataInit>

08001dae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001db0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001db2:	3304      	adds	r3, #4

08001db4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001db4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001db6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001db8:	d3f9      	bcc.n	8001dae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dba:	4a0b      	ldr	r2, [pc, #44]	; (8001de8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001dbc:	4c0b      	ldr	r4, [pc, #44]	; (8001dec <LoopFillZerobss+0x26>)
  movs r3, #0
 8001dbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dc0:	e001      	b.n	8001dc6 <LoopFillZerobss>

08001dc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dc4:	3204      	adds	r2, #4

08001dc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dc8:	d3fb      	bcc.n	8001dc2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001dca:	f7ff fbc5 	bl	8001558 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dce:	f005 fdd1 	bl	8007974 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dd2:	f7fe fd17 	bl	8000804 <main>
  bx  lr    
 8001dd6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001dd8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ddc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001de0:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001de4:	080090d8 	.word	0x080090d8
  ldr r2, =_sbss
 8001de8:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8001dec:	200193b0 	.word	0x200193b0

08001df0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001df0:	e7fe      	b.n	8001df0 <ADC_IRQHandler>
	...

08001df4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001df8:	4b0e      	ldr	r3, [pc, #56]	; (8001e34 <HAL_Init+0x40>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a0d      	ldr	r2, [pc, #52]	; (8001e34 <HAL_Init+0x40>)
 8001dfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e04:	4b0b      	ldr	r3, [pc, #44]	; (8001e34 <HAL_Init+0x40>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a0a      	ldr	r2, [pc, #40]	; (8001e34 <HAL_Init+0x40>)
 8001e0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e10:	4b08      	ldr	r3, [pc, #32]	; (8001e34 <HAL_Init+0x40>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a07      	ldr	r2, [pc, #28]	; (8001e34 <HAL_Init+0x40>)
 8001e16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e1c:	2003      	movs	r0, #3
 8001e1e:	f000 f8d8 	bl	8001fd2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e22:	2000      	movs	r0, #0
 8001e24:	f7ff fa70 	bl	8001308 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e28:	f7ff f9e0 	bl	80011ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	40023c00 	.word	0x40023c00

08001e38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e3c:	4b06      	ldr	r3, [pc, #24]	; (8001e58 <HAL_IncTick+0x20>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	461a      	mov	r2, r3
 8001e42:	4b06      	ldr	r3, [pc, #24]	; (8001e5c <HAL_IncTick+0x24>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4413      	add	r3, r2
 8001e48:	4a04      	ldr	r2, [pc, #16]	; (8001e5c <HAL_IncTick+0x24>)
 8001e4a:	6013      	str	r3, [r2, #0]
}
 8001e4c:	bf00      	nop
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	2000001c 	.word	0x2000001c
 8001e5c:	2001935c 	.word	0x2001935c

08001e60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  return uwTick;
 8001e64:	4b03      	ldr	r3, [pc, #12]	; (8001e74 <HAL_GetTick+0x14>)
 8001e66:	681b      	ldr	r3, [r3, #0]
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	2001935c 	.word	0x2001935c

08001e78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b085      	sub	sp, #20
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f003 0307 	and.w	r3, r3, #7
 8001e86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e88:	4b0c      	ldr	r3, [pc, #48]	; (8001ebc <__NVIC_SetPriorityGrouping+0x44>)
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e8e:	68ba      	ldr	r2, [r7, #8]
 8001e90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e94:	4013      	ands	r3, r2
 8001e96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ea0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ea4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ea8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eaa:	4a04      	ldr	r2, [pc, #16]	; (8001ebc <__NVIC_SetPriorityGrouping+0x44>)
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	60d3      	str	r3, [r2, #12]
}
 8001eb0:	bf00      	nop
 8001eb2:	3714      	adds	r7, #20
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr
 8001ebc:	e000ed00 	.word	0xe000ed00

08001ec0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ec4:	4b04      	ldr	r3, [pc, #16]	; (8001ed8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	0a1b      	lsrs	r3, r3, #8
 8001eca:	f003 0307 	and.w	r3, r3, #7
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr
 8001ed8:	e000ed00 	.word	0xe000ed00

08001edc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	db0b      	blt.n	8001f06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eee:	79fb      	ldrb	r3, [r7, #7]
 8001ef0:	f003 021f 	and.w	r2, r3, #31
 8001ef4:	4907      	ldr	r1, [pc, #28]	; (8001f14 <__NVIC_EnableIRQ+0x38>)
 8001ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efa:	095b      	lsrs	r3, r3, #5
 8001efc:	2001      	movs	r0, #1
 8001efe:	fa00 f202 	lsl.w	r2, r0, r2
 8001f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f06:	bf00      	nop
 8001f08:	370c      	adds	r7, #12
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	e000e100 	.word	0xe000e100

08001f18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	4603      	mov	r3, r0
 8001f20:	6039      	str	r1, [r7, #0]
 8001f22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	db0a      	blt.n	8001f42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	b2da      	uxtb	r2, r3
 8001f30:	490c      	ldr	r1, [pc, #48]	; (8001f64 <__NVIC_SetPriority+0x4c>)
 8001f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f36:	0112      	lsls	r2, r2, #4
 8001f38:	b2d2      	uxtb	r2, r2
 8001f3a:	440b      	add	r3, r1
 8001f3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f40:	e00a      	b.n	8001f58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	b2da      	uxtb	r2, r3
 8001f46:	4908      	ldr	r1, [pc, #32]	; (8001f68 <__NVIC_SetPriority+0x50>)
 8001f48:	79fb      	ldrb	r3, [r7, #7]
 8001f4a:	f003 030f 	and.w	r3, r3, #15
 8001f4e:	3b04      	subs	r3, #4
 8001f50:	0112      	lsls	r2, r2, #4
 8001f52:	b2d2      	uxtb	r2, r2
 8001f54:	440b      	add	r3, r1
 8001f56:	761a      	strb	r2, [r3, #24]
}
 8001f58:	bf00      	nop
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr
 8001f64:	e000e100 	.word	0xe000e100
 8001f68:	e000ed00 	.word	0xe000ed00

08001f6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b089      	sub	sp, #36	; 0x24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f003 0307 	and.w	r3, r3, #7
 8001f7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	f1c3 0307 	rsb	r3, r3, #7
 8001f86:	2b04      	cmp	r3, #4
 8001f88:	bf28      	it	cs
 8001f8a:	2304      	movcs	r3, #4
 8001f8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	3304      	adds	r3, #4
 8001f92:	2b06      	cmp	r3, #6
 8001f94:	d902      	bls.n	8001f9c <NVIC_EncodePriority+0x30>
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	3b03      	subs	r3, #3
 8001f9a:	e000      	b.n	8001f9e <NVIC_EncodePriority+0x32>
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001faa:	43da      	mvns	r2, r3
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	401a      	ands	r2, r3
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fb4:	f04f 31ff 	mov.w	r1, #4294967295
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	fa01 f303 	lsl.w	r3, r1, r3
 8001fbe:	43d9      	mvns	r1, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fc4:	4313      	orrs	r3, r2
         );
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3724      	adds	r7, #36	; 0x24
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr

08001fd2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b082      	sub	sp, #8
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f7ff ff4c 	bl	8001e78 <__NVIC_SetPriorityGrouping>
}
 8001fe0:	bf00      	nop
 8001fe2:	3708      	adds	r7, #8
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b086      	sub	sp, #24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	4603      	mov	r3, r0
 8001ff0:	60b9      	str	r1, [r7, #8]
 8001ff2:	607a      	str	r2, [r7, #4]
 8001ff4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ffa:	f7ff ff61 	bl	8001ec0 <__NVIC_GetPriorityGrouping>
 8001ffe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	68b9      	ldr	r1, [r7, #8]
 8002004:	6978      	ldr	r0, [r7, #20]
 8002006:	f7ff ffb1 	bl	8001f6c <NVIC_EncodePriority>
 800200a:	4602      	mov	r2, r0
 800200c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002010:	4611      	mov	r1, r2
 8002012:	4618      	mov	r0, r3
 8002014:	f7ff ff80 	bl	8001f18 <__NVIC_SetPriority>
}
 8002018:	bf00      	nop
 800201a:	3718      	adds	r7, #24
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	4603      	mov	r3, r0
 8002028:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800202a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800202e:	4618      	mov	r0, r3
 8002030:	f7ff ff54 	bl	8001edc <__NVIC_EnableIRQ>
}
 8002034:	bf00      	nop
 8002036:	3708      	adds	r7, #8
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002048:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800204a:	f7ff ff09 	bl	8001e60 <HAL_GetTick>
 800204e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002056:	b2db      	uxtb	r3, r3
 8002058:	2b02      	cmp	r3, #2
 800205a:	d008      	beq.n	800206e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2280      	movs	r2, #128	; 0x80
 8002060:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e052      	b.n	8002114 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f022 0216 	bic.w	r2, r2, #22
 800207c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	695a      	ldr	r2, [r3, #20]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800208c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002092:	2b00      	cmp	r3, #0
 8002094:	d103      	bne.n	800209e <HAL_DMA_Abort+0x62>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800209a:	2b00      	cmp	r3, #0
 800209c:	d007      	beq.n	80020ae <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f022 0208 	bic.w	r2, r2, #8
 80020ac:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f022 0201 	bic.w	r2, r2, #1
 80020bc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020be:	e013      	b.n	80020e8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020c0:	f7ff fece 	bl	8001e60 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b05      	cmp	r3, #5
 80020cc:	d90c      	bls.n	80020e8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2220      	movs	r2, #32
 80020d2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2203      	movs	r2, #3
 80020d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	e015      	b.n	8002114 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d1e4      	bne.n	80020c0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020fa:	223f      	movs	r2, #63	; 0x3f
 80020fc:	409a      	lsls	r2, r3
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2201      	movs	r2, #1
 8002106:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002112:	2300      	movs	r3, #0
}
 8002114:	4618      	mov	r0, r3
 8002116:	3710      	adds	r7, #16
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800212a:	b2db      	uxtb	r3, r3
 800212c:	2b02      	cmp	r3, #2
 800212e:	d004      	beq.n	800213a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2280      	movs	r2, #128	; 0x80
 8002134:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e00c      	b.n	8002154 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2205      	movs	r2, #5
 800213e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f022 0201 	bic.w	r2, r2, #1
 8002150:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002152:	2300      	movs	r3, #0
}
 8002154:	4618      	mov	r0, r3
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002160:	b480      	push	{r7}
 8002162:	b089      	sub	sp, #36	; 0x24
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800216a:	2300      	movs	r3, #0
 800216c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800216e:	2300      	movs	r3, #0
 8002170:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002172:	2300      	movs	r3, #0
 8002174:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002176:	2300      	movs	r3, #0
 8002178:	61fb      	str	r3, [r7, #28]
 800217a:	e16b      	b.n	8002454 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800217c:	2201      	movs	r2, #1
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	697a      	ldr	r2, [r7, #20]
 800218c:	4013      	ands	r3, r2
 800218e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002190:	693a      	ldr	r2, [r7, #16]
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	429a      	cmp	r2, r3
 8002196:	f040 815a 	bne.w	800244e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f003 0303 	and.w	r3, r3, #3
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d005      	beq.n	80021b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d130      	bne.n	8002214 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	2203      	movs	r2, #3
 80021be:	fa02 f303 	lsl.w	r3, r2, r3
 80021c2:	43db      	mvns	r3, r3
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	4013      	ands	r3, r2
 80021c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	68da      	ldr	r2, [r3, #12]
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	fa02 f303 	lsl.w	r3, r2, r3
 80021d6:	69ba      	ldr	r2, [r7, #24]
 80021d8:	4313      	orrs	r3, r2
 80021da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	69ba      	ldr	r2, [r7, #24]
 80021e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021e8:	2201      	movs	r2, #1
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	fa02 f303 	lsl.w	r3, r2, r3
 80021f0:	43db      	mvns	r3, r3
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	4013      	ands	r3, r2
 80021f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	091b      	lsrs	r3, r3, #4
 80021fe:	f003 0201 	and.w	r2, r3, #1
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	4313      	orrs	r3, r2
 800220c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f003 0303 	and.w	r3, r3, #3
 800221c:	2b03      	cmp	r3, #3
 800221e:	d017      	beq.n	8002250 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	005b      	lsls	r3, r3, #1
 800222a:	2203      	movs	r2, #3
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	43db      	mvns	r3, r3
 8002232:	69ba      	ldr	r2, [r7, #24]
 8002234:	4013      	ands	r3, r2
 8002236:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	689a      	ldr	r2, [r3, #8]
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	4313      	orrs	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f003 0303 	and.w	r3, r3, #3
 8002258:	2b02      	cmp	r3, #2
 800225a:	d123      	bne.n	80022a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	08da      	lsrs	r2, r3, #3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	3208      	adds	r2, #8
 8002264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002268:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	f003 0307 	and.w	r3, r3, #7
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	220f      	movs	r2, #15
 8002274:	fa02 f303 	lsl.w	r3, r2, r3
 8002278:	43db      	mvns	r3, r3
 800227a:	69ba      	ldr	r2, [r7, #24]
 800227c:	4013      	ands	r3, r2
 800227e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	691a      	ldr	r2, [r3, #16]
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	f003 0307 	and.w	r3, r3, #7
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	4313      	orrs	r3, r2
 8002294:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	08da      	lsrs	r2, r3, #3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	3208      	adds	r2, #8
 800229e:	69b9      	ldr	r1, [r7, #24]
 80022a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	2203      	movs	r2, #3
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	43db      	mvns	r3, r3
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	4013      	ands	r3, r2
 80022ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f003 0203 	and.w	r2, r3, #3
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	fa02 f303 	lsl.w	r3, r2, r3
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	f000 80b4 	beq.w	800244e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022e6:	2300      	movs	r3, #0
 80022e8:	60fb      	str	r3, [r7, #12]
 80022ea:	4b60      	ldr	r3, [pc, #384]	; (800246c <HAL_GPIO_Init+0x30c>)
 80022ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ee:	4a5f      	ldr	r2, [pc, #380]	; (800246c <HAL_GPIO_Init+0x30c>)
 80022f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022f4:	6453      	str	r3, [r2, #68]	; 0x44
 80022f6:	4b5d      	ldr	r3, [pc, #372]	; (800246c <HAL_GPIO_Init+0x30c>)
 80022f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022fe:	60fb      	str	r3, [r7, #12]
 8002300:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002302:	4a5b      	ldr	r2, [pc, #364]	; (8002470 <HAL_GPIO_Init+0x310>)
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	089b      	lsrs	r3, r3, #2
 8002308:	3302      	adds	r3, #2
 800230a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800230e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	f003 0303 	and.w	r3, r3, #3
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	220f      	movs	r2, #15
 800231a:	fa02 f303 	lsl.w	r3, r2, r3
 800231e:	43db      	mvns	r3, r3
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	4013      	ands	r3, r2
 8002324:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a52      	ldr	r2, [pc, #328]	; (8002474 <HAL_GPIO_Init+0x314>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d02b      	beq.n	8002386 <HAL_GPIO_Init+0x226>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a51      	ldr	r2, [pc, #324]	; (8002478 <HAL_GPIO_Init+0x318>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d025      	beq.n	8002382 <HAL_GPIO_Init+0x222>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a50      	ldr	r2, [pc, #320]	; (800247c <HAL_GPIO_Init+0x31c>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d01f      	beq.n	800237e <HAL_GPIO_Init+0x21e>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a4f      	ldr	r2, [pc, #316]	; (8002480 <HAL_GPIO_Init+0x320>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d019      	beq.n	800237a <HAL_GPIO_Init+0x21a>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a4e      	ldr	r2, [pc, #312]	; (8002484 <HAL_GPIO_Init+0x324>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d013      	beq.n	8002376 <HAL_GPIO_Init+0x216>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a4d      	ldr	r2, [pc, #308]	; (8002488 <HAL_GPIO_Init+0x328>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d00d      	beq.n	8002372 <HAL_GPIO_Init+0x212>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a4c      	ldr	r2, [pc, #304]	; (800248c <HAL_GPIO_Init+0x32c>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d007      	beq.n	800236e <HAL_GPIO_Init+0x20e>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a4b      	ldr	r2, [pc, #300]	; (8002490 <HAL_GPIO_Init+0x330>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d101      	bne.n	800236a <HAL_GPIO_Init+0x20a>
 8002366:	2307      	movs	r3, #7
 8002368:	e00e      	b.n	8002388 <HAL_GPIO_Init+0x228>
 800236a:	2308      	movs	r3, #8
 800236c:	e00c      	b.n	8002388 <HAL_GPIO_Init+0x228>
 800236e:	2306      	movs	r3, #6
 8002370:	e00a      	b.n	8002388 <HAL_GPIO_Init+0x228>
 8002372:	2305      	movs	r3, #5
 8002374:	e008      	b.n	8002388 <HAL_GPIO_Init+0x228>
 8002376:	2304      	movs	r3, #4
 8002378:	e006      	b.n	8002388 <HAL_GPIO_Init+0x228>
 800237a:	2303      	movs	r3, #3
 800237c:	e004      	b.n	8002388 <HAL_GPIO_Init+0x228>
 800237e:	2302      	movs	r3, #2
 8002380:	e002      	b.n	8002388 <HAL_GPIO_Init+0x228>
 8002382:	2301      	movs	r3, #1
 8002384:	e000      	b.n	8002388 <HAL_GPIO_Init+0x228>
 8002386:	2300      	movs	r3, #0
 8002388:	69fa      	ldr	r2, [r7, #28]
 800238a:	f002 0203 	and.w	r2, r2, #3
 800238e:	0092      	lsls	r2, r2, #2
 8002390:	4093      	lsls	r3, r2
 8002392:	69ba      	ldr	r2, [r7, #24]
 8002394:	4313      	orrs	r3, r2
 8002396:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002398:	4935      	ldr	r1, [pc, #212]	; (8002470 <HAL_GPIO_Init+0x310>)
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	089b      	lsrs	r3, r3, #2
 800239e:	3302      	adds	r3, #2
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023a6:	4b3b      	ldr	r3, [pc, #236]	; (8002494 <HAL_GPIO_Init+0x334>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	43db      	mvns	r3, r3
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	4013      	ands	r3, r2
 80023b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d003      	beq.n	80023ca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80023c2:	69ba      	ldr	r2, [r7, #24]
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023ca:	4a32      	ldr	r2, [pc, #200]	; (8002494 <HAL_GPIO_Init+0x334>)
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80023d0:	4b30      	ldr	r3, [pc, #192]	; (8002494 <HAL_GPIO_Init+0x334>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	43db      	mvns	r3, r3
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	4013      	ands	r3, r2
 80023de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d003      	beq.n	80023f4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023f4:	4a27      	ldr	r2, [pc, #156]	; (8002494 <HAL_GPIO_Init+0x334>)
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023fa:	4b26      	ldr	r3, [pc, #152]	; (8002494 <HAL_GPIO_Init+0x334>)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	43db      	mvns	r3, r3
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	4013      	ands	r3, r2
 8002408:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d003      	beq.n	800241e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	4313      	orrs	r3, r2
 800241c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800241e:	4a1d      	ldr	r2, [pc, #116]	; (8002494 <HAL_GPIO_Init+0x334>)
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002424:	4b1b      	ldr	r3, [pc, #108]	; (8002494 <HAL_GPIO_Init+0x334>)
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	43db      	mvns	r3, r3
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	4013      	ands	r3, r2
 8002432:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d003      	beq.n	8002448 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	4313      	orrs	r3, r2
 8002446:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002448:	4a12      	ldr	r2, [pc, #72]	; (8002494 <HAL_GPIO_Init+0x334>)
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	3301      	adds	r3, #1
 8002452:	61fb      	str	r3, [r7, #28]
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	2b0f      	cmp	r3, #15
 8002458:	f67f ae90 	bls.w	800217c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800245c:	bf00      	nop
 800245e:	bf00      	nop
 8002460:	3724      	adds	r7, #36	; 0x24
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	40023800 	.word	0x40023800
 8002470:	40013800 	.word	0x40013800
 8002474:	40020000 	.word	0x40020000
 8002478:	40020400 	.word	0x40020400
 800247c:	40020800 	.word	0x40020800
 8002480:	40020c00 	.word	0x40020c00
 8002484:	40021000 	.word	0x40021000
 8002488:	40021400 	.word	0x40021400
 800248c:	40021800 	.word	0x40021800
 8002490:	40021c00 	.word	0x40021c00
 8002494:	40013c00 	.word	0x40013c00

08002498 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	460b      	mov	r3, r1
 80024a2:	807b      	strh	r3, [r7, #2]
 80024a4:	4613      	mov	r3, r2
 80024a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024a8:	787b      	ldrb	r3, [r7, #1]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d003      	beq.n	80024b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024ae:	887a      	ldrh	r2, [r7, #2]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024b4:	e003      	b.n	80024be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024b6:	887b      	ldrh	r3, [r7, #2]
 80024b8:	041a      	lsls	r2, r3, #16
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	619a      	str	r2, [r3, #24]
}
 80024be:	bf00      	nop
 80024c0:	370c      	adds	r7, #12
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
	...

080024cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b086      	sub	sp, #24
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d101      	bne.n	80024de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e264      	b.n	80029a8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0301 	and.w	r3, r3, #1
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d075      	beq.n	80025d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024ea:	4ba3      	ldr	r3, [pc, #652]	; (8002778 <HAL_RCC_OscConfig+0x2ac>)
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	f003 030c 	and.w	r3, r3, #12
 80024f2:	2b04      	cmp	r3, #4
 80024f4:	d00c      	beq.n	8002510 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024f6:	4ba0      	ldr	r3, [pc, #640]	; (8002778 <HAL_RCC_OscConfig+0x2ac>)
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024fe:	2b08      	cmp	r3, #8
 8002500:	d112      	bne.n	8002528 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002502:	4b9d      	ldr	r3, [pc, #628]	; (8002778 <HAL_RCC_OscConfig+0x2ac>)
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800250a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800250e:	d10b      	bne.n	8002528 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002510:	4b99      	ldr	r3, [pc, #612]	; (8002778 <HAL_RCC_OscConfig+0x2ac>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d05b      	beq.n	80025d4 <HAL_RCC_OscConfig+0x108>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d157      	bne.n	80025d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e23f      	b.n	80029a8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002530:	d106      	bne.n	8002540 <HAL_RCC_OscConfig+0x74>
 8002532:	4b91      	ldr	r3, [pc, #580]	; (8002778 <HAL_RCC_OscConfig+0x2ac>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a90      	ldr	r2, [pc, #576]	; (8002778 <HAL_RCC_OscConfig+0x2ac>)
 8002538:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800253c:	6013      	str	r3, [r2, #0]
 800253e:	e01d      	b.n	800257c <HAL_RCC_OscConfig+0xb0>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002548:	d10c      	bne.n	8002564 <HAL_RCC_OscConfig+0x98>
 800254a:	4b8b      	ldr	r3, [pc, #556]	; (8002778 <HAL_RCC_OscConfig+0x2ac>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a8a      	ldr	r2, [pc, #552]	; (8002778 <HAL_RCC_OscConfig+0x2ac>)
 8002550:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002554:	6013      	str	r3, [r2, #0]
 8002556:	4b88      	ldr	r3, [pc, #544]	; (8002778 <HAL_RCC_OscConfig+0x2ac>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a87      	ldr	r2, [pc, #540]	; (8002778 <HAL_RCC_OscConfig+0x2ac>)
 800255c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002560:	6013      	str	r3, [r2, #0]
 8002562:	e00b      	b.n	800257c <HAL_RCC_OscConfig+0xb0>
 8002564:	4b84      	ldr	r3, [pc, #528]	; (8002778 <HAL_RCC_OscConfig+0x2ac>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a83      	ldr	r2, [pc, #524]	; (8002778 <HAL_RCC_OscConfig+0x2ac>)
 800256a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800256e:	6013      	str	r3, [r2, #0]
 8002570:	4b81      	ldr	r3, [pc, #516]	; (8002778 <HAL_RCC_OscConfig+0x2ac>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a80      	ldr	r2, [pc, #512]	; (8002778 <HAL_RCC_OscConfig+0x2ac>)
 8002576:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800257a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d013      	beq.n	80025ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002584:	f7ff fc6c 	bl	8001e60 <HAL_GetTick>
 8002588:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800258a:	e008      	b.n	800259e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800258c:	f7ff fc68 	bl	8001e60 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	2b64      	cmp	r3, #100	; 0x64
 8002598:	d901      	bls.n	800259e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e204      	b.n	80029a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800259e:	4b76      	ldr	r3, [pc, #472]	; (8002778 <HAL_RCC_OscConfig+0x2ac>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d0f0      	beq.n	800258c <HAL_RCC_OscConfig+0xc0>
 80025aa:	e014      	b.n	80025d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ac:	f7ff fc58 	bl	8001e60 <HAL_GetTick>
 80025b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025b2:	e008      	b.n	80025c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025b4:	f7ff fc54 	bl	8001e60 <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	2b64      	cmp	r3, #100	; 0x64
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e1f0      	b.n	80029a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025c6:	4b6c      	ldr	r3, [pc, #432]	; (8002778 <HAL_RCC_OscConfig+0x2ac>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d1f0      	bne.n	80025b4 <HAL_RCC_OscConfig+0xe8>
 80025d2:	e000      	b.n	80025d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0302 	and.w	r3, r3, #2
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d063      	beq.n	80026aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025e2:	4b65      	ldr	r3, [pc, #404]	; (8002778 <HAL_RCC_OscConfig+0x2ac>)
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f003 030c 	and.w	r3, r3, #12
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d00b      	beq.n	8002606 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025ee:	4b62      	ldr	r3, [pc, #392]	; (8002778 <HAL_RCC_OscConfig+0x2ac>)
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025f6:	2b08      	cmp	r3, #8
 80025f8:	d11c      	bne.n	8002634 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025fa:	4b5f      	ldr	r3, [pc, #380]	; (8002778 <HAL_RCC_OscConfig+0x2ac>)
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d116      	bne.n	8002634 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002606:	4b5c      	ldr	r3, [pc, #368]	; (8002778 <HAL_RCC_OscConfig+0x2ac>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	2b00      	cmp	r3, #0
 8002610:	d005      	beq.n	800261e <HAL_RCC_OscConfig+0x152>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d001      	beq.n	800261e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e1c4      	b.n	80029a8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800261e:	4b56      	ldr	r3, [pc, #344]	; (8002778 <HAL_RCC_OscConfig+0x2ac>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	00db      	lsls	r3, r3, #3
 800262c:	4952      	ldr	r1, [pc, #328]	; (8002778 <HAL_RCC_OscConfig+0x2ac>)
 800262e:	4313      	orrs	r3, r2
 8002630:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002632:	e03a      	b.n	80026aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d020      	beq.n	800267e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800263c:	4b4f      	ldr	r3, [pc, #316]	; (800277c <HAL_RCC_OscConfig+0x2b0>)
 800263e:	2201      	movs	r2, #1
 8002640:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002642:	f7ff fc0d 	bl	8001e60 <HAL_GetTick>
 8002646:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002648:	e008      	b.n	800265c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800264a:	f7ff fc09 	bl	8001e60 <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	2b02      	cmp	r3, #2
 8002656:	d901      	bls.n	800265c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e1a5      	b.n	80029a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800265c:	4b46      	ldr	r3, [pc, #280]	; (8002778 <HAL_RCC_OscConfig+0x2ac>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0302 	and.w	r3, r3, #2
 8002664:	2b00      	cmp	r3, #0
 8002666:	d0f0      	beq.n	800264a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002668:	4b43      	ldr	r3, [pc, #268]	; (8002778 <HAL_RCC_OscConfig+0x2ac>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	691b      	ldr	r3, [r3, #16]
 8002674:	00db      	lsls	r3, r3, #3
 8002676:	4940      	ldr	r1, [pc, #256]	; (8002778 <HAL_RCC_OscConfig+0x2ac>)
 8002678:	4313      	orrs	r3, r2
 800267a:	600b      	str	r3, [r1, #0]
 800267c:	e015      	b.n	80026aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800267e:	4b3f      	ldr	r3, [pc, #252]	; (800277c <HAL_RCC_OscConfig+0x2b0>)
 8002680:	2200      	movs	r2, #0
 8002682:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002684:	f7ff fbec 	bl	8001e60 <HAL_GetTick>
 8002688:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800268a:	e008      	b.n	800269e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800268c:	f7ff fbe8 	bl	8001e60 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b02      	cmp	r3, #2
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e184      	b.n	80029a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800269e:	4b36      	ldr	r3, [pc, #216]	; (8002778 <HAL_RCC_OscConfig+0x2ac>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d1f0      	bne.n	800268c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0308 	and.w	r3, r3, #8
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d030      	beq.n	8002718 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	695b      	ldr	r3, [r3, #20]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d016      	beq.n	80026ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026be:	4b30      	ldr	r3, [pc, #192]	; (8002780 <HAL_RCC_OscConfig+0x2b4>)
 80026c0:	2201      	movs	r2, #1
 80026c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026c4:	f7ff fbcc 	bl	8001e60 <HAL_GetTick>
 80026c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026ca:	e008      	b.n	80026de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026cc:	f7ff fbc8 	bl	8001e60 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e164      	b.n	80029a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026de:	4b26      	ldr	r3, [pc, #152]	; (8002778 <HAL_RCC_OscConfig+0x2ac>)
 80026e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d0f0      	beq.n	80026cc <HAL_RCC_OscConfig+0x200>
 80026ea:	e015      	b.n	8002718 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026ec:	4b24      	ldr	r3, [pc, #144]	; (8002780 <HAL_RCC_OscConfig+0x2b4>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026f2:	f7ff fbb5 	bl	8001e60 <HAL_GetTick>
 80026f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026f8:	e008      	b.n	800270c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026fa:	f7ff fbb1 	bl	8001e60 <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	2b02      	cmp	r3, #2
 8002706:	d901      	bls.n	800270c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	e14d      	b.n	80029a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800270c:	4b1a      	ldr	r3, [pc, #104]	; (8002778 <HAL_RCC_OscConfig+0x2ac>)
 800270e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002710:	f003 0302 	and.w	r3, r3, #2
 8002714:	2b00      	cmp	r3, #0
 8002716:	d1f0      	bne.n	80026fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0304 	and.w	r3, r3, #4
 8002720:	2b00      	cmp	r3, #0
 8002722:	f000 80a0 	beq.w	8002866 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002726:	2300      	movs	r3, #0
 8002728:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800272a:	4b13      	ldr	r3, [pc, #76]	; (8002778 <HAL_RCC_OscConfig+0x2ac>)
 800272c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d10f      	bne.n	8002756 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002736:	2300      	movs	r3, #0
 8002738:	60bb      	str	r3, [r7, #8]
 800273a:	4b0f      	ldr	r3, [pc, #60]	; (8002778 <HAL_RCC_OscConfig+0x2ac>)
 800273c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273e:	4a0e      	ldr	r2, [pc, #56]	; (8002778 <HAL_RCC_OscConfig+0x2ac>)
 8002740:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002744:	6413      	str	r3, [r2, #64]	; 0x40
 8002746:	4b0c      	ldr	r3, [pc, #48]	; (8002778 <HAL_RCC_OscConfig+0x2ac>)
 8002748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800274e:	60bb      	str	r3, [r7, #8]
 8002750:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002752:	2301      	movs	r3, #1
 8002754:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002756:	4b0b      	ldr	r3, [pc, #44]	; (8002784 <HAL_RCC_OscConfig+0x2b8>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800275e:	2b00      	cmp	r3, #0
 8002760:	d121      	bne.n	80027a6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002762:	4b08      	ldr	r3, [pc, #32]	; (8002784 <HAL_RCC_OscConfig+0x2b8>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a07      	ldr	r2, [pc, #28]	; (8002784 <HAL_RCC_OscConfig+0x2b8>)
 8002768:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800276c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800276e:	f7ff fb77 	bl	8001e60 <HAL_GetTick>
 8002772:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002774:	e011      	b.n	800279a <HAL_RCC_OscConfig+0x2ce>
 8002776:	bf00      	nop
 8002778:	40023800 	.word	0x40023800
 800277c:	42470000 	.word	0x42470000
 8002780:	42470e80 	.word	0x42470e80
 8002784:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002788:	f7ff fb6a 	bl	8001e60 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	2b02      	cmp	r3, #2
 8002794:	d901      	bls.n	800279a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e106      	b.n	80029a8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800279a:	4b85      	ldr	r3, [pc, #532]	; (80029b0 <HAL_RCC_OscConfig+0x4e4>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d0f0      	beq.n	8002788 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d106      	bne.n	80027bc <HAL_RCC_OscConfig+0x2f0>
 80027ae:	4b81      	ldr	r3, [pc, #516]	; (80029b4 <HAL_RCC_OscConfig+0x4e8>)
 80027b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b2:	4a80      	ldr	r2, [pc, #512]	; (80029b4 <HAL_RCC_OscConfig+0x4e8>)
 80027b4:	f043 0301 	orr.w	r3, r3, #1
 80027b8:	6713      	str	r3, [r2, #112]	; 0x70
 80027ba:	e01c      	b.n	80027f6 <HAL_RCC_OscConfig+0x32a>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	2b05      	cmp	r3, #5
 80027c2:	d10c      	bne.n	80027de <HAL_RCC_OscConfig+0x312>
 80027c4:	4b7b      	ldr	r3, [pc, #492]	; (80029b4 <HAL_RCC_OscConfig+0x4e8>)
 80027c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c8:	4a7a      	ldr	r2, [pc, #488]	; (80029b4 <HAL_RCC_OscConfig+0x4e8>)
 80027ca:	f043 0304 	orr.w	r3, r3, #4
 80027ce:	6713      	str	r3, [r2, #112]	; 0x70
 80027d0:	4b78      	ldr	r3, [pc, #480]	; (80029b4 <HAL_RCC_OscConfig+0x4e8>)
 80027d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d4:	4a77      	ldr	r2, [pc, #476]	; (80029b4 <HAL_RCC_OscConfig+0x4e8>)
 80027d6:	f043 0301 	orr.w	r3, r3, #1
 80027da:	6713      	str	r3, [r2, #112]	; 0x70
 80027dc:	e00b      	b.n	80027f6 <HAL_RCC_OscConfig+0x32a>
 80027de:	4b75      	ldr	r3, [pc, #468]	; (80029b4 <HAL_RCC_OscConfig+0x4e8>)
 80027e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e2:	4a74      	ldr	r2, [pc, #464]	; (80029b4 <HAL_RCC_OscConfig+0x4e8>)
 80027e4:	f023 0301 	bic.w	r3, r3, #1
 80027e8:	6713      	str	r3, [r2, #112]	; 0x70
 80027ea:	4b72      	ldr	r3, [pc, #456]	; (80029b4 <HAL_RCC_OscConfig+0x4e8>)
 80027ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ee:	4a71      	ldr	r2, [pc, #452]	; (80029b4 <HAL_RCC_OscConfig+0x4e8>)
 80027f0:	f023 0304 	bic.w	r3, r3, #4
 80027f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d015      	beq.n	800282a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027fe:	f7ff fb2f 	bl	8001e60 <HAL_GetTick>
 8002802:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002804:	e00a      	b.n	800281c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002806:	f7ff fb2b 	bl	8001e60 <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	f241 3288 	movw	r2, #5000	; 0x1388
 8002814:	4293      	cmp	r3, r2
 8002816:	d901      	bls.n	800281c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e0c5      	b.n	80029a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800281c:	4b65      	ldr	r3, [pc, #404]	; (80029b4 <HAL_RCC_OscConfig+0x4e8>)
 800281e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002820:	f003 0302 	and.w	r3, r3, #2
 8002824:	2b00      	cmp	r3, #0
 8002826:	d0ee      	beq.n	8002806 <HAL_RCC_OscConfig+0x33a>
 8002828:	e014      	b.n	8002854 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800282a:	f7ff fb19 	bl	8001e60 <HAL_GetTick>
 800282e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002830:	e00a      	b.n	8002848 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002832:	f7ff fb15 	bl	8001e60 <HAL_GetTick>
 8002836:	4602      	mov	r2, r0
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002840:	4293      	cmp	r3, r2
 8002842:	d901      	bls.n	8002848 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e0af      	b.n	80029a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002848:	4b5a      	ldr	r3, [pc, #360]	; (80029b4 <HAL_RCC_OscConfig+0x4e8>)
 800284a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800284c:	f003 0302 	and.w	r3, r3, #2
 8002850:	2b00      	cmp	r3, #0
 8002852:	d1ee      	bne.n	8002832 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002854:	7dfb      	ldrb	r3, [r7, #23]
 8002856:	2b01      	cmp	r3, #1
 8002858:	d105      	bne.n	8002866 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800285a:	4b56      	ldr	r3, [pc, #344]	; (80029b4 <HAL_RCC_OscConfig+0x4e8>)
 800285c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285e:	4a55      	ldr	r2, [pc, #340]	; (80029b4 <HAL_RCC_OscConfig+0x4e8>)
 8002860:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002864:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	699b      	ldr	r3, [r3, #24]
 800286a:	2b00      	cmp	r3, #0
 800286c:	f000 809b 	beq.w	80029a6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002870:	4b50      	ldr	r3, [pc, #320]	; (80029b4 <HAL_RCC_OscConfig+0x4e8>)
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f003 030c 	and.w	r3, r3, #12
 8002878:	2b08      	cmp	r3, #8
 800287a:	d05c      	beq.n	8002936 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	699b      	ldr	r3, [r3, #24]
 8002880:	2b02      	cmp	r3, #2
 8002882:	d141      	bne.n	8002908 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002884:	4b4c      	ldr	r3, [pc, #304]	; (80029b8 <HAL_RCC_OscConfig+0x4ec>)
 8002886:	2200      	movs	r2, #0
 8002888:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800288a:	f7ff fae9 	bl	8001e60 <HAL_GetTick>
 800288e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002890:	e008      	b.n	80028a4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002892:	f7ff fae5 	bl	8001e60 <HAL_GetTick>
 8002896:	4602      	mov	r2, r0
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	2b02      	cmp	r3, #2
 800289e:	d901      	bls.n	80028a4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80028a0:	2303      	movs	r3, #3
 80028a2:	e081      	b.n	80029a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028a4:	4b43      	ldr	r3, [pc, #268]	; (80029b4 <HAL_RCC_OscConfig+0x4e8>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d1f0      	bne.n	8002892 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	69da      	ldr	r2, [r3, #28]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6a1b      	ldr	r3, [r3, #32]
 80028b8:	431a      	orrs	r2, r3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028be:	019b      	lsls	r3, r3, #6
 80028c0:	431a      	orrs	r2, r3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c6:	085b      	lsrs	r3, r3, #1
 80028c8:	3b01      	subs	r3, #1
 80028ca:	041b      	lsls	r3, r3, #16
 80028cc:	431a      	orrs	r2, r3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d2:	061b      	lsls	r3, r3, #24
 80028d4:	4937      	ldr	r1, [pc, #220]	; (80029b4 <HAL_RCC_OscConfig+0x4e8>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028da:	4b37      	ldr	r3, [pc, #220]	; (80029b8 <HAL_RCC_OscConfig+0x4ec>)
 80028dc:	2201      	movs	r2, #1
 80028de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e0:	f7ff fabe 	bl	8001e60 <HAL_GetTick>
 80028e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028e6:	e008      	b.n	80028fa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028e8:	f7ff faba 	bl	8001e60 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e056      	b.n	80029a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028fa:	4b2e      	ldr	r3, [pc, #184]	; (80029b4 <HAL_RCC_OscConfig+0x4e8>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d0f0      	beq.n	80028e8 <HAL_RCC_OscConfig+0x41c>
 8002906:	e04e      	b.n	80029a6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002908:	4b2b      	ldr	r3, [pc, #172]	; (80029b8 <HAL_RCC_OscConfig+0x4ec>)
 800290a:	2200      	movs	r2, #0
 800290c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800290e:	f7ff faa7 	bl	8001e60 <HAL_GetTick>
 8002912:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002914:	e008      	b.n	8002928 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002916:	f7ff faa3 	bl	8001e60 <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	2b02      	cmp	r3, #2
 8002922:	d901      	bls.n	8002928 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e03f      	b.n	80029a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002928:	4b22      	ldr	r3, [pc, #136]	; (80029b4 <HAL_RCC_OscConfig+0x4e8>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d1f0      	bne.n	8002916 <HAL_RCC_OscConfig+0x44a>
 8002934:	e037      	b.n	80029a6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	699b      	ldr	r3, [r3, #24]
 800293a:	2b01      	cmp	r3, #1
 800293c:	d101      	bne.n	8002942 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e032      	b.n	80029a8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002942:	4b1c      	ldr	r3, [pc, #112]	; (80029b4 <HAL_RCC_OscConfig+0x4e8>)
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	699b      	ldr	r3, [r3, #24]
 800294c:	2b01      	cmp	r3, #1
 800294e:	d028      	beq.n	80029a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800295a:	429a      	cmp	r2, r3
 800295c:	d121      	bne.n	80029a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002968:	429a      	cmp	r2, r3
 800296a:	d11a      	bne.n	80029a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800296c:	68fa      	ldr	r2, [r7, #12]
 800296e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002972:	4013      	ands	r3, r2
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002978:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800297a:	4293      	cmp	r3, r2
 800297c:	d111      	bne.n	80029a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002988:	085b      	lsrs	r3, r3, #1
 800298a:	3b01      	subs	r3, #1
 800298c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800298e:	429a      	cmp	r2, r3
 8002990:	d107      	bne.n	80029a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800299c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800299e:	429a      	cmp	r2, r3
 80029a0:	d001      	beq.n	80029a6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e000      	b.n	80029a8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80029a6:	2300      	movs	r3, #0
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3718      	adds	r7, #24
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	40007000 	.word	0x40007000
 80029b4:	40023800 	.word	0x40023800
 80029b8:	42470060 	.word	0x42470060

080029bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d101      	bne.n	80029d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e0cc      	b.n	8002b6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029d0:	4b68      	ldr	r3, [pc, #416]	; (8002b74 <HAL_RCC_ClockConfig+0x1b8>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0307 	and.w	r3, r3, #7
 80029d8:	683a      	ldr	r2, [r7, #0]
 80029da:	429a      	cmp	r2, r3
 80029dc:	d90c      	bls.n	80029f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029de:	4b65      	ldr	r3, [pc, #404]	; (8002b74 <HAL_RCC_ClockConfig+0x1b8>)
 80029e0:	683a      	ldr	r2, [r7, #0]
 80029e2:	b2d2      	uxtb	r2, r2
 80029e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029e6:	4b63      	ldr	r3, [pc, #396]	; (8002b74 <HAL_RCC_ClockConfig+0x1b8>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0307 	and.w	r3, r3, #7
 80029ee:	683a      	ldr	r2, [r7, #0]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d001      	beq.n	80029f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e0b8      	b.n	8002b6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0302 	and.w	r3, r3, #2
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d020      	beq.n	8002a46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0304 	and.w	r3, r3, #4
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d005      	beq.n	8002a1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a10:	4b59      	ldr	r3, [pc, #356]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	4a58      	ldr	r2, [pc, #352]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a1a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0308 	and.w	r3, r3, #8
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d005      	beq.n	8002a34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a28:	4b53      	ldr	r3, [pc, #332]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	4a52      	ldr	r2, [pc, #328]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a34:	4b50      	ldr	r3, [pc, #320]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	494d      	ldr	r1, [pc, #308]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d044      	beq.n	8002adc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d107      	bne.n	8002a6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a5a:	4b47      	ldr	r3, [pc, #284]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d119      	bne.n	8002a9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e07f      	b.n	8002b6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d003      	beq.n	8002a7a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a76:	2b03      	cmp	r3, #3
 8002a78:	d107      	bne.n	8002a8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a7a:	4b3f      	ldr	r3, [pc, #252]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d109      	bne.n	8002a9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e06f      	b.n	8002b6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a8a:	4b3b      	ldr	r3, [pc, #236]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d101      	bne.n	8002a9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e067      	b.n	8002b6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a9a:	4b37      	ldr	r3, [pc, #220]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f023 0203 	bic.w	r2, r3, #3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	4934      	ldr	r1, [pc, #208]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002aac:	f7ff f9d8 	bl	8001e60 <HAL_GetTick>
 8002ab0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ab2:	e00a      	b.n	8002aca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ab4:	f7ff f9d4 	bl	8001e60 <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e04f      	b.n	8002b6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aca:	4b2b      	ldr	r3, [pc, #172]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f003 020c 	and.w	r2, r3, #12
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d1eb      	bne.n	8002ab4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002adc:	4b25      	ldr	r3, [pc, #148]	; (8002b74 <HAL_RCC_ClockConfig+0x1b8>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0307 	and.w	r3, r3, #7
 8002ae4:	683a      	ldr	r2, [r7, #0]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d20c      	bcs.n	8002b04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aea:	4b22      	ldr	r3, [pc, #136]	; (8002b74 <HAL_RCC_ClockConfig+0x1b8>)
 8002aec:	683a      	ldr	r2, [r7, #0]
 8002aee:	b2d2      	uxtb	r2, r2
 8002af0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002af2:	4b20      	ldr	r3, [pc, #128]	; (8002b74 <HAL_RCC_ClockConfig+0x1b8>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0307 	and.w	r3, r3, #7
 8002afa:	683a      	ldr	r2, [r7, #0]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d001      	beq.n	8002b04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e032      	b.n	8002b6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0304 	and.w	r3, r3, #4
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d008      	beq.n	8002b22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b10:	4b19      	ldr	r3, [pc, #100]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	4916      	ldr	r1, [pc, #88]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0308 	and.w	r3, r3, #8
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d009      	beq.n	8002b42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b2e:	4b12      	ldr	r3, [pc, #72]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	691b      	ldr	r3, [r3, #16]
 8002b3a:	00db      	lsls	r3, r3, #3
 8002b3c:	490e      	ldr	r1, [pc, #56]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b42:	f000 f821 	bl	8002b88 <HAL_RCC_GetSysClockFreq>
 8002b46:	4602      	mov	r2, r0
 8002b48:	4b0b      	ldr	r3, [pc, #44]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	091b      	lsrs	r3, r3, #4
 8002b4e:	f003 030f 	and.w	r3, r3, #15
 8002b52:	490a      	ldr	r1, [pc, #40]	; (8002b7c <HAL_RCC_ClockConfig+0x1c0>)
 8002b54:	5ccb      	ldrb	r3, [r1, r3]
 8002b56:	fa22 f303 	lsr.w	r3, r2, r3
 8002b5a:	4a09      	ldr	r2, [pc, #36]	; (8002b80 <HAL_RCC_ClockConfig+0x1c4>)
 8002b5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b5e:	4b09      	ldr	r3, [pc, #36]	; (8002b84 <HAL_RCC_ClockConfig+0x1c8>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7fe fbd0 	bl	8001308 <HAL_InitTick>

  return HAL_OK;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3710      	adds	r7, #16
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	40023c00 	.word	0x40023c00
 8002b78:	40023800 	.word	0x40023800
 8002b7c:	08009018 	.word	0x08009018
 8002b80:	20000010 	.word	0x20000010
 8002b84:	20000018 	.word	0x20000018

08002b88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b88:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002b8c:	b084      	sub	sp, #16
 8002b8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b90:	2300      	movs	r3, #0
 8002b92:	607b      	str	r3, [r7, #4]
 8002b94:	2300      	movs	r3, #0
 8002b96:	60fb      	str	r3, [r7, #12]
 8002b98:	2300      	movs	r3, #0
 8002b9a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ba0:	4b67      	ldr	r3, [pc, #412]	; (8002d40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f003 030c 	and.w	r3, r3, #12
 8002ba8:	2b08      	cmp	r3, #8
 8002baa:	d00d      	beq.n	8002bc8 <HAL_RCC_GetSysClockFreq+0x40>
 8002bac:	2b08      	cmp	r3, #8
 8002bae:	f200 80bd 	bhi.w	8002d2c <HAL_RCC_GetSysClockFreq+0x1a4>
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d002      	beq.n	8002bbc <HAL_RCC_GetSysClockFreq+0x34>
 8002bb6:	2b04      	cmp	r3, #4
 8002bb8:	d003      	beq.n	8002bc2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002bba:	e0b7      	b.n	8002d2c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bbc:	4b61      	ldr	r3, [pc, #388]	; (8002d44 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002bbe:	60bb      	str	r3, [r7, #8]
       break;
 8002bc0:	e0b7      	b.n	8002d32 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bc2:	4b61      	ldr	r3, [pc, #388]	; (8002d48 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002bc4:	60bb      	str	r3, [r7, #8]
      break;
 8002bc6:	e0b4      	b.n	8002d32 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bc8:	4b5d      	ldr	r3, [pc, #372]	; (8002d40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bd0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bd2:	4b5b      	ldr	r3, [pc, #364]	; (8002d40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d04d      	beq.n	8002c7a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bde:	4b58      	ldr	r3, [pc, #352]	; (8002d40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	099b      	lsrs	r3, r3, #6
 8002be4:	461a      	mov	r2, r3
 8002be6:	f04f 0300 	mov.w	r3, #0
 8002bea:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002bee:	f04f 0100 	mov.w	r1, #0
 8002bf2:	ea02 0800 	and.w	r8, r2, r0
 8002bf6:	ea03 0901 	and.w	r9, r3, r1
 8002bfa:	4640      	mov	r0, r8
 8002bfc:	4649      	mov	r1, r9
 8002bfe:	f04f 0200 	mov.w	r2, #0
 8002c02:	f04f 0300 	mov.w	r3, #0
 8002c06:	014b      	lsls	r3, r1, #5
 8002c08:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002c0c:	0142      	lsls	r2, r0, #5
 8002c0e:	4610      	mov	r0, r2
 8002c10:	4619      	mov	r1, r3
 8002c12:	ebb0 0008 	subs.w	r0, r0, r8
 8002c16:	eb61 0109 	sbc.w	r1, r1, r9
 8002c1a:	f04f 0200 	mov.w	r2, #0
 8002c1e:	f04f 0300 	mov.w	r3, #0
 8002c22:	018b      	lsls	r3, r1, #6
 8002c24:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002c28:	0182      	lsls	r2, r0, #6
 8002c2a:	1a12      	subs	r2, r2, r0
 8002c2c:	eb63 0301 	sbc.w	r3, r3, r1
 8002c30:	f04f 0000 	mov.w	r0, #0
 8002c34:	f04f 0100 	mov.w	r1, #0
 8002c38:	00d9      	lsls	r1, r3, #3
 8002c3a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c3e:	00d0      	lsls	r0, r2, #3
 8002c40:	4602      	mov	r2, r0
 8002c42:	460b      	mov	r3, r1
 8002c44:	eb12 0208 	adds.w	r2, r2, r8
 8002c48:	eb43 0309 	adc.w	r3, r3, r9
 8002c4c:	f04f 0000 	mov.w	r0, #0
 8002c50:	f04f 0100 	mov.w	r1, #0
 8002c54:	0259      	lsls	r1, r3, #9
 8002c56:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002c5a:	0250      	lsls	r0, r2, #9
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	460b      	mov	r3, r1
 8002c60:	4610      	mov	r0, r2
 8002c62:	4619      	mov	r1, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	461a      	mov	r2, r3
 8002c68:	f04f 0300 	mov.w	r3, #0
 8002c6c:	f7fd fb18 	bl	80002a0 <__aeabi_uldivmod>
 8002c70:	4602      	mov	r2, r0
 8002c72:	460b      	mov	r3, r1
 8002c74:	4613      	mov	r3, r2
 8002c76:	60fb      	str	r3, [r7, #12]
 8002c78:	e04a      	b.n	8002d10 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c7a:	4b31      	ldr	r3, [pc, #196]	; (8002d40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	099b      	lsrs	r3, r3, #6
 8002c80:	461a      	mov	r2, r3
 8002c82:	f04f 0300 	mov.w	r3, #0
 8002c86:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002c8a:	f04f 0100 	mov.w	r1, #0
 8002c8e:	ea02 0400 	and.w	r4, r2, r0
 8002c92:	ea03 0501 	and.w	r5, r3, r1
 8002c96:	4620      	mov	r0, r4
 8002c98:	4629      	mov	r1, r5
 8002c9a:	f04f 0200 	mov.w	r2, #0
 8002c9e:	f04f 0300 	mov.w	r3, #0
 8002ca2:	014b      	lsls	r3, r1, #5
 8002ca4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002ca8:	0142      	lsls	r2, r0, #5
 8002caa:	4610      	mov	r0, r2
 8002cac:	4619      	mov	r1, r3
 8002cae:	1b00      	subs	r0, r0, r4
 8002cb0:	eb61 0105 	sbc.w	r1, r1, r5
 8002cb4:	f04f 0200 	mov.w	r2, #0
 8002cb8:	f04f 0300 	mov.w	r3, #0
 8002cbc:	018b      	lsls	r3, r1, #6
 8002cbe:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002cc2:	0182      	lsls	r2, r0, #6
 8002cc4:	1a12      	subs	r2, r2, r0
 8002cc6:	eb63 0301 	sbc.w	r3, r3, r1
 8002cca:	f04f 0000 	mov.w	r0, #0
 8002cce:	f04f 0100 	mov.w	r1, #0
 8002cd2:	00d9      	lsls	r1, r3, #3
 8002cd4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002cd8:	00d0      	lsls	r0, r2, #3
 8002cda:	4602      	mov	r2, r0
 8002cdc:	460b      	mov	r3, r1
 8002cde:	1912      	adds	r2, r2, r4
 8002ce0:	eb45 0303 	adc.w	r3, r5, r3
 8002ce4:	f04f 0000 	mov.w	r0, #0
 8002ce8:	f04f 0100 	mov.w	r1, #0
 8002cec:	0299      	lsls	r1, r3, #10
 8002cee:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002cf2:	0290      	lsls	r0, r2, #10
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	460b      	mov	r3, r1
 8002cf8:	4610      	mov	r0, r2
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	461a      	mov	r2, r3
 8002d00:	f04f 0300 	mov.w	r3, #0
 8002d04:	f7fd facc 	bl	80002a0 <__aeabi_uldivmod>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	460b      	mov	r3, r1
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d10:	4b0b      	ldr	r3, [pc, #44]	; (8002d40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	0c1b      	lsrs	r3, r3, #16
 8002d16:	f003 0303 	and.w	r3, r3, #3
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	005b      	lsls	r3, r3, #1
 8002d1e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002d20:	68fa      	ldr	r2, [r7, #12]
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d28:	60bb      	str	r3, [r7, #8]
      break;
 8002d2a:	e002      	b.n	8002d32 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d2c:	4b05      	ldr	r3, [pc, #20]	; (8002d44 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002d2e:	60bb      	str	r3, [r7, #8]
      break;
 8002d30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d32:	68bb      	ldr	r3, [r7, #8]
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3710      	adds	r7, #16
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002d3e:	bf00      	nop
 8002d40:	40023800 	.word	0x40023800
 8002d44:	00f42400 	.word	0x00f42400
 8002d48:	007a1200 	.word	0x007a1200

08002d4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d50:	4b03      	ldr	r3, [pc, #12]	; (8002d60 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d52:	681b      	ldr	r3, [r3, #0]
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	20000010 	.word	0x20000010

08002d64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d68:	f7ff fff0 	bl	8002d4c <HAL_RCC_GetHCLKFreq>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	4b05      	ldr	r3, [pc, #20]	; (8002d84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	0a9b      	lsrs	r3, r3, #10
 8002d74:	f003 0307 	and.w	r3, r3, #7
 8002d78:	4903      	ldr	r1, [pc, #12]	; (8002d88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d7a:	5ccb      	ldrb	r3, [r1, r3]
 8002d7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	40023800 	.word	0x40023800
 8002d88:	08009028 	.word	0x08009028

08002d8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d90:	f7ff ffdc 	bl	8002d4c <HAL_RCC_GetHCLKFreq>
 8002d94:	4602      	mov	r2, r0
 8002d96:	4b05      	ldr	r3, [pc, #20]	; (8002dac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	0b5b      	lsrs	r3, r3, #13
 8002d9c:	f003 0307 	and.w	r3, r3, #7
 8002da0:	4903      	ldr	r1, [pc, #12]	; (8002db0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002da2:	5ccb      	ldrb	r3, [r1, r3]
 8002da4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	40023800 	.word	0x40023800
 8002db0:	08009028 	.word	0x08009028

08002db4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	220f      	movs	r2, #15
 8002dc2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002dc4:	4b12      	ldr	r3, [pc, #72]	; (8002e10 <HAL_RCC_GetClockConfig+0x5c>)
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f003 0203 	and.w	r2, r3, #3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002dd0:	4b0f      	ldr	r3, [pc, #60]	; (8002e10 <HAL_RCC_GetClockConfig+0x5c>)
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002ddc:	4b0c      	ldr	r3, [pc, #48]	; (8002e10 <HAL_RCC_GetClockConfig+0x5c>)
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002de8:	4b09      	ldr	r3, [pc, #36]	; (8002e10 <HAL_RCC_GetClockConfig+0x5c>)
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	08db      	lsrs	r3, r3, #3
 8002dee:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002df6:	4b07      	ldr	r3, [pc, #28]	; (8002e14 <HAL_RCC_GetClockConfig+0x60>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0207 	and.w	r2, r3, #7
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	601a      	str	r2, [r3, #0]
}
 8002e02:	bf00      	nop
 8002e04:	370c      	adds	r7, #12
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop
 8002e10:	40023800 	.word	0x40023800
 8002e14:	40023c00 	.word	0x40023c00

08002e18 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b086      	sub	sp, #24
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e20:	2300      	movs	r3, #0
 8002e22:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002e24:	2300      	movs	r3, #0
 8002e26:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0301 	and.w	r3, r3, #1
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d105      	bne.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d035      	beq.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002e40:	4b62      	ldr	r3, [pc, #392]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002e46:	f7ff f80b 	bl	8001e60 <HAL_GetTick>
 8002e4a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e4c:	e008      	b.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002e4e:	f7ff f807 	bl	8001e60 <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d901      	bls.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e0b0      	b.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e60:	4b5b      	ldr	r3, [pc, #364]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d1f0      	bne.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	019a      	lsls	r2, r3, #6
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	071b      	lsls	r3, r3, #28
 8002e78:	4955      	ldr	r1, [pc, #340]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002e80:	4b52      	ldr	r3, [pc, #328]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002e82:	2201      	movs	r2, #1
 8002e84:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002e86:	f7fe ffeb 	bl	8001e60 <HAL_GetTick>
 8002e8a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e8c:	e008      	b.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002e8e:	f7fe ffe7 	bl	8001e60 <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d901      	bls.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e090      	b.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ea0:	4b4b      	ldr	r3, [pc, #300]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d0f0      	beq.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0302 	and.w	r3, r3, #2
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	f000 8083 	beq.w	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002eba:	2300      	movs	r3, #0
 8002ebc:	60fb      	str	r3, [r7, #12]
 8002ebe:	4b44      	ldr	r3, [pc, #272]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec2:	4a43      	ldr	r2, [pc, #268]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ec8:	6413      	str	r3, [r2, #64]	; 0x40
 8002eca:	4b41      	ldr	r3, [pc, #260]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ed2:	60fb      	str	r3, [r7, #12]
 8002ed4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002ed6:	4b3f      	ldr	r3, [pc, #252]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a3e      	ldr	r2, [pc, #248]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002edc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ee0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002ee2:	f7fe ffbd 	bl	8001e60 <HAL_GetTick>
 8002ee6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002ee8:	e008      	b.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002eea:	f7fe ffb9 	bl	8001e60 <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d901      	bls.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e062      	b.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002efc:	4b35      	ldr	r3, [pc, #212]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d0f0      	beq.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f08:	4b31      	ldr	r3, [pc, #196]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f10:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d02f      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f20:	693a      	ldr	r2, [r7, #16]
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d028      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f26:	4b2a      	ldr	r3, [pc, #168]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f2e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f30:	4b29      	ldr	r3, [pc, #164]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002f32:	2201      	movs	r2, #1
 8002f34:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f36:	4b28      	ldr	r3, [pc, #160]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002f3c:	4a24      	ldr	r2, [pc, #144]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002f42:	4b23      	ldr	r3, [pc, #140]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f46:	f003 0301 	and.w	r3, r3, #1
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d114      	bne.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002f4e:	f7fe ff87 	bl	8001e60 <HAL_GetTick>
 8002f52:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f54:	e00a      	b.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f56:	f7fe ff83 	bl	8001e60 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d901      	bls.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	e02a      	b.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f6c:	4b18      	ldr	r3, [pc, #96]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f70:	f003 0302 	and.w	r3, r3, #2
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d0ee      	beq.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f84:	d10d      	bne.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002f86:	4b12      	ldr	r3, [pc, #72]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002f96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f9a:	490d      	ldr	r1, [pc, #52]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	608b      	str	r3, [r1, #8]
 8002fa0:	e005      	b.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002fa2:	4b0b      	ldr	r3, [pc, #44]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	4a0a      	ldr	r2, [pc, #40]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002fa8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002fac:	6093      	str	r3, [r2, #8]
 8002fae:	4b08      	ldr	r3, [pc, #32]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002fb0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fba:	4905      	ldr	r1, [pc, #20]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3718      	adds	r7, #24
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	42470068 	.word	0x42470068
 8002fd0:	40023800 	.word	0x40023800
 8002fd4:	40007000 	.word	0x40007000
 8002fd8:	42470e40 	.word	0x42470e40

08002fdc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d101      	bne.n	8002fee <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e083      	b.n	80030f6 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	7f5b      	ldrb	r3, [r3, #29]
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d105      	bne.n	8003004 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f7fe f91c 	bl	800123c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2202      	movs	r2, #2
 8003008:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	22ca      	movs	r2, #202	; 0xca
 8003010:	625a      	str	r2, [r3, #36]	; 0x24
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2253      	movs	r2, #83	; 0x53
 8003018:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 faa8 	bl	8003570 <RTC_EnterInitMode>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d008      	beq.n	8003038 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	22ff      	movs	r2, #255	; 0xff
 800302c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2204      	movs	r2, #4
 8003032:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e05e      	b.n	80030f6 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	6812      	ldr	r2, [r2, #0]
 8003042:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003046:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800304a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	6899      	ldr	r1, [r3, #8]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685a      	ldr	r2, [r3, #4]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	431a      	orrs	r2, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	695b      	ldr	r3, [r3, #20]
 8003060:	431a      	orrs	r2, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	430a      	orrs	r2, r1
 8003068:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	68d2      	ldr	r2, [r2, #12]
 8003072:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	6919      	ldr	r1, [r3, #16]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	041a      	lsls	r2, r3, #16
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	430a      	orrs	r2, r1
 8003086:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	68da      	ldr	r2, [r3, #12]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003096:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f003 0320 	and.w	r3, r3, #32
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d10e      	bne.n	80030c4 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 fa3a 	bl	8003520 <HAL_RTC_WaitForSynchro>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d008      	beq.n	80030c4 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	22ff      	movs	r2, #255	; 0xff
 80030b8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2204      	movs	r2, #4
 80030be:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e018      	b.n	80030f6 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80030d2:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	699a      	ldr	r2, [r3, #24]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	430a      	orrs	r2, r1
 80030e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	22ff      	movs	r2, #255	; 0xff
 80030ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2201      	movs	r2, #1
 80030f2:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80030f4:	2300      	movs	r3, #0
  }
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3708      	adds	r7, #8
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}

080030fe <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80030fe:	b590      	push	{r4, r7, lr}
 8003100:	b087      	sub	sp, #28
 8003102:	af00      	add	r7, sp, #0
 8003104:	60f8      	str	r0, [r7, #12]
 8003106:	60b9      	str	r1, [r7, #8]
 8003108:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800310a:	2300      	movs	r3, #0
 800310c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	7f1b      	ldrb	r3, [r3, #28]
 8003112:	2b01      	cmp	r3, #1
 8003114:	d101      	bne.n	800311a <HAL_RTC_SetTime+0x1c>
 8003116:	2302      	movs	r3, #2
 8003118:	e0aa      	b.n	8003270 <HAL_RTC_SetTime+0x172>
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2201      	movs	r2, #1
 800311e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2202      	movs	r2, #2
 8003124:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d126      	bne.n	800317a <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003136:	2b00      	cmp	r3, #0
 8003138:	d102      	bne.n	8003140 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	2200      	movs	r2, #0
 800313e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	4618      	mov	r0, r3
 8003146:	f000 fa3f 	bl	80035c8 <RTC_ByteToBcd2>
 800314a:	4603      	mov	r3, r0
 800314c:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	785b      	ldrb	r3, [r3, #1]
 8003152:	4618      	mov	r0, r3
 8003154:	f000 fa38 	bl	80035c8 <RTC_ByteToBcd2>
 8003158:	4603      	mov	r3, r0
 800315a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800315c:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	789b      	ldrb	r3, [r3, #2]
 8003162:	4618      	mov	r0, r3
 8003164:	f000 fa30 	bl	80035c8 <RTC_ByteToBcd2>
 8003168:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800316a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	78db      	ldrb	r3, [r3, #3]
 8003172:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003174:	4313      	orrs	r3, r2
 8003176:	617b      	str	r3, [r7, #20]
 8003178:	e018      	b.n	80031ac <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003184:	2b00      	cmp	r3, #0
 8003186:	d102      	bne.n	800318e <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	2200      	movs	r2, #0
 800318c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	785b      	ldrb	r3, [r3, #1]
 8003198:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800319a:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800319c:	68ba      	ldr	r2, [r7, #8]
 800319e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80031a0:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	78db      	ldrb	r3, [r3, #3]
 80031a6:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80031a8:	4313      	orrs	r3, r2
 80031aa:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	22ca      	movs	r2, #202	; 0xca
 80031b2:	625a      	str	r2, [r3, #36]	; 0x24
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2253      	movs	r2, #83	; 0x53
 80031ba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80031bc:	68f8      	ldr	r0, [r7, #12]
 80031be:	f000 f9d7 	bl	8003570 <RTC_EnterInitMode>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d00b      	beq.n	80031e0 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	22ff      	movs	r2, #255	; 0xff
 80031ce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2204      	movs	r2, #4
 80031d4:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2200      	movs	r2, #0
 80031da:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e047      	b.n	8003270 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80031ea:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80031ee:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	689a      	ldr	r2, [r3, #8]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80031fe:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	6899      	ldr	r1, [r3, #8]
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	68da      	ldr	r2, [r3, #12]
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	431a      	orrs	r2, r3
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	430a      	orrs	r2, r1
 8003216:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	68da      	ldr	r2, [r3, #12]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003226:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f003 0320 	and.w	r3, r3, #32
 8003232:	2b00      	cmp	r3, #0
 8003234:	d111      	bne.n	800325a <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003236:	68f8      	ldr	r0, [r7, #12]
 8003238:	f000 f972 	bl	8003520 <HAL_RTC_WaitForSynchro>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d00b      	beq.n	800325a <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	22ff      	movs	r2, #255	; 0xff
 8003248:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2204      	movs	r2, #4
 800324e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2200      	movs	r2, #0
 8003254:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e00a      	b.n	8003270 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	22ff      	movs	r2, #255	; 0xff
 8003260:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2201      	movs	r2, #1
 8003266:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2200      	movs	r2, #0
 800326c:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800326e:	2300      	movs	r3, #0
  }
}
 8003270:	4618      	mov	r0, r3
 8003272:	371c      	adds	r7, #28
 8003274:	46bd      	mov	sp, r7
 8003276:	bd90      	pop	{r4, r7, pc}

08003278 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b086      	sub	sp, #24
 800327c:	af00      	add	r7, sp, #0
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	60b9      	str	r1, [r7, #8]
 8003282:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003284:	2300      	movs	r3, #0
 8003286:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	691b      	ldr	r3, [r3, #16]
 8003298:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80032aa:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80032ae:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	0c1b      	lsrs	r3, r3, #16
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032ba:	b2da      	uxtb	r2, r3
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	0a1b      	lsrs	r3, r3, #8
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032ca:	b2da      	uxtb	r2, r3
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032d8:	b2da      	uxtb	r2, r3
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	0c1b      	lsrs	r3, r3, #16
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032e8:	b2da      	uxtb	r2, r3
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d11a      	bne.n	800332a <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	4618      	mov	r0, r3
 80032fa:	f000 f983 	bl	8003604 <RTC_Bcd2ToByte>
 80032fe:	4603      	mov	r3, r0
 8003300:	461a      	mov	r2, r3
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	785b      	ldrb	r3, [r3, #1]
 800330a:	4618      	mov	r0, r3
 800330c:	f000 f97a 	bl	8003604 <RTC_Bcd2ToByte>
 8003310:	4603      	mov	r3, r0
 8003312:	461a      	mov	r2, r3
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	789b      	ldrb	r3, [r3, #2]
 800331c:	4618      	mov	r0, r3
 800331e:	f000 f971 	bl	8003604 <RTC_Bcd2ToByte>
 8003322:	4603      	mov	r3, r0
 8003324:	461a      	mov	r2, r3
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800332a:	2300      	movs	r3, #0
}
 800332c:	4618      	mov	r0, r3
 800332e:	3718      	adds	r7, #24
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003334:	b590      	push	{r4, r7, lr}
 8003336:	b087      	sub	sp, #28
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003340:	2300      	movs	r3, #0
 8003342:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	7f1b      	ldrb	r3, [r3, #28]
 8003348:	2b01      	cmp	r3, #1
 800334a:	d101      	bne.n	8003350 <HAL_RTC_SetDate+0x1c>
 800334c:	2302      	movs	r3, #2
 800334e:	e094      	b.n	800347a <HAL_RTC_SetDate+0x146>
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2201      	movs	r2, #1
 8003354:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2202      	movs	r2, #2
 800335a:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d10e      	bne.n	8003380 <HAL_RTC_SetDate+0x4c>
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	785b      	ldrb	r3, [r3, #1]
 8003366:	f003 0310 	and.w	r3, r3, #16
 800336a:	2b00      	cmp	r3, #0
 800336c:	d008      	beq.n	8003380 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	785b      	ldrb	r3, [r3, #1]
 8003372:	f023 0310 	bic.w	r3, r3, #16
 8003376:	b2db      	uxtb	r3, r3
 8003378:	330a      	adds	r3, #10
 800337a:	b2da      	uxtb	r2, r3
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d11c      	bne.n	80033c0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	78db      	ldrb	r3, [r3, #3]
 800338a:	4618      	mov	r0, r3
 800338c:	f000 f91c 	bl	80035c8 <RTC_ByteToBcd2>
 8003390:	4603      	mov	r3, r0
 8003392:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	785b      	ldrb	r3, [r3, #1]
 8003398:	4618      	mov	r0, r3
 800339a:	f000 f915 	bl	80035c8 <RTC_ByteToBcd2>
 800339e:	4603      	mov	r3, r0
 80033a0:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80033a2:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	789b      	ldrb	r3, [r3, #2]
 80033a8:	4618      	mov	r0, r3
 80033aa:	f000 f90d 	bl	80035c8 <RTC_ByteToBcd2>
 80033ae:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80033b0:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80033ba:	4313      	orrs	r3, r2
 80033bc:	617b      	str	r3, [r7, #20]
 80033be:	e00e      	b.n	80033de <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	78db      	ldrb	r3, [r3, #3]
 80033c4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	785b      	ldrb	r3, [r3, #1]
 80033ca:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80033cc:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80033ce:	68ba      	ldr	r2, [r7, #8]
 80033d0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80033d2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80033da:	4313      	orrs	r3, r2
 80033dc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	22ca      	movs	r2, #202	; 0xca
 80033e4:	625a      	str	r2, [r3, #36]	; 0x24
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2253      	movs	r2, #83	; 0x53
 80033ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80033ee:	68f8      	ldr	r0, [r7, #12]
 80033f0:	f000 f8be 	bl	8003570 <RTC_EnterInitMode>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d00b      	beq.n	8003412 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	22ff      	movs	r2, #255	; 0xff
 8003400:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2204      	movs	r2, #4
 8003406:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2200      	movs	r2, #0
 800340c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e033      	b.n	800347a <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800341c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003420:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	68da      	ldr	r2, [r3, #12]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003430:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	f003 0320 	and.w	r3, r3, #32
 800343c:	2b00      	cmp	r3, #0
 800343e:	d111      	bne.n	8003464 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003440:	68f8      	ldr	r0, [r7, #12]
 8003442:	f000 f86d 	bl	8003520 <HAL_RTC_WaitForSynchro>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d00b      	beq.n	8003464 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	22ff      	movs	r2, #255	; 0xff
 8003452:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2204      	movs	r2, #4
 8003458:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2200      	movs	r2, #0
 800345e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e00a      	b.n	800347a <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	22ff      	movs	r2, #255	; 0xff
 800346a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2201      	movs	r2, #1
 8003470:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2200      	movs	r2, #0
 8003476:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8003478:	2300      	movs	r3, #0
  }
}
 800347a:	4618      	mov	r0, r3
 800347c:	371c      	adds	r7, #28
 800347e:	46bd      	mov	sp, r7
 8003480:	bd90      	pop	{r4, r7, pc}

08003482 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003482:	b580      	push	{r7, lr}
 8003484:	b086      	sub	sp, #24
 8003486:	af00      	add	r7, sp, #0
 8003488:	60f8      	str	r0, [r7, #12]
 800348a:	60b9      	str	r1, [r7, #8]
 800348c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800348e:	2300      	movs	r3, #0
 8003490:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800349c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80034a0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	0c1b      	lsrs	r3, r3, #16
 80034a6:	b2da      	uxtb	r2, r3
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	0a1b      	lsrs	r3, r3, #8
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	f003 031f 	and.w	r3, r3, #31
 80034b6:	b2da      	uxtb	r2, r3
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034c4:	b2da      	uxtb	r2, r3
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	0b5b      	lsrs	r3, r3, #13
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	f003 0307 	and.w	r3, r3, #7
 80034d4:	b2da      	uxtb	r2, r3
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d11a      	bne.n	8003516 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	78db      	ldrb	r3, [r3, #3]
 80034e4:	4618      	mov	r0, r3
 80034e6:	f000 f88d 	bl	8003604 <RTC_Bcd2ToByte>
 80034ea:	4603      	mov	r3, r0
 80034ec:	461a      	mov	r2, r3
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	785b      	ldrb	r3, [r3, #1]
 80034f6:	4618      	mov	r0, r3
 80034f8:	f000 f884 	bl	8003604 <RTC_Bcd2ToByte>
 80034fc:	4603      	mov	r3, r0
 80034fe:	461a      	mov	r2, r3
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	789b      	ldrb	r3, [r3, #2]
 8003508:	4618      	mov	r0, r3
 800350a:	f000 f87b 	bl	8003604 <RTC_Bcd2ToByte>
 800350e:	4603      	mov	r3, r0
 8003510:	461a      	mov	r2, r3
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003516:	2300      	movs	r3, #0
}
 8003518:	4618      	mov	r0, r3
 800351a:	3718      	adds	r7, #24
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003528:	2300      	movs	r3, #0
 800352a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	68da      	ldr	r2, [r3, #12]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800353a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800353c:	f7fe fc90 	bl	8001e60 <HAL_GetTick>
 8003540:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003542:	e009      	b.n	8003558 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003544:	f7fe fc8c 	bl	8001e60 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003552:	d901      	bls.n	8003558 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003554:	2303      	movs	r3, #3
 8003556:	e007      	b.n	8003568 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	f003 0320 	and.w	r3, r3, #32
 8003562:	2b00      	cmp	r3, #0
 8003564:	d0ee      	beq.n	8003544 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003566:	2300      	movs	r3, #0
}
 8003568:	4618      	mov	r0, r3
 800356a:	3710      	adds	r7, #16
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003578:	2300      	movs	r3, #0
 800357a:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003586:	2b00      	cmp	r3, #0
 8003588:	d119      	bne.n	80035be <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f04f 32ff 	mov.w	r2, #4294967295
 8003592:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003594:	f7fe fc64 	bl	8001e60 <HAL_GetTick>
 8003598:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800359a:	e009      	b.n	80035b0 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800359c:	f7fe fc60 	bl	8001e60 <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80035aa:	d901      	bls.n	80035b0 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e007      	b.n	80035c0 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d0ee      	beq.n	800359c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80035be:	2300      	movs	r3, #0
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3710      	adds	r7, #16
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b085      	sub	sp, #20
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	4603      	mov	r3, r0
 80035d0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80035d2:	2300      	movs	r3, #0
 80035d4:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 80035d6:	e005      	b.n	80035e4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	3301      	adds	r3, #1
 80035dc:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80035de:	79fb      	ldrb	r3, [r7, #7]
 80035e0:	3b0a      	subs	r3, #10
 80035e2:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 80035e4:	79fb      	ldrb	r3, [r7, #7]
 80035e6:	2b09      	cmp	r3, #9
 80035e8:	d8f6      	bhi.n	80035d8 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	011b      	lsls	r3, r3, #4
 80035f0:	b2da      	uxtb	r2, r3
 80035f2:	79fb      	ldrb	r3, [r7, #7]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	b2db      	uxtb	r3, r3
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3714      	adds	r7, #20
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr

08003604 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003604:	b480      	push	{r7}
 8003606:	b085      	sub	sp, #20
 8003608:	af00      	add	r7, sp, #0
 800360a:	4603      	mov	r3, r0
 800360c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800360e:	2300      	movs	r3, #0
 8003610:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8003612:	79fb      	ldrb	r3, [r7, #7]
 8003614:	091b      	lsrs	r3, r3, #4
 8003616:	b2db      	uxtb	r3, r3
 8003618:	461a      	mov	r2, r3
 800361a:	4613      	mov	r3, r2
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	4413      	add	r3, r2
 8003620:	005b      	lsls	r3, r3, #1
 8003622:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8003624:	79fb      	ldrb	r3, [r7, #7]
 8003626:	f003 030f 	and.w	r3, r3, #15
 800362a:	b2da      	uxtb	r2, r3
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	b2db      	uxtb	r3, r3
 8003630:	4413      	add	r3, r2
 8003632:	b2db      	uxtb	r3, r3
}
 8003634:	4618      	mov	r0, r3
 8003636:	3714      	adds	r7, #20
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr

08003640 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d101      	bne.n	8003652 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e041      	b.n	80036d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003658:	b2db      	uxtb	r3, r3
 800365a:	2b00      	cmp	r3, #0
 800365c:	d106      	bne.n	800366c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 f839 	bl	80036de <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2202      	movs	r2, #2
 8003670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	3304      	adds	r3, #4
 800367c:	4619      	mov	r1, r3
 800367e:	4610      	mov	r0, r2
 8003680:	f000 f9d8 	bl	8003a34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3708      	adds	r7, #8
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}

080036de <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80036de:	b480      	push	{r7}
 80036e0:	b083      	sub	sp, #12
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80036e6:	bf00      	nop
 80036e8:	370c      	adds	r7, #12
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
	...

080036f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b085      	sub	sp, #20
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003702:	b2db      	uxtb	r3, r3
 8003704:	2b01      	cmp	r3, #1
 8003706:	d001      	beq.n	800370c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e04e      	b.n	80037aa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2202      	movs	r2, #2
 8003710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	68da      	ldr	r2, [r3, #12]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f042 0201 	orr.w	r2, r2, #1
 8003722:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a23      	ldr	r2, [pc, #140]	; (80037b8 <HAL_TIM_Base_Start_IT+0xc4>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d022      	beq.n	8003774 <HAL_TIM_Base_Start_IT+0x80>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003736:	d01d      	beq.n	8003774 <HAL_TIM_Base_Start_IT+0x80>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a1f      	ldr	r2, [pc, #124]	; (80037bc <HAL_TIM_Base_Start_IT+0xc8>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d018      	beq.n	8003774 <HAL_TIM_Base_Start_IT+0x80>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a1e      	ldr	r2, [pc, #120]	; (80037c0 <HAL_TIM_Base_Start_IT+0xcc>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d013      	beq.n	8003774 <HAL_TIM_Base_Start_IT+0x80>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a1c      	ldr	r2, [pc, #112]	; (80037c4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d00e      	beq.n	8003774 <HAL_TIM_Base_Start_IT+0x80>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a1b      	ldr	r2, [pc, #108]	; (80037c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d009      	beq.n	8003774 <HAL_TIM_Base_Start_IT+0x80>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a19      	ldr	r2, [pc, #100]	; (80037cc <HAL_TIM_Base_Start_IT+0xd8>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d004      	beq.n	8003774 <HAL_TIM_Base_Start_IT+0x80>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a18      	ldr	r2, [pc, #96]	; (80037d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d111      	bne.n	8003798 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	f003 0307 	and.w	r3, r3, #7
 800377e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2b06      	cmp	r3, #6
 8003784:	d010      	beq.n	80037a8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f042 0201 	orr.w	r2, r2, #1
 8003794:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003796:	e007      	b.n	80037a8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f042 0201 	orr.w	r2, r2, #1
 80037a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3714      	adds	r7, #20
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	40010000 	.word	0x40010000
 80037bc:	40000400 	.word	0x40000400
 80037c0:	40000800 	.word	0x40000800
 80037c4:	40000c00 	.word	0x40000c00
 80037c8:	40010400 	.word	0x40010400
 80037cc:	40014000 	.word	0x40014000
 80037d0:	40001800 	.word	0x40001800

080037d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	f003 0302 	and.w	r3, r3, #2
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d122      	bne.n	8003830 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	f003 0302 	and.w	r3, r3, #2
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d11b      	bne.n	8003830 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f06f 0202 	mvn.w	r2, #2
 8003800:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2201      	movs	r2, #1
 8003806:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	699b      	ldr	r3, [r3, #24]
 800380e:	f003 0303 	and.w	r3, r3, #3
 8003812:	2b00      	cmp	r3, #0
 8003814:	d003      	beq.n	800381e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 f8ee 	bl	80039f8 <HAL_TIM_IC_CaptureCallback>
 800381c:	e005      	b.n	800382a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f000 f8e0 	bl	80039e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f000 f8f1 	bl	8003a0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	f003 0304 	and.w	r3, r3, #4
 800383a:	2b04      	cmp	r3, #4
 800383c:	d122      	bne.n	8003884 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	f003 0304 	and.w	r3, r3, #4
 8003848:	2b04      	cmp	r3, #4
 800384a:	d11b      	bne.n	8003884 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f06f 0204 	mvn.w	r2, #4
 8003854:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2202      	movs	r2, #2
 800385a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003866:	2b00      	cmp	r3, #0
 8003868:	d003      	beq.n	8003872 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 f8c4 	bl	80039f8 <HAL_TIM_IC_CaptureCallback>
 8003870:	e005      	b.n	800387e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 f8b6 	bl	80039e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f000 f8c7 	bl	8003a0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	f003 0308 	and.w	r3, r3, #8
 800388e:	2b08      	cmp	r3, #8
 8003890:	d122      	bne.n	80038d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	f003 0308 	and.w	r3, r3, #8
 800389c:	2b08      	cmp	r3, #8
 800389e:	d11b      	bne.n	80038d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f06f 0208 	mvn.w	r2, #8
 80038a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2204      	movs	r2, #4
 80038ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	69db      	ldr	r3, [r3, #28]
 80038b6:	f003 0303 	and.w	r3, r3, #3
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d003      	beq.n	80038c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 f89a 	bl	80039f8 <HAL_TIM_IC_CaptureCallback>
 80038c4:	e005      	b.n	80038d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 f88c 	bl	80039e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f000 f89d 	bl	8003a0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	f003 0310 	and.w	r3, r3, #16
 80038e2:	2b10      	cmp	r3, #16
 80038e4:	d122      	bne.n	800392c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	f003 0310 	and.w	r3, r3, #16
 80038f0:	2b10      	cmp	r3, #16
 80038f2:	d11b      	bne.n	800392c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f06f 0210 	mvn.w	r2, #16
 80038fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2208      	movs	r2, #8
 8003902:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	69db      	ldr	r3, [r3, #28]
 800390a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800390e:	2b00      	cmp	r3, #0
 8003910:	d003      	beq.n	800391a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 f870 	bl	80039f8 <HAL_TIM_IC_CaptureCallback>
 8003918:	e005      	b.n	8003926 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f000 f862 	bl	80039e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f000 f873 	bl	8003a0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	2b01      	cmp	r3, #1
 8003938:	d10e      	bne.n	8003958 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	f003 0301 	and.w	r3, r3, #1
 8003944:	2b01      	cmp	r3, #1
 8003946:	d107      	bne.n	8003958 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f06f 0201 	mvn.w	r2, #1
 8003950:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f7fd fb24 	bl	8000fa0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003962:	2b80      	cmp	r3, #128	; 0x80
 8003964:	d10e      	bne.n	8003984 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003970:	2b80      	cmp	r3, #128	; 0x80
 8003972:	d107      	bne.n	8003984 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800397c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 f902 	bl	8003b88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800398e:	2b40      	cmp	r3, #64	; 0x40
 8003990:	d10e      	bne.n	80039b0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800399c:	2b40      	cmp	r3, #64	; 0x40
 800399e:	d107      	bne.n	80039b0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80039a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 f838 	bl	8003a20 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	f003 0320 	and.w	r3, r3, #32
 80039ba:	2b20      	cmp	r3, #32
 80039bc:	d10e      	bne.n	80039dc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	f003 0320 	and.w	r3, r3, #32
 80039c8:	2b20      	cmp	r3, #32
 80039ca:	d107      	bne.n	80039dc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f06f 0220 	mvn.w	r2, #32
 80039d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 f8cc 	bl	8003b74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039dc:	bf00      	nop
 80039de:	3708      	adds	r7, #8
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039ec:	bf00      	nop
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a00:	bf00      	nop
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a14:	bf00      	nop
 8003a16:	370c      	adds	r7, #12
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a28:	bf00      	nop
 8003a2a:	370c      	adds	r7, #12
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr

08003a34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b085      	sub	sp, #20
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4a40      	ldr	r2, [pc, #256]	; (8003b48 <TIM_Base_SetConfig+0x114>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d013      	beq.n	8003a74 <TIM_Base_SetConfig+0x40>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a52:	d00f      	beq.n	8003a74 <TIM_Base_SetConfig+0x40>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	4a3d      	ldr	r2, [pc, #244]	; (8003b4c <TIM_Base_SetConfig+0x118>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d00b      	beq.n	8003a74 <TIM_Base_SetConfig+0x40>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4a3c      	ldr	r2, [pc, #240]	; (8003b50 <TIM_Base_SetConfig+0x11c>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d007      	beq.n	8003a74 <TIM_Base_SetConfig+0x40>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4a3b      	ldr	r2, [pc, #236]	; (8003b54 <TIM_Base_SetConfig+0x120>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d003      	beq.n	8003a74 <TIM_Base_SetConfig+0x40>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	4a3a      	ldr	r2, [pc, #232]	; (8003b58 <TIM_Base_SetConfig+0x124>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d108      	bne.n	8003a86 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	68fa      	ldr	r2, [r7, #12]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a2f      	ldr	r2, [pc, #188]	; (8003b48 <TIM_Base_SetConfig+0x114>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d02b      	beq.n	8003ae6 <TIM_Base_SetConfig+0xb2>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a94:	d027      	beq.n	8003ae6 <TIM_Base_SetConfig+0xb2>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a2c      	ldr	r2, [pc, #176]	; (8003b4c <TIM_Base_SetConfig+0x118>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d023      	beq.n	8003ae6 <TIM_Base_SetConfig+0xb2>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a2b      	ldr	r2, [pc, #172]	; (8003b50 <TIM_Base_SetConfig+0x11c>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d01f      	beq.n	8003ae6 <TIM_Base_SetConfig+0xb2>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a2a      	ldr	r2, [pc, #168]	; (8003b54 <TIM_Base_SetConfig+0x120>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d01b      	beq.n	8003ae6 <TIM_Base_SetConfig+0xb2>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a29      	ldr	r2, [pc, #164]	; (8003b58 <TIM_Base_SetConfig+0x124>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d017      	beq.n	8003ae6 <TIM_Base_SetConfig+0xb2>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a28      	ldr	r2, [pc, #160]	; (8003b5c <TIM_Base_SetConfig+0x128>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d013      	beq.n	8003ae6 <TIM_Base_SetConfig+0xb2>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a27      	ldr	r2, [pc, #156]	; (8003b60 <TIM_Base_SetConfig+0x12c>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d00f      	beq.n	8003ae6 <TIM_Base_SetConfig+0xb2>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4a26      	ldr	r2, [pc, #152]	; (8003b64 <TIM_Base_SetConfig+0x130>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d00b      	beq.n	8003ae6 <TIM_Base_SetConfig+0xb2>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a25      	ldr	r2, [pc, #148]	; (8003b68 <TIM_Base_SetConfig+0x134>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d007      	beq.n	8003ae6 <TIM_Base_SetConfig+0xb2>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a24      	ldr	r2, [pc, #144]	; (8003b6c <TIM_Base_SetConfig+0x138>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d003      	beq.n	8003ae6 <TIM_Base_SetConfig+0xb2>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a23      	ldr	r2, [pc, #140]	; (8003b70 <TIM_Base_SetConfig+0x13c>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d108      	bne.n	8003af8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003aec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	68fa      	ldr	r2, [r7, #12]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	695b      	ldr	r3, [r3, #20]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	68fa      	ldr	r2, [r7, #12]
 8003b0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	689a      	ldr	r2, [r3, #8]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	4a0a      	ldr	r2, [pc, #40]	; (8003b48 <TIM_Base_SetConfig+0x114>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d003      	beq.n	8003b2c <TIM_Base_SetConfig+0xf8>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	4a0c      	ldr	r2, [pc, #48]	; (8003b58 <TIM_Base_SetConfig+0x124>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d103      	bne.n	8003b34 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	691a      	ldr	r2, [r3, #16]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	615a      	str	r2, [r3, #20]
}
 8003b3a:	bf00      	nop
 8003b3c:	3714      	adds	r7, #20
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr
 8003b46:	bf00      	nop
 8003b48:	40010000 	.word	0x40010000
 8003b4c:	40000400 	.word	0x40000400
 8003b50:	40000800 	.word	0x40000800
 8003b54:	40000c00 	.word	0x40000c00
 8003b58:	40010400 	.word	0x40010400
 8003b5c:	40014000 	.word	0x40014000
 8003b60:	40014400 	.word	0x40014400
 8003b64:	40014800 	.word	0x40014800
 8003b68:	40001800 	.word	0x40001800
 8003b6c:	40001c00 	.word	0x40001c00
 8003b70:	40002000 	.word	0x40002000

08003b74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b7c:	bf00      	nop
 8003b7e:	370c      	adds	r7, #12
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr

08003b88 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b90:	bf00      	nop
 8003b92:	370c      	adds	r7, #12
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d101      	bne.n	8003bae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e03f      	b.n	8003c2e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d106      	bne.n	8003bc8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f7fd fb50 	bl	8001268 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2224      	movs	r2, #36	; 0x24
 8003bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68da      	ldr	r2, [r3, #12]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003bde:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f000 fddb 	bl	800479c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	691a      	ldr	r2, [r3, #16]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003bf4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	695a      	ldr	r2, [r3, #20]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c04:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68da      	ldr	r2, [r3, #12]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c14:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2220      	movs	r2, #32
 8003c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2220      	movs	r2, #32
 8003c28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3708      	adds	r7, #8
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}

08003c36 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c36:	b580      	push	{r7, lr}
 8003c38:	b08a      	sub	sp, #40	; 0x28
 8003c3a:	af02      	add	r7, sp, #8
 8003c3c:	60f8      	str	r0, [r7, #12]
 8003c3e:	60b9      	str	r1, [r7, #8]
 8003c40:	603b      	str	r3, [r7, #0]
 8003c42:	4613      	mov	r3, r2
 8003c44:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c46:	2300      	movs	r3, #0
 8003c48:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	2b20      	cmp	r3, #32
 8003c54:	d17c      	bne.n	8003d50 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d002      	beq.n	8003c62 <HAL_UART_Transmit+0x2c>
 8003c5c:	88fb      	ldrh	r3, [r7, #6]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d101      	bne.n	8003c66 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e075      	b.n	8003d52 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d101      	bne.n	8003c74 <HAL_UART_Transmit+0x3e>
 8003c70:	2302      	movs	r3, #2
 8003c72:	e06e      	b.n	8003d52 <HAL_UART_Transmit+0x11c>
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2221      	movs	r2, #33	; 0x21
 8003c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c8a:	f7fe f8e9 	bl	8001e60 <HAL_GetTick>
 8003c8e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	88fa      	ldrh	r2, [r7, #6]
 8003c94:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	88fa      	ldrh	r2, [r7, #6]
 8003c9a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ca4:	d108      	bne.n	8003cb8 <HAL_UART_Transmit+0x82>
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	691b      	ldr	r3, [r3, #16]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d104      	bne.n	8003cb8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	61bb      	str	r3, [r7, #24]
 8003cb6:	e003      	b.n	8003cc0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003cc8:	e02a      	b.n	8003d20 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	9300      	str	r3, [sp, #0]
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	2180      	movs	r1, #128	; 0x80
 8003cd4:	68f8      	ldr	r0, [r7, #12]
 8003cd6:	f000 fb1f 	bl	8004318 <UART_WaitOnFlagUntilTimeout>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d001      	beq.n	8003ce4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e036      	b.n	8003d52 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d10b      	bne.n	8003d02 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	881b      	ldrh	r3, [r3, #0]
 8003cee:	461a      	mov	r2, r3
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cf8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003cfa:	69bb      	ldr	r3, [r7, #24]
 8003cfc:	3302      	adds	r3, #2
 8003cfe:	61bb      	str	r3, [r7, #24]
 8003d00:	e007      	b.n	8003d12 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	781a      	ldrb	r2, [r3, #0]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	3301      	adds	r3, #1
 8003d10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	3b01      	subs	r3, #1
 8003d1a:	b29a      	uxth	r2, r3
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d1cf      	bne.n	8003cca <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	9300      	str	r3, [sp, #0]
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	2200      	movs	r2, #0
 8003d32:	2140      	movs	r1, #64	; 0x40
 8003d34:	68f8      	ldr	r0, [r7, #12]
 8003d36:	f000 faef 	bl	8004318 <UART_WaitOnFlagUntilTimeout>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d001      	beq.n	8003d44 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003d40:	2303      	movs	r3, #3
 8003d42:	e006      	b.n	8003d52 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2220      	movs	r2, #32
 8003d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	e000      	b.n	8003d52 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003d50:	2302      	movs	r3, #2
  }
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3720      	adds	r7, #32
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}

08003d5a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d5a:	b580      	push	{r7, lr}
 8003d5c:	b084      	sub	sp, #16
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	60f8      	str	r0, [r7, #12]
 8003d62:	60b9      	str	r1, [r7, #8]
 8003d64:	4613      	mov	r3, r2
 8003d66:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	2b20      	cmp	r3, #32
 8003d72:	d11d      	bne.n	8003db0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d002      	beq.n	8003d80 <HAL_UART_Receive_IT+0x26>
 8003d7a:	88fb      	ldrh	r3, [r7, #6]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d101      	bne.n	8003d84 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e016      	b.n	8003db2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d101      	bne.n	8003d92 <HAL_UART_Receive_IT+0x38>
 8003d8e:	2302      	movs	r3, #2
 8003d90:	e00f      	b.n	8003db2 <HAL_UART_Receive_IT+0x58>
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2201      	movs	r2, #1
 8003d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003da0:	88fb      	ldrh	r3, [r7, #6]
 8003da2:	461a      	mov	r2, r3
 8003da4:	68b9      	ldr	r1, [r7, #8]
 8003da6:	68f8      	ldr	r0, [r7, #12]
 8003da8:	f000 fb24 	bl	80043f4 <UART_Start_Receive_IT>
 8003dac:	4603      	mov	r3, r0
 8003dae:	e000      	b.n	8003db2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003db0:	2302      	movs	r3, #2
  }
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3710      	adds	r7, #16
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
	...

08003dbc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b0ba      	sub	sp, #232	; 0xe8
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	695b      	ldr	r3, [r3, #20]
 8003dde:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003de2:	2300      	movs	r3, #0
 8003de4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003de8:	2300      	movs	r3, #0
 8003dea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003dee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003df2:	f003 030f 	and.w	r3, r3, #15
 8003df6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003dfa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d10f      	bne.n	8003e22 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e06:	f003 0320 	and.w	r3, r3, #32
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d009      	beq.n	8003e22 <HAL_UART_IRQHandler+0x66>
 8003e0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e12:	f003 0320 	and.w	r3, r3, #32
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d003      	beq.n	8003e22 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f000 fc03 	bl	8004626 <UART_Receive_IT>
      return;
 8003e20:	e256      	b.n	80042d0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003e22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	f000 80de 	beq.w	8003fe8 <HAL_UART_IRQHandler+0x22c>
 8003e2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e30:	f003 0301 	and.w	r3, r3, #1
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d106      	bne.n	8003e46 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003e38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e3c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	f000 80d1 	beq.w	8003fe8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e4a:	f003 0301 	and.w	r3, r3, #1
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d00b      	beq.n	8003e6a <HAL_UART_IRQHandler+0xae>
 8003e52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d005      	beq.n	8003e6a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e62:	f043 0201 	orr.w	r2, r3, #1
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e6e:	f003 0304 	and.w	r3, r3, #4
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d00b      	beq.n	8003e8e <HAL_UART_IRQHandler+0xd2>
 8003e76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e7a:	f003 0301 	and.w	r3, r3, #1
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d005      	beq.n	8003e8e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e86:	f043 0202 	orr.w	r2, r3, #2
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e92:	f003 0302 	and.w	r3, r3, #2
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d00b      	beq.n	8003eb2 <HAL_UART_IRQHandler+0xf6>
 8003e9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e9e:	f003 0301 	and.w	r3, r3, #1
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d005      	beq.n	8003eb2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eaa:	f043 0204 	orr.w	r2, r3, #4
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003eb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003eb6:	f003 0308 	and.w	r3, r3, #8
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d011      	beq.n	8003ee2 <HAL_UART_IRQHandler+0x126>
 8003ebe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ec2:	f003 0320 	and.w	r3, r3, #32
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d105      	bne.n	8003ed6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003eca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d005      	beq.n	8003ee2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eda:	f043 0208 	orr.w	r2, r3, #8
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	f000 81ed 	beq.w	80042c6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003eec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ef0:	f003 0320 	and.w	r3, r3, #32
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d008      	beq.n	8003f0a <HAL_UART_IRQHandler+0x14e>
 8003ef8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003efc:	f003 0320 	and.w	r3, r3, #32
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d002      	beq.n	8003f0a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f000 fb8e 	bl	8004626 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	695b      	ldr	r3, [r3, #20]
 8003f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f14:	2b40      	cmp	r3, #64	; 0x40
 8003f16:	bf0c      	ite	eq
 8003f18:	2301      	moveq	r3, #1
 8003f1a:	2300      	movne	r3, #0
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f26:	f003 0308 	and.w	r3, r3, #8
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d103      	bne.n	8003f36 <HAL_UART_IRQHandler+0x17a>
 8003f2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d04f      	beq.n	8003fd6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f000 fa96 	bl	8004468 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	695b      	ldr	r3, [r3, #20]
 8003f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f46:	2b40      	cmp	r3, #64	; 0x40
 8003f48:	d141      	bne.n	8003fce <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	3314      	adds	r3, #20
 8003f50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f54:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003f58:	e853 3f00 	ldrex	r3, [r3]
 8003f5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003f60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003f64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	3314      	adds	r3, #20
 8003f72:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003f76:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003f7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f7e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003f82:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003f86:	e841 2300 	strex	r3, r2, [r1]
 8003f8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003f8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d1d9      	bne.n	8003f4a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d013      	beq.n	8003fc6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa2:	4a7d      	ldr	r2, [pc, #500]	; (8004198 <HAL_UART_IRQHandler+0x3dc>)
 8003fa4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003faa:	4618      	mov	r0, r3
 8003fac:	f7fe f8b6 	bl	800211c <HAL_DMA_Abort_IT>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d016      	beq.n	8003fe4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003fc0:	4610      	mov	r0, r2
 8003fc2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fc4:	e00e      	b.n	8003fe4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f000 f990 	bl	80042ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fcc:	e00a      	b.n	8003fe4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f000 f98c 	bl	80042ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fd4:	e006      	b.n	8003fe4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f000 f988 	bl	80042ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003fe2:	e170      	b.n	80042c6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fe4:	bf00      	nop
    return;
 8003fe6:	e16e      	b.n	80042c6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	f040 814a 	bne.w	8004286 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003ff2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ff6:	f003 0310 	and.w	r3, r3, #16
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	f000 8143 	beq.w	8004286 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004000:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004004:	f003 0310 	and.w	r3, r3, #16
 8004008:	2b00      	cmp	r3, #0
 800400a:	f000 813c 	beq.w	8004286 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800400e:	2300      	movs	r3, #0
 8004010:	60bb      	str	r3, [r7, #8]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	60bb      	str	r3, [r7, #8]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	60bb      	str	r3, [r7, #8]
 8004022:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	695b      	ldr	r3, [r3, #20]
 800402a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800402e:	2b40      	cmp	r3, #64	; 0x40
 8004030:	f040 80b4 	bne.w	800419c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004040:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004044:	2b00      	cmp	r3, #0
 8004046:	f000 8140 	beq.w	80042ca <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800404e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004052:	429a      	cmp	r2, r3
 8004054:	f080 8139 	bcs.w	80042ca <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800405e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004064:	69db      	ldr	r3, [r3, #28]
 8004066:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800406a:	f000 8088 	beq.w	800417e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	330c      	adds	r3, #12
 8004074:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004078:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800407c:	e853 3f00 	ldrex	r3, [r3]
 8004080:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004084:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004088:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800408c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	330c      	adds	r3, #12
 8004096:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800409a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800409e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80040a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80040aa:	e841 2300 	strex	r3, r2, [r1]
 80040ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80040b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d1d9      	bne.n	800406e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	3314      	adds	r3, #20
 80040c0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040c4:	e853 3f00 	ldrex	r3, [r3]
 80040c8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80040ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80040cc:	f023 0301 	bic.w	r3, r3, #1
 80040d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	3314      	adds	r3, #20
 80040da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80040de:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80040e2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80040e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80040ea:	e841 2300 	strex	r3, r2, [r1]
 80040ee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80040f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d1e1      	bne.n	80040ba <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	3314      	adds	r3, #20
 80040fc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004100:	e853 3f00 	ldrex	r3, [r3]
 8004104:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004106:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004108:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800410c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	3314      	adds	r3, #20
 8004116:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800411a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800411c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800411e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004120:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004122:	e841 2300 	strex	r3, r2, [r1]
 8004126:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004128:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800412a:	2b00      	cmp	r3, #0
 800412c:	d1e3      	bne.n	80040f6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2220      	movs	r2, #32
 8004132:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	330c      	adds	r3, #12
 8004142:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004144:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004146:	e853 3f00 	ldrex	r3, [r3]
 800414a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800414c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800414e:	f023 0310 	bic.w	r3, r3, #16
 8004152:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	330c      	adds	r3, #12
 800415c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004160:	65ba      	str	r2, [r7, #88]	; 0x58
 8004162:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004164:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004166:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004168:	e841 2300 	strex	r3, r2, [r1]
 800416c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800416e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004170:	2b00      	cmp	r3, #0
 8004172:	d1e3      	bne.n	800413c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004178:	4618      	mov	r0, r3
 800417a:	f7fd ff5f 	bl	800203c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004186:	b29b      	uxth	r3, r3
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	b29b      	uxth	r3, r3
 800418c:	4619      	mov	r1, r3
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f000 f8b6 	bl	8004300 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004194:	e099      	b.n	80042ca <HAL_UART_IRQHandler+0x50e>
 8004196:	bf00      	nop
 8004198:	0800452f 	.word	0x0800452f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	1ad3      	subs	r3, r2, r3
 80041a8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	f000 808b 	beq.w	80042ce <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80041b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80041bc:	2b00      	cmp	r3, #0
 80041be:	f000 8086 	beq.w	80042ce <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	330c      	adds	r3, #12
 80041c8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041cc:	e853 3f00 	ldrex	r3, [r3]
 80041d0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80041d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80041d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	330c      	adds	r3, #12
 80041e2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80041e6:	647a      	str	r2, [r7, #68]	; 0x44
 80041e8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80041ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80041ee:	e841 2300 	strex	r3, r2, [r1]
 80041f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80041f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d1e3      	bne.n	80041c2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	3314      	adds	r3, #20
 8004200:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004204:	e853 3f00 	ldrex	r3, [r3]
 8004208:	623b      	str	r3, [r7, #32]
   return(result);
 800420a:	6a3b      	ldr	r3, [r7, #32]
 800420c:	f023 0301 	bic.w	r3, r3, #1
 8004210:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	3314      	adds	r3, #20
 800421a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800421e:	633a      	str	r2, [r7, #48]	; 0x30
 8004220:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004222:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004224:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004226:	e841 2300 	strex	r3, r2, [r1]
 800422a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800422c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800422e:	2b00      	cmp	r3, #0
 8004230:	d1e3      	bne.n	80041fa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2220      	movs	r2, #32
 8004236:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	330c      	adds	r3, #12
 8004246:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	e853 3f00 	ldrex	r3, [r3]
 800424e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f023 0310 	bic.w	r3, r3, #16
 8004256:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	330c      	adds	r3, #12
 8004260:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004264:	61fa      	str	r2, [r7, #28]
 8004266:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004268:	69b9      	ldr	r1, [r7, #24]
 800426a:	69fa      	ldr	r2, [r7, #28]
 800426c:	e841 2300 	strex	r3, r2, [r1]
 8004270:	617b      	str	r3, [r7, #20]
   return(result);
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d1e3      	bne.n	8004240 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004278:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800427c:	4619      	mov	r1, r3
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f000 f83e 	bl	8004300 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004284:	e023      	b.n	80042ce <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004286:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800428a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800428e:	2b00      	cmp	r3, #0
 8004290:	d009      	beq.n	80042a6 <HAL_UART_IRQHandler+0x4ea>
 8004292:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800429a:	2b00      	cmp	r3, #0
 800429c:	d003      	beq.n	80042a6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 f959 	bl	8004556 <UART_Transmit_IT>
    return;
 80042a4:	e014      	b.n	80042d0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80042a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d00e      	beq.n	80042d0 <HAL_UART_IRQHandler+0x514>
 80042b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d008      	beq.n	80042d0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f000 f999 	bl	80045f6 <UART_EndTransmit_IT>
    return;
 80042c4:	e004      	b.n	80042d0 <HAL_UART_IRQHandler+0x514>
    return;
 80042c6:	bf00      	nop
 80042c8:	e002      	b.n	80042d0 <HAL_UART_IRQHandler+0x514>
      return;
 80042ca:	bf00      	nop
 80042cc:	e000      	b.n	80042d0 <HAL_UART_IRQHandler+0x514>
      return;
 80042ce:	bf00      	nop
  }
}
 80042d0:	37e8      	adds	r7, #232	; 0xe8
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop

080042d8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80042d8:	b480      	push	{r7}
 80042da:	b083      	sub	sp, #12
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80042e0:	bf00      	nop
 80042e2:	370c      	adds	r7, #12
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr

080042ec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80042f4:	bf00      	nop
 80042f6:	370c      	adds	r7, #12
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr

08004300 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004300:	b480      	push	{r7}
 8004302:	b083      	sub	sp, #12
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	460b      	mov	r3, r1
 800430a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800430c:	bf00      	nop
 800430e:	370c      	adds	r7, #12
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr

08004318 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b090      	sub	sp, #64	; 0x40
 800431c:	af00      	add	r7, sp, #0
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	60b9      	str	r1, [r7, #8]
 8004322:	603b      	str	r3, [r7, #0]
 8004324:	4613      	mov	r3, r2
 8004326:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004328:	e050      	b.n	80043cc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800432a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800432c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004330:	d04c      	beq.n	80043cc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004332:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004334:	2b00      	cmp	r3, #0
 8004336:	d007      	beq.n	8004348 <UART_WaitOnFlagUntilTimeout+0x30>
 8004338:	f7fd fd92 	bl	8001e60 <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004344:	429a      	cmp	r2, r3
 8004346:	d241      	bcs.n	80043cc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	330c      	adds	r3, #12
 800434e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004352:	e853 3f00 	ldrex	r3, [r3]
 8004356:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800435e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	330c      	adds	r3, #12
 8004366:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004368:	637a      	str	r2, [r7, #52]	; 0x34
 800436a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800436c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800436e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004370:	e841 2300 	strex	r3, r2, [r1]
 8004374:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004378:	2b00      	cmp	r3, #0
 800437a:	d1e5      	bne.n	8004348 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	3314      	adds	r3, #20
 8004382:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	e853 3f00 	ldrex	r3, [r3]
 800438a:	613b      	str	r3, [r7, #16]
   return(result);
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	f023 0301 	bic.w	r3, r3, #1
 8004392:	63bb      	str	r3, [r7, #56]	; 0x38
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	3314      	adds	r3, #20
 800439a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800439c:	623a      	str	r2, [r7, #32]
 800439e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a0:	69f9      	ldr	r1, [r7, #28]
 80043a2:	6a3a      	ldr	r2, [r7, #32]
 80043a4:	e841 2300 	strex	r3, r2, [r1]
 80043a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d1e5      	bne.n	800437c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2220      	movs	r2, #32
 80043b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2220      	movs	r2, #32
 80043bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80043c8:	2303      	movs	r3, #3
 80043ca:	e00f      	b.n	80043ec <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	4013      	ands	r3, r2
 80043d6:	68ba      	ldr	r2, [r7, #8]
 80043d8:	429a      	cmp	r2, r3
 80043da:	bf0c      	ite	eq
 80043dc:	2301      	moveq	r3, #1
 80043de:	2300      	movne	r3, #0
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	461a      	mov	r2, r3
 80043e4:	79fb      	ldrb	r3, [r7, #7]
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d09f      	beq.n	800432a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80043ea:	2300      	movs	r3, #0
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3740      	adds	r7, #64	; 0x40
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b085      	sub	sp, #20
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	60f8      	str	r0, [r7, #12]
 80043fc:	60b9      	str	r1, [r7, #8]
 80043fe:	4613      	mov	r3, r2
 8004400:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	68ba      	ldr	r2, [r7, #8]
 8004406:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	88fa      	ldrh	r2, [r7, #6]
 800440c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	88fa      	ldrh	r2, [r7, #6]
 8004412:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2200      	movs	r2, #0
 8004418:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2222      	movs	r2, #34	; 0x22
 800441e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2200      	movs	r2, #0
 8004426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	68da      	ldr	r2, [r3, #12]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004438:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	695a      	ldr	r2, [r3, #20]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f042 0201 	orr.w	r2, r2, #1
 8004448:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	68da      	ldr	r2, [r3, #12]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f042 0220 	orr.w	r2, r2, #32
 8004458:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800445a:	2300      	movs	r3, #0
}
 800445c:	4618      	mov	r0, r3
 800445e:	3714      	adds	r7, #20
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr

08004468 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004468:	b480      	push	{r7}
 800446a:	b095      	sub	sp, #84	; 0x54
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	330c      	adds	r3, #12
 8004476:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800447a:	e853 3f00 	ldrex	r3, [r3]
 800447e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004482:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004486:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	330c      	adds	r3, #12
 800448e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004490:	643a      	str	r2, [r7, #64]	; 0x40
 8004492:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004494:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004496:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004498:	e841 2300 	strex	r3, r2, [r1]
 800449c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800449e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d1e5      	bne.n	8004470 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	3314      	adds	r3, #20
 80044aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ac:	6a3b      	ldr	r3, [r7, #32]
 80044ae:	e853 3f00 	ldrex	r3, [r3]
 80044b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	f023 0301 	bic.w	r3, r3, #1
 80044ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	3314      	adds	r3, #20
 80044c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044cc:	e841 2300 	strex	r3, r2, [r1]
 80044d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d1e5      	bne.n	80044a4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d119      	bne.n	8004514 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	330c      	adds	r3, #12
 80044e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	e853 3f00 	ldrex	r3, [r3]
 80044ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	f023 0310 	bic.w	r3, r3, #16
 80044f6:	647b      	str	r3, [r7, #68]	; 0x44
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	330c      	adds	r3, #12
 80044fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004500:	61ba      	str	r2, [r7, #24]
 8004502:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004504:	6979      	ldr	r1, [r7, #20]
 8004506:	69ba      	ldr	r2, [r7, #24]
 8004508:	e841 2300 	strex	r3, r2, [r1]
 800450c:	613b      	str	r3, [r7, #16]
   return(result);
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d1e5      	bne.n	80044e0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2220      	movs	r2, #32
 8004518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004522:	bf00      	nop
 8004524:	3754      	adds	r7, #84	; 0x54
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr

0800452e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800452e:	b580      	push	{r7, lr}
 8004530:	b084      	sub	sp, #16
 8004532:	af00      	add	r7, sp, #0
 8004534:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800453a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2200      	movs	r2, #0
 8004540:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2200      	movs	r2, #0
 8004546:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004548:	68f8      	ldr	r0, [r7, #12]
 800454a:	f7ff fecf 	bl	80042ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800454e:	bf00      	nop
 8004550:	3710      	adds	r7, #16
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}

08004556 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004556:	b480      	push	{r7}
 8004558:	b085      	sub	sp, #20
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004564:	b2db      	uxtb	r3, r3
 8004566:	2b21      	cmp	r3, #33	; 0x21
 8004568:	d13e      	bne.n	80045e8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004572:	d114      	bne.n	800459e <UART_Transmit_IT+0x48>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	691b      	ldr	r3, [r3, #16]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d110      	bne.n	800459e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6a1b      	ldr	r3, [r3, #32]
 8004580:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	881b      	ldrh	r3, [r3, #0]
 8004586:	461a      	mov	r2, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004590:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a1b      	ldr	r3, [r3, #32]
 8004596:	1c9a      	adds	r2, r3, #2
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	621a      	str	r2, [r3, #32]
 800459c:	e008      	b.n	80045b0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a1b      	ldr	r3, [r3, #32]
 80045a2:	1c59      	adds	r1, r3, #1
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	6211      	str	r1, [r2, #32]
 80045a8:	781a      	ldrb	r2, [r3, #0]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	3b01      	subs	r3, #1
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	4619      	mov	r1, r3
 80045be:	84d1      	strh	r1, [r2, #38]	; 0x26
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d10f      	bne.n	80045e4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	68da      	ldr	r2, [r3, #12]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045d2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	68da      	ldr	r2, [r3, #12]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045e2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80045e4:	2300      	movs	r3, #0
 80045e6:	e000      	b.n	80045ea <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80045e8:	2302      	movs	r3, #2
  }
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3714      	adds	r7, #20
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr

080045f6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80045f6:	b580      	push	{r7, lr}
 80045f8:	b082      	sub	sp, #8
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	68da      	ldr	r2, [r3, #12]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800460c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2220      	movs	r2, #32
 8004612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f7ff fe5e 	bl	80042d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800461c:	2300      	movs	r3, #0
}
 800461e:	4618      	mov	r0, r3
 8004620:	3708      	adds	r7, #8
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}

08004626 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004626:	b580      	push	{r7, lr}
 8004628:	b08c      	sub	sp, #48	; 0x30
 800462a:	af00      	add	r7, sp, #0
 800462c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004634:	b2db      	uxtb	r3, r3
 8004636:	2b22      	cmp	r3, #34	; 0x22
 8004638:	f040 80ab 	bne.w	8004792 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004644:	d117      	bne.n	8004676 <UART_Receive_IT+0x50>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	691b      	ldr	r3, [r3, #16]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d113      	bne.n	8004676 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800464e:	2300      	movs	r3, #0
 8004650:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004656:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	b29b      	uxth	r3, r3
 8004660:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004664:	b29a      	uxth	r2, r3
 8004666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004668:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800466e:	1c9a      	adds	r2, r3, #2
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	629a      	str	r2, [r3, #40]	; 0x28
 8004674:	e026      	b.n	80046c4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800467a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800467c:	2300      	movs	r3, #0
 800467e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004688:	d007      	beq.n	800469a <UART_Receive_IT+0x74>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d10a      	bne.n	80046a8 <UART_Receive_IT+0x82>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	691b      	ldr	r3, [r3, #16]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d106      	bne.n	80046a8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	b2da      	uxtb	r2, r3
 80046a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046a4:	701a      	strb	r2, [r3, #0]
 80046a6:	e008      	b.n	80046ba <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046b4:	b2da      	uxtb	r2, r3
 80046b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046b8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046be:	1c5a      	adds	r2, r3, #1
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	3b01      	subs	r3, #1
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	4619      	mov	r1, r3
 80046d2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d15a      	bne.n	800478e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	68da      	ldr	r2, [r3, #12]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f022 0220 	bic.w	r2, r2, #32
 80046e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	68da      	ldr	r2, [r3, #12]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80046f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	695a      	ldr	r2, [r3, #20]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f022 0201 	bic.w	r2, r2, #1
 8004706:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2220      	movs	r2, #32
 800470c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004714:	2b01      	cmp	r3, #1
 8004716:	d135      	bne.n	8004784 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	330c      	adds	r3, #12
 8004724:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	e853 3f00 	ldrex	r3, [r3]
 800472c:	613b      	str	r3, [r7, #16]
   return(result);
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	f023 0310 	bic.w	r3, r3, #16
 8004734:	627b      	str	r3, [r7, #36]	; 0x24
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	330c      	adds	r3, #12
 800473c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800473e:	623a      	str	r2, [r7, #32]
 8004740:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004742:	69f9      	ldr	r1, [r7, #28]
 8004744:	6a3a      	ldr	r2, [r7, #32]
 8004746:	e841 2300 	strex	r3, r2, [r1]
 800474a:	61bb      	str	r3, [r7, #24]
   return(result);
 800474c:	69bb      	ldr	r3, [r7, #24]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d1e5      	bne.n	800471e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 0310 	and.w	r3, r3, #16
 800475c:	2b10      	cmp	r3, #16
 800475e:	d10a      	bne.n	8004776 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004760:	2300      	movs	r3, #0
 8004762:	60fb      	str	r3, [r7, #12]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	60fb      	str	r3, [r7, #12]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	60fb      	str	r3, [r7, #12]
 8004774:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800477a:	4619      	mov	r1, r3
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f7ff fdbf 	bl	8004300 <HAL_UARTEx_RxEventCallback>
 8004782:	e002      	b.n	800478a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f7fc fbb7 	bl	8000ef8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800478a:	2300      	movs	r3, #0
 800478c:	e002      	b.n	8004794 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800478e:	2300      	movs	r3, #0
 8004790:	e000      	b.n	8004794 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004792:	2302      	movs	r3, #2
  }
}
 8004794:	4618      	mov	r0, r3
 8004796:	3730      	adds	r7, #48	; 0x30
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}

0800479c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800479c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047a0:	b09f      	sub	sp, #124	; 0x7c
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	691b      	ldr	r3, [r3, #16]
 80047ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80047b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047b2:	68d9      	ldr	r1, [r3, #12]
 80047b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	ea40 0301 	orr.w	r3, r0, r1
 80047bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80047be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047c0:	689a      	ldr	r2, [r3, #8]
 80047c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047c4:	691b      	ldr	r3, [r3, #16]
 80047c6:	431a      	orrs	r2, r3
 80047c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047ca:	695b      	ldr	r3, [r3, #20]
 80047cc:	431a      	orrs	r2, r3
 80047ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047d0:	69db      	ldr	r3, [r3, #28]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80047d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80047e0:	f021 010c 	bic.w	r1, r1, #12
 80047e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80047ea:	430b      	orrs	r3, r1
 80047ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80047ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	695b      	ldr	r3, [r3, #20]
 80047f4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80047f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047fa:	6999      	ldr	r1, [r3, #24]
 80047fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	ea40 0301 	orr.w	r3, r0, r1
 8004804:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004806:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	4bc5      	ldr	r3, [pc, #788]	; (8004b20 <UART_SetConfig+0x384>)
 800480c:	429a      	cmp	r2, r3
 800480e:	d004      	beq.n	800481a <UART_SetConfig+0x7e>
 8004810:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	4bc3      	ldr	r3, [pc, #780]	; (8004b24 <UART_SetConfig+0x388>)
 8004816:	429a      	cmp	r2, r3
 8004818:	d103      	bne.n	8004822 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800481a:	f7fe fab7 	bl	8002d8c <HAL_RCC_GetPCLK2Freq>
 800481e:	6778      	str	r0, [r7, #116]	; 0x74
 8004820:	e002      	b.n	8004828 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004822:	f7fe fa9f 	bl	8002d64 <HAL_RCC_GetPCLK1Freq>
 8004826:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004828:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800482a:	69db      	ldr	r3, [r3, #28]
 800482c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004830:	f040 80b6 	bne.w	80049a0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004834:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004836:	461c      	mov	r4, r3
 8004838:	f04f 0500 	mov.w	r5, #0
 800483c:	4622      	mov	r2, r4
 800483e:	462b      	mov	r3, r5
 8004840:	1891      	adds	r1, r2, r2
 8004842:	6439      	str	r1, [r7, #64]	; 0x40
 8004844:	415b      	adcs	r3, r3
 8004846:	647b      	str	r3, [r7, #68]	; 0x44
 8004848:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800484c:	1912      	adds	r2, r2, r4
 800484e:	eb45 0303 	adc.w	r3, r5, r3
 8004852:	f04f 0000 	mov.w	r0, #0
 8004856:	f04f 0100 	mov.w	r1, #0
 800485a:	00d9      	lsls	r1, r3, #3
 800485c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004860:	00d0      	lsls	r0, r2, #3
 8004862:	4602      	mov	r2, r0
 8004864:	460b      	mov	r3, r1
 8004866:	1911      	adds	r1, r2, r4
 8004868:	6639      	str	r1, [r7, #96]	; 0x60
 800486a:	416b      	adcs	r3, r5
 800486c:	667b      	str	r3, [r7, #100]	; 0x64
 800486e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	461a      	mov	r2, r3
 8004874:	f04f 0300 	mov.w	r3, #0
 8004878:	1891      	adds	r1, r2, r2
 800487a:	63b9      	str	r1, [r7, #56]	; 0x38
 800487c:	415b      	adcs	r3, r3
 800487e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004880:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004884:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004888:	f7fb fd0a 	bl	80002a0 <__aeabi_uldivmod>
 800488c:	4602      	mov	r2, r0
 800488e:	460b      	mov	r3, r1
 8004890:	4ba5      	ldr	r3, [pc, #660]	; (8004b28 <UART_SetConfig+0x38c>)
 8004892:	fba3 2302 	umull	r2, r3, r3, r2
 8004896:	095b      	lsrs	r3, r3, #5
 8004898:	011e      	lsls	r6, r3, #4
 800489a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800489c:	461c      	mov	r4, r3
 800489e:	f04f 0500 	mov.w	r5, #0
 80048a2:	4622      	mov	r2, r4
 80048a4:	462b      	mov	r3, r5
 80048a6:	1891      	adds	r1, r2, r2
 80048a8:	6339      	str	r1, [r7, #48]	; 0x30
 80048aa:	415b      	adcs	r3, r3
 80048ac:	637b      	str	r3, [r7, #52]	; 0x34
 80048ae:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80048b2:	1912      	adds	r2, r2, r4
 80048b4:	eb45 0303 	adc.w	r3, r5, r3
 80048b8:	f04f 0000 	mov.w	r0, #0
 80048bc:	f04f 0100 	mov.w	r1, #0
 80048c0:	00d9      	lsls	r1, r3, #3
 80048c2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80048c6:	00d0      	lsls	r0, r2, #3
 80048c8:	4602      	mov	r2, r0
 80048ca:	460b      	mov	r3, r1
 80048cc:	1911      	adds	r1, r2, r4
 80048ce:	65b9      	str	r1, [r7, #88]	; 0x58
 80048d0:	416b      	adcs	r3, r5
 80048d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	461a      	mov	r2, r3
 80048da:	f04f 0300 	mov.w	r3, #0
 80048de:	1891      	adds	r1, r2, r2
 80048e0:	62b9      	str	r1, [r7, #40]	; 0x28
 80048e2:	415b      	adcs	r3, r3
 80048e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80048ea:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80048ee:	f7fb fcd7 	bl	80002a0 <__aeabi_uldivmod>
 80048f2:	4602      	mov	r2, r0
 80048f4:	460b      	mov	r3, r1
 80048f6:	4b8c      	ldr	r3, [pc, #560]	; (8004b28 <UART_SetConfig+0x38c>)
 80048f8:	fba3 1302 	umull	r1, r3, r3, r2
 80048fc:	095b      	lsrs	r3, r3, #5
 80048fe:	2164      	movs	r1, #100	; 0x64
 8004900:	fb01 f303 	mul.w	r3, r1, r3
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	00db      	lsls	r3, r3, #3
 8004908:	3332      	adds	r3, #50	; 0x32
 800490a:	4a87      	ldr	r2, [pc, #540]	; (8004b28 <UART_SetConfig+0x38c>)
 800490c:	fba2 2303 	umull	r2, r3, r2, r3
 8004910:	095b      	lsrs	r3, r3, #5
 8004912:	005b      	lsls	r3, r3, #1
 8004914:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004918:	441e      	add	r6, r3
 800491a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800491c:	4618      	mov	r0, r3
 800491e:	f04f 0100 	mov.w	r1, #0
 8004922:	4602      	mov	r2, r0
 8004924:	460b      	mov	r3, r1
 8004926:	1894      	adds	r4, r2, r2
 8004928:	623c      	str	r4, [r7, #32]
 800492a:	415b      	adcs	r3, r3
 800492c:	627b      	str	r3, [r7, #36]	; 0x24
 800492e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004932:	1812      	adds	r2, r2, r0
 8004934:	eb41 0303 	adc.w	r3, r1, r3
 8004938:	f04f 0400 	mov.w	r4, #0
 800493c:	f04f 0500 	mov.w	r5, #0
 8004940:	00dd      	lsls	r5, r3, #3
 8004942:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004946:	00d4      	lsls	r4, r2, #3
 8004948:	4622      	mov	r2, r4
 800494a:	462b      	mov	r3, r5
 800494c:	1814      	adds	r4, r2, r0
 800494e:	653c      	str	r4, [r7, #80]	; 0x50
 8004950:	414b      	adcs	r3, r1
 8004952:	657b      	str	r3, [r7, #84]	; 0x54
 8004954:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	461a      	mov	r2, r3
 800495a:	f04f 0300 	mov.w	r3, #0
 800495e:	1891      	adds	r1, r2, r2
 8004960:	61b9      	str	r1, [r7, #24]
 8004962:	415b      	adcs	r3, r3
 8004964:	61fb      	str	r3, [r7, #28]
 8004966:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800496a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800496e:	f7fb fc97 	bl	80002a0 <__aeabi_uldivmod>
 8004972:	4602      	mov	r2, r0
 8004974:	460b      	mov	r3, r1
 8004976:	4b6c      	ldr	r3, [pc, #432]	; (8004b28 <UART_SetConfig+0x38c>)
 8004978:	fba3 1302 	umull	r1, r3, r3, r2
 800497c:	095b      	lsrs	r3, r3, #5
 800497e:	2164      	movs	r1, #100	; 0x64
 8004980:	fb01 f303 	mul.w	r3, r1, r3
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	00db      	lsls	r3, r3, #3
 8004988:	3332      	adds	r3, #50	; 0x32
 800498a:	4a67      	ldr	r2, [pc, #412]	; (8004b28 <UART_SetConfig+0x38c>)
 800498c:	fba2 2303 	umull	r2, r3, r2, r3
 8004990:	095b      	lsrs	r3, r3, #5
 8004992:	f003 0207 	and.w	r2, r3, #7
 8004996:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4432      	add	r2, r6
 800499c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800499e:	e0b9      	b.n	8004b14 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80049a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049a2:	461c      	mov	r4, r3
 80049a4:	f04f 0500 	mov.w	r5, #0
 80049a8:	4622      	mov	r2, r4
 80049aa:	462b      	mov	r3, r5
 80049ac:	1891      	adds	r1, r2, r2
 80049ae:	6139      	str	r1, [r7, #16]
 80049b0:	415b      	adcs	r3, r3
 80049b2:	617b      	str	r3, [r7, #20]
 80049b4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80049b8:	1912      	adds	r2, r2, r4
 80049ba:	eb45 0303 	adc.w	r3, r5, r3
 80049be:	f04f 0000 	mov.w	r0, #0
 80049c2:	f04f 0100 	mov.w	r1, #0
 80049c6:	00d9      	lsls	r1, r3, #3
 80049c8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80049cc:	00d0      	lsls	r0, r2, #3
 80049ce:	4602      	mov	r2, r0
 80049d0:	460b      	mov	r3, r1
 80049d2:	eb12 0804 	adds.w	r8, r2, r4
 80049d6:	eb43 0905 	adc.w	r9, r3, r5
 80049da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	4618      	mov	r0, r3
 80049e0:	f04f 0100 	mov.w	r1, #0
 80049e4:	f04f 0200 	mov.w	r2, #0
 80049e8:	f04f 0300 	mov.w	r3, #0
 80049ec:	008b      	lsls	r3, r1, #2
 80049ee:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80049f2:	0082      	lsls	r2, r0, #2
 80049f4:	4640      	mov	r0, r8
 80049f6:	4649      	mov	r1, r9
 80049f8:	f7fb fc52 	bl	80002a0 <__aeabi_uldivmod>
 80049fc:	4602      	mov	r2, r0
 80049fe:	460b      	mov	r3, r1
 8004a00:	4b49      	ldr	r3, [pc, #292]	; (8004b28 <UART_SetConfig+0x38c>)
 8004a02:	fba3 2302 	umull	r2, r3, r3, r2
 8004a06:	095b      	lsrs	r3, r3, #5
 8004a08:	011e      	lsls	r6, r3, #4
 8004a0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f04f 0100 	mov.w	r1, #0
 8004a12:	4602      	mov	r2, r0
 8004a14:	460b      	mov	r3, r1
 8004a16:	1894      	adds	r4, r2, r2
 8004a18:	60bc      	str	r4, [r7, #8]
 8004a1a:	415b      	adcs	r3, r3
 8004a1c:	60fb      	str	r3, [r7, #12]
 8004a1e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a22:	1812      	adds	r2, r2, r0
 8004a24:	eb41 0303 	adc.w	r3, r1, r3
 8004a28:	f04f 0400 	mov.w	r4, #0
 8004a2c:	f04f 0500 	mov.w	r5, #0
 8004a30:	00dd      	lsls	r5, r3, #3
 8004a32:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004a36:	00d4      	lsls	r4, r2, #3
 8004a38:	4622      	mov	r2, r4
 8004a3a:	462b      	mov	r3, r5
 8004a3c:	1814      	adds	r4, r2, r0
 8004a3e:	64bc      	str	r4, [r7, #72]	; 0x48
 8004a40:	414b      	adcs	r3, r1
 8004a42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f04f 0100 	mov.w	r1, #0
 8004a4e:	f04f 0200 	mov.w	r2, #0
 8004a52:	f04f 0300 	mov.w	r3, #0
 8004a56:	008b      	lsls	r3, r1, #2
 8004a58:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004a5c:	0082      	lsls	r2, r0, #2
 8004a5e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004a62:	f7fb fc1d 	bl	80002a0 <__aeabi_uldivmod>
 8004a66:	4602      	mov	r2, r0
 8004a68:	460b      	mov	r3, r1
 8004a6a:	4b2f      	ldr	r3, [pc, #188]	; (8004b28 <UART_SetConfig+0x38c>)
 8004a6c:	fba3 1302 	umull	r1, r3, r3, r2
 8004a70:	095b      	lsrs	r3, r3, #5
 8004a72:	2164      	movs	r1, #100	; 0x64
 8004a74:	fb01 f303 	mul.w	r3, r1, r3
 8004a78:	1ad3      	subs	r3, r2, r3
 8004a7a:	011b      	lsls	r3, r3, #4
 8004a7c:	3332      	adds	r3, #50	; 0x32
 8004a7e:	4a2a      	ldr	r2, [pc, #168]	; (8004b28 <UART_SetConfig+0x38c>)
 8004a80:	fba2 2303 	umull	r2, r3, r2, r3
 8004a84:	095b      	lsrs	r3, r3, #5
 8004a86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a8a:	441e      	add	r6, r3
 8004a8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f04f 0100 	mov.w	r1, #0
 8004a94:	4602      	mov	r2, r0
 8004a96:	460b      	mov	r3, r1
 8004a98:	1894      	adds	r4, r2, r2
 8004a9a:	603c      	str	r4, [r7, #0]
 8004a9c:	415b      	adcs	r3, r3
 8004a9e:	607b      	str	r3, [r7, #4]
 8004aa0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004aa4:	1812      	adds	r2, r2, r0
 8004aa6:	eb41 0303 	adc.w	r3, r1, r3
 8004aaa:	f04f 0400 	mov.w	r4, #0
 8004aae:	f04f 0500 	mov.w	r5, #0
 8004ab2:	00dd      	lsls	r5, r3, #3
 8004ab4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004ab8:	00d4      	lsls	r4, r2, #3
 8004aba:	4622      	mov	r2, r4
 8004abc:	462b      	mov	r3, r5
 8004abe:	eb12 0a00 	adds.w	sl, r2, r0
 8004ac2:	eb43 0b01 	adc.w	fp, r3, r1
 8004ac6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	4618      	mov	r0, r3
 8004acc:	f04f 0100 	mov.w	r1, #0
 8004ad0:	f04f 0200 	mov.w	r2, #0
 8004ad4:	f04f 0300 	mov.w	r3, #0
 8004ad8:	008b      	lsls	r3, r1, #2
 8004ada:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004ade:	0082      	lsls	r2, r0, #2
 8004ae0:	4650      	mov	r0, sl
 8004ae2:	4659      	mov	r1, fp
 8004ae4:	f7fb fbdc 	bl	80002a0 <__aeabi_uldivmod>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	460b      	mov	r3, r1
 8004aec:	4b0e      	ldr	r3, [pc, #56]	; (8004b28 <UART_SetConfig+0x38c>)
 8004aee:	fba3 1302 	umull	r1, r3, r3, r2
 8004af2:	095b      	lsrs	r3, r3, #5
 8004af4:	2164      	movs	r1, #100	; 0x64
 8004af6:	fb01 f303 	mul.w	r3, r1, r3
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	011b      	lsls	r3, r3, #4
 8004afe:	3332      	adds	r3, #50	; 0x32
 8004b00:	4a09      	ldr	r2, [pc, #36]	; (8004b28 <UART_SetConfig+0x38c>)
 8004b02:	fba2 2303 	umull	r2, r3, r2, r3
 8004b06:	095b      	lsrs	r3, r3, #5
 8004b08:	f003 020f 	and.w	r2, r3, #15
 8004b0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4432      	add	r2, r6
 8004b12:	609a      	str	r2, [r3, #8]
}
 8004b14:	bf00      	nop
 8004b16:	377c      	adds	r7, #124	; 0x7c
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b1e:	bf00      	nop
 8004b20:	40011000 	.word	0x40011000
 8004b24:	40011400 	.word	0x40011400
 8004b28:	51eb851f 	.word	0x51eb851f

08004b2c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b083      	sub	sp, #12
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	f103 0208 	add.w	r2, r3, #8
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f04f 32ff 	mov.w	r2, #4294967295
 8004b44:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f103 0208 	add.w	r2, r3, #8
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f103 0208 	add.w	r2, r3, #8
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004b60:	bf00      	nop
 8004b62:	370c      	adds	r7, #12
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr

08004b6c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b083      	sub	sp, #12
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004b7a:	bf00      	nop
 8004b7c:	370c      	adds	r7, #12
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr

08004b86 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8004b86:	b480      	push	{r7}
 8004b88:	b085      	sub	sp, #20
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	6078      	str	r0, [r7, #4]
 8004b8e:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	68fa      	ldr	r2, [r7, #12]
 8004b9a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	689a      	ldr	r2, [r3, #8]
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	683a      	ldr	r2, [r7, #0]
 8004baa:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	683a      	ldr	r2, [r7, #0]
 8004bb0:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	1c5a      	adds	r2, r3, #1
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	601a      	str	r2, [r3, #0]
}
 8004bc2:	bf00      	nop
 8004bc4:	3714      	adds	r7, #20
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr

08004bce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8004bce:	b480      	push	{r7}
 8004bd0:	b085      	sub	sp, #20
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	6078      	str	r0, [r7, #4]
 8004bd6:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004be4:	d103      	bne.n	8004bee <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	60fb      	str	r3, [r7, #12]
 8004bec:	e00c      	b.n	8004c08 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	3308      	adds	r3, #8
 8004bf2:	60fb      	str	r3, [r7, #12]
 8004bf4:	e002      	b.n	8004bfc <vListInsert+0x2e>
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	60fb      	str	r3, [r7, #12]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	68ba      	ldr	r2, [r7, #8]
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d2f6      	bcs.n	8004bf6 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	685a      	ldr	r2, [r3, #4]
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	683a      	ldr	r2, [r7, #0]
 8004c16:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	68fa      	ldr	r2, [r7, #12]
 8004c1c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	683a      	ldr	r2, [r7, #0]
 8004c22:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	1c5a      	adds	r2, r3, #1
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	601a      	str	r2, [r3, #0]
}
 8004c34:	bf00      	nop
 8004c36:	3714      	adds	r7, #20
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr

08004c40 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004c40:	b480      	push	{r7}
 8004c42:	b085      	sub	sp, #20
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	691b      	ldr	r3, [r3, #16]
 8004c4c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	6892      	ldr	r2, [r2, #8]
 8004c56:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	6852      	ldr	r2, [r2, #4]
 8004c60:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d103      	bne.n	8004c74 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	689a      	ldr	r2, [r3, #8]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	1e5a      	subs	r2, r3, #1
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3714      	adds	r7, #20
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr

08004c94 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b084      	sub	sp, #16
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d10a      	bne.n	8004cbe <xQueueGenericReset+0x2a>
        __asm volatile
 8004ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cac:	f383 8811 	msr	BASEPRI, r3
 8004cb0:	f3bf 8f6f 	isb	sy
 8004cb4:	f3bf 8f4f 	dsb	sy
 8004cb8:	60bb      	str	r3, [r7, #8]
    }
 8004cba:	bf00      	nop
 8004cbc:	e7fe      	b.n	8004cbc <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8004cbe:	f002 fb33 	bl	8007328 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cca:	68f9      	ldr	r1, [r7, #12]
 8004ccc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004cce:	fb01 f303 	mul.w	r3, r1, r3
 8004cd2:	441a      	add	r2, r3
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cee:	3b01      	subs	r3, #1
 8004cf0:	68f9      	ldr	r1, [r7, #12]
 8004cf2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004cf4:	fb01 f303 	mul.w	r3, r1, r3
 8004cf8:	441a      	add	r2, r3
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	22ff      	movs	r2, #255	; 0xff
 8004d02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	22ff      	movs	r2, #255	; 0xff
 8004d0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d114      	bne.n	8004d3e <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	691b      	ldr	r3, [r3, #16]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d01a      	beq.n	8004d52 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	3310      	adds	r3, #16
 8004d20:	4618      	mov	r0, r3
 8004d22:	f001 f921 	bl	8005f68 <xTaskRemoveFromEventList>
 8004d26:	4603      	mov	r3, r0
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d012      	beq.n	8004d52 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8004d2c:	4b0c      	ldr	r3, [pc, #48]	; (8004d60 <xQueueGenericReset+0xcc>)
 8004d2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d32:	601a      	str	r2, [r3, #0]
 8004d34:	f3bf 8f4f 	dsb	sy
 8004d38:	f3bf 8f6f 	isb	sy
 8004d3c:	e009      	b.n	8004d52 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	3310      	adds	r3, #16
 8004d42:	4618      	mov	r0, r3
 8004d44:	f7ff fef2 	bl	8004b2c <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	3324      	adds	r3, #36	; 0x24
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f7ff feed 	bl	8004b2c <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8004d52:	f002 fb19 	bl	8007388 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8004d56:	2301      	movs	r3, #1
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3710      	adds	r7, #16
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}
 8004d60:	e000ed04 	.word	0xe000ed04

08004d64 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b08c      	sub	sp, #48	; 0x30
 8004d68:	af02      	add	r7, sp, #8
 8004d6a:	60f8      	str	r0, [r7, #12]
 8004d6c:	60b9      	str	r1, [r7, #8]
 8004d6e:	4613      	mov	r3, r2
 8004d70:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d10a      	bne.n	8004d8e <xQueueGenericCreate+0x2a>
        __asm volatile
 8004d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d7c:	f383 8811 	msr	BASEPRI, r3
 8004d80:	f3bf 8f6f 	isb	sy
 8004d84:	f3bf 8f4f 	dsb	sy
 8004d88:	61bb      	str	r3, [r7, #24]
    }
 8004d8a:	bf00      	nop
 8004d8c:	e7fe      	b.n	8004d8c <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	68ba      	ldr	r2, [r7, #8]
 8004d92:	fb02 f303 	mul.w	r3, r2, r3
 8004d96:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d006      	beq.n	8004dac <xQueueGenericCreate+0x48>
 8004d9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004da6:	68fa      	ldr	r2, [r7, #12]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d101      	bne.n	8004db0 <xQueueGenericCreate+0x4c>
 8004dac:	2301      	movs	r3, #1
 8004dae:	e000      	b.n	8004db2 <xQueueGenericCreate+0x4e>
 8004db0:	2300      	movs	r3, #0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d10a      	bne.n	8004dcc <xQueueGenericCreate+0x68>
        __asm volatile
 8004db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dba:	f383 8811 	msr	BASEPRI, r3
 8004dbe:	f3bf 8f6f 	isb	sy
 8004dc2:	f3bf 8f4f 	dsb	sy
 8004dc6:	617b      	str	r3, [r7, #20]
    }
 8004dc8:	bf00      	nop
 8004dca:	e7fe      	b.n	8004dca <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8004dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dce:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8004dd2:	d90a      	bls.n	8004dea <xQueueGenericCreate+0x86>
        __asm volatile
 8004dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd8:	f383 8811 	msr	BASEPRI, r3
 8004ddc:	f3bf 8f6f 	isb	sy
 8004de0:	f3bf 8f4f 	dsb	sy
 8004de4:	613b      	str	r3, [r7, #16]
    }
 8004de6:	bf00      	nop
 8004de8:	e7fe      	b.n	8004de8 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dec:	3350      	adds	r3, #80	; 0x50
 8004dee:	4618      	mov	r0, r3
 8004df0:	f002 fbbc 	bl	800756c <pvPortMalloc>
 8004df4:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8004df6:	6a3b      	ldr	r3, [r7, #32]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d00d      	beq.n	8004e18 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004dfc:	6a3b      	ldr	r3, [r7, #32]
 8004dfe:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	3350      	adds	r3, #80	; 0x50
 8004e04:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004e06:	79fa      	ldrb	r2, [r7, #7]
 8004e08:	6a3b      	ldr	r3, [r7, #32]
 8004e0a:	9300      	str	r3, [sp, #0]
 8004e0c:	4613      	mov	r3, r2
 8004e0e:	69fa      	ldr	r2, [r7, #28]
 8004e10:	68b9      	ldr	r1, [r7, #8]
 8004e12:	68f8      	ldr	r0, [r7, #12]
 8004e14:	f000 f805 	bl	8004e22 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8004e18:	6a3b      	ldr	r3, [r7, #32]
    }
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3728      	adds	r7, #40	; 0x28
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}

08004e22 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8004e22:	b580      	push	{r7, lr}
 8004e24:	b084      	sub	sp, #16
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	60f8      	str	r0, [r7, #12]
 8004e2a:	60b9      	str	r1, [r7, #8]
 8004e2c:	607a      	str	r2, [r7, #4]
 8004e2e:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d103      	bne.n	8004e3e <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004e36:	69bb      	ldr	r3, [r7, #24]
 8004e38:	69ba      	ldr	r2, [r7, #24]
 8004e3a:	601a      	str	r2, [r3, #0]
 8004e3c:	e002      	b.n	8004e44 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004e3e:	69bb      	ldr	r3, [r7, #24]
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8004e44:	69bb      	ldr	r3, [r7, #24]
 8004e46:	68fa      	ldr	r2, [r7, #12]
 8004e48:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	68ba      	ldr	r2, [r7, #8]
 8004e4e:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004e50:	2101      	movs	r1, #1
 8004e52:	69b8      	ldr	r0, [r7, #24]
 8004e54:	f7ff ff1e 	bl	8004c94 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8004e58:	69bb      	ldr	r3, [r7, #24]
 8004e5a:	78fa      	ldrb	r2, [r7, #3]
 8004e5c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8004e60:	bf00      	nop
 8004e62:	3710      	adds	r7, #16
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}

08004e68 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b08e      	sub	sp, #56	; 0x38
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	60b9      	str	r1, [r7, #8]
 8004e72:	607a      	str	r2, [r7, #4]
 8004e74:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004e76:	2300      	movs	r3, #0
 8004e78:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8004e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d10a      	bne.n	8004e9a <xQueueGenericSend+0x32>
        __asm volatile
 8004e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e88:	f383 8811 	msr	BASEPRI, r3
 8004e8c:	f3bf 8f6f 	isb	sy
 8004e90:	f3bf 8f4f 	dsb	sy
 8004e94:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8004e96:	bf00      	nop
 8004e98:	e7fe      	b.n	8004e98 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d103      	bne.n	8004ea8 <xQueueGenericSend+0x40>
 8004ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d101      	bne.n	8004eac <xQueueGenericSend+0x44>
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e000      	b.n	8004eae <xQueueGenericSend+0x46>
 8004eac:	2300      	movs	r3, #0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d10a      	bne.n	8004ec8 <xQueueGenericSend+0x60>
        __asm volatile
 8004eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb6:	f383 8811 	msr	BASEPRI, r3
 8004eba:	f3bf 8f6f 	isb	sy
 8004ebe:	f3bf 8f4f 	dsb	sy
 8004ec2:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8004ec4:	bf00      	nop
 8004ec6:	e7fe      	b.n	8004ec6 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	d103      	bne.n	8004ed6 <xQueueGenericSend+0x6e>
 8004ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d101      	bne.n	8004eda <xQueueGenericSend+0x72>
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e000      	b.n	8004edc <xQueueGenericSend+0x74>
 8004eda:	2300      	movs	r3, #0
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d10a      	bne.n	8004ef6 <xQueueGenericSend+0x8e>
        __asm volatile
 8004ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee4:	f383 8811 	msr	BASEPRI, r3
 8004ee8:	f3bf 8f6f 	isb	sy
 8004eec:	f3bf 8f4f 	dsb	sy
 8004ef0:	623b      	str	r3, [r7, #32]
    }
 8004ef2:	bf00      	nop
 8004ef4:	e7fe      	b.n	8004ef4 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004ef6:	f001 f9d3 	bl	80062a0 <xTaskGetSchedulerState>
 8004efa:	4603      	mov	r3, r0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d102      	bne.n	8004f06 <xQueueGenericSend+0x9e>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d101      	bne.n	8004f0a <xQueueGenericSend+0xa2>
 8004f06:	2301      	movs	r3, #1
 8004f08:	e000      	b.n	8004f0c <xQueueGenericSend+0xa4>
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d10a      	bne.n	8004f26 <xQueueGenericSend+0xbe>
        __asm volatile
 8004f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f14:	f383 8811 	msr	BASEPRI, r3
 8004f18:	f3bf 8f6f 	isb	sy
 8004f1c:	f3bf 8f4f 	dsb	sy
 8004f20:	61fb      	str	r3, [r7, #28]
    }
 8004f22:	bf00      	nop
 8004f24:	e7fe      	b.n	8004f24 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004f26:	f002 f9ff 	bl	8007328 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d302      	bcc.n	8004f3c <xQueueGenericSend+0xd4>
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	2b02      	cmp	r3, #2
 8004f3a:	d129      	bne.n	8004f90 <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004f3c:	683a      	ldr	r2, [r7, #0]
 8004f3e:	68b9      	ldr	r1, [r7, #8]
 8004f40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f42:	f000 fac6 	bl	80054d2 <prvCopyDataToQueue>
 8004f46:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d010      	beq.n	8004f72 <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f52:	3324      	adds	r3, #36	; 0x24
 8004f54:	4618      	mov	r0, r3
 8004f56:	f001 f807 	bl	8005f68 <xTaskRemoveFromEventList>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d013      	beq.n	8004f88 <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8004f60:	4b3f      	ldr	r3, [pc, #252]	; (8005060 <xQueueGenericSend+0x1f8>)
 8004f62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f66:	601a      	str	r2, [r3, #0]
 8004f68:	f3bf 8f4f 	dsb	sy
 8004f6c:	f3bf 8f6f 	isb	sy
 8004f70:	e00a      	b.n	8004f88 <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8004f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d007      	beq.n	8004f88 <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8004f78:	4b39      	ldr	r3, [pc, #228]	; (8005060 <xQueueGenericSend+0x1f8>)
 8004f7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f7e:	601a      	str	r2, [r3, #0]
 8004f80:	f3bf 8f4f 	dsb	sy
 8004f84:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8004f88:	f002 f9fe 	bl	8007388 <vPortExitCritical>
                return pdPASS;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e063      	b.n	8005058 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d103      	bne.n	8004f9e <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8004f96:	f002 f9f7 	bl	8007388 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	e05c      	b.n	8005058 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004f9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d106      	bne.n	8004fb2 <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004fa4:	f107 0314 	add.w	r3, r7, #20
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f001 f83f 	bl	800602c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004fb2:	f002 f9e9 	bl	8007388 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8004fb6:	f000 fdb9 	bl	8005b2c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004fba:	f002 f9b5 	bl	8007328 <vPortEnterCritical>
 8004fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004fc4:	b25b      	sxtb	r3, r3
 8004fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fca:	d103      	bne.n	8004fd4 <xQueueGenericSend+0x16c>
 8004fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004fda:	b25b      	sxtb	r3, r3
 8004fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fe0:	d103      	bne.n	8004fea <xQueueGenericSend+0x182>
 8004fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004fea:	f002 f9cd 	bl	8007388 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004fee:	1d3a      	adds	r2, r7, #4
 8004ff0:	f107 0314 	add.w	r3, r7, #20
 8004ff4:	4611      	mov	r1, r2
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f001 f82e 	bl	8006058 <xTaskCheckForTimeOut>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d124      	bne.n	800504c <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005002:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005004:	f000 fb5d 	bl	80056c2 <prvIsQueueFull>
 8005008:	4603      	mov	r3, r0
 800500a:	2b00      	cmp	r3, #0
 800500c:	d018      	beq.n	8005040 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800500e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005010:	3310      	adds	r3, #16
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	4611      	mov	r1, r2
 8005016:	4618      	mov	r0, r3
 8005018:	f000 ff56 	bl	8005ec8 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 800501c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800501e:	f000 fae8 	bl	80055f2 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8005022:	f000 fd91 	bl	8005b48 <xTaskResumeAll>
 8005026:	4603      	mov	r3, r0
 8005028:	2b00      	cmp	r3, #0
 800502a:	f47f af7c 	bne.w	8004f26 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 800502e:	4b0c      	ldr	r3, [pc, #48]	; (8005060 <xQueueGenericSend+0x1f8>)
 8005030:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005034:	601a      	str	r2, [r3, #0]
 8005036:	f3bf 8f4f 	dsb	sy
 800503a:	f3bf 8f6f 	isb	sy
 800503e:	e772      	b.n	8004f26 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8005040:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005042:	f000 fad6 	bl	80055f2 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8005046:	f000 fd7f 	bl	8005b48 <xTaskResumeAll>
 800504a:	e76c      	b.n	8004f26 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 800504c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800504e:	f000 fad0 	bl	80055f2 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8005052:	f000 fd79 	bl	8005b48 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8005056:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8005058:	4618      	mov	r0, r3
 800505a:	3738      	adds	r7, #56	; 0x38
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}
 8005060:	e000ed04 	.word	0xe000ed04

08005064 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b090      	sub	sp, #64	; 0x40
 8005068:	af00      	add	r7, sp, #0
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	60b9      	str	r1, [r7, #8]
 800506e:	607a      	str	r2, [r7, #4]
 8005070:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8005076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005078:	2b00      	cmp	r3, #0
 800507a:	d10a      	bne.n	8005092 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 800507c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005080:	f383 8811 	msr	BASEPRI, r3
 8005084:	f3bf 8f6f 	isb	sy
 8005088:	f3bf 8f4f 	dsb	sy
 800508c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800508e:	bf00      	nop
 8005090:	e7fe      	b.n	8005090 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d103      	bne.n	80050a0 <xQueueGenericSendFromISR+0x3c>
 8005098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800509a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509c:	2b00      	cmp	r3, #0
 800509e:	d101      	bne.n	80050a4 <xQueueGenericSendFromISR+0x40>
 80050a0:	2301      	movs	r3, #1
 80050a2:	e000      	b.n	80050a6 <xQueueGenericSendFromISR+0x42>
 80050a4:	2300      	movs	r3, #0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d10a      	bne.n	80050c0 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 80050aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ae:	f383 8811 	msr	BASEPRI, r3
 80050b2:	f3bf 8f6f 	isb	sy
 80050b6:	f3bf 8f4f 	dsb	sy
 80050ba:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80050bc:	bf00      	nop
 80050be:	e7fe      	b.n	80050be <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	2b02      	cmp	r3, #2
 80050c4:	d103      	bne.n	80050ce <xQueueGenericSendFromISR+0x6a>
 80050c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d101      	bne.n	80050d2 <xQueueGenericSendFromISR+0x6e>
 80050ce:	2301      	movs	r3, #1
 80050d0:	e000      	b.n	80050d4 <xQueueGenericSendFromISR+0x70>
 80050d2:	2300      	movs	r3, #0
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d10a      	bne.n	80050ee <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 80050d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050dc:	f383 8811 	msr	BASEPRI, r3
 80050e0:	f3bf 8f6f 	isb	sy
 80050e4:	f3bf 8f4f 	dsb	sy
 80050e8:	623b      	str	r3, [r7, #32]
    }
 80050ea:	bf00      	nop
 80050ec:	e7fe      	b.n	80050ec <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80050ee:	f002 f9fd 	bl	80074ec <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80050f2:	f3ef 8211 	mrs	r2, BASEPRI
 80050f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050fa:	f383 8811 	msr	BASEPRI, r3
 80050fe:	f3bf 8f6f 	isb	sy
 8005102:	f3bf 8f4f 	dsb	sy
 8005106:	61fa      	str	r2, [r7, #28]
 8005108:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 800510a:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800510c:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800510e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005110:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005116:	429a      	cmp	r2, r3
 8005118:	d302      	bcc.n	8005120 <xQueueGenericSendFromISR+0xbc>
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	2b02      	cmp	r3, #2
 800511e:	d13e      	bne.n	800519e <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8005120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005122:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005126:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800512a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800512c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800512e:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005130:	683a      	ldr	r2, [r7, #0]
 8005132:	68b9      	ldr	r1, [r7, #8]
 8005134:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005136:	f000 f9cc 	bl	80054d2 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800513a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800513e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005142:	d112      	bne.n	800516a <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005148:	2b00      	cmp	r3, #0
 800514a:	d025      	beq.n	8005198 <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800514c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800514e:	3324      	adds	r3, #36	; 0x24
 8005150:	4618      	mov	r0, r3
 8005152:	f000 ff09 	bl	8005f68 <xTaskRemoveFromEventList>
 8005156:	4603      	mov	r3, r0
 8005158:	2b00      	cmp	r3, #0
 800515a:	d01d      	beq.n	8005198 <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d01a      	beq.n	8005198 <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2201      	movs	r2, #1
 8005166:	601a      	str	r2, [r3, #0]
 8005168:	e016      	b.n	8005198 <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 800516a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800516e:	2b7f      	cmp	r3, #127	; 0x7f
 8005170:	d10a      	bne.n	8005188 <xQueueGenericSendFromISR+0x124>
        __asm volatile
 8005172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005176:	f383 8811 	msr	BASEPRI, r3
 800517a:	f3bf 8f6f 	isb	sy
 800517e:	f3bf 8f4f 	dsb	sy
 8005182:	617b      	str	r3, [r7, #20]
    }
 8005184:	bf00      	nop
 8005186:	e7fe      	b.n	8005186 <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005188:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800518c:	3301      	adds	r3, #1
 800518e:	b2db      	uxtb	r3, r3
 8005190:	b25a      	sxtb	r2, r3
 8005192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005194:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8005198:	2301      	movs	r3, #1
 800519a:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 800519c:	e001      	b.n	80051a2 <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 800519e:	2300      	movs	r3, #0
 80051a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051a4:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80051ac:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80051ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3740      	adds	r7, #64	; 0x40
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b08c      	sub	sp, #48	; 0x30
 80051bc:	af00      	add	r7, sp, #0
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	60b9      	str	r1, [r7, #8]
 80051c2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80051c4:	2300      	movs	r3, #0
 80051c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80051cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d10a      	bne.n	80051e8 <xQueueReceive+0x30>
        __asm volatile
 80051d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d6:	f383 8811 	msr	BASEPRI, r3
 80051da:	f3bf 8f6f 	isb	sy
 80051de:	f3bf 8f4f 	dsb	sy
 80051e2:	623b      	str	r3, [r7, #32]
    }
 80051e4:	bf00      	nop
 80051e6:	e7fe      	b.n	80051e6 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d103      	bne.n	80051f6 <xQueueReceive+0x3e>
 80051ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d101      	bne.n	80051fa <xQueueReceive+0x42>
 80051f6:	2301      	movs	r3, #1
 80051f8:	e000      	b.n	80051fc <xQueueReceive+0x44>
 80051fa:	2300      	movs	r3, #0
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d10a      	bne.n	8005216 <xQueueReceive+0x5e>
        __asm volatile
 8005200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005204:	f383 8811 	msr	BASEPRI, r3
 8005208:	f3bf 8f6f 	isb	sy
 800520c:	f3bf 8f4f 	dsb	sy
 8005210:	61fb      	str	r3, [r7, #28]
    }
 8005212:	bf00      	nop
 8005214:	e7fe      	b.n	8005214 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005216:	f001 f843 	bl	80062a0 <xTaskGetSchedulerState>
 800521a:	4603      	mov	r3, r0
 800521c:	2b00      	cmp	r3, #0
 800521e:	d102      	bne.n	8005226 <xQueueReceive+0x6e>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d101      	bne.n	800522a <xQueueReceive+0x72>
 8005226:	2301      	movs	r3, #1
 8005228:	e000      	b.n	800522c <xQueueReceive+0x74>
 800522a:	2300      	movs	r3, #0
 800522c:	2b00      	cmp	r3, #0
 800522e:	d10a      	bne.n	8005246 <xQueueReceive+0x8e>
        __asm volatile
 8005230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005234:	f383 8811 	msr	BASEPRI, r3
 8005238:	f3bf 8f6f 	isb	sy
 800523c:	f3bf 8f4f 	dsb	sy
 8005240:	61bb      	str	r3, [r7, #24]
    }
 8005242:	bf00      	nop
 8005244:	e7fe      	b.n	8005244 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8005246:	f002 f86f 	bl	8007328 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800524a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800524c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800524e:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005252:	2b00      	cmp	r3, #0
 8005254:	d01f      	beq.n	8005296 <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005256:	68b9      	ldr	r1, [r7, #8]
 8005258:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800525a:	f000 f9a4 	bl	80055a6 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800525e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005260:	1e5a      	subs	r2, r3, #1
 8005262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005264:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005268:	691b      	ldr	r3, [r3, #16]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d00f      	beq.n	800528e <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800526e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005270:	3310      	adds	r3, #16
 8005272:	4618      	mov	r0, r3
 8005274:	f000 fe78 	bl	8005f68 <xTaskRemoveFromEventList>
 8005278:	4603      	mov	r3, r0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d007      	beq.n	800528e <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800527e:	4b3d      	ldr	r3, [pc, #244]	; (8005374 <xQueueReceive+0x1bc>)
 8005280:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005284:	601a      	str	r2, [r3, #0]
 8005286:	f3bf 8f4f 	dsb	sy
 800528a:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800528e:	f002 f87b 	bl	8007388 <vPortExitCritical>
                return pdPASS;
 8005292:	2301      	movs	r3, #1
 8005294:	e069      	b.n	800536a <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d103      	bne.n	80052a4 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800529c:	f002 f874 	bl	8007388 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80052a0:	2300      	movs	r3, #0
 80052a2:	e062      	b.n	800536a <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 80052a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d106      	bne.n	80052b8 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80052aa:	f107 0310 	add.w	r3, r7, #16
 80052ae:	4618      	mov	r0, r3
 80052b0:	f000 febc 	bl	800602c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80052b4:	2301      	movs	r3, #1
 80052b6:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80052b8:	f002 f866 	bl	8007388 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80052bc:	f000 fc36 	bl	8005b2c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80052c0:	f002 f832 	bl	8007328 <vPortEnterCritical>
 80052c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80052ca:	b25b      	sxtb	r3, r3
 80052cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052d0:	d103      	bne.n	80052da <xQueueReceive+0x122>
 80052d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d4:	2200      	movs	r2, #0
 80052d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80052e0:	b25b      	sxtb	r3, r3
 80052e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052e6:	d103      	bne.n	80052f0 <xQueueReceive+0x138>
 80052e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ea:	2200      	movs	r2, #0
 80052ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80052f0:	f002 f84a 	bl	8007388 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80052f4:	1d3a      	adds	r2, r7, #4
 80052f6:	f107 0310 	add.w	r3, r7, #16
 80052fa:	4611      	mov	r1, r2
 80052fc:	4618      	mov	r0, r3
 80052fe:	f000 feab 	bl	8006058 <xTaskCheckForTimeOut>
 8005302:	4603      	mov	r3, r0
 8005304:	2b00      	cmp	r3, #0
 8005306:	d123      	bne.n	8005350 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005308:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800530a:	f000 f9c4 	bl	8005696 <prvIsQueueEmpty>
 800530e:	4603      	mov	r3, r0
 8005310:	2b00      	cmp	r3, #0
 8005312:	d017      	beq.n	8005344 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005316:	3324      	adds	r3, #36	; 0x24
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	4611      	mov	r1, r2
 800531c:	4618      	mov	r0, r3
 800531e:	f000 fdd3 	bl	8005ec8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8005322:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005324:	f000 f965 	bl	80055f2 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8005328:	f000 fc0e 	bl	8005b48 <xTaskResumeAll>
 800532c:	4603      	mov	r3, r0
 800532e:	2b00      	cmp	r3, #0
 8005330:	d189      	bne.n	8005246 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8005332:	4b10      	ldr	r3, [pc, #64]	; (8005374 <xQueueReceive+0x1bc>)
 8005334:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005338:	601a      	str	r2, [r3, #0]
 800533a:	f3bf 8f4f 	dsb	sy
 800533e:	f3bf 8f6f 	isb	sy
 8005342:	e780      	b.n	8005246 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8005344:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005346:	f000 f954 	bl	80055f2 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800534a:	f000 fbfd 	bl	8005b48 <xTaskResumeAll>
 800534e:	e77a      	b.n	8005246 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8005350:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005352:	f000 f94e 	bl	80055f2 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8005356:	f000 fbf7 	bl	8005b48 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800535a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800535c:	f000 f99b 	bl	8005696 <prvIsQueueEmpty>
 8005360:	4603      	mov	r3, r0
 8005362:	2b00      	cmp	r3, #0
 8005364:	f43f af6f 	beq.w	8005246 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8005368:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800536a:	4618      	mov	r0, r3
 800536c:	3730      	adds	r7, #48	; 0x30
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	e000ed04 	.word	0xe000ed04

08005378 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b090      	sub	sp, #64	; 0x40
 800537c:	af00      	add	r7, sp, #0
 800537e:	60f8      	str	r0, [r7, #12]
 8005380:	60b9      	str	r1, [r7, #8]
 8005382:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8005388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800538a:	2b00      	cmp	r3, #0
 800538c:	d10a      	bne.n	80053a4 <xQueueReceiveFromISR+0x2c>
        __asm volatile
 800538e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005392:	f383 8811 	msr	BASEPRI, r3
 8005396:	f3bf 8f6f 	isb	sy
 800539a:	f3bf 8f4f 	dsb	sy
 800539e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80053a0:	bf00      	nop
 80053a2:	e7fe      	b.n	80053a2 <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d103      	bne.n	80053b2 <xQueueReceiveFromISR+0x3a>
 80053aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d101      	bne.n	80053b6 <xQueueReceiveFromISR+0x3e>
 80053b2:	2301      	movs	r3, #1
 80053b4:	e000      	b.n	80053b8 <xQueueReceiveFromISR+0x40>
 80053b6:	2300      	movs	r3, #0
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d10a      	bne.n	80053d2 <xQueueReceiveFromISR+0x5a>
        __asm volatile
 80053bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c0:	f383 8811 	msr	BASEPRI, r3
 80053c4:	f3bf 8f6f 	isb	sy
 80053c8:	f3bf 8f4f 	dsb	sy
 80053cc:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80053ce:	bf00      	nop
 80053d0:	e7fe      	b.n	80053d0 <xQueueReceiveFromISR+0x58>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80053d2:	f002 f88b 	bl	80074ec <vPortValidateInterruptPriority>
        __asm volatile
 80053d6:	f3ef 8211 	mrs	r2, BASEPRI
 80053da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053de:	f383 8811 	msr	BASEPRI, r3
 80053e2:	f3bf 8f6f 	isb	sy
 80053e6:	f3bf 8f4f 	dsb	sy
 80053ea:	623a      	str	r2, [r7, #32]
 80053ec:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 80053ee:	6a3b      	ldr	r3, [r7, #32]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80053f0:	637b      	str	r3, [r7, #52]	; 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80053f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f6:	633b      	str	r3, [r7, #48]	; 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80053f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d03e      	beq.n	800547c <xQueueReceiveFromISR+0x104>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 80053fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005400:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005404:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005408:	68b9      	ldr	r1, [r7, #8]
 800540a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800540c:	f000 f8cb 	bl	80055a6 <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005412:	1e5a      	subs	r2, r3, #1
 8005414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005416:	639a      	str	r2, [r3, #56]	; 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 8005418:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800541c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005420:	d112      	bne.n	8005448 <xQueueReceiveFromISR+0xd0>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005424:	691b      	ldr	r3, [r3, #16]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d025      	beq.n	8005476 <xQueueReceiveFromISR+0xfe>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800542a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800542c:	3310      	adds	r3, #16
 800542e:	4618      	mov	r0, r3
 8005430:	f000 fd9a 	bl	8005f68 <xTaskRemoveFromEventList>
 8005434:	4603      	mov	r3, r0
 8005436:	2b00      	cmp	r3, #0
 8005438:	d01d      	beq.n	8005476 <xQueueReceiveFromISR+0xfe>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d01a      	beq.n	8005476 <xQueueReceiveFromISR+0xfe>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	601a      	str	r2, [r3, #0]
 8005446:	e016      	b.n	8005476 <xQueueReceiveFromISR+0xfe>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                configASSERT( cRxLock != queueINT8_MAX );
 8005448:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800544c:	2b7f      	cmp	r3, #127	; 0x7f
 800544e:	d10a      	bne.n	8005466 <xQueueReceiveFromISR+0xee>
        __asm volatile
 8005450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005454:	f383 8811 	msr	BASEPRI, r3
 8005458:	f3bf 8f6f 	isb	sy
 800545c:	f3bf 8f4f 	dsb	sy
 8005460:	61bb      	str	r3, [r7, #24]
    }
 8005462:	bf00      	nop
 8005464:	e7fe      	b.n	8005464 <xQueueReceiveFromISR+0xec>

                pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005466:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800546a:	3301      	adds	r3, #1
 800546c:	b2db      	uxtb	r3, r3
 800546e:	b25a      	sxtb	r2, r3
 8005470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005472:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            }

            xReturn = pdPASS;
 8005476:	2301      	movs	r3, #1
 8005478:	63fb      	str	r3, [r7, #60]	; 0x3c
 800547a:	e001      	b.n	8005480 <xQueueReceiveFromISR+0x108>
        }
        else
        {
            xReturn = pdFAIL;
 800547c:	2300      	movs	r3, #0
 800547e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005482:	617b      	str	r3, [r7, #20]
        __asm volatile
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	f383 8811 	msr	BASEPRI, r3
    }
 800548a:	bf00      	nop
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800548c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800548e:	4618      	mov	r0, r3
 8005490:	3740      	adds	r7, #64	; 0x40
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}

08005496 <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8005496:	b580      	push	{r7, lr}
 8005498:	b084      	sub	sp, #16
 800549a:	af00      	add	r7, sp, #0
 800549c:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d10a      	bne.n	80054ba <uxQueueMessagesWaiting+0x24>
        __asm volatile
 80054a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a8:	f383 8811 	msr	BASEPRI, r3
 80054ac:	f3bf 8f6f 	isb	sy
 80054b0:	f3bf 8f4f 	dsb	sy
 80054b4:	60bb      	str	r3, [r7, #8]
    }
 80054b6:	bf00      	nop
 80054b8:	e7fe      	b.n	80054b8 <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 80054ba:	f001 ff35 	bl	8007328 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c2:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 80054c4:	f001 ff60 	bl	8007388 <vPortExitCritical>

    return uxReturn;
 80054c8:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80054ca:	4618      	mov	r0, r3
 80054cc:	3710      	adds	r7, #16
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}

080054d2 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80054d2:	b580      	push	{r7, lr}
 80054d4:	b086      	sub	sp, #24
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	60f8      	str	r0, [r7, #12]
 80054da:	60b9      	str	r1, [r7, #8]
 80054dc:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80054de:	2300      	movs	r3, #0
 80054e0:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e6:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d10d      	bne.n	800550c <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d14d      	bne.n	8005594 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	4618      	mov	r0, r3
 80054fe:	f000 feed 	bl	80062dc <xTaskPriorityDisinherit>
 8005502:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2200      	movs	r2, #0
 8005508:	609a      	str	r2, [r3, #8]
 800550a:	e043      	b.n	8005594 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d119      	bne.n	8005546 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6858      	ldr	r0, [r3, #4]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800551a:	461a      	mov	r2, r3
 800551c:	68b9      	ldr	r1, [r7, #8]
 800551e:	f002 fa4d 	bl	80079bc <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	685a      	ldr	r2, [r3, #4]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800552a:	441a      	add	r2, r3
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	685a      	ldr	r2, [r3, #4]
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	429a      	cmp	r2, r3
 800553a:	d32b      	bcc.n	8005594 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	605a      	str	r2, [r3, #4]
 8005544:	e026      	b.n	8005594 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	68d8      	ldr	r0, [r3, #12]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800554e:	461a      	mov	r2, r3
 8005550:	68b9      	ldr	r1, [r7, #8]
 8005552:	f002 fa33 	bl	80079bc <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	68da      	ldr	r2, [r3, #12]
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800555e:	425b      	negs	r3, r3
 8005560:	441a      	add	r2, r3
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	68da      	ldr	r2, [r3, #12]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	429a      	cmp	r2, r3
 8005570:	d207      	bcs.n	8005582 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	689a      	ldr	r2, [r3, #8]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800557a:	425b      	negs	r3, r3
 800557c:	441a      	add	r2, r3
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2b02      	cmp	r3, #2
 8005586:	d105      	bne.n	8005594 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d002      	beq.n	8005594 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	3b01      	subs	r3, #1
 8005592:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	1c5a      	adds	r2, r3, #1
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 800559c:	697b      	ldr	r3, [r7, #20]
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3718      	adds	r7, #24
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}

080055a6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80055a6:	b580      	push	{r7, lr}
 80055a8:	b082      	sub	sp, #8
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	6078      	str	r0, [r7, #4]
 80055ae:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d018      	beq.n	80055ea <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	68da      	ldr	r2, [r3, #12]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c0:	441a      	add	r2, r3
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	68da      	ldr	r2, [r3, #12]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d303      	bcc.n	80055da <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	68d9      	ldr	r1, [r3, #12]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e2:	461a      	mov	r2, r3
 80055e4:	6838      	ldr	r0, [r7, #0]
 80055e6:	f002 f9e9 	bl	80079bc <memcpy>
    }
}
 80055ea:	bf00      	nop
 80055ec:	3708      	adds	r7, #8
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}

080055f2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80055f2:	b580      	push	{r7, lr}
 80055f4:	b084      	sub	sp, #16
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80055fa:	f001 fe95 	bl	8007328 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005604:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8005606:	e011      	b.n	800562c <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800560c:	2b00      	cmp	r3, #0
 800560e:	d012      	beq.n	8005636 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	3324      	adds	r3, #36	; 0x24
 8005614:	4618      	mov	r0, r3
 8005616:	f000 fca7 	bl	8005f68 <xTaskRemoveFromEventList>
 800561a:	4603      	mov	r3, r0
 800561c:	2b00      	cmp	r3, #0
 800561e:	d001      	beq.n	8005624 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8005620:	f000 fd80 	bl	8006124 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8005624:	7bfb      	ldrb	r3, [r7, #15]
 8005626:	3b01      	subs	r3, #1
 8005628:	b2db      	uxtb	r3, r3
 800562a:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800562c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005630:	2b00      	cmp	r3, #0
 8005632:	dce9      	bgt.n	8005608 <prvUnlockQueue+0x16>
 8005634:	e000      	b.n	8005638 <prvUnlockQueue+0x46>
                        break;
 8005636:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	22ff      	movs	r2, #255	; 0xff
 800563c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8005640:	f001 fea2 	bl	8007388 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8005644:	f001 fe70 	bl	8007328 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800564e:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8005650:	e011      	b.n	8005676 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	691b      	ldr	r3, [r3, #16]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d012      	beq.n	8005680 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	3310      	adds	r3, #16
 800565e:	4618      	mov	r0, r3
 8005660:	f000 fc82 	bl	8005f68 <xTaskRemoveFromEventList>
 8005664:	4603      	mov	r3, r0
 8005666:	2b00      	cmp	r3, #0
 8005668:	d001      	beq.n	800566e <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800566a:	f000 fd5b 	bl	8006124 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800566e:	7bbb      	ldrb	r3, [r7, #14]
 8005670:	3b01      	subs	r3, #1
 8005672:	b2db      	uxtb	r3, r3
 8005674:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8005676:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800567a:	2b00      	cmp	r3, #0
 800567c:	dce9      	bgt.n	8005652 <prvUnlockQueue+0x60>
 800567e:	e000      	b.n	8005682 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8005680:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	22ff      	movs	r2, #255	; 0xff
 8005686:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800568a:	f001 fe7d 	bl	8007388 <vPortExitCritical>
}
 800568e:	bf00      	nop
 8005690:	3710      	adds	r7, #16
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}

08005696 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8005696:	b580      	push	{r7, lr}
 8005698:	b084      	sub	sp, #16
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800569e:	f001 fe43 	bl	8007328 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d102      	bne.n	80056b0 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80056aa:	2301      	movs	r3, #1
 80056ac:	60fb      	str	r3, [r7, #12]
 80056ae:	e001      	b.n	80056b4 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80056b0:	2300      	movs	r3, #0
 80056b2:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80056b4:	f001 fe68 	bl	8007388 <vPortExitCritical>

    return xReturn;
 80056b8:	68fb      	ldr	r3, [r7, #12]
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3710      	adds	r7, #16
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}

080056c2 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80056c2:	b580      	push	{r7, lr}
 80056c4:	b084      	sub	sp, #16
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80056ca:	f001 fe2d 	bl	8007328 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d102      	bne.n	80056e0 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80056da:	2301      	movs	r3, #1
 80056dc:	60fb      	str	r3, [r7, #12]
 80056de:	e001      	b.n	80056e4 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80056e0:	2300      	movs	r3, #0
 80056e2:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80056e4:	f001 fe50 	bl	8007388 <vPortExitCritical>

    return xReturn;
 80056e8:	68fb      	ldr	r3, [r7, #12]
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3710      	adds	r7, #16
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}

080056f2 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 80056f2:	b480      	push	{r7}
 80056f4:	b087      	sub	sp, #28
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d10a      	bne.n	800571a <xQueueIsQueueFullFromISR+0x28>
        __asm volatile
 8005704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005708:	f383 8811 	msr	BASEPRI, r3
 800570c:	f3bf 8f6f 	isb	sy
 8005710:	f3bf 8f4f 	dsb	sy
 8005714:	60fb      	str	r3, [r7, #12]
    }
 8005716:	bf00      	nop
 8005718:	e7fe      	b.n	8005718 <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005722:	429a      	cmp	r2, r3
 8005724:	d102      	bne.n	800572c <xQueueIsQueueFullFromISR+0x3a>
    {
        xReturn = pdTRUE;
 8005726:	2301      	movs	r3, #1
 8005728:	617b      	str	r3, [r7, #20]
 800572a:	e001      	b.n	8005730 <xQueueIsQueueFullFromISR+0x3e>
    }
    else
    {
        xReturn = pdFALSE;
 800572c:	2300      	movs	r3, #0
 800572e:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8005730:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005732:	4618      	mov	r0, r3
 8005734:	371c      	adds	r7, #28
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr
	...

08005740 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8005740:	b480      	push	{r7}
 8005742:	b085      	sub	sp, #20
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800574a:	2300      	movs	r3, #0
 800574c:	60fb      	str	r3, [r7, #12]
 800574e:	e014      	b.n	800577a <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005750:	4a0f      	ldr	r2, [pc, #60]	; (8005790 <vQueueAddToRegistry+0x50>)
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d10b      	bne.n	8005774 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800575c:	490c      	ldr	r1, [pc, #48]	; (8005790 <vQueueAddToRegistry+0x50>)
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	683a      	ldr	r2, [r7, #0]
 8005762:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8005766:	4a0a      	ldr	r2, [pc, #40]	; (8005790 <vQueueAddToRegistry+0x50>)
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	00db      	lsls	r3, r3, #3
 800576c:	4413      	add	r3, r2
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 8005772:	e006      	b.n	8005782 <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	3301      	adds	r3, #1
 8005778:	60fb      	str	r3, [r7, #12]
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2b07      	cmp	r3, #7
 800577e:	d9e7      	bls.n	8005750 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8005780:	bf00      	nop
 8005782:	bf00      	nop
 8005784:	3714      	adds	r7, #20
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr
 800578e:	bf00      	nop
 8005790:	20019360 	.word	0x20019360

08005794 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8005794:	b580      	push	{r7, lr}
 8005796:	b086      	sub	sp, #24
 8005798:	af00      	add	r7, sp, #0
 800579a:	60f8      	str	r0, [r7, #12]
 800579c:	60b9      	str	r1, [r7, #8]
 800579e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80057a4:	f001 fdc0 	bl	8007328 <vPortEnterCritical>
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80057ae:	b25b      	sxtb	r3, r3
 80057b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057b4:	d103      	bne.n	80057be <vQueueWaitForMessageRestricted+0x2a>
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	2200      	movs	r2, #0
 80057ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057c4:	b25b      	sxtb	r3, r3
 80057c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ca:	d103      	bne.n	80057d4 <vQueueWaitForMessageRestricted+0x40>
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	2200      	movs	r2, #0
 80057d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057d4:	f001 fdd8 	bl	8007388 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d106      	bne.n	80057ee <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	3324      	adds	r3, #36	; 0x24
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	68b9      	ldr	r1, [r7, #8]
 80057e8:	4618      	mov	r0, r3
 80057ea:	f000 fb91 	bl	8005f10 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80057ee:	6978      	ldr	r0, [r7, #20]
 80057f0:	f7ff feff 	bl	80055f2 <prvUnlockQueue>
    }
 80057f4:	bf00      	nop
 80057f6:	3718      	adds	r7, #24
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}

080057fc <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b08c      	sub	sp, #48	; 0x30
 8005800:	af04      	add	r7, sp, #16
 8005802:	60f8      	str	r0, [r7, #12]
 8005804:	60b9      	str	r1, [r7, #8]
 8005806:	603b      	str	r3, [r7, #0]
 8005808:	4613      	mov	r3, r2
 800580a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800580c:	88fb      	ldrh	r3, [r7, #6]
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	4618      	mov	r0, r3
 8005812:	f001 feab 	bl	800756c <pvPortMalloc>
 8005816:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d00e      	beq.n	800583c <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800581e:	2058      	movs	r0, #88	; 0x58
 8005820:	f001 fea4 	bl	800756c <pvPortMalloc>
 8005824:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d003      	beq.n	8005834 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800582c:	69fb      	ldr	r3, [r7, #28]
 800582e:	697a      	ldr	r2, [r7, #20]
 8005830:	631a      	str	r2, [r3, #48]	; 0x30
 8005832:	e005      	b.n	8005840 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8005834:	6978      	ldr	r0, [r7, #20]
 8005836:	f001 ff79 	bl	800772c <vPortFree>
 800583a:	e001      	b.n	8005840 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800583c:	2300      	movs	r3, #0
 800583e:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8005840:	69fb      	ldr	r3, [r7, #28]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d013      	beq.n	800586e <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005846:	88fa      	ldrh	r2, [r7, #6]
 8005848:	2300      	movs	r3, #0
 800584a:	9303      	str	r3, [sp, #12]
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	9302      	str	r3, [sp, #8]
 8005850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005852:	9301      	str	r3, [sp, #4]
 8005854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005856:	9300      	str	r3, [sp, #0]
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	68b9      	ldr	r1, [r7, #8]
 800585c:	68f8      	ldr	r0, [r7, #12]
 800585e:	f000 f80e 	bl	800587e <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8005862:	69f8      	ldr	r0, [r7, #28]
 8005864:	f000 f8a2 	bl	80059ac <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8005868:	2301      	movs	r3, #1
 800586a:	61bb      	str	r3, [r7, #24]
 800586c:	e002      	b.n	8005874 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800586e:	f04f 33ff 	mov.w	r3, #4294967295
 8005872:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8005874:	69bb      	ldr	r3, [r7, #24]
    }
 8005876:	4618      	mov	r0, r3
 8005878:	3720      	adds	r7, #32
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}

0800587e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800587e:	b580      	push	{r7, lr}
 8005880:	b088      	sub	sp, #32
 8005882:	af00      	add	r7, sp, #0
 8005884:	60f8      	str	r0, [r7, #12]
 8005886:	60b9      	str	r1, [r7, #8]
 8005888:	607a      	str	r2, [r7, #4]
 800588a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800588c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800588e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	009b      	lsls	r3, r3, #2
 8005894:	461a      	mov	r2, r3
 8005896:	21a5      	movs	r1, #165	; 0xa5
 8005898:	f002 f89e 	bl	80079d8 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800589c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800589e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80058a6:	3b01      	subs	r3, #1
 80058a8:	009b      	lsls	r3, r3, #2
 80058aa:	4413      	add	r3, r2
 80058ac:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80058ae:	69bb      	ldr	r3, [r7, #24]
 80058b0:	f023 0307 	bic.w	r3, r3, #7
 80058b4:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80058b6:	69bb      	ldr	r3, [r7, #24]
 80058b8:	f003 0307 	and.w	r3, r3, #7
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d00a      	beq.n	80058d6 <prvInitialiseNewTask+0x58>
        __asm volatile
 80058c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c4:	f383 8811 	msr	BASEPRI, r3
 80058c8:	f3bf 8f6f 	isb	sy
 80058cc:	f3bf 8f4f 	dsb	sy
 80058d0:	617b      	str	r3, [r7, #20]
    }
 80058d2:	bf00      	nop
 80058d4:	e7fe      	b.n	80058d4 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d01f      	beq.n	800591c <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80058dc:	2300      	movs	r3, #0
 80058de:	61fb      	str	r3, [r7, #28]
 80058e0:	e012      	b.n	8005908 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80058e2:	68ba      	ldr	r2, [r7, #8]
 80058e4:	69fb      	ldr	r3, [r7, #28]
 80058e6:	4413      	add	r3, r2
 80058e8:	7819      	ldrb	r1, [r3, #0]
 80058ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058ec:	69fb      	ldr	r3, [r7, #28]
 80058ee:	4413      	add	r3, r2
 80058f0:	3334      	adds	r3, #52	; 0x34
 80058f2:	460a      	mov	r2, r1
 80058f4:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80058f6:	68ba      	ldr	r2, [r7, #8]
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	4413      	add	r3, r2
 80058fc:	781b      	ldrb	r3, [r3, #0]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d006      	beq.n	8005910 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005902:	69fb      	ldr	r3, [r7, #28]
 8005904:	3301      	adds	r3, #1
 8005906:	61fb      	str	r3, [r7, #28]
 8005908:	69fb      	ldr	r3, [r7, #28]
 800590a:	2b09      	cmp	r3, #9
 800590c:	d9e9      	bls.n	80058e2 <prvInitialiseNewTask+0x64>
 800590e:	e000      	b.n	8005912 <prvInitialiseNewTask+0x94>
            {
                break;
 8005910:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005914:	2200      	movs	r2, #0
 8005916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800591a:	e003      	b.n	8005924 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800591c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800591e:	2200      	movs	r2, #0
 8005920:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005926:	2b04      	cmp	r3, #4
 8005928:	d901      	bls.n	800592e <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800592a:	2304      	movs	r3, #4
 800592c:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800592e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005930:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005932:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8005934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005936:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005938:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800593a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800593c:	2200      	movs	r2, #0
 800593e:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005942:	3304      	adds	r3, #4
 8005944:	4618      	mov	r0, r3
 8005946:	f7ff f911 	bl	8004b6c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800594a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800594c:	3318      	adds	r3, #24
 800594e:	4618      	mov	r0, r3
 8005950:	f7ff f90c 	bl	8004b6c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005956:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005958:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800595a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800595c:	f1c3 0205 	rsb	r2, r3, #5
 8005960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005962:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005966:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005968:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800596a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800596c:	3350      	adds	r3, #80	; 0x50
 800596e:	2204      	movs	r2, #4
 8005970:	2100      	movs	r1, #0
 8005972:	4618      	mov	r0, r3
 8005974:	f002 f830 	bl	80079d8 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8005978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800597a:	3354      	adds	r3, #84	; 0x54
 800597c:	2201      	movs	r2, #1
 800597e:	2100      	movs	r1, #0
 8005980:	4618      	mov	r0, r3
 8005982:	f002 f829 	bl	80079d8 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005986:	683a      	ldr	r2, [r7, #0]
 8005988:	68f9      	ldr	r1, [r7, #12]
 800598a:	69b8      	ldr	r0, [r7, #24]
 800598c:	f001 fba0 	bl	80070d0 <pxPortInitialiseStack>
 8005990:	4602      	mov	r2, r0
 8005992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005994:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8005996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005998:	2b00      	cmp	r3, #0
 800599a:	d002      	beq.n	80059a2 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800599c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800599e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059a0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80059a2:	bf00      	nop
 80059a4:	3720      	adds	r7, #32
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}
	...

080059ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b082      	sub	sp, #8
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80059b4:	f001 fcb8 	bl	8007328 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80059b8:	4b2c      	ldr	r3, [pc, #176]	; (8005a6c <prvAddNewTaskToReadyList+0xc0>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	3301      	adds	r3, #1
 80059be:	4a2b      	ldr	r2, [pc, #172]	; (8005a6c <prvAddNewTaskToReadyList+0xc0>)
 80059c0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80059c2:	4b2b      	ldr	r3, [pc, #172]	; (8005a70 <prvAddNewTaskToReadyList+0xc4>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d109      	bne.n	80059de <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80059ca:	4a29      	ldr	r2, [pc, #164]	; (8005a70 <prvAddNewTaskToReadyList+0xc4>)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80059d0:	4b26      	ldr	r3, [pc, #152]	; (8005a6c <prvAddNewTaskToReadyList+0xc0>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d110      	bne.n	80059fa <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80059d8:	f000 fbc8 	bl	800616c <prvInitialiseTaskLists>
 80059dc:	e00d      	b.n	80059fa <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80059de:	4b25      	ldr	r3, [pc, #148]	; (8005a74 <prvAddNewTaskToReadyList+0xc8>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d109      	bne.n	80059fa <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80059e6:	4b22      	ldr	r3, [pc, #136]	; (8005a70 <prvAddNewTaskToReadyList+0xc4>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d802      	bhi.n	80059fa <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80059f4:	4a1e      	ldr	r2, [pc, #120]	; (8005a70 <prvAddNewTaskToReadyList+0xc4>)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80059fa:	4b1f      	ldr	r3, [pc, #124]	; (8005a78 <prvAddNewTaskToReadyList+0xcc>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	3301      	adds	r3, #1
 8005a00:	4a1d      	ldr	r2, [pc, #116]	; (8005a78 <prvAddNewTaskToReadyList+0xcc>)
 8005a02:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005a04:	4b1c      	ldr	r3, [pc, #112]	; (8005a78 <prvAddNewTaskToReadyList+0xcc>)
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a10:	2201      	movs	r2, #1
 8005a12:	409a      	lsls	r2, r3
 8005a14:	4b19      	ldr	r3, [pc, #100]	; (8005a7c <prvAddNewTaskToReadyList+0xd0>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	4a18      	ldr	r2, [pc, #96]	; (8005a7c <prvAddNewTaskToReadyList+0xd0>)
 8005a1c:	6013      	str	r3, [r2, #0]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a22:	4613      	mov	r3, r2
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	4413      	add	r3, r2
 8005a28:	009b      	lsls	r3, r3, #2
 8005a2a:	4a15      	ldr	r2, [pc, #84]	; (8005a80 <prvAddNewTaskToReadyList+0xd4>)
 8005a2c:	441a      	add	r2, r3
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	3304      	adds	r3, #4
 8005a32:	4619      	mov	r1, r3
 8005a34:	4610      	mov	r0, r2
 8005a36:	f7ff f8a6 	bl	8004b86 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8005a3a:	f001 fca5 	bl	8007388 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8005a3e:	4b0d      	ldr	r3, [pc, #52]	; (8005a74 <prvAddNewTaskToReadyList+0xc8>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d00e      	beq.n	8005a64 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005a46:	4b0a      	ldr	r3, [pc, #40]	; (8005a70 <prvAddNewTaskToReadyList+0xc4>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d207      	bcs.n	8005a64 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8005a54:	4b0b      	ldr	r3, [pc, #44]	; (8005a84 <prvAddNewTaskToReadyList+0xd8>)
 8005a56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a5a:	601a      	str	r2, [r3, #0]
 8005a5c:	f3bf 8f4f 	dsb	sy
 8005a60:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005a64:	bf00      	nop
 8005a66:	3708      	adds	r7, #8
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}
 8005a6c:	200001e4 	.word	0x200001e4
 8005a70:	2000010c 	.word	0x2000010c
 8005a74:	200001f0 	.word	0x200001f0
 8005a78:	20000200 	.word	0x20000200
 8005a7c:	200001ec 	.word	0x200001ec
 8005a80:	20000110 	.word	0x20000110
 8005a84:	e000ed04 	.word	0xe000ed04

08005a88 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b086      	sub	sp, #24
 8005a8c:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8005a8e:	4b20      	ldr	r3, [pc, #128]	; (8005b10 <vTaskStartScheduler+0x88>)
 8005a90:	9301      	str	r3, [sp, #4]
 8005a92:	2300      	movs	r3, #0
 8005a94:	9300      	str	r3, [sp, #0]
 8005a96:	2300      	movs	r3, #0
 8005a98:	2282      	movs	r2, #130	; 0x82
 8005a9a:	491e      	ldr	r1, [pc, #120]	; (8005b14 <vTaskStartScheduler+0x8c>)
 8005a9c:	481e      	ldr	r0, [pc, #120]	; (8005b18 <vTaskStartScheduler+0x90>)
 8005a9e:	f7ff fead 	bl	80057fc <xTaskCreate>
 8005aa2:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d102      	bne.n	8005ab0 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8005aaa:	f000 ff59 	bl	8006960 <xTimerCreateTimerTask>
 8005aae:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	d116      	bne.n	8005ae4 <vTaskStartScheduler+0x5c>
        __asm volatile
 8005ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aba:	f383 8811 	msr	BASEPRI, r3
 8005abe:	f3bf 8f6f 	isb	sy
 8005ac2:	f3bf 8f4f 	dsb	sy
 8005ac6:	60bb      	str	r3, [r7, #8]
    }
 8005ac8:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8005aca:	4b14      	ldr	r3, [pc, #80]	; (8005b1c <vTaskStartScheduler+0x94>)
 8005acc:	f04f 32ff 	mov.w	r2, #4294967295
 8005ad0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8005ad2:	4b13      	ldr	r3, [pc, #76]	; (8005b20 <vTaskStartScheduler+0x98>)
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005ad8:	4b12      	ldr	r3, [pc, #72]	; (8005b24 <vTaskStartScheduler+0x9c>)
 8005ada:	2200      	movs	r2, #0
 8005adc:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8005ade:	f001 fb81 	bl	80071e4 <xPortStartScheduler>
 8005ae2:	e00e      	b.n	8005b02 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aea:	d10a      	bne.n	8005b02 <vTaskStartScheduler+0x7a>
        __asm volatile
 8005aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af0:	f383 8811 	msr	BASEPRI, r3
 8005af4:	f3bf 8f6f 	isb	sy
 8005af8:	f3bf 8f4f 	dsb	sy
 8005afc:	607b      	str	r3, [r7, #4]
    }
 8005afe:	bf00      	nop
 8005b00:	e7fe      	b.n	8005b00 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8005b02:	4b09      	ldr	r3, [pc, #36]	; (8005b28 <vTaskStartScheduler+0xa0>)
 8005b04:	681b      	ldr	r3, [r3, #0]
}
 8005b06:	bf00      	nop
 8005b08:	3710      	adds	r7, #16
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}
 8005b0e:	bf00      	nop
 8005b10:	20000208 	.word	0x20000208
 8005b14:	08009000 	.word	0x08009000
 8005b18:	0800613d 	.word	0x0800613d
 8005b1c:	20000204 	.word	0x20000204
 8005b20:	200001f0 	.word	0x200001f0
 8005b24:	200001e8 	.word	0x200001e8
 8005b28:	20000020 	.word	0x20000020

08005b2c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8005b30:	4b04      	ldr	r3, [pc, #16]	; (8005b44 <vTaskSuspendAll+0x18>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	3301      	adds	r3, #1
 8005b36:	4a03      	ldr	r2, [pc, #12]	; (8005b44 <vTaskSuspendAll+0x18>)
 8005b38:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8005b3a:	bf00      	nop
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr
 8005b44:	2000020c 	.word	0x2000020c

08005b48 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b084      	sub	sp, #16
 8005b4c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8005b52:	2300      	movs	r3, #0
 8005b54:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8005b56:	4b41      	ldr	r3, [pc, #260]	; (8005c5c <xTaskResumeAll+0x114>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d10a      	bne.n	8005b74 <xTaskResumeAll+0x2c>
        __asm volatile
 8005b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b62:	f383 8811 	msr	BASEPRI, r3
 8005b66:	f3bf 8f6f 	isb	sy
 8005b6a:	f3bf 8f4f 	dsb	sy
 8005b6e:	603b      	str	r3, [r7, #0]
    }
 8005b70:	bf00      	nop
 8005b72:	e7fe      	b.n	8005b72 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8005b74:	f001 fbd8 	bl	8007328 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8005b78:	4b38      	ldr	r3, [pc, #224]	; (8005c5c <xTaskResumeAll+0x114>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	3b01      	subs	r3, #1
 8005b7e:	4a37      	ldr	r2, [pc, #220]	; (8005c5c <xTaskResumeAll+0x114>)
 8005b80:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b82:	4b36      	ldr	r3, [pc, #216]	; (8005c5c <xTaskResumeAll+0x114>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d161      	bne.n	8005c4e <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005b8a:	4b35      	ldr	r3, [pc, #212]	; (8005c60 <xTaskResumeAll+0x118>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d05d      	beq.n	8005c4e <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b92:	e02e      	b.n	8005bf2 <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b94:	4b33      	ldr	r3, [pc, #204]	; (8005c64 <xTaskResumeAll+0x11c>)
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	68db      	ldr	r3, [r3, #12]
 8005b9a:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	3318      	adds	r3, #24
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f7ff f84d 	bl	8004c40 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	3304      	adds	r3, #4
 8005baa:	4618      	mov	r0, r3
 8005bac:	f7ff f848 	bl	8004c40 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	409a      	lsls	r2, r3
 8005bb8:	4b2b      	ldr	r3, [pc, #172]	; (8005c68 <xTaskResumeAll+0x120>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	4a2a      	ldr	r2, [pc, #168]	; (8005c68 <xTaskResumeAll+0x120>)
 8005bc0:	6013      	str	r3, [r2, #0]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bc6:	4613      	mov	r3, r2
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	4413      	add	r3, r2
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	4a27      	ldr	r2, [pc, #156]	; (8005c6c <xTaskResumeAll+0x124>)
 8005bd0:	441a      	add	r2, r3
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	3304      	adds	r3, #4
 8005bd6:	4619      	mov	r1, r3
 8005bd8:	4610      	mov	r0, r2
 8005bda:	f7fe ffd4 	bl	8004b86 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005be2:	4b23      	ldr	r3, [pc, #140]	; (8005c70 <xTaskResumeAll+0x128>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d302      	bcc.n	8005bf2 <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 8005bec:	4b21      	ldr	r3, [pc, #132]	; (8005c74 <xTaskResumeAll+0x12c>)
 8005bee:	2201      	movs	r2, #1
 8005bf0:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005bf2:	4b1c      	ldr	r3, [pc, #112]	; (8005c64 <xTaskResumeAll+0x11c>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d1cc      	bne.n	8005b94 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d001      	beq.n	8005c04 <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8005c00:	f000 fb32 	bl	8006268 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005c04:	4b1c      	ldr	r3, [pc, #112]	; (8005c78 <xTaskResumeAll+0x130>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d010      	beq.n	8005c32 <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8005c10:	f000 f846 	bl	8005ca0 <xTaskIncrementTick>
 8005c14:	4603      	mov	r3, r0
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d002      	beq.n	8005c20 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 8005c1a:	4b16      	ldr	r3, [pc, #88]	; (8005c74 <xTaskResumeAll+0x12c>)
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	3b01      	subs	r3, #1
 8005c24:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d1f1      	bne.n	8005c10 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 8005c2c:	4b12      	ldr	r3, [pc, #72]	; (8005c78 <xTaskResumeAll+0x130>)
 8005c2e:	2200      	movs	r2, #0
 8005c30:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8005c32:	4b10      	ldr	r3, [pc, #64]	; (8005c74 <xTaskResumeAll+0x12c>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d009      	beq.n	8005c4e <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8005c3e:	4b0f      	ldr	r3, [pc, #60]	; (8005c7c <xTaskResumeAll+0x134>)
 8005c40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c44:	601a      	str	r2, [r3, #0]
 8005c46:	f3bf 8f4f 	dsb	sy
 8005c4a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8005c4e:	f001 fb9b 	bl	8007388 <vPortExitCritical>

    return xAlreadyYielded;
 8005c52:	68bb      	ldr	r3, [r7, #8]
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3710      	adds	r7, #16
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}
 8005c5c:	2000020c 	.word	0x2000020c
 8005c60:	200001e4 	.word	0x200001e4
 8005c64:	200001a4 	.word	0x200001a4
 8005c68:	200001ec 	.word	0x200001ec
 8005c6c:	20000110 	.word	0x20000110
 8005c70:	2000010c 	.word	0x2000010c
 8005c74:	200001f8 	.word	0x200001f8
 8005c78:	200001f4 	.word	0x200001f4
 8005c7c:	e000ed04 	.word	0xe000ed04

08005c80 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005c80:	b480      	push	{r7}
 8005c82:	b083      	sub	sp, #12
 8005c84:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8005c86:	4b05      	ldr	r3, [pc, #20]	; (8005c9c <xTaskGetTickCount+0x1c>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8005c8c:	687b      	ldr	r3, [r7, #4]
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	370c      	adds	r7, #12
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr
 8005c9a:	bf00      	nop
 8005c9c:	200001e8 	.word	0x200001e8

08005ca0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b086      	sub	sp, #24
 8005ca4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005caa:	4b4e      	ldr	r3, [pc, #312]	; (8005de4 <xTaskIncrementTick+0x144>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	f040 808e 	bne.w	8005dd0 <xTaskIncrementTick+0x130>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005cb4:	4b4c      	ldr	r3, [pc, #304]	; (8005de8 <xTaskIncrementTick+0x148>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	3301      	adds	r3, #1
 8005cba:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8005cbc:	4a4a      	ldr	r2, [pc, #296]	; (8005de8 <xTaskIncrementTick+0x148>)
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d120      	bne.n	8005d0a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8005cc8:	4b48      	ldr	r3, [pc, #288]	; (8005dec <xTaskIncrementTick+0x14c>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d00a      	beq.n	8005ce8 <xTaskIncrementTick+0x48>
        __asm volatile
 8005cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd6:	f383 8811 	msr	BASEPRI, r3
 8005cda:	f3bf 8f6f 	isb	sy
 8005cde:	f3bf 8f4f 	dsb	sy
 8005ce2:	603b      	str	r3, [r7, #0]
    }
 8005ce4:	bf00      	nop
 8005ce6:	e7fe      	b.n	8005ce6 <xTaskIncrementTick+0x46>
 8005ce8:	4b40      	ldr	r3, [pc, #256]	; (8005dec <xTaskIncrementTick+0x14c>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	60fb      	str	r3, [r7, #12]
 8005cee:	4b40      	ldr	r3, [pc, #256]	; (8005df0 <xTaskIncrementTick+0x150>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a3e      	ldr	r2, [pc, #248]	; (8005dec <xTaskIncrementTick+0x14c>)
 8005cf4:	6013      	str	r3, [r2, #0]
 8005cf6:	4a3e      	ldr	r2, [pc, #248]	; (8005df0 <xTaskIncrementTick+0x150>)
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	6013      	str	r3, [r2, #0]
 8005cfc:	4b3d      	ldr	r3, [pc, #244]	; (8005df4 <xTaskIncrementTick+0x154>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	3301      	adds	r3, #1
 8005d02:	4a3c      	ldr	r2, [pc, #240]	; (8005df4 <xTaskIncrementTick+0x154>)
 8005d04:	6013      	str	r3, [r2, #0]
 8005d06:	f000 faaf 	bl	8006268 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8005d0a:	4b3b      	ldr	r3, [pc, #236]	; (8005df8 <xTaskIncrementTick+0x158>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	693a      	ldr	r2, [r7, #16]
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d348      	bcc.n	8005da6 <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d14:	4b35      	ldr	r3, [pc, #212]	; (8005dec <xTaskIncrementTick+0x14c>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d104      	bne.n	8005d28 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d1e:	4b36      	ldr	r3, [pc, #216]	; (8005df8 <xTaskIncrementTick+0x158>)
 8005d20:	f04f 32ff 	mov.w	r2, #4294967295
 8005d24:	601a      	str	r2, [r3, #0]
                    break;
 8005d26:	e03e      	b.n	8005da6 <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d28:	4b30      	ldr	r3, [pc, #192]	; (8005dec <xTaskIncrementTick+0x14c>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8005d38:	693a      	ldr	r2, [r7, #16]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	d203      	bcs.n	8005d48 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8005d40:	4a2d      	ldr	r2, [pc, #180]	; (8005df8 <xTaskIncrementTick+0x158>)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005d46:	e02e      	b.n	8005da6 <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	3304      	adds	r3, #4
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f7fe ff77 	bl	8004c40 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d004      	beq.n	8005d64 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	3318      	adds	r3, #24
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f7fe ff6e 	bl	8004c40 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d68:	2201      	movs	r2, #1
 8005d6a:	409a      	lsls	r2, r3
 8005d6c:	4b23      	ldr	r3, [pc, #140]	; (8005dfc <xTaskIncrementTick+0x15c>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4313      	orrs	r3, r2
 8005d72:	4a22      	ldr	r2, [pc, #136]	; (8005dfc <xTaskIncrementTick+0x15c>)
 8005d74:	6013      	str	r3, [r2, #0]
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d7a:	4613      	mov	r3, r2
 8005d7c:	009b      	lsls	r3, r3, #2
 8005d7e:	4413      	add	r3, r2
 8005d80:	009b      	lsls	r3, r3, #2
 8005d82:	4a1f      	ldr	r2, [pc, #124]	; (8005e00 <xTaskIncrementTick+0x160>)
 8005d84:	441a      	add	r2, r3
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	3304      	adds	r3, #4
 8005d8a:	4619      	mov	r1, r3
 8005d8c:	4610      	mov	r0, r2
 8005d8e:	f7fe fefa 	bl	8004b86 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d96:	4b1b      	ldr	r3, [pc, #108]	; (8005e04 <xTaskIncrementTick+0x164>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d3b9      	bcc.n	8005d14 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8005da0:	2301      	movs	r3, #1
 8005da2:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005da4:	e7b6      	b.n	8005d14 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005da6:	4b17      	ldr	r3, [pc, #92]	; (8005e04 <xTaskIncrementTick+0x164>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dac:	4914      	ldr	r1, [pc, #80]	; (8005e00 <xTaskIncrementTick+0x160>)
 8005dae:	4613      	mov	r3, r2
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	4413      	add	r3, r2
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	440b      	add	r3, r1
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d901      	bls.n	8005dc2 <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8005dc2:	4b11      	ldr	r3, [pc, #68]	; (8005e08 <xTaskIncrementTick+0x168>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d007      	beq.n	8005dda <xTaskIncrementTick+0x13a>
                {
                    xSwitchRequired = pdTRUE;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	617b      	str	r3, [r7, #20]
 8005dce:	e004      	b.n	8005dda <xTaskIncrementTick+0x13a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8005dd0:	4b0e      	ldr	r3, [pc, #56]	; (8005e0c <xTaskIncrementTick+0x16c>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	3301      	adds	r3, #1
 8005dd6:	4a0d      	ldr	r2, [pc, #52]	; (8005e0c <xTaskIncrementTick+0x16c>)
 8005dd8:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8005dda:	697b      	ldr	r3, [r7, #20]
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3718      	adds	r7, #24
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}
 8005de4:	2000020c 	.word	0x2000020c
 8005de8:	200001e8 	.word	0x200001e8
 8005dec:	2000019c 	.word	0x2000019c
 8005df0:	200001a0 	.word	0x200001a0
 8005df4:	200001fc 	.word	0x200001fc
 8005df8:	20000204 	.word	0x20000204
 8005dfc:	200001ec 	.word	0x200001ec
 8005e00:	20000110 	.word	0x20000110
 8005e04:	2000010c 	.word	0x2000010c
 8005e08:	200001f8 	.word	0x200001f8
 8005e0c:	200001f4 	.word	0x200001f4

08005e10 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005e10:	b480      	push	{r7}
 8005e12:	b087      	sub	sp, #28
 8005e14:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005e16:	4b27      	ldr	r3, [pc, #156]	; (8005eb4 <vTaskSwitchContext+0xa4>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d003      	beq.n	8005e26 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8005e1e:	4b26      	ldr	r3, [pc, #152]	; (8005eb8 <vTaskSwitchContext+0xa8>)
 8005e20:	2201      	movs	r2, #1
 8005e22:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8005e24:	e03f      	b.n	8005ea6 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8005e26:	4b24      	ldr	r3, [pc, #144]	; (8005eb8 <vTaskSwitchContext+0xa8>)
 8005e28:	2200      	movs	r2, #0
 8005e2a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e2c:	4b23      	ldr	r3, [pc, #140]	; (8005ebc <vTaskSwitchContext+0xac>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	fab3 f383 	clz	r3, r3
 8005e38:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8005e3a:	7afb      	ldrb	r3, [r7, #11]
 8005e3c:	f1c3 031f 	rsb	r3, r3, #31
 8005e40:	617b      	str	r3, [r7, #20]
 8005e42:	491f      	ldr	r1, [pc, #124]	; (8005ec0 <vTaskSwitchContext+0xb0>)
 8005e44:	697a      	ldr	r2, [r7, #20]
 8005e46:	4613      	mov	r3, r2
 8005e48:	009b      	lsls	r3, r3, #2
 8005e4a:	4413      	add	r3, r2
 8005e4c:	009b      	lsls	r3, r3, #2
 8005e4e:	440b      	add	r3, r1
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d10a      	bne.n	8005e6c <vTaskSwitchContext+0x5c>
        __asm volatile
 8005e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e5a:	f383 8811 	msr	BASEPRI, r3
 8005e5e:	f3bf 8f6f 	isb	sy
 8005e62:	f3bf 8f4f 	dsb	sy
 8005e66:	607b      	str	r3, [r7, #4]
    }
 8005e68:	bf00      	nop
 8005e6a:	e7fe      	b.n	8005e6a <vTaskSwitchContext+0x5a>
 8005e6c:	697a      	ldr	r2, [r7, #20]
 8005e6e:	4613      	mov	r3, r2
 8005e70:	009b      	lsls	r3, r3, #2
 8005e72:	4413      	add	r3, r2
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	4a12      	ldr	r2, [pc, #72]	; (8005ec0 <vTaskSwitchContext+0xb0>)
 8005e78:	4413      	add	r3, r2
 8005e7a:	613b      	str	r3, [r7, #16]
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	685a      	ldr	r2, [r3, #4]
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	605a      	str	r2, [r3, #4]
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	685a      	ldr	r2, [r3, #4]
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	3308      	adds	r3, #8
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d104      	bne.n	8005e9c <vTaskSwitchContext+0x8c>
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	685a      	ldr	r2, [r3, #4]
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	605a      	str	r2, [r3, #4]
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	68db      	ldr	r3, [r3, #12]
 8005ea2:	4a08      	ldr	r2, [pc, #32]	; (8005ec4 <vTaskSwitchContext+0xb4>)
 8005ea4:	6013      	str	r3, [r2, #0]
}
 8005ea6:	bf00      	nop
 8005ea8:	371c      	adds	r7, #28
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb0:	4770      	bx	lr
 8005eb2:	bf00      	nop
 8005eb4:	2000020c 	.word	0x2000020c
 8005eb8:	200001f8 	.word	0x200001f8
 8005ebc:	200001ec 	.word	0x200001ec
 8005ec0:	20000110 	.word	0x20000110
 8005ec4:	2000010c 	.word	0x2000010c

08005ec8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b084      	sub	sp, #16
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d10a      	bne.n	8005eee <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8005ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005edc:	f383 8811 	msr	BASEPRI, r3
 8005ee0:	f3bf 8f6f 	isb	sy
 8005ee4:	f3bf 8f4f 	dsb	sy
 8005ee8:	60fb      	str	r3, [r7, #12]
    }
 8005eea:	bf00      	nop
 8005eec:	e7fe      	b.n	8005eec <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005eee:	4b07      	ldr	r3, [pc, #28]	; (8005f0c <vTaskPlaceOnEventList+0x44>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	3318      	adds	r3, #24
 8005ef4:	4619      	mov	r1, r3
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f7fe fe69 	bl	8004bce <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005efc:	2101      	movs	r1, #1
 8005efe:	6838      	ldr	r0, [r7, #0]
 8005f00:	f000 fcc8 	bl	8006894 <prvAddCurrentTaskToDelayedList>
}
 8005f04:	bf00      	nop
 8005f06:	3710      	adds	r7, #16
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}
 8005f0c:	2000010c 	.word	0x2000010c

08005f10 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b086      	sub	sp, #24
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	60f8      	str	r0, [r7, #12]
 8005f18:	60b9      	str	r1, [r7, #8]
 8005f1a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d10a      	bne.n	8005f38 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8005f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f26:	f383 8811 	msr	BASEPRI, r3
 8005f2a:	f3bf 8f6f 	isb	sy
 8005f2e:	f3bf 8f4f 	dsb	sy
 8005f32:	617b      	str	r3, [r7, #20]
    }
 8005f34:	bf00      	nop
 8005f36:	e7fe      	b.n	8005f36 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005f38:	4b0a      	ldr	r3, [pc, #40]	; (8005f64 <vTaskPlaceOnEventListRestricted+0x54>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	3318      	adds	r3, #24
 8005f3e:	4619      	mov	r1, r3
 8005f40:	68f8      	ldr	r0, [r7, #12]
 8005f42:	f7fe fe20 	bl	8004b86 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d002      	beq.n	8005f52 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8005f4c:	f04f 33ff 	mov.w	r3, #4294967295
 8005f50:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005f52:	6879      	ldr	r1, [r7, #4]
 8005f54:	68b8      	ldr	r0, [r7, #8]
 8005f56:	f000 fc9d 	bl	8006894 <prvAddCurrentTaskToDelayedList>
    }
 8005f5a:	bf00      	nop
 8005f5c:	3718      	adds	r7, #24
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}
 8005f62:	bf00      	nop
 8005f64:	2000010c 	.word	0x2000010c

08005f68 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b086      	sub	sp, #24
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	68db      	ldr	r3, [r3, #12]
 8005f76:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d10a      	bne.n	8005f94 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8005f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f82:	f383 8811 	msr	BASEPRI, r3
 8005f86:	f3bf 8f6f 	isb	sy
 8005f8a:	f3bf 8f4f 	dsb	sy
 8005f8e:	60fb      	str	r3, [r7, #12]
    }
 8005f90:	bf00      	nop
 8005f92:	e7fe      	b.n	8005f92 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	3318      	adds	r3, #24
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f7fe fe51 	bl	8004c40 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f9e:	4b1d      	ldr	r3, [pc, #116]	; (8006014 <xTaskRemoveFromEventList+0xac>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d11c      	bne.n	8005fe0 <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	3304      	adds	r3, #4
 8005faa:	4618      	mov	r0, r3
 8005fac:	f7fe fe48 	bl	8004c40 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	409a      	lsls	r2, r3
 8005fb8:	4b17      	ldr	r3, [pc, #92]	; (8006018 <xTaskRemoveFromEventList+0xb0>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	4a16      	ldr	r2, [pc, #88]	; (8006018 <xTaskRemoveFromEventList+0xb0>)
 8005fc0:	6013      	str	r3, [r2, #0]
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fc6:	4613      	mov	r3, r2
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	4413      	add	r3, r2
 8005fcc:	009b      	lsls	r3, r3, #2
 8005fce:	4a13      	ldr	r2, [pc, #76]	; (800601c <xTaskRemoveFromEventList+0xb4>)
 8005fd0:	441a      	add	r2, r3
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	3304      	adds	r3, #4
 8005fd6:	4619      	mov	r1, r3
 8005fd8:	4610      	mov	r0, r2
 8005fda:	f7fe fdd4 	bl	8004b86 <vListInsertEnd>
 8005fde:	e005      	b.n	8005fec <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	3318      	adds	r3, #24
 8005fe4:	4619      	mov	r1, r3
 8005fe6:	480e      	ldr	r0, [pc, #56]	; (8006020 <xTaskRemoveFromEventList+0xb8>)
 8005fe8:	f7fe fdcd 	bl	8004b86 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ff0:	4b0c      	ldr	r3, [pc, #48]	; (8006024 <xTaskRemoveFromEventList+0xbc>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d905      	bls.n	8006006 <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8005ffe:	4b0a      	ldr	r3, [pc, #40]	; (8006028 <xTaskRemoveFromEventList+0xc0>)
 8006000:	2201      	movs	r2, #1
 8006002:	601a      	str	r2, [r3, #0]
 8006004:	e001      	b.n	800600a <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 8006006:	2300      	movs	r3, #0
 8006008:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800600a:	697b      	ldr	r3, [r7, #20]
}
 800600c:	4618      	mov	r0, r3
 800600e:	3718      	adds	r7, #24
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}
 8006014:	2000020c 	.word	0x2000020c
 8006018:	200001ec 	.word	0x200001ec
 800601c:	20000110 	.word	0x20000110
 8006020:	200001a4 	.word	0x200001a4
 8006024:	2000010c 	.word	0x2000010c
 8006028:	200001f8 	.word	0x200001f8

0800602c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800602c:	b480      	push	{r7}
 800602e:	b083      	sub	sp, #12
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006034:	4b06      	ldr	r3, [pc, #24]	; (8006050 <vTaskInternalSetTimeOutState+0x24>)
 8006036:	681a      	ldr	r2, [r3, #0]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800603c:	4b05      	ldr	r3, [pc, #20]	; (8006054 <vTaskInternalSetTimeOutState+0x28>)
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	605a      	str	r2, [r3, #4]
}
 8006044:	bf00      	nop
 8006046:	370c      	adds	r7, #12
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr
 8006050:	200001fc 	.word	0x200001fc
 8006054:	200001e8 	.word	0x200001e8

08006058 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b088      	sub	sp, #32
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d10a      	bne.n	800607e <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8006068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800606c:	f383 8811 	msr	BASEPRI, r3
 8006070:	f3bf 8f6f 	isb	sy
 8006074:	f3bf 8f4f 	dsb	sy
 8006078:	613b      	str	r3, [r7, #16]
    }
 800607a:	bf00      	nop
 800607c:	e7fe      	b.n	800607c <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d10a      	bne.n	800609a <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8006084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006088:	f383 8811 	msr	BASEPRI, r3
 800608c:	f3bf 8f6f 	isb	sy
 8006090:	f3bf 8f4f 	dsb	sy
 8006094:	60fb      	str	r3, [r7, #12]
    }
 8006096:	bf00      	nop
 8006098:	e7fe      	b.n	8006098 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800609a:	f001 f945 	bl	8007328 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800609e:	4b1f      	ldr	r3, [pc, #124]	; (800611c <xTaskCheckForTimeOut+0xc4>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	69ba      	ldr	r2, [r7, #24]
 80060aa:	1ad3      	subs	r3, r2, r3
 80060ac:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060b6:	d102      	bne.n	80060be <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80060b8:	2300      	movs	r3, #0
 80060ba:	61fb      	str	r3, [r7, #28]
 80060bc:	e026      	b.n	800610c <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	4b17      	ldr	r3, [pc, #92]	; (8006120 <xTaskCheckForTimeOut+0xc8>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d00a      	beq.n	80060e0 <xTaskCheckForTimeOut+0x88>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	69ba      	ldr	r2, [r7, #24]
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d305      	bcc.n	80060e0 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80060d4:	2301      	movs	r3, #1
 80060d6:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	2200      	movs	r2, #0
 80060dc:	601a      	str	r2, [r3, #0]
 80060de:	e015      	b.n	800610c <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	697a      	ldr	r2, [r7, #20]
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d20b      	bcs.n	8006102 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	1ad2      	subs	r2, r2, r3
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f7ff ff98 	bl	800602c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80060fc:	2300      	movs	r3, #0
 80060fe:	61fb      	str	r3, [r7, #28]
 8006100:	e004      	b.n	800610c <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	2200      	movs	r2, #0
 8006106:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8006108:	2301      	movs	r3, #1
 800610a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800610c:	f001 f93c 	bl	8007388 <vPortExitCritical>

    return xReturn;
 8006110:	69fb      	ldr	r3, [r7, #28]
}
 8006112:	4618      	mov	r0, r3
 8006114:	3720      	adds	r7, #32
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}
 800611a:	bf00      	nop
 800611c:	200001e8 	.word	0x200001e8
 8006120:	200001fc 	.word	0x200001fc

08006124 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006124:	b480      	push	{r7}
 8006126:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8006128:	4b03      	ldr	r3, [pc, #12]	; (8006138 <vTaskMissedYield+0x14>)
 800612a:	2201      	movs	r2, #1
 800612c:	601a      	str	r2, [r3, #0]
}
 800612e:	bf00      	nop
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr
 8006138:	200001f8 	.word	0x200001f8

0800613c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b082      	sub	sp, #8
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8006144:	f000 f852 	bl	80061ec <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006148:	4b06      	ldr	r3, [pc, #24]	; (8006164 <prvIdleTask+0x28>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	2b01      	cmp	r3, #1
 800614e:	d9f9      	bls.n	8006144 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8006150:	4b05      	ldr	r3, [pc, #20]	; (8006168 <prvIdleTask+0x2c>)
 8006152:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006156:	601a      	str	r2, [r3, #0]
 8006158:	f3bf 8f4f 	dsb	sy
 800615c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8006160:	e7f0      	b.n	8006144 <prvIdleTask+0x8>
 8006162:	bf00      	nop
 8006164:	20000110 	.word	0x20000110
 8006168:	e000ed04 	.word	0xe000ed04

0800616c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b082      	sub	sp, #8
 8006170:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006172:	2300      	movs	r3, #0
 8006174:	607b      	str	r3, [r7, #4]
 8006176:	e00c      	b.n	8006192 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	4613      	mov	r3, r2
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	4413      	add	r3, r2
 8006180:	009b      	lsls	r3, r3, #2
 8006182:	4a12      	ldr	r2, [pc, #72]	; (80061cc <prvInitialiseTaskLists+0x60>)
 8006184:	4413      	add	r3, r2
 8006186:	4618      	mov	r0, r3
 8006188:	f7fe fcd0 	bl	8004b2c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	3301      	adds	r3, #1
 8006190:	607b      	str	r3, [r7, #4]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2b04      	cmp	r3, #4
 8006196:	d9ef      	bls.n	8006178 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8006198:	480d      	ldr	r0, [pc, #52]	; (80061d0 <prvInitialiseTaskLists+0x64>)
 800619a:	f7fe fcc7 	bl	8004b2c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800619e:	480d      	ldr	r0, [pc, #52]	; (80061d4 <prvInitialiseTaskLists+0x68>)
 80061a0:	f7fe fcc4 	bl	8004b2c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80061a4:	480c      	ldr	r0, [pc, #48]	; (80061d8 <prvInitialiseTaskLists+0x6c>)
 80061a6:	f7fe fcc1 	bl	8004b2c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80061aa:	480c      	ldr	r0, [pc, #48]	; (80061dc <prvInitialiseTaskLists+0x70>)
 80061ac:	f7fe fcbe 	bl	8004b2c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80061b0:	480b      	ldr	r0, [pc, #44]	; (80061e0 <prvInitialiseTaskLists+0x74>)
 80061b2:	f7fe fcbb 	bl	8004b2c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80061b6:	4b0b      	ldr	r3, [pc, #44]	; (80061e4 <prvInitialiseTaskLists+0x78>)
 80061b8:	4a05      	ldr	r2, [pc, #20]	; (80061d0 <prvInitialiseTaskLists+0x64>)
 80061ba:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80061bc:	4b0a      	ldr	r3, [pc, #40]	; (80061e8 <prvInitialiseTaskLists+0x7c>)
 80061be:	4a05      	ldr	r2, [pc, #20]	; (80061d4 <prvInitialiseTaskLists+0x68>)
 80061c0:	601a      	str	r2, [r3, #0]
}
 80061c2:	bf00      	nop
 80061c4:	3708      	adds	r7, #8
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}
 80061ca:	bf00      	nop
 80061cc:	20000110 	.word	0x20000110
 80061d0:	20000174 	.word	0x20000174
 80061d4:	20000188 	.word	0x20000188
 80061d8:	200001a4 	.word	0x200001a4
 80061dc:	200001b8 	.word	0x200001b8
 80061e0:	200001d0 	.word	0x200001d0
 80061e4:	2000019c 	.word	0x2000019c
 80061e8:	200001a0 	.word	0x200001a0

080061ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b082      	sub	sp, #8
 80061f0:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80061f2:	e019      	b.n	8006228 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80061f4:	f001 f898 	bl	8007328 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061f8:	4b10      	ldr	r3, [pc, #64]	; (800623c <prvCheckTasksWaitingTermination+0x50>)
 80061fa:	68db      	ldr	r3, [r3, #12]
 80061fc:	68db      	ldr	r3, [r3, #12]
 80061fe:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	3304      	adds	r3, #4
 8006204:	4618      	mov	r0, r3
 8006206:	f7fe fd1b 	bl	8004c40 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800620a:	4b0d      	ldr	r3, [pc, #52]	; (8006240 <prvCheckTasksWaitingTermination+0x54>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	3b01      	subs	r3, #1
 8006210:	4a0b      	ldr	r2, [pc, #44]	; (8006240 <prvCheckTasksWaitingTermination+0x54>)
 8006212:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8006214:	4b0b      	ldr	r3, [pc, #44]	; (8006244 <prvCheckTasksWaitingTermination+0x58>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	3b01      	subs	r3, #1
 800621a:	4a0a      	ldr	r2, [pc, #40]	; (8006244 <prvCheckTasksWaitingTermination+0x58>)
 800621c:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800621e:	f001 f8b3 	bl	8007388 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f000 f810 	bl	8006248 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006228:	4b06      	ldr	r3, [pc, #24]	; (8006244 <prvCheckTasksWaitingTermination+0x58>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d1e1      	bne.n	80061f4 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8006230:	bf00      	nop
 8006232:	bf00      	nop
 8006234:	3708      	adds	r7, #8
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}
 800623a:	bf00      	nop
 800623c:	200001b8 	.word	0x200001b8
 8006240:	200001e4 	.word	0x200001e4
 8006244:	200001cc 	.word	0x200001cc

08006248 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8006248:	b580      	push	{r7, lr}
 800624a:	b082      	sub	sp, #8
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006254:	4618      	mov	r0, r3
 8006256:	f001 fa69 	bl	800772c <vPortFree>
                vPortFree( pxTCB );
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f001 fa66 	bl	800772c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8006260:	bf00      	nop
 8006262:	3708      	adds	r7, #8
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}

08006268 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006268:	b480      	push	{r7}
 800626a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800626c:	4b0a      	ldr	r3, [pc, #40]	; (8006298 <prvResetNextTaskUnblockTime+0x30>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d104      	bne.n	8006280 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8006276:	4b09      	ldr	r3, [pc, #36]	; (800629c <prvResetNextTaskUnblockTime+0x34>)
 8006278:	f04f 32ff 	mov.w	r2, #4294967295
 800627c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800627e:	e005      	b.n	800628c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006280:	4b05      	ldr	r3, [pc, #20]	; (8006298 <prvResetNextTaskUnblockTime+0x30>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	68db      	ldr	r3, [r3, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a04      	ldr	r2, [pc, #16]	; (800629c <prvResetNextTaskUnblockTime+0x34>)
 800628a:	6013      	str	r3, [r2, #0]
}
 800628c:	bf00      	nop
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr
 8006296:	bf00      	nop
 8006298:	2000019c 	.word	0x2000019c
 800629c:	20000204 	.word	0x20000204

080062a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80062a0:	b480      	push	{r7}
 80062a2:	b083      	sub	sp, #12
 80062a4:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80062a6:	4b0b      	ldr	r3, [pc, #44]	; (80062d4 <xTaskGetSchedulerState+0x34>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d102      	bne.n	80062b4 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80062ae:	2301      	movs	r3, #1
 80062b0:	607b      	str	r3, [r7, #4]
 80062b2:	e008      	b.n	80062c6 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062b4:	4b08      	ldr	r3, [pc, #32]	; (80062d8 <xTaskGetSchedulerState+0x38>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d102      	bne.n	80062c2 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80062bc:	2302      	movs	r3, #2
 80062be:	607b      	str	r3, [r7, #4]
 80062c0:	e001      	b.n	80062c6 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80062c2:	2300      	movs	r3, #0
 80062c4:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80062c6:	687b      	ldr	r3, [r7, #4]
    }
 80062c8:	4618      	mov	r0, r3
 80062ca:	370c      	adds	r7, #12
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr
 80062d4:	200001f0 	.word	0x200001f0
 80062d8:	2000020c 	.word	0x2000020c

080062dc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80062dc:	b580      	push	{r7, lr}
 80062de:	b086      	sub	sp, #24
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80062e8:	2300      	movs	r3, #0
 80062ea:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d063      	beq.n	80063ba <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80062f2:	4b34      	ldr	r3, [pc, #208]	; (80063c4 <xTaskPriorityDisinherit+0xe8>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	693a      	ldr	r2, [r7, #16]
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d00a      	beq.n	8006312 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 80062fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006300:	f383 8811 	msr	BASEPRI, r3
 8006304:	f3bf 8f6f 	isb	sy
 8006308:	f3bf 8f4f 	dsb	sy
 800630c:	60fb      	str	r3, [r7, #12]
    }
 800630e:	bf00      	nop
 8006310:	e7fe      	b.n	8006310 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006316:	2b00      	cmp	r3, #0
 8006318:	d10a      	bne.n	8006330 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 800631a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800631e:	f383 8811 	msr	BASEPRI, r3
 8006322:	f3bf 8f6f 	isb	sy
 8006326:	f3bf 8f4f 	dsb	sy
 800632a:	60bb      	str	r3, [r7, #8]
    }
 800632c:	bf00      	nop
 800632e:	e7fe      	b.n	800632e <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006334:	1e5a      	subs	r2, r3, #1
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006342:	429a      	cmp	r2, r3
 8006344:	d039      	beq.n	80063ba <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800634a:	2b00      	cmp	r3, #0
 800634c:	d135      	bne.n	80063ba <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	3304      	adds	r3, #4
 8006352:	4618      	mov	r0, r3
 8006354:	f7fe fc74 	bl	8004c40 <uxListRemove>
 8006358:	4603      	mov	r3, r0
 800635a:	2b00      	cmp	r3, #0
 800635c:	d10a      	bne.n	8006374 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006362:	2201      	movs	r2, #1
 8006364:	fa02 f303 	lsl.w	r3, r2, r3
 8006368:	43da      	mvns	r2, r3
 800636a:	4b17      	ldr	r3, [pc, #92]	; (80063c8 <xTaskPriorityDisinherit+0xec>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4013      	ands	r3, r2
 8006370:	4a15      	ldr	r2, [pc, #84]	; (80063c8 <xTaskPriorityDisinherit+0xec>)
 8006372:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006380:	f1c3 0205 	rsb	r2, r3, #5
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800638c:	2201      	movs	r2, #1
 800638e:	409a      	lsls	r2, r3
 8006390:	4b0d      	ldr	r3, [pc, #52]	; (80063c8 <xTaskPriorityDisinherit+0xec>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4313      	orrs	r3, r2
 8006396:	4a0c      	ldr	r2, [pc, #48]	; (80063c8 <xTaskPriorityDisinherit+0xec>)
 8006398:	6013      	str	r3, [r2, #0]
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800639e:	4613      	mov	r3, r2
 80063a0:	009b      	lsls	r3, r3, #2
 80063a2:	4413      	add	r3, r2
 80063a4:	009b      	lsls	r3, r3, #2
 80063a6:	4a09      	ldr	r2, [pc, #36]	; (80063cc <xTaskPriorityDisinherit+0xf0>)
 80063a8:	441a      	add	r2, r3
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	3304      	adds	r3, #4
 80063ae:	4619      	mov	r1, r3
 80063b0:	4610      	mov	r0, r2
 80063b2:	f7fe fbe8 	bl	8004b86 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80063b6:	2301      	movs	r3, #1
 80063b8:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80063ba:	697b      	ldr	r3, [r7, #20]
    }
 80063bc:	4618      	mov	r0, r3
 80063be:	3718      	adds	r7, #24
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}
 80063c4:	2000010c 	.word	0x2000010c
 80063c8:	200001ec 	.word	0x200001ec
 80063cc:	20000110 	.word	0x20000110

080063d0 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b086      	sub	sp, #24
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	60f8      	str	r0, [r7, #12]
 80063d8:	60b9      	str	r1, [r7, #8]
 80063da:	607a      	str	r2, [r7, #4]
 80063dc:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d00a      	beq.n	80063fa <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 80063e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e8:	f383 8811 	msr	BASEPRI, r3
 80063ec:	f3bf 8f6f 	isb	sy
 80063f0:	f3bf 8f4f 	dsb	sy
 80063f4:	613b      	str	r3, [r7, #16]
    }
 80063f6:	bf00      	nop
 80063f8:	e7fe      	b.n	80063f8 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 80063fa:	f000 ff95 	bl	8007328 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80063fe:	4b32      	ldr	r3, [pc, #200]	; (80064c8 <xTaskGenericNotifyWait+0xf8>)
 8006400:	681a      	ldr	r2, [r3, #0]
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	4413      	add	r3, r2
 8006406:	3354      	adds	r3, #84	; 0x54
 8006408:	781b      	ldrb	r3, [r3, #0]
 800640a:	b2db      	uxtb	r3, r3
 800640c:	2b02      	cmp	r3, #2
 800640e:	d022      	beq.n	8006456 <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8006410:	4b2d      	ldr	r3, [pc, #180]	; (80064c8 <xTaskGenericNotifyWait+0xf8>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	68fa      	ldr	r2, [r7, #12]
 8006416:	3214      	adds	r2, #20
 8006418:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800641c:	68ba      	ldr	r2, [r7, #8]
 800641e:	43d2      	mvns	r2, r2
 8006420:	4011      	ands	r1, r2
 8006422:	68fa      	ldr	r2, [r7, #12]
 8006424:	3214      	adds	r2, #20
 8006426:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 800642a:	4b27      	ldr	r3, [pc, #156]	; (80064c8 <xTaskGenericNotifyWait+0xf8>)
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	4413      	add	r3, r2
 8006432:	3354      	adds	r3, #84	; 0x54
 8006434:	2201      	movs	r2, #1
 8006436:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8006438:	6a3b      	ldr	r3, [r7, #32]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d00b      	beq.n	8006456 <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800643e:	2101      	movs	r1, #1
 8006440:	6a38      	ldr	r0, [r7, #32]
 8006442:	f000 fa27 	bl	8006894 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8006446:	4b21      	ldr	r3, [pc, #132]	; (80064cc <xTaskGenericNotifyWait+0xfc>)
 8006448:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800644c:	601a      	str	r2, [r3, #0]
 800644e:	f3bf 8f4f 	dsb	sy
 8006452:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8006456:	f000 ff97 	bl	8007388 <vPortExitCritical>

        taskENTER_CRITICAL();
 800645a:	f000 ff65 	bl	8007328 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );

            if( pulNotificationValue != NULL )
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d007      	beq.n	8006474 <xTaskGenericNotifyWait+0xa4>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8006464:	4b18      	ldr	r3, [pc, #96]	; (80064c8 <xTaskGenericNotifyWait+0xf8>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	68fa      	ldr	r2, [r7, #12]
 800646a:	3214      	adds	r2, #20
 800646c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8006474:	4b14      	ldr	r3, [pc, #80]	; (80064c8 <xTaskGenericNotifyWait+0xf8>)
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	4413      	add	r3, r2
 800647c:	3354      	adds	r3, #84	; 0x54
 800647e:	781b      	ldrb	r3, [r3, #0]
 8006480:	b2db      	uxtb	r3, r3
 8006482:	2b02      	cmp	r3, #2
 8006484:	d002      	beq.n	800648c <xTaskGenericNotifyWait+0xbc>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8006486:	2300      	movs	r3, #0
 8006488:	617b      	str	r3, [r7, #20]
 800648a:	e00e      	b.n	80064aa <xTaskGenericNotifyWait+0xda>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 800648c:	4b0e      	ldr	r3, [pc, #56]	; (80064c8 <xTaskGenericNotifyWait+0xf8>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	68fa      	ldr	r2, [r7, #12]
 8006492:	3214      	adds	r2, #20
 8006494:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006498:	687a      	ldr	r2, [r7, #4]
 800649a:	43d2      	mvns	r2, r2
 800649c:	4011      	ands	r1, r2
 800649e:	68fa      	ldr	r2, [r7, #12]
 80064a0:	3214      	adds	r2, #20
 80064a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 80064a6:	2301      	movs	r3, #1
 80064a8:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 80064aa:	4b07      	ldr	r3, [pc, #28]	; (80064c8 <xTaskGenericNotifyWait+0xf8>)
 80064ac:	681a      	ldr	r2, [r3, #0]
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	4413      	add	r3, r2
 80064b2:	3354      	adds	r3, #84	; 0x54
 80064b4:	2200      	movs	r2, #0
 80064b6:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 80064b8:	f000 ff66 	bl	8007388 <vPortExitCritical>

        return xReturn;
 80064bc:	697b      	ldr	r3, [r7, #20]
    }
 80064be:	4618      	mov	r0, r3
 80064c0:	3718      	adds	r7, #24
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}
 80064c6:	bf00      	nop
 80064c8:	2000010c 	.word	0x2000010c
 80064cc:	e000ed04 	.word	0xe000ed04

080064d0 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b08c      	sub	sp, #48	; 0x30
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	60f8      	str	r0, [r7, #12]
 80064d8:	60b9      	str	r1, [r7, #8]
 80064da:	607a      	str	r2, [r7, #4]
 80064dc:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 80064de:	2301      	movs	r3, #1
 80064e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d00a      	beq.n	80064fe <xTaskGenericNotify+0x2e>
        __asm volatile
 80064e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ec:	f383 8811 	msr	BASEPRI, r3
 80064f0:	f3bf 8f6f 	isb	sy
 80064f4:	f3bf 8f4f 	dsb	sy
 80064f8:	623b      	str	r3, [r7, #32]
    }
 80064fa:	bf00      	nop
 80064fc:	e7fe      	b.n	80064fc <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d10a      	bne.n	800651a <xTaskGenericNotify+0x4a>
        __asm volatile
 8006504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006508:	f383 8811 	msr	BASEPRI, r3
 800650c:	f3bf 8f6f 	isb	sy
 8006510:	f3bf 8f4f 	dsb	sy
 8006514:	61fb      	str	r3, [r7, #28]
    }
 8006516:	bf00      	nop
 8006518:	e7fe      	b.n	8006518 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 800651e:	f000 ff03 	bl	8007328 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8006522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006524:	2b00      	cmp	r3, #0
 8006526:	d006      	beq.n	8006536 <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8006528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800652a:	68ba      	ldr	r2, [r7, #8]
 800652c:	3214      	adds	r2, #20
 800652e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006534:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8006536:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	4413      	add	r3, r2
 800653c:	3354      	adds	r3, #84	; 0x54
 800653e:	781b      	ldrb	r3, [r3, #0]
 8006540:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8006544:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	4413      	add	r3, r2
 800654a:	3354      	adds	r3, #84	; 0x54
 800654c:	2202      	movs	r2, #2
 800654e:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8006550:	78fb      	ldrb	r3, [r7, #3]
 8006552:	2b04      	cmp	r3, #4
 8006554:	d83b      	bhi.n	80065ce <xTaskGenericNotify+0xfe>
 8006556:	a201      	add	r2, pc, #4	; (adr r2, 800655c <xTaskGenericNotify+0x8c>)
 8006558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800655c:	080065ed 	.word	0x080065ed
 8006560:	08006571 	.word	0x08006571
 8006564:	0800658d 	.word	0x0800658d
 8006568:	080065a5 	.word	0x080065a5
 800656c:	080065b3 	.word	0x080065b3
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8006570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006572:	68ba      	ldr	r2, [r7, #8]
 8006574:	3214      	adds	r2, #20
 8006576:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	ea42 0103 	orr.w	r1, r2, r3
 8006580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006582:	68ba      	ldr	r2, [r7, #8]
 8006584:	3214      	adds	r2, #20
 8006586:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800658a:	e032      	b.n	80065f2 <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 800658c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800658e:	68ba      	ldr	r2, [r7, #8]
 8006590:	3214      	adds	r2, #20
 8006592:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006596:	1c59      	adds	r1, r3, #1
 8006598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800659a:	68ba      	ldr	r2, [r7, #8]
 800659c:	3214      	adds	r2, #20
 800659e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80065a2:	e026      	b.n	80065f2 <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80065a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a6:	68ba      	ldr	r2, [r7, #8]
 80065a8:	3214      	adds	r2, #20
 80065aa:	6879      	ldr	r1, [r7, #4]
 80065ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80065b0:	e01f      	b.n	80065f2 <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80065b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80065b6:	2b02      	cmp	r3, #2
 80065b8:	d006      	beq.n	80065c8 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80065ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065bc:	68ba      	ldr	r2, [r7, #8]
 80065be:	3214      	adds	r2, #20
 80065c0:	6879      	ldr	r1, [r7, #4]
 80065c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80065c6:	e014      	b.n	80065f2 <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 80065c8:	2300      	movs	r3, #0
 80065ca:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 80065cc:	e011      	b.n	80065f2 <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80065ce:	4b2b      	ldr	r3, [pc, #172]	; (800667c <xTaskGenericNotify+0x1ac>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d00c      	beq.n	80065f0 <xTaskGenericNotify+0x120>
        __asm volatile
 80065d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065da:	f383 8811 	msr	BASEPRI, r3
 80065de:	f3bf 8f6f 	isb	sy
 80065e2:	f3bf 8f4f 	dsb	sy
 80065e6:	61bb      	str	r3, [r7, #24]
    }
 80065e8:	bf00      	nop
 80065ea:	e7fe      	b.n	80065ea <xTaskGenericNotify+0x11a>
                    break;
 80065ec:	bf00      	nop
 80065ee:	e000      	b.n	80065f2 <xTaskGenericNotify+0x122>

                    break;
 80065f0:	bf00      	nop

            traceTASK_NOTIFY(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80065f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80065f6:	2b01      	cmp	r3, #1
 80065f8:	d139      	bne.n	800666e <xTaskGenericNotify+0x19e>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80065fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065fc:	3304      	adds	r3, #4
 80065fe:	4618      	mov	r0, r3
 8006600:	f7fe fb1e 	bl	8004c40 <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 8006604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006608:	2201      	movs	r2, #1
 800660a:	409a      	lsls	r2, r3
 800660c:	4b1c      	ldr	r3, [pc, #112]	; (8006680 <xTaskGenericNotify+0x1b0>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4313      	orrs	r3, r2
 8006612:	4a1b      	ldr	r2, [pc, #108]	; (8006680 <xTaskGenericNotify+0x1b0>)
 8006614:	6013      	str	r3, [r2, #0]
 8006616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006618:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800661a:	4613      	mov	r3, r2
 800661c:	009b      	lsls	r3, r3, #2
 800661e:	4413      	add	r3, r2
 8006620:	009b      	lsls	r3, r3, #2
 8006622:	4a18      	ldr	r2, [pc, #96]	; (8006684 <xTaskGenericNotify+0x1b4>)
 8006624:	441a      	add	r2, r3
 8006626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006628:	3304      	adds	r3, #4
 800662a:	4619      	mov	r1, r3
 800662c:	4610      	mov	r0, r2
 800662e:	f7fe faaa 	bl	8004b86 <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006636:	2b00      	cmp	r3, #0
 8006638:	d00a      	beq.n	8006650 <xTaskGenericNotify+0x180>
        __asm volatile
 800663a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800663e:	f383 8811 	msr	BASEPRI, r3
 8006642:	f3bf 8f6f 	isb	sy
 8006646:	f3bf 8f4f 	dsb	sy
 800664a:	617b      	str	r3, [r7, #20]
    }
 800664c:	bf00      	nop
 800664e:	e7fe      	b.n	800664e <xTaskGenericNotify+0x17e>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006654:	4b0c      	ldr	r3, [pc, #48]	; (8006688 <xTaskGenericNotify+0x1b8>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800665a:	429a      	cmp	r2, r3
 800665c:	d907      	bls.n	800666e <xTaskGenericNotify+0x19e>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 800665e:	4b0b      	ldr	r3, [pc, #44]	; (800668c <xTaskGenericNotify+0x1bc>)
 8006660:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006664:	601a      	str	r2, [r3, #0]
 8006666:	f3bf 8f4f 	dsb	sy
 800666a:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800666e:	f000 fe8b 	bl	8007388 <vPortExitCritical>

        return xReturn;
 8006672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8006674:	4618      	mov	r0, r3
 8006676:	3730      	adds	r7, #48	; 0x30
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}
 800667c:	200001e8 	.word	0x200001e8
 8006680:	200001ec 	.word	0x200001ec
 8006684:	20000110 	.word	0x20000110
 8006688:	2000010c 	.word	0x2000010c
 800668c:	e000ed04 	.word	0xe000ed04

08006690 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8006690:	b580      	push	{r7, lr}
 8006692:	b090      	sub	sp, #64	; 0x40
 8006694:	af00      	add	r7, sp, #0
 8006696:	60f8      	str	r0, [r7, #12]
 8006698:	60b9      	str	r1, [r7, #8]
 800669a:	607a      	str	r2, [r7, #4]
 800669c:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 800669e:	2301      	movs	r3, #1
 80066a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d10a      	bne.n	80066be <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 80066a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ac:	f383 8811 	msr	BASEPRI, r3
 80066b0:	f3bf 8f6f 	isb	sy
 80066b4:	f3bf 8f4f 	dsb	sy
 80066b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 80066ba:	bf00      	nop
 80066bc:	e7fe      	b.n	80066bc <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d00a      	beq.n	80066da <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 80066c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066c8:	f383 8811 	msr	BASEPRI, r3
 80066cc:	f3bf 8f6f 	isb	sy
 80066d0:	f3bf 8f4f 	dsb	sy
 80066d4:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80066d6:	bf00      	nop
 80066d8:	e7fe      	b.n	80066d8 <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80066da:	f000 ff07 	bl	80074ec <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	63bb      	str	r3, [r7, #56]	; 0x38
        __asm volatile
 80066e2:	f3ef 8211 	mrs	r2, BASEPRI
 80066e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ea:	f383 8811 	msr	BASEPRI, r3
 80066ee:	f3bf 8f6f 	isb	sy
 80066f2:	f3bf 8f4f 	dsb	sy
 80066f6:	627a      	str	r2, [r7, #36]	; 0x24
 80066f8:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 80066fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80066fc:	637b      	str	r3, [r7, #52]	; 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 80066fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006700:	2b00      	cmp	r3, #0
 8006702:	d006      	beq.n	8006712 <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8006704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006706:	68ba      	ldr	r2, [r7, #8]
 8006708:	3214      	adds	r2, #20
 800670a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800670e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006710:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8006712:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	4413      	add	r3, r2
 8006718:	3354      	adds	r3, #84	; 0x54
 800671a:	781b      	ldrb	r3, [r3, #0]
 800671c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8006720:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	4413      	add	r3, r2
 8006726:	3354      	adds	r3, #84	; 0x54
 8006728:	2202      	movs	r2, #2
 800672a:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 800672c:	78fb      	ldrb	r3, [r7, #3]
 800672e:	2b04      	cmp	r3, #4
 8006730:	d83b      	bhi.n	80067aa <xTaskGenericNotifyFromISR+0x11a>
 8006732:	a201      	add	r2, pc, #4	; (adr r2, 8006738 <xTaskGenericNotifyFromISR+0xa8>)
 8006734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006738:	080067c9 	.word	0x080067c9
 800673c:	0800674d 	.word	0x0800674d
 8006740:	08006769 	.word	0x08006769
 8006744:	08006781 	.word	0x08006781
 8006748:	0800678f 	.word	0x0800678f
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 800674c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800674e:	68ba      	ldr	r2, [r7, #8]
 8006750:	3214      	adds	r2, #20
 8006752:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	ea42 0103 	orr.w	r1, r2, r3
 800675c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800675e:	68ba      	ldr	r2, [r7, #8]
 8006760:	3214      	adds	r2, #20
 8006762:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006766:	e032      	b.n	80067ce <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8006768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800676a:	68ba      	ldr	r2, [r7, #8]
 800676c:	3214      	adds	r2, #20
 800676e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006772:	1c59      	adds	r1, r3, #1
 8006774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006776:	68ba      	ldr	r2, [r7, #8]
 8006778:	3214      	adds	r2, #20
 800677a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800677e:	e026      	b.n	80067ce <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8006780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006782:	68ba      	ldr	r2, [r7, #8]
 8006784:	3214      	adds	r2, #20
 8006786:	6879      	ldr	r1, [r7, #4]
 8006788:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800678c:	e01f      	b.n	80067ce <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800678e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006792:	2b02      	cmp	r3, #2
 8006794:	d006      	beq.n	80067a4 <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8006796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006798:	68ba      	ldr	r2, [r7, #8]
 800679a:	3214      	adds	r2, #20
 800679c:	6879      	ldr	r1, [r7, #4]
 800679e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80067a2:	e014      	b.n	80067ce <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 80067a4:	2300      	movs	r3, #0
 80067a6:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 80067a8:	e011      	b.n	80067ce <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80067aa:	4b33      	ldr	r3, [pc, #204]	; (8006878 <xTaskGenericNotifyFromISR+0x1e8>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d00c      	beq.n	80067cc <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 80067b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b6:	f383 8811 	msr	BASEPRI, r3
 80067ba:	f3bf 8f6f 	isb	sy
 80067be:	f3bf 8f4f 	dsb	sy
 80067c2:	61fb      	str	r3, [r7, #28]
    }
 80067c4:	bf00      	nop
 80067c6:	e7fe      	b.n	80067c6 <xTaskGenericNotifyFromISR+0x136>
                    break;
 80067c8:	bf00      	nop
 80067ca:	e000      	b.n	80067ce <xTaskGenericNotifyFromISR+0x13e>
                    break;
 80067cc:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80067ce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	d145      	bne.n	8006862 <xTaskGenericNotifyFromISR+0x1d2>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80067d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d00a      	beq.n	80067f4 <xTaskGenericNotifyFromISR+0x164>
        __asm volatile
 80067de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e2:	f383 8811 	msr	BASEPRI, r3
 80067e6:	f3bf 8f6f 	isb	sy
 80067ea:	f3bf 8f4f 	dsb	sy
 80067ee:	61bb      	str	r3, [r7, #24]
    }
 80067f0:	bf00      	nop
 80067f2:	e7fe      	b.n	80067f2 <xTaskGenericNotifyFromISR+0x162>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80067f4:	4b21      	ldr	r3, [pc, #132]	; (800687c <xTaskGenericNotifyFromISR+0x1ec>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d11c      	bne.n	8006836 <xTaskGenericNotifyFromISR+0x1a6>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80067fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067fe:	3304      	adds	r3, #4
 8006800:	4618      	mov	r0, r3
 8006802:	f7fe fa1d 	bl	8004c40 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8006806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800680a:	2201      	movs	r2, #1
 800680c:	409a      	lsls	r2, r3
 800680e:	4b1c      	ldr	r3, [pc, #112]	; (8006880 <xTaskGenericNotifyFromISR+0x1f0>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4313      	orrs	r3, r2
 8006814:	4a1a      	ldr	r2, [pc, #104]	; (8006880 <xTaskGenericNotifyFromISR+0x1f0>)
 8006816:	6013      	str	r3, [r2, #0]
 8006818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800681a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800681c:	4613      	mov	r3, r2
 800681e:	009b      	lsls	r3, r3, #2
 8006820:	4413      	add	r3, r2
 8006822:	009b      	lsls	r3, r3, #2
 8006824:	4a17      	ldr	r2, [pc, #92]	; (8006884 <xTaskGenericNotifyFromISR+0x1f4>)
 8006826:	441a      	add	r2, r3
 8006828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800682a:	3304      	adds	r3, #4
 800682c:	4619      	mov	r1, r3
 800682e:	4610      	mov	r0, r2
 8006830:	f7fe f9a9 	bl	8004b86 <vListInsertEnd>
 8006834:	e005      	b.n	8006842 <xTaskGenericNotifyFromISR+0x1b2>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006838:	3318      	adds	r3, #24
 800683a:	4619      	mov	r1, r3
 800683c:	4812      	ldr	r0, [pc, #72]	; (8006888 <xTaskGenericNotifyFromISR+0x1f8>)
 800683e:	f7fe f9a2 	bl	8004b86 <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006846:	4b11      	ldr	r3, [pc, #68]	; (800688c <xTaskGenericNotifyFromISR+0x1fc>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800684c:	429a      	cmp	r2, r3
 800684e:	d908      	bls.n	8006862 <xTaskGenericNotifyFromISR+0x1d2>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8006850:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006852:	2b00      	cmp	r3, #0
 8006854:	d002      	beq.n	800685c <xTaskGenericNotifyFromISR+0x1cc>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8006856:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006858:	2201      	movs	r2, #1
 800685a:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 800685c:	4b0c      	ldr	r3, [pc, #48]	; (8006890 <xTaskGenericNotifyFromISR+0x200>)
 800685e:	2201      	movs	r2, #1
 8006860:	601a      	str	r2, [r3, #0]
 8006862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006864:	617b      	str	r3, [r7, #20]
        __asm volatile
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	f383 8811 	msr	BASEPRI, r3
    }
 800686c:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 800686e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }
 8006870:	4618      	mov	r0, r3
 8006872:	3740      	adds	r7, #64	; 0x40
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}
 8006878:	200001e8 	.word	0x200001e8
 800687c:	2000020c 	.word	0x2000020c
 8006880:	200001ec 	.word	0x200001ec
 8006884:	20000110 	.word	0x20000110
 8006888:	200001a4 	.word	0x200001a4
 800688c:	2000010c 	.word	0x2000010c
 8006890:	200001f8 	.word	0x200001f8

08006894 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b084      	sub	sp, #16
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
 800689c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800689e:	4b29      	ldr	r3, [pc, #164]	; (8006944 <prvAddCurrentTaskToDelayedList+0xb0>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80068a4:	4b28      	ldr	r3, [pc, #160]	; (8006948 <prvAddCurrentTaskToDelayedList+0xb4>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	3304      	adds	r3, #4
 80068aa:	4618      	mov	r0, r3
 80068ac:	f7fe f9c8 	bl	8004c40 <uxListRemove>
 80068b0:	4603      	mov	r3, r0
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d10b      	bne.n	80068ce <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80068b6:	4b24      	ldr	r3, [pc, #144]	; (8006948 <prvAddCurrentTaskToDelayedList+0xb4>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068bc:	2201      	movs	r2, #1
 80068be:	fa02 f303 	lsl.w	r3, r2, r3
 80068c2:	43da      	mvns	r2, r3
 80068c4:	4b21      	ldr	r3, [pc, #132]	; (800694c <prvAddCurrentTaskToDelayedList+0xb8>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4013      	ands	r3, r2
 80068ca:	4a20      	ldr	r2, [pc, #128]	; (800694c <prvAddCurrentTaskToDelayedList+0xb8>)
 80068cc:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068d4:	d10a      	bne.n	80068ec <prvAddCurrentTaskToDelayedList+0x58>
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d007      	beq.n	80068ec <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80068dc:	4b1a      	ldr	r3, [pc, #104]	; (8006948 <prvAddCurrentTaskToDelayedList+0xb4>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	3304      	adds	r3, #4
 80068e2:	4619      	mov	r1, r3
 80068e4:	481a      	ldr	r0, [pc, #104]	; (8006950 <prvAddCurrentTaskToDelayedList+0xbc>)
 80068e6:	f7fe f94e 	bl	8004b86 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80068ea:	e026      	b.n	800693a <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80068ec:	68fa      	ldr	r2, [r7, #12]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	4413      	add	r3, r2
 80068f2:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80068f4:	4b14      	ldr	r3, [pc, #80]	; (8006948 <prvAddCurrentTaskToDelayedList+0xb4>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	68ba      	ldr	r2, [r7, #8]
 80068fa:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80068fc:	68ba      	ldr	r2, [r7, #8]
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	429a      	cmp	r2, r3
 8006902:	d209      	bcs.n	8006918 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006904:	4b13      	ldr	r3, [pc, #76]	; (8006954 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006906:	681a      	ldr	r2, [r3, #0]
 8006908:	4b0f      	ldr	r3, [pc, #60]	; (8006948 <prvAddCurrentTaskToDelayedList+0xb4>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	3304      	adds	r3, #4
 800690e:	4619      	mov	r1, r3
 8006910:	4610      	mov	r0, r2
 8006912:	f7fe f95c 	bl	8004bce <vListInsert>
}
 8006916:	e010      	b.n	800693a <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006918:	4b0f      	ldr	r3, [pc, #60]	; (8006958 <prvAddCurrentTaskToDelayedList+0xc4>)
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	4b0a      	ldr	r3, [pc, #40]	; (8006948 <prvAddCurrentTaskToDelayedList+0xb4>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	3304      	adds	r3, #4
 8006922:	4619      	mov	r1, r3
 8006924:	4610      	mov	r0, r2
 8006926:	f7fe f952 	bl	8004bce <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800692a:	4b0c      	ldr	r3, [pc, #48]	; (800695c <prvAddCurrentTaskToDelayedList+0xc8>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	68ba      	ldr	r2, [r7, #8]
 8006930:	429a      	cmp	r2, r3
 8006932:	d202      	bcs.n	800693a <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8006934:	4a09      	ldr	r2, [pc, #36]	; (800695c <prvAddCurrentTaskToDelayedList+0xc8>)
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	6013      	str	r3, [r2, #0]
}
 800693a:	bf00      	nop
 800693c:	3710      	adds	r7, #16
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}
 8006942:	bf00      	nop
 8006944:	200001e8 	.word	0x200001e8
 8006948:	2000010c 	.word	0x2000010c
 800694c:	200001ec 	.word	0x200001ec
 8006950:	200001d0 	.word	0x200001d0
 8006954:	200001a0 	.word	0x200001a0
 8006958:	2000019c 	.word	0x2000019c
 800695c:	20000204 	.word	0x20000204

08006960 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8006960:	b580      	push	{r7, lr}
 8006962:	b084      	sub	sp, #16
 8006964:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8006966:	2300      	movs	r3, #0
 8006968:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800696a:	f000 fb31 	bl	8006fd0 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800696e:	4b11      	ldr	r3, [pc, #68]	; (80069b4 <xTimerCreateTimerTask+0x54>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d00b      	beq.n	800698e <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8006976:	4b10      	ldr	r3, [pc, #64]	; (80069b8 <xTimerCreateTimerTask+0x58>)
 8006978:	9301      	str	r3, [sp, #4]
 800697a:	2302      	movs	r3, #2
 800697c:	9300      	str	r3, [sp, #0]
 800697e:	2300      	movs	r3, #0
 8006980:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006984:	490d      	ldr	r1, [pc, #52]	; (80069bc <xTimerCreateTimerTask+0x5c>)
 8006986:	480e      	ldr	r0, [pc, #56]	; (80069c0 <xTimerCreateTimerTask+0x60>)
 8006988:	f7fe ff38 	bl	80057fc <xTaskCreate>
 800698c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d10a      	bne.n	80069aa <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8006994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006998:	f383 8811 	msr	BASEPRI, r3
 800699c:	f3bf 8f6f 	isb	sy
 80069a0:	f3bf 8f4f 	dsb	sy
 80069a4:	603b      	str	r3, [r7, #0]
    }
 80069a6:	bf00      	nop
 80069a8:	e7fe      	b.n	80069a8 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80069aa:	687b      	ldr	r3, [r7, #4]
    }
 80069ac:	4618      	mov	r0, r3
 80069ae:	3708      	adds	r7, #8
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}
 80069b4:	20000240 	.word	0x20000240
 80069b8:	20000244 	.word	0x20000244
 80069bc:	08009008 	.word	0x08009008
 80069c0:	08006bb1 	.word	0x08006bb1

080069c4 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b088      	sub	sp, #32
 80069c8:	af02      	add	r7, sp, #8
 80069ca:	60f8      	str	r0, [r7, #12]
 80069cc:	60b9      	str	r1, [r7, #8]
 80069ce:	607a      	str	r2, [r7, #4]
 80069d0:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80069d2:	202c      	movs	r0, #44	; 0x2c
 80069d4:	f000 fdca 	bl	800756c <pvPortMalloc>
 80069d8:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d00d      	beq.n	80069fc <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	2200      	movs	r2, #0
 80069e4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	9301      	str	r3, [sp, #4]
 80069ec:	6a3b      	ldr	r3, [r7, #32]
 80069ee:	9300      	str	r3, [sp, #0]
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	687a      	ldr	r2, [r7, #4]
 80069f4:	68b9      	ldr	r1, [r7, #8]
 80069f6:	68f8      	ldr	r0, [r7, #12]
 80069f8:	f000 f805 	bl	8006a06 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 80069fc:	697b      	ldr	r3, [r7, #20]
        }
 80069fe:	4618      	mov	r0, r3
 8006a00:	3718      	adds	r7, #24
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}

08006a06 <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 8006a06:	b580      	push	{r7, lr}
 8006a08:	b086      	sub	sp, #24
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	60f8      	str	r0, [r7, #12]
 8006a0e:	60b9      	str	r1, [r7, #8]
 8006a10:	607a      	str	r2, [r7, #4]
 8006a12:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d10a      	bne.n	8006a30 <prvInitialiseNewTimer+0x2a>
        __asm volatile
 8006a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a1e:	f383 8811 	msr	BASEPRI, r3
 8006a22:	f3bf 8f6f 	isb	sy
 8006a26:	f3bf 8f4f 	dsb	sy
 8006a2a:	617b      	str	r3, [r7, #20]
    }
 8006a2c:	bf00      	nop
 8006a2e:	e7fe      	b.n	8006a2e <prvInitialiseNewTimer+0x28>

        if( pxNewTimer != NULL )
 8006a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d01e      	beq.n	8006a74 <prvInitialiseNewTimer+0x6e>
        {
            /* Ensure the infrastructure used by the timer service task has been
             * created/initialised. */
            prvCheckForValidListAndQueue();
 8006a36:	f000 facb 	bl	8006fd0 <prvCheckForValidListAndQueue>

            /* Initialise the timer structure members using the function
             * parameters. */
            pxNewTimer->pcTimerName = pcTimerName;
 8006a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a3c:	68fa      	ldr	r2, [r7, #12]
 8006a3e:	601a      	str	r2, [r3, #0]
            pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8006a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a42:	68ba      	ldr	r2, [r7, #8]
 8006a44:	619a      	str	r2, [r3, #24]
            pxNewTimer->pvTimerID = pvTimerID;
 8006a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a48:	683a      	ldr	r2, [r7, #0]
 8006a4a:	61da      	str	r2, [r3, #28]
            pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8006a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4e:	6a3a      	ldr	r2, [r7, #32]
 8006a50:	621a      	str	r2, [r3, #32]
            vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8006a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a54:	3304      	adds	r3, #4
 8006a56:	4618      	mov	r0, r3
 8006a58:	f7fe f888 	bl	8004b6c <vListInitialiseItem>

            if( uxAutoReload != pdFALSE )
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d008      	beq.n	8006a74 <prvInitialiseNewTimer+0x6e>
            {
                pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8006a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a68:	f043 0304 	orr.w	r3, r3, #4
 8006a6c:	b2da      	uxtb	r2, r3
 8006a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a70:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            }

            traceTIMER_CREATE( pxNewTimer );
        }
    }
 8006a74:	bf00      	nop
 8006a76:	3718      	adds	r7, #24
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}

08006a7c <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b08a      	sub	sp, #40	; 0x28
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	60f8      	str	r0, [r7, #12]
 8006a84:	60b9      	str	r1, [r7, #8]
 8006a86:	607a      	str	r2, [r7, #4]
 8006a88:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d10a      	bne.n	8006aaa <xTimerGenericCommand+0x2e>
        __asm volatile
 8006a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a98:	f383 8811 	msr	BASEPRI, r3
 8006a9c:	f3bf 8f6f 	isb	sy
 8006aa0:	f3bf 8f4f 	dsb	sy
 8006aa4:	623b      	str	r3, [r7, #32]
    }
 8006aa6:	bf00      	nop
 8006aa8:	e7fe      	b.n	8006aa8 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8006aaa:	4b1a      	ldr	r3, [pc, #104]	; (8006b14 <xTimerGenericCommand+0x98>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d02a      	beq.n	8006b08 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	2b05      	cmp	r3, #5
 8006ac2:	dc18      	bgt.n	8006af6 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006ac4:	f7ff fbec 	bl	80062a0 <xTaskGetSchedulerState>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	2b02      	cmp	r3, #2
 8006acc:	d109      	bne.n	8006ae2 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006ace:	4b11      	ldr	r3, [pc, #68]	; (8006b14 <xTimerGenericCommand+0x98>)
 8006ad0:	6818      	ldr	r0, [r3, #0]
 8006ad2:	f107 0114 	add.w	r1, r7, #20
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ada:	f7fe f9c5 	bl	8004e68 <xQueueGenericSend>
 8006ade:	6278      	str	r0, [r7, #36]	; 0x24
 8006ae0:	e012      	b.n	8006b08 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006ae2:	4b0c      	ldr	r3, [pc, #48]	; (8006b14 <xTimerGenericCommand+0x98>)
 8006ae4:	6818      	ldr	r0, [r3, #0]
 8006ae6:	f107 0114 	add.w	r1, r7, #20
 8006aea:	2300      	movs	r3, #0
 8006aec:	2200      	movs	r2, #0
 8006aee:	f7fe f9bb 	bl	8004e68 <xQueueGenericSend>
 8006af2:	6278      	str	r0, [r7, #36]	; 0x24
 8006af4:	e008      	b.n	8006b08 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006af6:	4b07      	ldr	r3, [pc, #28]	; (8006b14 <xTimerGenericCommand+0x98>)
 8006af8:	6818      	ldr	r0, [r3, #0]
 8006afa:	f107 0114 	add.w	r1, r7, #20
 8006afe:	2300      	movs	r3, #0
 8006b00:	683a      	ldr	r2, [r7, #0]
 8006b02:	f7fe faaf 	bl	8005064 <xQueueGenericSendFromISR>
 8006b06:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8006b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3728      	adds	r7, #40	; 0x28
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}
 8006b12:	bf00      	nop
 8006b14:	20000240 	.word	0x20000240

08006b18 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b088      	sub	sp, #32
 8006b1c:	af02      	add	r7, sp, #8
 8006b1e:	6078      	str	r0, [r7, #4]
 8006b20:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b22:	4b22      	ldr	r3, [pc, #136]	; (8006bac <prvProcessExpiredTimer+0x94>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	68db      	ldr	r3, [r3, #12]
 8006b28:	68db      	ldr	r3, [r3, #12]
 8006b2a:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	3304      	adds	r3, #4
 8006b30:	4618      	mov	r0, r3
 8006b32:	f7fe f885 	bl	8004c40 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b3c:	f003 0304 	and.w	r3, r3, #4
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d022      	beq.n	8006b8a <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	699a      	ldr	r2, [r3, #24]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	18d1      	adds	r1, r2, r3
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	683a      	ldr	r2, [r7, #0]
 8006b50:	6978      	ldr	r0, [r7, #20]
 8006b52:	f000 f8d1 	bl	8006cf8 <prvInsertTimerInActiveList>
 8006b56:	4603      	mov	r3, r0
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d01f      	beq.n	8006b9c <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	9300      	str	r3, [sp, #0]
 8006b60:	2300      	movs	r3, #0
 8006b62:	687a      	ldr	r2, [r7, #4]
 8006b64:	2100      	movs	r1, #0
 8006b66:	6978      	ldr	r0, [r7, #20]
 8006b68:	f7ff ff88 	bl	8006a7c <xTimerGenericCommand>
 8006b6c:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d113      	bne.n	8006b9c <prvProcessExpiredTimer+0x84>
        __asm volatile
 8006b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b78:	f383 8811 	msr	BASEPRI, r3
 8006b7c:	f3bf 8f6f 	isb	sy
 8006b80:	f3bf 8f4f 	dsb	sy
 8006b84:	60fb      	str	r3, [r7, #12]
    }
 8006b86:	bf00      	nop
 8006b88:	e7fe      	b.n	8006b88 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b90:	f023 0301 	bic.w	r3, r3, #1
 8006b94:	b2da      	uxtb	r2, r3
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	6a1b      	ldr	r3, [r3, #32]
 8006ba0:	6978      	ldr	r0, [r7, #20]
 8006ba2:	4798      	blx	r3
    }
 8006ba4:	bf00      	nop
 8006ba6:	3718      	adds	r7, #24
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}
 8006bac:	20000238 	.word	0x20000238

08006bb0 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b084      	sub	sp, #16
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006bb8:	f107 0308 	add.w	r3, r7, #8
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f000 f857 	bl	8006c70 <prvGetNextExpireTime>
 8006bc2:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	4619      	mov	r1, r3
 8006bc8:	68f8      	ldr	r0, [r7, #12]
 8006bca:	f000 f803 	bl	8006bd4 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8006bce:	f000 f8d5 	bl	8006d7c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006bd2:	e7f1      	b.n	8006bb8 <prvTimerTask+0x8>

08006bd4 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b084      	sub	sp, #16
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
 8006bdc:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8006bde:	f7fe ffa5 	bl	8005b2c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006be2:	f107 0308 	add.w	r3, r7, #8
 8006be6:	4618      	mov	r0, r3
 8006be8:	f000 f866 	bl	8006cb8 <prvSampleTimeNow>
 8006bec:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d130      	bne.n	8006c56 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d10a      	bne.n	8006c10 <prvProcessTimerOrBlockTask+0x3c>
 8006bfa:	687a      	ldr	r2, [r7, #4]
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	429a      	cmp	r2, r3
 8006c00:	d806      	bhi.n	8006c10 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8006c02:	f7fe ffa1 	bl	8005b48 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006c06:	68f9      	ldr	r1, [r7, #12]
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f7ff ff85 	bl	8006b18 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8006c0e:	e024      	b.n	8006c5a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d008      	beq.n	8006c28 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006c16:	4b13      	ldr	r3, [pc, #76]	; (8006c64 <prvProcessTimerOrBlockTask+0x90>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d101      	bne.n	8006c24 <prvProcessTimerOrBlockTask+0x50>
 8006c20:	2301      	movs	r3, #1
 8006c22:	e000      	b.n	8006c26 <prvProcessTimerOrBlockTask+0x52>
 8006c24:	2300      	movs	r3, #0
 8006c26:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006c28:	4b0f      	ldr	r3, [pc, #60]	; (8006c68 <prvProcessTimerOrBlockTask+0x94>)
 8006c2a:	6818      	ldr	r0, [r3, #0]
 8006c2c:	687a      	ldr	r2, [r7, #4]
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	1ad3      	subs	r3, r2, r3
 8006c32:	683a      	ldr	r2, [r7, #0]
 8006c34:	4619      	mov	r1, r3
 8006c36:	f7fe fdad 	bl	8005794 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8006c3a:	f7fe ff85 	bl	8005b48 <xTaskResumeAll>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d10a      	bne.n	8006c5a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8006c44:	4b09      	ldr	r3, [pc, #36]	; (8006c6c <prvProcessTimerOrBlockTask+0x98>)
 8006c46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c4a:	601a      	str	r2, [r3, #0]
 8006c4c:	f3bf 8f4f 	dsb	sy
 8006c50:	f3bf 8f6f 	isb	sy
    }
 8006c54:	e001      	b.n	8006c5a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8006c56:	f7fe ff77 	bl	8005b48 <xTaskResumeAll>
    }
 8006c5a:	bf00      	nop
 8006c5c:	3710      	adds	r7, #16
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}
 8006c62:	bf00      	nop
 8006c64:	2000023c 	.word	0x2000023c
 8006c68:	20000240 	.word	0x20000240
 8006c6c:	e000ed04 	.word	0xe000ed04

08006c70 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8006c70:	b480      	push	{r7}
 8006c72:	b085      	sub	sp, #20
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006c78:	4b0e      	ldr	r3, [pc, #56]	; (8006cb4 <prvGetNextExpireTime+0x44>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d101      	bne.n	8006c86 <prvGetNextExpireTime+0x16>
 8006c82:	2201      	movs	r2, #1
 8006c84:	e000      	b.n	8006c88 <prvGetNextExpireTime+0x18>
 8006c86:	2200      	movs	r2, #0
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d105      	bne.n	8006ca0 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006c94:	4b07      	ldr	r3, [pc, #28]	; (8006cb4 <prvGetNextExpireTime+0x44>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	68db      	ldr	r3, [r3, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	60fb      	str	r3, [r7, #12]
 8006c9e:	e001      	b.n	8006ca4 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
    }
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3714      	adds	r7, #20
 8006caa:	46bd      	mov	sp, r7
 8006cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb0:	4770      	bx	lr
 8006cb2:	bf00      	nop
 8006cb4:	20000238 	.word	0x20000238

08006cb8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b084      	sub	sp, #16
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8006cc0:	f7fe ffde 	bl	8005c80 <xTaskGetTickCount>
 8006cc4:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8006cc6:	4b0b      	ldr	r3, [pc, #44]	; (8006cf4 <prvSampleTimeNow+0x3c>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	68fa      	ldr	r2, [r7, #12]
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	d205      	bcs.n	8006cdc <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8006cd0:	f000 f91a 	bl	8006f08 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	601a      	str	r2, [r3, #0]
 8006cda:	e002      	b.n	8006ce2 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8006ce2:	4a04      	ldr	r2, [pc, #16]	; (8006cf4 <prvSampleTimeNow+0x3c>)
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
    }
 8006cea:	4618      	mov	r0, r3
 8006cec:	3710      	adds	r7, #16
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}
 8006cf2:	bf00      	nop
 8006cf4:	20000248 	.word	0x20000248

08006cf8 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b086      	sub	sp, #24
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	60f8      	str	r0, [r7, #12]
 8006d00:	60b9      	str	r1, [r7, #8]
 8006d02:	607a      	str	r2, [r7, #4]
 8006d04:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8006d06:	2300      	movs	r3, #0
 8006d08:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	68ba      	ldr	r2, [r7, #8]
 8006d0e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	68fa      	ldr	r2, [r7, #12]
 8006d14:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8006d16:	68ba      	ldr	r2, [r7, #8]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	d812      	bhi.n	8006d44 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d1e:	687a      	ldr	r2, [r7, #4]
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	1ad2      	subs	r2, r2, r3
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	699b      	ldr	r3, [r3, #24]
 8006d28:	429a      	cmp	r2, r3
 8006d2a:	d302      	bcc.n	8006d32 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	617b      	str	r3, [r7, #20]
 8006d30:	e01b      	b.n	8006d6a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006d32:	4b10      	ldr	r3, [pc, #64]	; (8006d74 <prvInsertTimerInActiveList+0x7c>)
 8006d34:	681a      	ldr	r2, [r3, #0]
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	3304      	adds	r3, #4
 8006d3a:	4619      	mov	r1, r3
 8006d3c:	4610      	mov	r0, r2
 8006d3e:	f7fd ff46 	bl	8004bce <vListInsert>
 8006d42:	e012      	b.n	8006d6a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006d44:	687a      	ldr	r2, [r7, #4]
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	429a      	cmp	r2, r3
 8006d4a:	d206      	bcs.n	8006d5a <prvInsertTimerInActiveList+0x62>
 8006d4c:	68ba      	ldr	r2, [r7, #8]
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	429a      	cmp	r2, r3
 8006d52:	d302      	bcc.n	8006d5a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8006d54:	2301      	movs	r3, #1
 8006d56:	617b      	str	r3, [r7, #20]
 8006d58:	e007      	b.n	8006d6a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006d5a:	4b07      	ldr	r3, [pc, #28]	; (8006d78 <prvInsertTimerInActiveList+0x80>)
 8006d5c:	681a      	ldr	r2, [r3, #0]
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	3304      	adds	r3, #4
 8006d62:	4619      	mov	r1, r3
 8006d64:	4610      	mov	r0, r2
 8006d66:	f7fd ff32 	bl	8004bce <vListInsert>
            }
        }

        return xProcessTimerNow;
 8006d6a:	697b      	ldr	r3, [r7, #20]
    }
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3718      	adds	r7, #24
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}
 8006d74:	2000023c 	.word	0x2000023c
 8006d78:	20000238 	.word	0x20000238

08006d7c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b08c      	sub	sp, #48	; 0x30
 8006d80:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006d82:	e0ae      	b.n	8006ee2 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	f2c0 80aa 	blt.w	8006ee0 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d92:	695b      	ldr	r3, [r3, #20]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d004      	beq.n	8006da2 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9a:	3304      	adds	r3, #4
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f7fd ff4f 	bl	8004c40 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006da2:	1d3b      	adds	r3, r7, #4
 8006da4:	4618      	mov	r0, r3
 8006da6:	f7ff ff87 	bl	8006cb8 <prvSampleTimeNow>
 8006daa:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	2b09      	cmp	r3, #9
 8006db0:	f200 8097 	bhi.w	8006ee2 <prvProcessReceivedCommands+0x166>
 8006db4:	a201      	add	r2, pc, #4	; (adr r2, 8006dbc <prvProcessReceivedCommands+0x40>)
 8006db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dba:	bf00      	nop
 8006dbc:	08006de5 	.word	0x08006de5
 8006dc0:	08006de5 	.word	0x08006de5
 8006dc4:	08006de5 	.word	0x08006de5
 8006dc8:	08006e59 	.word	0x08006e59
 8006dcc:	08006e6d 	.word	0x08006e6d
 8006dd0:	08006eb7 	.word	0x08006eb7
 8006dd4:	08006de5 	.word	0x08006de5
 8006dd8:	08006de5 	.word	0x08006de5
 8006ddc:	08006e59 	.word	0x08006e59
 8006de0:	08006e6d 	.word	0x08006e6d
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006dea:	f043 0301 	orr.w	r3, r3, #1
 8006dee:	b2da      	uxtb	r2, r3
 8006df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006df6:	68fa      	ldr	r2, [r7, #12]
 8006df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dfa:	699b      	ldr	r3, [r3, #24]
 8006dfc:	18d1      	adds	r1, r2, r3
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	6a3a      	ldr	r2, [r7, #32]
 8006e02:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006e04:	f7ff ff78 	bl	8006cf8 <prvInsertTimerInActiveList>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d069      	beq.n	8006ee2 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e10:	6a1b      	ldr	r3, [r3, #32]
 8006e12:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006e14:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e1c:	f003 0304 	and.w	r3, r3, #4
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d05e      	beq.n	8006ee2 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006e24:	68fa      	ldr	r2, [r7, #12]
 8006e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e28:	699b      	ldr	r3, [r3, #24]
 8006e2a:	441a      	add	r2, r3
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	9300      	str	r3, [sp, #0]
 8006e30:	2300      	movs	r3, #0
 8006e32:	2100      	movs	r1, #0
 8006e34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006e36:	f7ff fe21 	bl	8006a7c <xTimerGenericCommand>
 8006e3a:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8006e3c:	69fb      	ldr	r3, [r7, #28]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d14f      	bne.n	8006ee2 <prvProcessReceivedCommands+0x166>
        __asm volatile
 8006e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e46:	f383 8811 	msr	BASEPRI, r3
 8006e4a:	f3bf 8f6f 	isb	sy
 8006e4e:	f3bf 8f4f 	dsb	sy
 8006e52:	61bb      	str	r3, [r7, #24]
    }
 8006e54:	bf00      	nop
 8006e56:	e7fe      	b.n	8006e56 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e5e:	f023 0301 	bic.w	r3, r3, #1
 8006e62:	b2da      	uxtb	r2, r3
 8006e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8006e6a:	e03a      	b.n	8006ee2 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e72:	f043 0301 	orr.w	r3, r3, #1
 8006e76:	b2da      	uxtb	r2, r3
 8006e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006e7e:	68fa      	ldr	r2, [r7, #12]
 8006e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e82:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e86:	699b      	ldr	r3, [r3, #24]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d10a      	bne.n	8006ea2 <prvProcessReceivedCommands+0x126>
        __asm volatile
 8006e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e90:	f383 8811 	msr	BASEPRI, r3
 8006e94:	f3bf 8f6f 	isb	sy
 8006e98:	f3bf 8f4f 	dsb	sy
 8006e9c:	617b      	str	r3, [r7, #20]
    }
 8006e9e:	bf00      	nop
 8006ea0:	e7fe      	b.n	8006ea0 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea4:	699a      	ldr	r2, [r3, #24]
 8006ea6:	6a3b      	ldr	r3, [r7, #32]
 8006ea8:	18d1      	adds	r1, r2, r3
 8006eaa:	6a3b      	ldr	r3, [r7, #32]
 8006eac:	6a3a      	ldr	r2, [r7, #32]
 8006eae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006eb0:	f7ff ff22 	bl	8006cf8 <prvInsertTimerInActiveList>
                        break;
 8006eb4:	e015      	b.n	8006ee2 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ebc:	f003 0302 	and.w	r3, r3, #2
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d103      	bne.n	8006ecc <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8006ec4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006ec6:	f000 fc31 	bl	800772c <vPortFree>
 8006eca:	e00a      	b.n	8006ee2 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ece:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ed2:	f023 0301 	bic.w	r3, r3, #1
 8006ed6:	b2da      	uxtb	r2, r3
 8006ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8006ede:	e000      	b.n	8006ee2 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8006ee0:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006ee2:	4b08      	ldr	r3, [pc, #32]	; (8006f04 <prvProcessReceivedCommands+0x188>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f107 0108 	add.w	r1, r7, #8
 8006eea:	2200      	movs	r2, #0
 8006eec:	4618      	mov	r0, r3
 8006eee:	f7fe f963 	bl	80051b8 <xQueueReceive>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	f47f af45 	bne.w	8006d84 <prvProcessReceivedCommands+0x8>
        }
    }
 8006efa:	bf00      	nop
 8006efc:	bf00      	nop
 8006efe:	3728      	adds	r7, #40	; 0x28
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}
 8006f04:	20000240 	.word	0x20000240

08006f08 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b088      	sub	sp, #32
 8006f0c:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006f0e:	e048      	b.n	8006fa2 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006f10:	4b2d      	ldr	r3, [pc, #180]	; (8006fc8 <prvSwitchTimerLists+0xc0>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	68db      	ldr	r3, [r3, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f1a:	4b2b      	ldr	r3, [pc, #172]	; (8006fc8 <prvSwitchTimerLists+0xc0>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	68db      	ldr	r3, [r3, #12]
 8006f20:	68db      	ldr	r3, [r3, #12]
 8006f22:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	3304      	adds	r3, #4
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f7fd fe89 	bl	8004c40 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	6a1b      	ldr	r3, [r3, #32]
 8006f32:	68f8      	ldr	r0, [r7, #12]
 8006f34:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f3c:	f003 0304 	and.w	r3, r3, #4
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d02e      	beq.n	8006fa2 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	699b      	ldr	r3, [r3, #24]
 8006f48:	693a      	ldr	r2, [r7, #16]
 8006f4a:	4413      	add	r3, r2
 8006f4c:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8006f4e:	68ba      	ldr	r2, [r7, #8]
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	429a      	cmp	r2, r3
 8006f54:	d90e      	bls.n	8006f74 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	68ba      	ldr	r2, [r7, #8]
 8006f5a:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	68fa      	ldr	r2, [r7, #12]
 8006f60:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006f62:	4b19      	ldr	r3, [pc, #100]	; (8006fc8 <prvSwitchTimerLists+0xc0>)
 8006f64:	681a      	ldr	r2, [r3, #0]
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	3304      	adds	r3, #4
 8006f6a:	4619      	mov	r1, r3
 8006f6c:	4610      	mov	r0, r2
 8006f6e:	f7fd fe2e 	bl	8004bce <vListInsert>
 8006f72:	e016      	b.n	8006fa2 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006f74:	2300      	movs	r3, #0
 8006f76:	9300      	str	r3, [sp, #0]
 8006f78:	2300      	movs	r3, #0
 8006f7a:	693a      	ldr	r2, [r7, #16]
 8006f7c:	2100      	movs	r1, #0
 8006f7e:	68f8      	ldr	r0, [r7, #12]
 8006f80:	f7ff fd7c 	bl	8006a7c <xTimerGenericCommand>
 8006f84:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d10a      	bne.n	8006fa2 <prvSwitchTimerLists+0x9a>
        __asm volatile
 8006f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f90:	f383 8811 	msr	BASEPRI, r3
 8006f94:	f3bf 8f6f 	isb	sy
 8006f98:	f3bf 8f4f 	dsb	sy
 8006f9c:	603b      	str	r3, [r7, #0]
    }
 8006f9e:	bf00      	nop
 8006fa0:	e7fe      	b.n	8006fa0 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006fa2:	4b09      	ldr	r3, [pc, #36]	; (8006fc8 <prvSwitchTimerLists+0xc0>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d1b1      	bne.n	8006f10 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8006fac:	4b06      	ldr	r3, [pc, #24]	; (8006fc8 <prvSwitchTimerLists+0xc0>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8006fb2:	4b06      	ldr	r3, [pc, #24]	; (8006fcc <prvSwitchTimerLists+0xc4>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a04      	ldr	r2, [pc, #16]	; (8006fc8 <prvSwitchTimerLists+0xc0>)
 8006fb8:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8006fba:	4a04      	ldr	r2, [pc, #16]	; (8006fcc <prvSwitchTimerLists+0xc4>)
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	6013      	str	r3, [r2, #0]
    }
 8006fc0:	bf00      	nop
 8006fc2:	3718      	adds	r7, #24
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}
 8006fc8:	20000238 	.word	0x20000238
 8006fcc:	2000023c 	.word	0x2000023c

08006fd0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8006fd4:	f000 f9a8 	bl	8007328 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8006fd8:	4b12      	ldr	r3, [pc, #72]	; (8007024 <prvCheckForValidListAndQueue+0x54>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d11d      	bne.n	800701c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8006fe0:	4811      	ldr	r0, [pc, #68]	; (8007028 <prvCheckForValidListAndQueue+0x58>)
 8006fe2:	f7fd fda3 	bl	8004b2c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8006fe6:	4811      	ldr	r0, [pc, #68]	; (800702c <prvCheckForValidListAndQueue+0x5c>)
 8006fe8:	f7fd fda0 	bl	8004b2c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8006fec:	4b10      	ldr	r3, [pc, #64]	; (8007030 <prvCheckForValidListAndQueue+0x60>)
 8006fee:	4a0e      	ldr	r2, [pc, #56]	; (8007028 <prvCheckForValidListAndQueue+0x58>)
 8006ff0:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8006ff2:	4b10      	ldr	r3, [pc, #64]	; (8007034 <prvCheckForValidListAndQueue+0x64>)
 8006ff4:	4a0d      	ldr	r2, [pc, #52]	; (800702c <prvCheckForValidListAndQueue+0x5c>)
 8006ff6:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	210c      	movs	r1, #12
 8006ffc:	200a      	movs	r0, #10
 8006ffe:	f7fd feb1 	bl	8004d64 <xQueueGenericCreate>
 8007002:	4603      	mov	r3, r0
 8007004:	4a07      	ldr	r2, [pc, #28]	; (8007024 <prvCheckForValidListAndQueue+0x54>)
 8007006:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8007008:	4b06      	ldr	r3, [pc, #24]	; (8007024 <prvCheckForValidListAndQueue+0x54>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d005      	beq.n	800701c <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007010:	4b04      	ldr	r3, [pc, #16]	; (8007024 <prvCheckForValidListAndQueue+0x54>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4908      	ldr	r1, [pc, #32]	; (8007038 <prvCheckForValidListAndQueue+0x68>)
 8007016:	4618      	mov	r0, r3
 8007018:	f7fe fb92 	bl	8005740 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800701c:	f000 f9b4 	bl	8007388 <vPortExitCritical>
    }
 8007020:	bf00      	nop
 8007022:	bd80      	pop	{r7, pc}
 8007024:	20000240 	.word	0x20000240
 8007028:	20000210 	.word	0x20000210
 800702c:	20000224 	.word	0x20000224
 8007030:	20000238 	.word	0x20000238
 8007034:	2000023c 	.word	0x2000023c
 8007038:	08009010 	.word	0x08009010

0800703c <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

    BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
    {
 800703c:	b580      	push	{r7, lr}
 800703e:	b086      	sub	sp, #24
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn;
        Timer_t * pxTimer = xTimer;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	613b      	str	r3, [r7, #16]

        configASSERT( xTimer );
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d10a      	bne.n	8007064 <xTimerIsTimerActive+0x28>
        __asm volatile
 800704e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007052:	f383 8811 	msr	BASEPRI, r3
 8007056:	f3bf 8f6f 	isb	sy
 800705a:	f3bf 8f4f 	dsb	sy
 800705e:	60fb      	str	r3, [r7, #12]
    }
 8007060:	bf00      	nop
 8007062:	e7fe      	b.n	8007062 <xTimerIsTimerActive+0x26>

        /* Is the timer in the list of active timers? */
        taskENTER_CRITICAL();
 8007064:	f000 f960 	bl	8007328 <vPortEnterCritical>
        {
            if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800706e:	f003 0301 	and.w	r3, r3, #1
 8007072:	2b00      	cmp	r3, #0
 8007074:	d102      	bne.n	800707c <xTimerIsTimerActive+0x40>
            {
                xReturn = pdFALSE;
 8007076:	2300      	movs	r3, #0
 8007078:	617b      	str	r3, [r7, #20]
 800707a:	e001      	b.n	8007080 <xTimerIsTimerActive+0x44>
            }
            else
            {
                xReturn = pdTRUE;
 800707c:	2301      	movs	r3, #1
 800707e:	617b      	str	r3, [r7, #20]
            }
        }
        taskEXIT_CRITICAL();
 8007080:	f000 f982 	bl	8007388 <vPortExitCritical>

        return xReturn;
 8007084:	697b      	ldr	r3, [r7, #20]
    } /*lint !e818 Can't be pointer to const due to the typedef. */
 8007086:	4618      	mov	r0, r3
 8007088:	3718      	adds	r7, #24
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}

0800708e <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

    void * pvTimerGetTimerID( const TimerHandle_t xTimer )
    {
 800708e:	b580      	push	{r7, lr}
 8007090:	b086      	sub	sp, #24
 8007092:	af00      	add	r7, sp, #0
 8007094:	6078      	str	r0, [r7, #4]
        Timer_t * const pxTimer = xTimer;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	617b      	str	r3, [r7, #20]
        void * pvReturn;

        configASSERT( xTimer );
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d10a      	bne.n	80070b6 <pvTimerGetTimerID+0x28>
        __asm volatile
 80070a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070a4:	f383 8811 	msr	BASEPRI, r3
 80070a8:	f3bf 8f6f 	isb	sy
 80070ac:	f3bf 8f4f 	dsb	sy
 80070b0:	60fb      	str	r3, [r7, #12]
    }
 80070b2:	bf00      	nop
 80070b4:	e7fe      	b.n	80070b4 <pvTimerGetTimerID+0x26>

        taskENTER_CRITICAL();
 80070b6:	f000 f937 	bl	8007328 <vPortEnterCritical>
        {
            pvReturn = pxTimer->pvTimerID;
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	69db      	ldr	r3, [r3, #28]
 80070be:	613b      	str	r3, [r7, #16]
        }
        taskEXIT_CRITICAL();
 80070c0:	f000 f962 	bl	8007388 <vPortExitCritical>

        return pvReturn;
 80070c4:	693b      	ldr	r3, [r7, #16]
    }
 80070c6:	4618      	mov	r0, r3
 80070c8:	3718      	adds	r7, #24
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}
	...

080070d0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80070d0:	b480      	push	{r7}
 80070d2:	b085      	sub	sp, #20
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	60f8      	str	r0, [r7, #12]
 80070d8:	60b9      	str	r1, [r7, #8]
 80070da:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	3b04      	subs	r3, #4
 80070e0:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80070e8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	3b04      	subs	r3, #4
 80070ee:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	f023 0201 	bic.w	r2, r3, #1
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	3b04      	subs	r3, #4
 80070fe:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8007100:	4a0c      	ldr	r2, [pc, #48]	; (8007134 <pxPortInitialiseStack+0x64>)
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	3b14      	subs	r3, #20
 800710a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800710c:	687a      	ldr	r2, [r7, #4]
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	3b04      	subs	r3, #4
 8007116:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f06f 0202 	mvn.w	r2, #2
 800711e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	3b20      	subs	r3, #32
 8007124:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8007126:	68fb      	ldr	r3, [r7, #12]
}
 8007128:	4618      	mov	r0, r3
 800712a:	3714      	adds	r7, #20
 800712c:	46bd      	mov	sp, r7
 800712e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007132:	4770      	bx	lr
 8007134:	08007139 	.word	0x08007139

08007138 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007138:	b480      	push	{r7}
 800713a:	b085      	sub	sp, #20
 800713c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800713e:	2300      	movs	r3, #0
 8007140:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8007142:	4b12      	ldr	r3, [pc, #72]	; (800718c <prvTaskExitError+0x54>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800714a:	d00a      	beq.n	8007162 <prvTaskExitError+0x2a>
        __asm volatile
 800714c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007150:	f383 8811 	msr	BASEPRI, r3
 8007154:	f3bf 8f6f 	isb	sy
 8007158:	f3bf 8f4f 	dsb	sy
 800715c:	60fb      	str	r3, [r7, #12]
    }
 800715e:	bf00      	nop
 8007160:	e7fe      	b.n	8007160 <prvTaskExitError+0x28>
        __asm volatile
 8007162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007166:	f383 8811 	msr	BASEPRI, r3
 800716a:	f3bf 8f6f 	isb	sy
 800716e:	f3bf 8f4f 	dsb	sy
 8007172:	60bb      	str	r3, [r7, #8]
    }
 8007174:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8007176:	bf00      	nop
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d0fc      	beq.n	8007178 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800717e:	bf00      	nop
 8007180:	bf00      	nop
 8007182:	3714      	adds	r7, #20
 8007184:	46bd      	mov	sp, r7
 8007186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718a:	4770      	bx	lr
 800718c:	20000024 	.word	0x20000024

08007190 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8007190:	4b07      	ldr	r3, [pc, #28]	; (80071b0 <pxCurrentTCBConst2>)
 8007192:	6819      	ldr	r1, [r3, #0]
 8007194:	6808      	ldr	r0, [r1, #0]
 8007196:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800719a:	f380 8809 	msr	PSP, r0
 800719e:	f3bf 8f6f 	isb	sy
 80071a2:	f04f 0000 	mov.w	r0, #0
 80071a6:	f380 8811 	msr	BASEPRI, r0
 80071aa:	4770      	bx	lr
 80071ac:	f3af 8000 	nop.w

080071b0 <pxCurrentTCBConst2>:
 80071b0:	2000010c 	.word	0x2000010c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80071b4:	bf00      	nop
 80071b6:	bf00      	nop

080071b8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80071b8:	4808      	ldr	r0, [pc, #32]	; (80071dc <prvPortStartFirstTask+0x24>)
 80071ba:	6800      	ldr	r0, [r0, #0]
 80071bc:	6800      	ldr	r0, [r0, #0]
 80071be:	f380 8808 	msr	MSP, r0
 80071c2:	f04f 0000 	mov.w	r0, #0
 80071c6:	f380 8814 	msr	CONTROL, r0
 80071ca:	b662      	cpsie	i
 80071cc:	b661      	cpsie	f
 80071ce:	f3bf 8f4f 	dsb	sy
 80071d2:	f3bf 8f6f 	isb	sy
 80071d6:	df00      	svc	0
 80071d8:	bf00      	nop
 80071da:	0000      	.short	0x0000
 80071dc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80071e0:	bf00      	nop
 80071e2:	bf00      	nop

080071e4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b086      	sub	sp, #24
 80071e8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80071ea:	4b46      	ldr	r3, [pc, #280]	; (8007304 <xPortStartScheduler+0x120>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a46      	ldr	r2, [pc, #280]	; (8007308 <xPortStartScheduler+0x124>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d10a      	bne.n	800720a <xPortStartScheduler+0x26>
        __asm volatile
 80071f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071f8:	f383 8811 	msr	BASEPRI, r3
 80071fc:	f3bf 8f6f 	isb	sy
 8007200:	f3bf 8f4f 	dsb	sy
 8007204:	613b      	str	r3, [r7, #16]
    }
 8007206:	bf00      	nop
 8007208:	e7fe      	b.n	8007208 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800720a:	4b3e      	ldr	r3, [pc, #248]	; (8007304 <xPortStartScheduler+0x120>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a3f      	ldr	r2, [pc, #252]	; (800730c <xPortStartScheduler+0x128>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d10a      	bne.n	800722a <xPortStartScheduler+0x46>
        __asm volatile
 8007214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007218:	f383 8811 	msr	BASEPRI, r3
 800721c:	f3bf 8f6f 	isb	sy
 8007220:	f3bf 8f4f 	dsb	sy
 8007224:	60fb      	str	r3, [r7, #12]
    }
 8007226:	bf00      	nop
 8007228:	e7fe      	b.n	8007228 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800722a:	4b39      	ldr	r3, [pc, #228]	; (8007310 <xPortStartScheduler+0x12c>)
 800722c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	781b      	ldrb	r3, [r3, #0]
 8007232:	b2db      	uxtb	r3, r3
 8007234:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	22ff      	movs	r2, #255	; 0xff
 800723a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	781b      	ldrb	r3, [r3, #0]
 8007240:	b2db      	uxtb	r3, r3
 8007242:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007244:	78fb      	ldrb	r3, [r7, #3]
 8007246:	b2db      	uxtb	r3, r3
 8007248:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800724c:	b2da      	uxtb	r2, r3
 800724e:	4b31      	ldr	r3, [pc, #196]	; (8007314 <xPortStartScheduler+0x130>)
 8007250:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007252:	4b31      	ldr	r3, [pc, #196]	; (8007318 <xPortStartScheduler+0x134>)
 8007254:	2207      	movs	r2, #7
 8007256:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007258:	e009      	b.n	800726e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800725a:	4b2f      	ldr	r3, [pc, #188]	; (8007318 <xPortStartScheduler+0x134>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	3b01      	subs	r3, #1
 8007260:	4a2d      	ldr	r2, [pc, #180]	; (8007318 <xPortStartScheduler+0x134>)
 8007262:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007264:	78fb      	ldrb	r3, [r7, #3]
 8007266:	b2db      	uxtb	r3, r3
 8007268:	005b      	lsls	r3, r3, #1
 800726a:	b2db      	uxtb	r3, r3
 800726c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800726e:	78fb      	ldrb	r3, [r7, #3]
 8007270:	b2db      	uxtb	r3, r3
 8007272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007276:	2b80      	cmp	r3, #128	; 0x80
 8007278:	d0ef      	beq.n	800725a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800727a:	4b27      	ldr	r3, [pc, #156]	; (8007318 <xPortStartScheduler+0x134>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f1c3 0307 	rsb	r3, r3, #7
 8007282:	2b04      	cmp	r3, #4
 8007284:	d00a      	beq.n	800729c <xPortStartScheduler+0xb8>
        __asm volatile
 8007286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800728a:	f383 8811 	msr	BASEPRI, r3
 800728e:	f3bf 8f6f 	isb	sy
 8007292:	f3bf 8f4f 	dsb	sy
 8007296:	60bb      	str	r3, [r7, #8]
    }
 8007298:	bf00      	nop
 800729a:	e7fe      	b.n	800729a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800729c:	4b1e      	ldr	r3, [pc, #120]	; (8007318 <xPortStartScheduler+0x134>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	021b      	lsls	r3, r3, #8
 80072a2:	4a1d      	ldr	r2, [pc, #116]	; (8007318 <xPortStartScheduler+0x134>)
 80072a4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80072a6:	4b1c      	ldr	r3, [pc, #112]	; (8007318 <xPortStartScheduler+0x134>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80072ae:	4a1a      	ldr	r2, [pc, #104]	; (8007318 <xPortStartScheduler+0x134>)
 80072b0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	b2da      	uxtb	r2, r3
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80072ba:	4b18      	ldr	r3, [pc, #96]	; (800731c <xPortStartScheduler+0x138>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a17      	ldr	r2, [pc, #92]	; (800731c <xPortStartScheduler+0x138>)
 80072c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80072c4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80072c6:	4b15      	ldr	r3, [pc, #84]	; (800731c <xPortStartScheduler+0x138>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a14      	ldr	r2, [pc, #80]	; (800731c <xPortStartScheduler+0x138>)
 80072cc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80072d0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80072d2:	f000 f8db 	bl	800748c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80072d6:	4b12      	ldr	r3, [pc, #72]	; (8007320 <xPortStartScheduler+0x13c>)
 80072d8:	2200      	movs	r2, #0
 80072da:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80072dc:	f000 f8fa 	bl	80074d4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80072e0:	4b10      	ldr	r3, [pc, #64]	; (8007324 <xPortStartScheduler+0x140>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a0f      	ldr	r2, [pc, #60]	; (8007324 <xPortStartScheduler+0x140>)
 80072e6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80072ea:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80072ec:	f7ff ff64 	bl	80071b8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80072f0:	f7fe fd8e 	bl	8005e10 <vTaskSwitchContext>
    prvTaskExitError();
 80072f4:	f7ff ff20 	bl	8007138 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80072f8:	2300      	movs	r3, #0
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3718      	adds	r7, #24
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}
 8007302:	bf00      	nop
 8007304:	e000ed00 	.word	0xe000ed00
 8007308:	410fc271 	.word	0x410fc271
 800730c:	410fc270 	.word	0x410fc270
 8007310:	e000e400 	.word	0xe000e400
 8007314:	2000024c 	.word	0x2000024c
 8007318:	20000250 	.word	0x20000250
 800731c:	e000ed20 	.word	0xe000ed20
 8007320:	20000024 	.word	0x20000024
 8007324:	e000ef34 	.word	0xe000ef34

08007328 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007328:	b480      	push	{r7}
 800732a:	b083      	sub	sp, #12
 800732c:	af00      	add	r7, sp, #0
        __asm volatile
 800732e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007332:	f383 8811 	msr	BASEPRI, r3
 8007336:	f3bf 8f6f 	isb	sy
 800733a:	f3bf 8f4f 	dsb	sy
 800733e:	607b      	str	r3, [r7, #4]
    }
 8007340:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8007342:	4b0f      	ldr	r3, [pc, #60]	; (8007380 <vPortEnterCritical+0x58>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	3301      	adds	r3, #1
 8007348:	4a0d      	ldr	r2, [pc, #52]	; (8007380 <vPortEnterCritical+0x58>)
 800734a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800734c:	4b0c      	ldr	r3, [pc, #48]	; (8007380 <vPortEnterCritical+0x58>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	2b01      	cmp	r3, #1
 8007352:	d10f      	bne.n	8007374 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007354:	4b0b      	ldr	r3, [pc, #44]	; (8007384 <vPortEnterCritical+0x5c>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	b2db      	uxtb	r3, r3
 800735a:	2b00      	cmp	r3, #0
 800735c:	d00a      	beq.n	8007374 <vPortEnterCritical+0x4c>
        __asm volatile
 800735e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007362:	f383 8811 	msr	BASEPRI, r3
 8007366:	f3bf 8f6f 	isb	sy
 800736a:	f3bf 8f4f 	dsb	sy
 800736e:	603b      	str	r3, [r7, #0]
    }
 8007370:	bf00      	nop
 8007372:	e7fe      	b.n	8007372 <vPortEnterCritical+0x4a>
    }
}
 8007374:	bf00      	nop
 8007376:	370c      	adds	r7, #12
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr
 8007380:	20000024 	.word	0x20000024
 8007384:	e000ed04 	.word	0xe000ed04

08007388 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007388:	b480      	push	{r7}
 800738a:	b083      	sub	sp, #12
 800738c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800738e:	4b12      	ldr	r3, [pc, #72]	; (80073d8 <vPortExitCritical+0x50>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d10a      	bne.n	80073ac <vPortExitCritical+0x24>
        __asm volatile
 8007396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800739a:	f383 8811 	msr	BASEPRI, r3
 800739e:	f3bf 8f6f 	isb	sy
 80073a2:	f3bf 8f4f 	dsb	sy
 80073a6:	607b      	str	r3, [r7, #4]
    }
 80073a8:	bf00      	nop
 80073aa:	e7fe      	b.n	80073aa <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80073ac:	4b0a      	ldr	r3, [pc, #40]	; (80073d8 <vPortExitCritical+0x50>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	3b01      	subs	r3, #1
 80073b2:	4a09      	ldr	r2, [pc, #36]	; (80073d8 <vPortExitCritical+0x50>)
 80073b4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80073b6:	4b08      	ldr	r3, [pc, #32]	; (80073d8 <vPortExitCritical+0x50>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d105      	bne.n	80073ca <vPortExitCritical+0x42>
 80073be:	2300      	movs	r3, #0
 80073c0:	603b      	str	r3, [r7, #0]
        __asm volatile
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	f383 8811 	msr	BASEPRI, r3
    }
 80073c8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80073ca:	bf00      	nop
 80073cc:	370c      	adds	r7, #12
 80073ce:	46bd      	mov	sp, r7
 80073d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d4:	4770      	bx	lr
 80073d6:	bf00      	nop
 80073d8:	20000024 	.word	0x20000024
 80073dc:	00000000 	.word	0x00000000

080073e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80073e0:	f3ef 8009 	mrs	r0, PSP
 80073e4:	f3bf 8f6f 	isb	sy
 80073e8:	4b15      	ldr	r3, [pc, #84]	; (8007440 <pxCurrentTCBConst>)
 80073ea:	681a      	ldr	r2, [r3, #0]
 80073ec:	f01e 0f10 	tst.w	lr, #16
 80073f0:	bf08      	it	eq
 80073f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80073f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073fa:	6010      	str	r0, [r2, #0]
 80073fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007400:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007404:	f380 8811 	msr	BASEPRI, r0
 8007408:	f3bf 8f4f 	dsb	sy
 800740c:	f3bf 8f6f 	isb	sy
 8007410:	f7fe fcfe 	bl	8005e10 <vTaskSwitchContext>
 8007414:	f04f 0000 	mov.w	r0, #0
 8007418:	f380 8811 	msr	BASEPRI, r0
 800741c:	bc09      	pop	{r0, r3}
 800741e:	6819      	ldr	r1, [r3, #0]
 8007420:	6808      	ldr	r0, [r1, #0]
 8007422:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007426:	f01e 0f10 	tst.w	lr, #16
 800742a:	bf08      	it	eq
 800742c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007430:	f380 8809 	msr	PSP, r0
 8007434:	f3bf 8f6f 	isb	sy
 8007438:	4770      	bx	lr
 800743a:	bf00      	nop
 800743c:	f3af 8000 	nop.w

08007440 <pxCurrentTCBConst>:
 8007440:	2000010c 	.word	0x2000010c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8007444:	bf00      	nop
 8007446:	bf00      	nop

08007448 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b082      	sub	sp, #8
 800744c:	af00      	add	r7, sp, #0
        __asm volatile
 800744e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007452:	f383 8811 	msr	BASEPRI, r3
 8007456:	f3bf 8f6f 	isb	sy
 800745a:	f3bf 8f4f 	dsb	sy
 800745e:	607b      	str	r3, [r7, #4]
    }
 8007460:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8007462:	f7fe fc1d 	bl	8005ca0 <xTaskIncrementTick>
 8007466:	4603      	mov	r3, r0
 8007468:	2b00      	cmp	r3, #0
 800746a:	d003      	beq.n	8007474 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800746c:	4b06      	ldr	r3, [pc, #24]	; (8007488 <SysTick_Handler+0x40>)
 800746e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007472:	601a      	str	r2, [r3, #0]
 8007474:	2300      	movs	r3, #0
 8007476:	603b      	str	r3, [r7, #0]
        __asm volatile
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	f383 8811 	msr	BASEPRI, r3
    }
 800747e:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8007480:	bf00      	nop
 8007482:	3708      	adds	r7, #8
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}
 8007488:	e000ed04 	.word	0xe000ed04

0800748c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800748c:	b480      	push	{r7}
 800748e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007490:	4b0b      	ldr	r3, [pc, #44]	; (80074c0 <vPortSetupTimerInterrupt+0x34>)
 8007492:	2200      	movs	r2, #0
 8007494:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007496:	4b0b      	ldr	r3, [pc, #44]	; (80074c4 <vPortSetupTimerInterrupt+0x38>)
 8007498:	2200      	movs	r2, #0
 800749a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800749c:	4b0a      	ldr	r3, [pc, #40]	; (80074c8 <vPortSetupTimerInterrupt+0x3c>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4a0a      	ldr	r2, [pc, #40]	; (80074cc <vPortSetupTimerInterrupt+0x40>)
 80074a2:	fba2 2303 	umull	r2, r3, r2, r3
 80074a6:	099b      	lsrs	r3, r3, #6
 80074a8:	4a09      	ldr	r2, [pc, #36]	; (80074d0 <vPortSetupTimerInterrupt+0x44>)
 80074aa:	3b01      	subs	r3, #1
 80074ac:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80074ae:	4b04      	ldr	r3, [pc, #16]	; (80074c0 <vPortSetupTimerInterrupt+0x34>)
 80074b0:	2207      	movs	r2, #7
 80074b2:	601a      	str	r2, [r3, #0]
}
 80074b4:	bf00      	nop
 80074b6:	46bd      	mov	sp, r7
 80074b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074bc:	4770      	bx	lr
 80074be:	bf00      	nop
 80074c0:	e000e010 	.word	0xe000e010
 80074c4:	e000e018 	.word	0xe000e018
 80074c8:	20000010 	.word	0x20000010
 80074cc:	10624dd3 	.word	0x10624dd3
 80074d0:	e000e014 	.word	0xe000e014

080074d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80074d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80074e4 <vPortEnableVFP+0x10>
 80074d8:	6801      	ldr	r1, [r0, #0]
 80074da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80074de:	6001      	str	r1, [r0, #0]
 80074e0:	4770      	bx	lr
 80074e2:	0000      	.short	0x0000
 80074e4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80074e8:	bf00      	nop
 80074ea:	bf00      	nop

080074ec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80074ec:	b480      	push	{r7}
 80074ee:	b085      	sub	sp, #20
 80074f0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80074f2:	f3ef 8305 	mrs	r3, IPSR
 80074f6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2b0f      	cmp	r3, #15
 80074fc:	d914      	bls.n	8007528 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80074fe:	4a17      	ldr	r2, [pc, #92]	; (800755c <vPortValidateInterruptPriority+0x70>)
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	4413      	add	r3, r2
 8007504:	781b      	ldrb	r3, [r3, #0]
 8007506:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007508:	4b15      	ldr	r3, [pc, #84]	; (8007560 <vPortValidateInterruptPriority+0x74>)
 800750a:	781b      	ldrb	r3, [r3, #0]
 800750c:	7afa      	ldrb	r2, [r7, #11]
 800750e:	429a      	cmp	r2, r3
 8007510:	d20a      	bcs.n	8007528 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8007512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007516:	f383 8811 	msr	BASEPRI, r3
 800751a:	f3bf 8f6f 	isb	sy
 800751e:	f3bf 8f4f 	dsb	sy
 8007522:	607b      	str	r3, [r7, #4]
    }
 8007524:	bf00      	nop
 8007526:	e7fe      	b.n	8007526 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007528:	4b0e      	ldr	r3, [pc, #56]	; (8007564 <vPortValidateInterruptPriority+0x78>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007530:	4b0d      	ldr	r3, [pc, #52]	; (8007568 <vPortValidateInterruptPriority+0x7c>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	429a      	cmp	r2, r3
 8007536:	d90a      	bls.n	800754e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8007538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800753c:	f383 8811 	msr	BASEPRI, r3
 8007540:	f3bf 8f6f 	isb	sy
 8007544:	f3bf 8f4f 	dsb	sy
 8007548:	603b      	str	r3, [r7, #0]
    }
 800754a:	bf00      	nop
 800754c:	e7fe      	b.n	800754c <vPortValidateInterruptPriority+0x60>
    }
 800754e:	bf00      	nop
 8007550:	3714      	adds	r7, #20
 8007552:	46bd      	mov	sp, r7
 8007554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007558:	4770      	bx	lr
 800755a:	bf00      	nop
 800755c:	e000e3f0 	.word	0xe000e3f0
 8007560:	2000024c 	.word	0x2000024c
 8007564:	e000ed0c 	.word	0xe000ed0c
 8007568:	20000250 	.word	0x20000250

0800756c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b08a      	sub	sp, #40	; 0x28
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8007574:	2300      	movs	r3, #0
 8007576:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8007578:	f7fe fad8 	bl	8005b2c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800757c:	4b65      	ldr	r3, [pc, #404]	; (8007714 <pvPortMalloc+0x1a8>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d101      	bne.n	8007588 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8007584:	f000 f934 	bl	80077f0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007588:	4b63      	ldr	r3, [pc, #396]	; (8007718 <pvPortMalloc+0x1ac>)
 800758a:	681a      	ldr	r2, [r3, #0]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	4013      	ands	r3, r2
 8007590:	2b00      	cmp	r3, #0
 8007592:	f040 80a7 	bne.w	80076e4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d02d      	beq.n	80075f8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800759c:	2208      	movs	r2, #8
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80075a2:	687a      	ldr	r2, [r7, #4]
 80075a4:	429a      	cmp	r2, r3
 80075a6:	d227      	bcs.n	80075f8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 80075a8:	2208      	movs	r2, #8
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	4413      	add	r3, r2
 80075ae:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f003 0307 	and.w	r3, r3, #7
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d021      	beq.n	80075fe <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f023 0307 	bic.w	r3, r3, #7
 80075c0:	3308      	adds	r3, #8
 80075c2:	687a      	ldr	r2, [r7, #4]
 80075c4:	429a      	cmp	r2, r3
 80075c6:	d214      	bcs.n	80075f2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f023 0307 	bic.w	r3, r3, #7
 80075ce:	3308      	adds	r3, #8
 80075d0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f003 0307 	and.w	r3, r3, #7
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d010      	beq.n	80075fe <pvPortMalloc+0x92>
        __asm volatile
 80075dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075e0:	f383 8811 	msr	BASEPRI, r3
 80075e4:	f3bf 8f6f 	isb	sy
 80075e8:	f3bf 8f4f 	dsb	sy
 80075ec:	617b      	str	r3, [r7, #20]
    }
 80075ee:	bf00      	nop
 80075f0:	e7fe      	b.n	80075f0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80075f2:	2300      	movs	r3, #0
 80075f4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80075f6:	e002      	b.n	80075fe <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80075f8:	2300      	movs	r3, #0
 80075fa:	607b      	str	r3, [r7, #4]
 80075fc:	e000      	b.n	8007600 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80075fe:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d06e      	beq.n	80076e4 <pvPortMalloc+0x178>
 8007606:	4b45      	ldr	r3, [pc, #276]	; (800771c <pvPortMalloc+0x1b0>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	687a      	ldr	r2, [r7, #4]
 800760c:	429a      	cmp	r2, r3
 800760e:	d869      	bhi.n	80076e4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8007610:	4b43      	ldr	r3, [pc, #268]	; (8007720 <pvPortMalloc+0x1b4>)
 8007612:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8007614:	4b42      	ldr	r3, [pc, #264]	; (8007720 <pvPortMalloc+0x1b4>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800761a:	e004      	b.n	8007626 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800761c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800761e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8007620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	687a      	ldr	r2, [r7, #4]
 800762c:	429a      	cmp	r2, r3
 800762e:	d903      	bls.n	8007638 <pvPortMalloc+0xcc>
 8007630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d1f1      	bne.n	800761c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8007638:	4b36      	ldr	r3, [pc, #216]	; (8007714 <pvPortMalloc+0x1a8>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800763e:	429a      	cmp	r2, r3
 8007640:	d050      	beq.n	80076e4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007642:	6a3b      	ldr	r3, [r7, #32]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	2208      	movs	r2, #8
 8007648:	4413      	add	r3, r2
 800764a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800764c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800764e:	681a      	ldr	r2, [r3, #0]
 8007650:	6a3b      	ldr	r3, [r7, #32]
 8007652:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007656:	685a      	ldr	r2, [r3, #4]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	1ad2      	subs	r2, r2, r3
 800765c:	2308      	movs	r3, #8
 800765e:	005b      	lsls	r3, r3, #1
 8007660:	429a      	cmp	r2, r3
 8007662:	d91f      	bls.n	80076a4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007664:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	4413      	add	r3, r2
 800766a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800766c:	69bb      	ldr	r3, [r7, #24]
 800766e:	f003 0307 	and.w	r3, r3, #7
 8007672:	2b00      	cmp	r3, #0
 8007674:	d00a      	beq.n	800768c <pvPortMalloc+0x120>
        __asm volatile
 8007676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800767a:	f383 8811 	msr	BASEPRI, r3
 800767e:	f3bf 8f6f 	isb	sy
 8007682:	f3bf 8f4f 	dsb	sy
 8007686:	613b      	str	r3, [r7, #16]
    }
 8007688:	bf00      	nop
 800768a:	e7fe      	b.n	800768a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800768c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800768e:	685a      	ldr	r2, [r3, #4]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	1ad2      	subs	r2, r2, r3
 8007694:	69bb      	ldr	r3, [r7, #24]
 8007696:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8007698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800769a:	687a      	ldr	r2, [r7, #4]
 800769c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800769e:	69b8      	ldr	r0, [r7, #24]
 80076a0:	f000 f908 	bl	80078b4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80076a4:	4b1d      	ldr	r3, [pc, #116]	; (800771c <pvPortMalloc+0x1b0>)
 80076a6:	681a      	ldr	r2, [r3, #0]
 80076a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	1ad3      	subs	r3, r2, r3
 80076ae:	4a1b      	ldr	r2, [pc, #108]	; (800771c <pvPortMalloc+0x1b0>)
 80076b0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80076b2:	4b1a      	ldr	r3, [pc, #104]	; (800771c <pvPortMalloc+0x1b0>)
 80076b4:	681a      	ldr	r2, [r3, #0]
 80076b6:	4b1b      	ldr	r3, [pc, #108]	; (8007724 <pvPortMalloc+0x1b8>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	429a      	cmp	r2, r3
 80076bc:	d203      	bcs.n	80076c6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80076be:	4b17      	ldr	r3, [pc, #92]	; (800771c <pvPortMalloc+0x1b0>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4a18      	ldr	r2, [pc, #96]	; (8007724 <pvPortMalloc+0x1b8>)
 80076c4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80076c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c8:	685a      	ldr	r2, [r3, #4]
 80076ca:	4b13      	ldr	r3, [pc, #76]	; (8007718 <pvPortMalloc+0x1ac>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	431a      	orrs	r2, r3
 80076d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80076d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d6:	2200      	movs	r2, #0
 80076d8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80076da:	4b13      	ldr	r3, [pc, #76]	; (8007728 <pvPortMalloc+0x1bc>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	3301      	adds	r3, #1
 80076e0:	4a11      	ldr	r2, [pc, #68]	; (8007728 <pvPortMalloc+0x1bc>)
 80076e2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80076e4:	f7fe fa30 	bl	8005b48 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80076e8:	69fb      	ldr	r3, [r7, #28]
 80076ea:	f003 0307 	and.w	r3, r3, #7
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d00a      	beq.n	8007708 <pvPortMalloc+0x19c>
        __asm volatile
 80076f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f6:	f383 8811 	msr	BASEPRI, r3
 80076fa:	f3bf 8f6f 	isb	sy
 80076fe:	f3bf 8f4f 	dsb	sy
 8007702:	60fb      	str	r3, [r7, #12]
    }
 8007704:	bf00      	nop
 8007706:	e7fe      	b.n	8007706 <pvPortMalloc+0x19a>
    return pvReturn;
 8007708:	69fb      	ldr	r3, [r7, #28]
}
 800770a:	4618      	mov	r0, r3
 800770c:	3728      	adds	r7, #40	; 0x28
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}
 8007712:	bf00      	nop
 8007714:	2001925c 	.word	0x2001925c
 8007718:	20019270 	.word	0x20019270
 800771c:	20019260 	.word	0x20019260
 8007720:	20019254 	.word	0x20019254
 8007724:	20019264 	.word	0x20019264
 8007728:	20019268 	.word	0x20019268

0800772c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b086      	sub	sp, #24
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d04d      	beq.n	80077da <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800773e:	2308      	movs	r3, #8
 8007740:	425b      	negs	r3, r3
 8007742:	697a      	ldr	r2, [r7, #20]
 8007744:	4413      	add	r3, r2
 8007746:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	685a      	ldr	r2, [r3, #4]
 8007750:	4b24      	ldr	r3, [pc, #144]	; (80077e4 <vPortFree+0xb8>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4013      	ands	r3, r2
 8007756:	2b00      	cmp	r3, #0
 8007758:	d10a      	bne.n	8007770 <vPortFree+0x44>
        __asm volatile
 800775a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800775e:	f383 8811 	msr	BASEPRI, r3
 8007762:	f3bf 8f6f 	isb	sy
 8007766:	f3bf 8f4f 	dsb	sy
 800776a:	60fb      	str	r3, [r7, #12]
    }
 800776c:	bf00      	nop
 800776e:	e7fe      	b.n	800776e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d00a      	beq.n	800778e <vPortFree+0x62>
        __asm volatile
 8007778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800777c:	f383 8811 	msr	BASEPRI, r3
 8007780:	f3bf 8f6f 	isb	sy
 8007784:	f3bf 8f4f 	dsb	sy
 8007788:	60bb      	str	r3, [r7, #8]
    }
 800778a:	bf00      	nop
 800778c:	e7fe      	b.n	800778c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800778e:	693b      	ldr	r3, [r7, #16]
 8007790:	685a      	ldr	r2, [r3, #4]
 8007792:	4b14      	ldr	r3, [pc, #80]	; (80077e4 <vPortFree+0xb8>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4013      	ands	r3, r2
 8007798:	2b00      	cmp	r3, #0
 800779a:	d01e      	beq.n	80077da <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800779c:	693b      	ldr	r3, [r7, #16]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d11a      	bne.n	80077da <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	685a      	ldr	r2, [r3, #4]
 80077a8:	4b0e      	ldr	r3, [pc, #56]	; (80077e4 <vPortFree+0xb8>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	43db      	mvns	r3, r3
 80077ae:	401a      	ands	r2, r3
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80077b4:	f7fe f9ba 	bl	8005b2c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	685a      	ldr	r2, [r3, #4]
 80077bc:	4b0a      	ldr	r3, [pc, #40]	; (80077e8 <vPortFree+0xbc>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4413      	add	r3, r2
 80077c2:	4a09      	ldr	r2, [pc, #36]	; (80077e8 <vPortFree+0xbc>)
 80077c4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80077c6:	6938      	ldr	r0, [r7, #16]
 80077c8:	f000 f874 	bl	80078b4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80077cc:	4b07      	ldr	r3, [pc, #28]	; (80077ec <vPortFree+0xc0>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	3301      	adds	r3, #1
 80077d2:	4a06      	ldr	r2, [pc, #24]	; (80077ec <vPortFree+0xc0>)
 80077d4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80077d6:	f7fe f9b7 	bl	8005b48 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80077da:	bf00      	nop
 80077dc:	3718      	adds	r7, #24
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}
 80077e2:	bf00      	nop
 80077e4:	20019270 	.word	0x20019270
 80077e8:	20019260 	.word	0x20019260
 80077ec:	2001926c 	.word	0x2001926c

080077f0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80077f0:	b480      	push	{r7}
 80077f2:	b085      	sub	sp, #20
 80077f4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80077f6:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 80077fa:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80077fc:	4b27      	ldr	r3, [pc, #156]	; (800789c <prvHeapInit+0xac>)
 80077fe:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	f003 0307 	and.w	r3, r3, #7
 8007806:	2b00      	cmp	r3, #0
 8007808:	d00c      	beq.n	8007824 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	3307      	adds	r3, #7
 800780e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f023 0307 	bic.w	r3, r3, #7
 8007816:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007818:	68ba      	ldr	r2, [r7, #8]
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	1ad3      	subs	r3, r2, r3
 800781e:	4a1f      	ldr	r2, [pc, #124]	; (800789c <prvHeapInit+0xac>)
 8007820:	4413      	add	r3, r2
 8007822:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007828:	4a1d      	ldr	r2, [pc, #116]	; (80078a0 <prvHeapInit+0xb0>)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800782e:	4b1c      	ldr	r3, [pc, #112]	; (80078a0 <prvHeapInit+0xb0>)
 8007830:	2200      	movs	r2, #0
 8007832:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	68ba      	ldr	r2, [r7, #8]
 8007838:	4413      	add	r3, r2
 800783a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800783c:	2208      	movs	r2, #8
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	1a9b      	subs	r3, r3, r2
 8007842:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f023 0307 	bic.w	r3, r3, #7
 800784a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	4a15      	ldr	r2, [pc, #84]	; (80078a4 <prvHeapInit+0xb4>)
 8007850:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8007852:	4b14      	ldr	r3, [pc, #80]	; (80078a4 <prvHeapInit+0xb4>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	2200      	movs	r2, #0
 8007858:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800785a:	4b12      	ldr	r3, [pc, #72]	; (80078a4 <prvHeapInit+0xb4>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	2200      	movs	r2, #0
 8007860:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	68fa      	ldr	r2, [r7, #12]
 800786a:	1ad2      	subs	r2, r2, r3
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007870:	4b0c      	ldr	r3, [pc, #48]	; (80078a4 <prvHeapInit+0xb4>)
 8007872:	681a      	ldr	r2, [r3, #0]
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	685b      	ldr	r3, [r3, #4]
 800787c:	4a0a      	ldr	r2, [pc, #40]	; (80078a8 <prvHeapInit+0xb8>)
 800787e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	4a09      	ldr	r2, [pc, #36]	; (80078ac <prvHeapInit+0xbc>)
 8007886:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007888:	4b09      	ldr	r3, [pc, #36]	; (80078b0 <prvHeapInit+0xc0>)
 800788a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800788e:	601a      	str	r2, [r3, #0]
}
 8007890:	bf00      	nop
 8007892:	3714      	adds	r7, #20
 8007894:	46bd      	mov	sp, r7
 8007896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789a:	4770      	bx	lr
 800789c:	20000254 	.word	0x20000254
 80078a0:	20019254 	.word	0x20019254
 80078a4:	2001925c 	.word	0x2001925c
 80078a8:	20019264 	.word	0x20019264
 80078ac:	20019260 	.word	0x20019260
 80078b0:	20019270 	.word	0x20019270

080078b4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80078b4:	b480      	push	{r7}
 80078b6:	b085      	sub	sp, #20
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80078bc:	4b28      	ldr	r3, [pc, #160]	; (8007960 <prvInsertBlockIntoFreeList+0xac>)
 80078be:	60fb      	str	r3, [r7, #12]
 80078c0:	e002      	b.n	80078c8 <prvInsertBlockIntoFreeList+0x14>
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	60fb      	str	r3, [r7, #12]
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	687a      	ldr	r2, [r7, #4]
 80078ce:	429a      	cmp	r2, r3
 80078d0:	d8f7      	bhi.n	80078c2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	685b      	ldr	r3, [r3, #4]
 80078da:	68ba      	ldr	r2, [r7, #8]
 80078dc:	4413      	add	r3, r2
 80078de:	687a      	ldr	r2, [r7, #4]
 80078e0:	429a      	cmp	r2, r3
 80078e2:	d108      	bne.n	80078f6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	685a      	ldr	r2, [r3, #4]
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	441a      	add	r2, r3
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	685b      	ldr	r3, [r3, #4]
 80078fe:	68ba      	ldr	r2, [r7, #8]
 8007900:	441a      	add	r2, r3
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	429a      	cmp	r2, r3
 8007908:	d118      	bne.n	800793c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681a      	ldr	r2, [r3, #0]
 800790e:	4b15      	ldr	r3, [pc, #84]	; (8007964 <prvInsertBlockIntoFreeList+0xb0>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	429a      	cmp	r2, r3
 8007914:	d00d      	beq.n	8007932 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	685a      	ldr	r2, [r3, #4]
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	685b      	ldr	r3, [r3, #4]
 8007920:	441a      	add	r2, r3
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	681a      	ldr	r2, [r3, #0]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	601a      	str	r2, [r3, #0]
 8007930:	e008      	b.n	8007944 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007932:	4b0c      	ldr	r3, [pc, #48]	; (8007964 <prvInsertBlockIntoFreeList+0xb0>)
 8007934:	681a      	ldr	r2, [r3, #0]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	601a      	str	r2, [r3, #0]
 800793a:	e003      	b.n	8007944 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681a      	ldr	r2, [r3, #0]
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8007944:	68fa      	ldr	r2, [r7, #12]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	429a      	cmp	r2, r3
 800794a:	d002      	beq.n	8007952 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	687a      	ldr	r2, [r7, #4]
 8007950:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8007952:	bf00      	nop
 8007954:	3714      	adds	r7, #20
 8007956:	46bd      	mov	sp, r7
 8007958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795c:	4770      	bx	lr
 800795e:	bf00      	nop
 8007960:	20019254 	.word	0x20019254
 8007964:	2001925c 	.word	0x2001925c

08007968 <__errno>:
 8007968:	4b01      	ldr	r3, [pc, #4]	; (8007970 <__errno+0x8>)
 800796a:	6818      	ldr	r0, [r3, #0]
 800796c:	4770      	bx	lr
 800796e:	bf00      	nop
 8007970:	20000028 	.word	0x20000028

08007974 <__libc_init_array>:
 8007974:	b570      	push	{r4, r5, r6, lr}
 8007976:	4d0d      	ldr	r5, [pc, #52]	; (80079ac <__libc_init_array+0x38>)
 8007978:	4c0d      	ldr	r4, [pc, #52]	; (80079b0 <__libc_init_array+0x3c>)
 800797a:	1b64      	subs	r4, r4, r5
 800797c:	10a4      	asrs	r4, r4, #2
 800797e:	2600      	movs	r6, #0
 8007980:	42a6      	cmp	r6, r4
 8007982:	d109      	bne.n	8007998 <__libc_init_array+0x24>
 8007984:	4d0b      	ldr	r5, [pc, #44]	; (80079b4 <__libc_init_array+0x40>)
 8007986:	4c0c      	ldr	r4, [pc, #48]	; (80079b8 <__libc_init_array+0x44>)
 8007988:	f001 f948 	bl	8008c1c <_init>
 800798c:	1b64      	subs	r4, r4, r5
 800798e:	10a4      	asrs	r4, r4, #2
 8007990:	2600      	movs	r6, #0
 8007992:	42a6      	cmp	r6, r4
 8007994:	d105      	bne.n	80079a2 <__libc_init_array+0x2e>
 8007996:	bd70      	pop	{r4, r5, r6, pc}
 8007998:	f855 3b04 	ldr.w	r3, [r5], #4
 800799c:	4798      	blx	r3
 800799e:	3601      	adds	r6, #1
 80079a0:	e7ee      	b.n	8007980 <__libc_init_array+0xc>
 80079a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80079a6:	4798      	blx	r3
 80079a8:	3601      	adds	r6, #1
 80079aa:	e7f2      	b.n	8007992 <__libc_init_array+0x1e>
 80079ac:	080090d0 	.word	0x080090d0
 80079b0:	080090d0 	.word	0x080090d0
 80079b4:	080090d0 	.word	0x080090d0
 80079b8:	080090d4 	.word	0x080090d4

080079bc <memcpy>:
 80079bc:	440a      	add	r2, r1
 80079be:	4291      	cmp	r1, r2
 80079c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80079c4:	d100      	bne.n	80079c8 <memcpy+0xc>
 80079c6:	4770      	bx	lr
 80079c8:	b510      	push	{r4, lr}
 80079ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80079ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80079d2:	4291      	cmp	r1, r2
 80079d4:	d1f9      	bne.n	80079ca <memcpy+0xe>
 80079d6:	bd10      	pop	{r4, pc}

080079d8 <memset>:
 80079d8:	4402      	add	r2, r0
 80079da:	4603      	mov	r3, r0
 80079dc:	4293      	cmp	r3, r2
 80079de:	d100      	bne.n	80079e2 <memset+0xa>
 80079e0:	4770      	bx	lr
 80079e2:	f803 1b01 	strb.w	r1, [r3], #1
 80079e6:	e7f9      	b.n	80079dc <memset+0x4>

080079e8 <iprintf>:
 80079e8:	b40f      	push	{r0, r1, r2, r3}
 80079ea:	4b0a      	ldr	r3, [pc, #40]	; (8007a14 <iprintf+0x2c>)
 80079ec:	b513      	push	{r0, r1, r4, lr}
 80079ee:	681c      	ldr	r4, [r3, #0]
 80079f0:	b124      	cbz	r4, 80079fc <iprintf+0x14>
 80079f2:	69a3      	ldr	r3, [r4, #24]
 80079f4:	b913      	cbnz	r3, 80079fc <iprintf+0x14>
 80079f6:	4620      	mov	r0, r4
 80079f8:	f000 f886 	bl	8007b08 <__sinit>
 80079fc:	ab05      	add	r3, sp, #20
 80079fe:	9a04      	ldr	r2, [sp, #16]
 8007a00:	68a1      	ldr	r1, [r4, #8]
 8007a02:	9301      	str	r3, [sp, #4]
 8007a04:	4620      	mov	r0, r4
 8007a06:	f000 faff 	bl	8008008 <_vfiprintf_r>
 8007a0a:	b002      	add	sp, #8
 8007a0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a10:	b004      	add	sp, #16
 8007a12:	4770      	bx	lr
 8007a14:	20000028 	.word	0x20000028

08007a18 <siprintf>:
 8007a18:	b40e      	push	{r1, r2, r3}
 8007a1a:	b500      	push	{lr}
 8007a1c:	b09c      	sub	sp, #112	; 0x70
 8007a1e:	ab1d      	add	r3, sp, #116	; 0x74
 8007a20:	9002      	str	r0, [sp, #8]
 8007a22:	9006      	str	r0, [sp, #24]
 8007a24:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007a28:	4809      	ldr	r0, [pc, #36]	; (8007a50 <siprintf+0x38>)
 8007a2a:	9107      	str	r1, [sp, #28]
 8007a2c:	9104      	str	r1, [sp, #16]
 8007a2e:	4909      	ldr	r1, [pc, #36]	; (8007a54 <siprintf+0x3c>)
 8007a30:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a34:	9105      	str	r1, [sp, #20]
 8007a36:	6800      	ldr	r0, [r0, #0]
 8007a38:	9301      	str	r3, [sp, #4]
 8007a3a:	a902      	add	r1, sp, #8
 8007a3c:	f000 f9ba 	bl	8007db4 <_svfiprintf_r>
 8007a40:	9b02      	ldr	r3, [sp, #8]
 8007a42:	2200      	movs	r2, #0
 8007a44:	701a      	strb	r2, [r3, #0]
 8007a46:	b01c      	add	sp, #112	; 0x70
 8007a48:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a4c:	b003      	add	sp, #12
 8007a4e:	4770      	bx	lr
 8007a50:	20000028 	.word	0x20000028
 8007a54:	ffff0208 	.word	0xffff0208

08007a58 <std>:
 8007a58:	2300      	movs	r3, #0
 8007a5a:	b510      	push	{r4, lr}
 8007a5c:	4604      	mov	r4, r0
 8007a5e:	e9c0 3300 	strd	r3, r3, [r0]
 8007a62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007a66:	6083      	str	r3, [r0, #8]
 8007a68:	8181      	strh	r1, [r0, #12]
 8007a6a:	6643      	str	r3, [r0, #100]	; 0x64
 8007a6c:	81c2      	strh	r2, [r0, #14]
 8007a6e:	6183      	str	r3, [r0, #24]
 8007a70:	4619      	mov	r1, r3
 8007a72:	2208      	movs	r2, #8
 8007a74:	305c      	adds	r0, #92	; 0x5c
 8007a76:	f7ff ffaf 	bl	80079d8 <memset>
 8007a7a:	4b05      	ldr	r3, [pc, #20]	; (8007a90 <std+0x38>)
 8007a7c:	6263      	str	r3, [r4, #36]	; 0x24
 8007a7e:	4b05      	ldr	r3, [pc, #20]	; (8007a94 <std+0x3c>)
 8007a80:	62a3      	str	r3, [r4, #40]	; 0x28
 8007a82:	4b05      	ldr	r3, [pc, #20]	; (8007a98 <std+0x40>)
 8007a84:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007a86:	4b05      	ldr	r3, [pc, #20]	; (8007a9c <std+0x44>)
 8007a88:	6224      	str	r4, [r4, #32]
 8007a8a:	6323      	str	r3, [r4, #48]	; 0x30
 8007a8c:	bd10      	pop	{r4, pc}
 8007a8e:	bf00      	nop
 8007a90:	080085b1 	.word	0x080085b1
 8007a94:	080085d3 	.word	0x080085d3
 8007a98:	0800860b 	.word	0x0800860b
 8007a9c:	0800862f 	.word	0x0800862f

08007aa0 <_cleanup_r>:
 8007aa0:	4901      	ldr	r1, [pc, #4]	; (8007aa8 <_cleanup_r+0x8>)
 8007aa2:	f000 b8af 	b.w	8007c04 <_fwalk_reent>
 8007aa6:	bf00      	nop
 8007aa8:	08008909 	.word	0x08008909

08007aac <__sfmoreglue>:
 8007aac:	b570      	push	{r4, r5, r6, lr}
 8007aae:	1e4a      	subs	r2, r1, #1
 8007ab0:	2568      	movs	r5, #104	; 0x68
 8007ab2:	4355      	muls	r5, r2
 8007ab4:	460e      	mov	r6, r1
 8007ab6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007aba:	f000 f8c5 	bl	8007c48 <_malloc_r>
 8007abe:	4604      	mov	r4, r0
 8007ac0:	b140      	cbz	r0, 8007ad4 <__sfmoreglue+0x28>
 8007ac2:	2100      	movs	r1, #0
 8007ac4:	e9c0 1600 	strd	r1, r6, [r0]
 8007ac8:	300c      	adds	r0, #12
 8007aca:	60a0      	str	r0, [r4, #8]
 8007acc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007ad0:	f7ff ff82 	bl	80079d8 <memset>
 8007ad4:	4620      	mov	r0, r4
 8007ad6:	bd70      	pop	{r4, r5, r6, pc}

08007ad8 <__sfp_lock_acquire>:
 8007ad8:	4801      	ldr	r0, [pc, #4]	; (8007ae0 <__sfp_lock_acquire+0x8>)
 8007ada:	f000 b8b3 	b.w	8007c44 <__retarget_lock_acquire_recursive>
 8007ade:	bf00      	nop
 8007ae0:	200193a8 	.word	0x200193a8

08007ae4 <__sfp_lock_release>:
 8007ae4:	4801      	ldr	r0, [pc, #4]	; (8007aec <__sfp_lock_release+0x8>)
 8007ae6:	f000 b8ae 	b.w	8007c46 <__retarget_lock_release_recursive>
 8007aea:	bf00      	nop
 8007aec:	200193a8 	.word	0x200193a8

08007af0 <__sinit_lock_acquire>:
 8007af0:	4801      	ldr	r0, [pc, #4]	; (8007af8 <__sinit_lock_acquire+0x8>)
 8007af2:	f000 b8a7 	b.w	8007c44 <__retarget_lock_acquire_recursive>
 8007af6:	bf00      	nop
 8007af8:	200193a3 	.word	0x200193a3

08007afc <__sinit_lock_release>:
 8007afc:	4801      	ldr	r0, [pc, #4]	; (8007b04 <__sinit_lock_release+0x8>)
 8007afe:	f000 b8a2 	b.w	8007c46 <__retarget_lock_release_recursive>
 8007b02:	bf00      	nop
 8007b04:	200193a3 	.word	0x200193a3

08007b08 <__sinit>:
 8007b08:	b510      	push	{r4, lr}
 8007b0a:	4604      	mov	r4, r0
 8007b0c:	f7ff fff0 	bl	8007af0 <__sinit_lock_acquire>
 8007b10:	69a3      	ldr	r3, [r4, #24]
 8007b12:	b11b      	cbz	r3, 8007b1c <__sinit+0x14>
 8007b14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b18:	f7ff bff0 	b.w	8007afc <__sinit_lock_release>
 8007b1c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007b20:	6523      	str	r3, [r4, #80]	; 0x50
 8007b22:	4b13      	ldr	r3, [pc, #76]	; (8007b70 <__sinit+0x68>)
 8007b24:	4a13      	ldr	r2, [pc, #76]	; (8007b74 <__sinit+0x6c>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	62a2      	str	r2, [r4, #40]	; 0x28
 8007b2a:	42a3      	cmp	r3, r4
 8007b2c:	bf04      	itt	eq
 8007b2e:	2301      	moveq	r3, #1
 8007b30:	61a3      	streq	r3, [r4, #24]
 8007b32:	4620      	mov	r0, r4
 8007b34:	f000 f820 	bl	8007b78 <__sfp>
 8007b38:	6060      	str	r0, [r4, #4]
 8007b3a:	4620      	mov	r0, r4
 8007b3c:	f000 f81c 	bl	8007b78 <__sfp>
 8007b40:	60a0      	str	r0, [r4, #8]
 8007b42:	4620      	mov	r0, r4
 8007b44:	f000 f818 	bl	8007b78 <__sfp>
 8007b48:	2200      	movs	r2, #0
 8007b4a:	60e0      	str	r0, [r4, #12]
 8007b4c:	2104      	movs	r1, #4
 8007b4e:	6860      	ldr	r0, [r4, #4]
 8007b50:	f7ff ff82 	bl	8007a58 <std>
 8007b54:	68a0      	ldr	r0, [r4, #8]
 8007b56:	2201      	movs	r2, #1
 8007b58:	2109      	movs	r1, #9
 8007b5a:	f7ff ff7d 	bl	8007a58 <std>
 8007b5e:	68e0      	ldr	r0, [r4, #12]
 8007b60:	2202      	movs	r2, #2
 8007b62:	2112      	movs	r1, #18
 8007b64:	f7ff ff78 	bl	8007a58 <std>
 8007b68:	2301      	movs	r3, #1
 8007b6a:	61a3      	str	r3, [r4, #24]
 8007b6c:	e7d2      	b.n	8007b14 <__sinit+0xc>
 8007b6e:	bf00      	nop
 8007b70:	08009030 	.word	0x08009030
 8007b74:	08007aa1 	.word	0x08007aa1

08007b78 <__sfp>:
 8007b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b7a:	4607      	mov	r7, r0
 8007b7c:	f7ff ffac 	bl	8007ad8 <__sfp_lock_acquire>
 8007b80:	4b1e      	ldr	r3, [pc, #120]	; (8007bfc <__sfp+0x84>)
 8007b82:	681e      	ldr	r6, [r3, #0]
 8007b84:	69b3      	ldr	r3, [r6, #24]
 8007b86:	b913      	cbnz	r3, 8007b8e <__sfp+0x16>
 8007b88:	4630      	mov	r0, r6
 8007b8a:	f7ff ffbd 	bl	8007b08 <__sinit>
 8007b8e:	3648      	adds	r6, #72	; 0x48
 8007b90:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007b94:	3b01      	subs	r3, #1
 8007b96:	d503      	bpl.n	8007ba0 <__sfp+0x28>
 8007b98:	6833      	ldr	r3, [r6, #0]
 8007b9a:	b30b      	cbz	r3, 8007be0 <__sfp+0x68>
 8007b9c:	6836      	ldr	r6, [r6, #0]
 8007b9e:	e7f7      	b.n	8007b90 <__sfp+0x18>
 8007ba0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007ba4:	b9d5      	cbnz	r5, 8007bdc <__sfp+0x64>
 8007ba6:	4b16      	ldr	r3, [pc, #88]	; (8007c00 <__sfp+0x88>)
 8007ba8:	60e3      	str	r3, [r4, #12]
 8007baa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007bae:	6665      	str	r5, [r4, #100]	; 0x64
 8007bb0:	f000 f847 	bl	8007c42 <__retarget_lock_init_recursive>
 8007bb4:	f7ff ff96 	bl	8007ae4 <__sfp_lock_release>
 8007bb8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007bbc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007bc0:	6025      	str	r5, [r4, #0]
 8007bc2:	61a5      	str	r5, [r4, #24]
 8007bc4:	2208      	movs	r2, #8
 8007bc6:	4629      	mov	r1, r5
 8007bc8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007bcc:	f7ff ff04 	bl	80079d8 <memset>
 8007bd0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007bd4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007bd8:	4620      	mov	r0, r4
 8007bda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007bdc:	3468      	adds	r4, #104	; 0x68
 8007bde:	e7d9      	b.n	8007b94 <__sfp+0x1c>
 8007be0:	2104      	movs	r1, #4
 8007be2:	4638      	mov	r0, r7
 8007be4:	f7ff ff62 	bl	8007aac <__sfmoreglue>
 8007be8:	4604      	mov	r4, r0
 8007bea:	6030      	str	r0, [r6, #0]
 8007bec:	2800      	cmp	r0, #0
 8007bee:	d1d5      	bne.n	8007b9c <__sfp+0x24>
 8007bf0:	f7ff ff78 	bl	8007ae4 <__sfp_lock_release>
 8007bf4:	230c      	movs	r3, #12
 8007bf6:	603b      	str	r3, [r7, #0]
 8007bf8:	e7ee      	b.n	8007bd8 <__sfp+0x60>
 8007bfa:	bf00      	nop
 8007bfc:	08009030 	.word	0x08009030
 8007c00:	ffff0001 	.word	0xffff0001

08007c04 <_fwalk_reent>:
 8007c04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c08:	4606      	mov	r6, r0
 8007c0a:	4688      	mov	r8, r1
 8007c0c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007c10:	2700      	movs	r7, #0
 8007c12:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007c16:	f1b9 0901 	subs.w	r9, r9, #1
 8007c1a:	d505      	bpl.n	8007c28 <_fwalk_reent+0x24>
 8007c1c:	6824      	ldr	r4, [r4, #0]
 8007c1e:	2c00      	cmp	r4, #0
 8007c20:	d1f7      	bne.n	8007c12 <_fwalk_reent+0xe>
 8007c22:	4638      	mov	r0, r7
 8007c24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c28:	89ab      	ldrh	r3, [r5, #12]
 8007c2a:	2b01      	cmp	r3, #1
 8007c2c:	d907      	bls.n	8007c3e <_fwalk_reent+0x3a>
 8007c2e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007c32:	3301      	adds	r3, #1
 8007c34:	d003      	beq.n	8007c3e <_fwalk_reent+0x3a>
 8007c36:	4629      	mov	r1, r5
 8007c38:	4630      	mov	r0, r6
 8007c3a:	47c0      	blx	r8
 8007c3c:	4307      	orrs	r7, r0
 8007c3e:	3568      	adds	r5, #104	; 0x68
 8007c40:	e7e9      	b.n	8007c16 <_fwalk_reent+0x12>

08007c42 <__retarget_lock_init_recursive>:
 8007c42:	4770      	bx	lr

08007c44 <__retarget_lock_acquire_recursive>:
 8007c44:	4770      	bx	lr

08007c46 <__retarget_lock_release_recursive>:
 8007c46:	4770      	bx	lr

08007c48 <_malloc_r>:
 8007c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c4a:	1ccd      	adds	r5, r1, #3
 8007c4c:	f025 0503 	bic.w	r5, r5, #3
 8007c50:	3508      	adds	r5, #8
 8007c52:	2d0c      	cmp	r5, #12
 8007c54:	bf38      	it	cc
 8007c56:	250c      	movcc	r5, #12
 8007c58:	2d00      	cmp	r5, #0
 8007c5a:	4606      	mov	r6, r0
 8007c5c:	db01      	blt.n	8007c62 <_malloc_r+0x1a>
 8007c5e:	42a9      	cmp	r1, r5
 8007c60:	d903      	bls.n	8007c6a <_malloc_r+0x22>
 8007c62:	230c      	movs	r3, #12
 8007c64:	6033      	str	r3, [r6, #0]
 8007c66:	2000      	movs	r0, #0
 8007c68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c6a:	f000 ff19 	bl	8008aa0 <__malloc_lock>
 8007c6e:	4921      	ldr	r1, [pc, #132]	; (8007cf4 <_malloc_r+0xac>)
 8007c70:	680a      	ldr	r2, [r1, #0]
 8007c72:	4614      	mov	r4, r2
 8007c74:	b99c      	cbnz	r4, 8007c9e <_malloc_r+0x56>
 8007c76:	4f20      	ldr	r7, [pc, #128]	; (8007cf8 <_malloc_r+0xb0>)
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	b923      	cbnz	r3, 8007c86 <_malloc_r+0x3e>
 8007c7c:	4621      	mov	r1, r4
 8007c7e:	4630      	mov	r0, r6
 8007c80:	f000 fc86 	bl	8008590 <_sbrk_r>
 8007c84:	6038      	str	r0, [r7, #0]
 8007c86:	4629      	mov	r1, r5
 8007c88:	4630      	mov	r0, r6
 8007c8a:	f000 fc81 	bl	8008590 <_sbrk_r>
 8007c8e:	1c43      	adds	r3, r0, #1
 8007c90:	d123      	bne.n	8007cda <_malloc_r+0x92>
 8007c92:	230c      	movs	r3, #12
 8007c94:	6033      	str	r3, [r6, #0]
 8007c96:	4630      	mov	r0, r6
 8007c98:	f000 ff08 	bl	8008aac <__malloc_unlock>
 8007c9c:	e7e3      	b.n	8007c66 <_malloc_r+0x1e>
 8007c9e:	6823      	ldr	r3, [r4, #0]
 8007ca0:	1b5b      	subs	r3, r3, r5
 8007ca2:	d417      	bmi.n	8007cd4 <_malloc_r+0x8c>
 8007ca4:	2b0b      	cmp	r3, #11
 8007ca6:	d903      	bls.n	8007cb0 <_malloc_r+0x68>
 8007ca8:	6023      	str	r3, [r4, #0]
 8007caa:	441c      	add	r4, r3
 8007cac:	6025      	str	r5, [r4, #0]
 8007cae:	e004      	b.n	8007cba <_malloc_r+0x72>
 8007cb0:	6863      	ldr	r3, [r4, #4]
 8007cb2:	42a2      	cmp	r2, r4
 8007cb4:	bf0c      	ite	eq
 8007cb6:	600b      	streq	r3, [r1, #0]
 8007cb8:	6053      	strne	r3, [r2, #4]
 8007cba:	4630      	mov	r0, r6
 8007cbc:	f000 fef6 	bl	8008aac <__malloc_unlock>
 8007cc0:	f104 000b 	add.w	r0, r4, #11
 8007cc4:	1d23      	adds	r3, r4, #4
 8007cc6:	f020 0007 	bic.w	r0, r0, #7
 8007cca:	1ac2      	subs	r2, r0, r3
 8007ccc:	d0cc      	beq.n	8007c68 <_malloc_r+0x20>
 8007cce:	1a1b      	subs	r3, r3, r0
 8007cd0:	50a3      	str	r3, [r4, r2]
 8007cd2:	e7c9      	b.n	8007c68 <_malloc_r+0x20>
 8007cd4:	4622      	mov	r2, r4
 8007cd6:	6864      	ldr	r4, [r4, #4]
 8007cd8:	e7cc      	b.n	8007c74 <_malloc_r+0x2c>
 8007cda:	1cc4      	adds	r4, r0, #3
 8007cdc:	f024 0403 	bic.w	r4, r4, #3
 8007ce0:	42a0      	cmp	r0, r4
 8007ce2:	d0e3      	beq.n	8007cac <_malloc_r+0x64>
 8007ce4:	1a21      	subs	r1, r4, r0
 8007ce6:	4630      	mov	r0, r6
 8007ce8:	f000 fc52 	bl	8008590 <_sbrk_r>
 8007cec:	3001      	adds	r0, #1
 8007cee:	d1dd      	bne.n	8007cac <_malloc_r+0x64>
 8007cf0:	e7cf      	b.n	8007c92 <_malloc_r+0x4a>
 8007cf2:	bf00      	nop
 8007cf4:	20019274 	.word	0x20019274
 8007cf8:	20019278 	.word	0x20019278

08007cfc <__ssputs_r>:
 8007cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d00:	688e      	ldr	r6, [r1, #8]
 8007d02:	429e      	cmp	r6, r3
 8007d04:	4682      	mov	sl, r0
 8007d06:	460c      	mov	r4, r1
 8007d08:	4690      	mov	r8, r2
 8007d0a:	461f      	mov	r7, r3
 8007d0c:	d838      	bhi.n	8007d80 <__ssputs_r+0x84>
 8007d0e:	898a      	ldrh	r2, [r1, #12]
 8007d10:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007d14:	d032      	beq.n	8007d7c <__ssputs_r+0x80>
 8007d16:	6825      	ldr	r5, [r4, #0]
 8007d18:	6909      	ldr	r1, [r1, #16]
 8007d1a:	eba5 0901 	sub.w	r9, r5, r1
 8007d1e:	6965      	ldr	r5, [r4, #20]
 8007d20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007d24:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007d28:	3301      	adds	r3, #1
 8007d2a:	444b      	add	r3, r9
 8007d2c:	106d      	asrs	r5, r5, #1
 8007d2e:	429d      	cmp	r5, r3
 8007d30:	bf38      	it	cc
 8007d32:	461d      	movcc	r5, r3
 8007d34:	0553      	lsls	r3, r2, #21
 8007d36:	d531      	bpl.n	8007d9c <__ssputs_r+0xa0>
 8007d38:	4629      	mov	r1, r5
 8007d3a:	f7ff ff85 	bl	8007c48 <_malloc_r>
 8007d3e:	4606      	mov	r6, r0
 8007d40:	b950      	cbnz	r0, 8007d58 <__ssputs_r+0x5c>
 8007d42:	230c      	movs	r3, #12
 8007d44:	f8ca 3000 	str.w	r3, [sl]
 8007d48:	89a3      	ldrh	r3, [r4, #12]
 8007d4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d4e:	81a3      	strh	r3, [r4, #12]
 8007d50:	f04f 30ff 	mov.w	r0, #4294967295
 8007d54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d58:	6921      	ldr	r1, [r4, #16]
 8007d5a:	464a      	mov	r2, r9
 8007d5c:	f7ff fe2e 	bl	80079bc <memcpy>
 8007d60:	89a3      	ldrh	r3, [r4, #12]
 8007d62:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007d66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d6a:	81a3      	strh	r3, [r4, #12]
 8007d6c:	6126      	str	r6, [r4, #16]
 8007d6e:	6165      	str	r5, [r4, #20]
 8007d70:	444e      	add	r6, r9
 8007d72:	eba5 0509 	sub.w	r5, r5, r9
 8007d76:	6026      	str	r6, [r4, #0]
 8007d78:	60a5      	str	r5, [r4, #8]
 8007d7a:	463e      	mov	r6, r7
 8007d7c:	42be      	cmp	r6, r7
 8007d7e:	d900      	bls.n	8007d82 <__ssputs_r+0x86>
 8007d80:	463e      	mov	r6, r7
 8007d82:	4632      	mov	r2, r6
 8007d84:	6820      	ldr	r0, [r4, #0]
 8007d86:	4641      	mov	r1, r8
 8007d88:	f000 fe70 	bl	8008a6c <memmove>
 8007d8c:	68a3      	ldr	r3, [r4, #8]
 8007d8e:	6822      	ldr	r2, [r4, #0]
 8007d90:	1b9b      	subs	r3, r3, r6
 8007d92:	4432      	add	r2, r6
 8007d94:	60a3      	str	r3, [r4, #8]
 8007d96:	6022      	str	r2, [r4, #0]
 8007d98:	2000      	movs	r0, #0
 8007d9a:	e7db      	b.n	8007d54 <__ssputs_r+0x58>
 8007d9c:	462a      	mov	r2, r5
 8007d9e:	f000 fedb 	bl	8008b58 <_realloc_r>
 8007da2:	4606      	mov	r6, r0
 8007da4:	2800      	cmp	r0, #0
 8007da6:	d1e1      	bne.n	8007d6c <__ssputs_r+0x70>
 8007da8:	6921      	ldr	r1, [r4, #16]
 8007daa:	4650      	mov	r0, sl
 8007dac:	f000 fe84 	bl	8008ab8 <_free_r>
 8007db0:	e7c7      	b.n	8007d42 <__ssputs_r+0x46>
	...

08007db4 <_svfiprintf_r>:
 8007db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007db8:	4698      	mov	r8, r3
 8007dba:	898b      	ldrh	r3, [r1, #12]
 8007dbc:	061b      	lsls	r3, r3, #24
 8007dbe:	b09d      	sub	sp, #116	; 0x74
 8007dc0:	4607      	mov	r7, r0
 8007dc2:	460d      	mov	r5, r1
 8007dc4:	4614      	mov	r4, r2
 8007dc6:	d50e      	bpl.n	8007de6 <_svfiprintf_r+0x32>
 8007dc8:	690b      	ldr	r3, [r1, #16]
 8007dca:	b963      	cbnz	r3, 8007de6 <_svfiprintf_r+0x32>
 8007dcc:	2140      	movs	r1, #64	; 0x40
 8007dce:	f7ff ff3b 	bl	8007c48 <_malloc_r>
 8007dd2:	6028      	str	r0, [r5, #0]
 8007dd4:	6128      	str	r0, [r5, #16]
 8007dd6:	b920      	cbnz	r0, 8007de2 <_svfiprintf_r+0x2e>
 8007dd8:	230c      	movs	r3, #12
 8007dda:	603b      	str	r3, [r7, #0]
 8007ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8007de0:	e0d1      	b.n	8007f86 <_svfiprintf_r+0x1d2>
 8007de2:	2340      	movs	r3, #64	; 0x40
 8007de4:	616b      	str	r3, [r5, #20]
 8007de6:	2300      	movs	r3, #0
 8007de8:	9309      	str	r3, [sp, #36]	; 0x24
 8007dea:	2320      	movs	r3, #32
 8007dec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007df0:	f8cd 800c 	str.w	r8, [sp, #12]
 8007df4:	2330      	movs	r3, #48	; 0x30
 8007df6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007fa0 <_svfiprintf_r+0x1ec>
 8007dfa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007dfe:	f04f 0901 	mov.w	r9, #1
 8007e02:	4623      	mov	r3, r4
 8007e04:	469a      	mov	sl, r3
 8007e06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e0a:	b10a      	cbz	r2, 8007e10 <_svfiprintf_r+0x5c>
 8007e0c:	2a25      	cmp	r2, #37	; 0x25
 8007e0e:	d1f9      	bne.n	8007e04 <_svfiprintf_r+0x50>
 8007e10:	ebba 0b04 	subs.w	fp, sl, r4
 8007e14:	d00b      	beq.n	8007e2e <_svfiprintf_r+0x7a>
 8007e16:	465b      	mov	r3, fp
 8007e18:	4622      	mov	r2, r4
 8007e1a:	4629      	mov	r1, r5
 8007e1c:	4638      	mov	r0, r7
 8007e1e:	f7ff ff6d 	bl	8007cfc <__ssputs_r>
 8007e22:	3001      	adds	r0, #1
 8007e24:	f000 80aa 	beq.w	8007f7c <_svfiprintf_r+0x1c8>
 8007e28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e2a:	445a      	add	r2, fp
 8007e2c:	9209      	str	r2, [sp, #36]	; 0x24
 8007e2e:	f89a 3000 	ldrb.w	r3, [sl]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	f000 80a2 	beq.w	8007f7c <_svfiprintf_r+0x1c8>
 8007e38:	2300      	movs	r3, #0
 8007e3a:	f04f 32ff 	mov.w	r2, #4294967295
 8007e3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e42:	f10a 0a01 	add.w	sl, sl, #1
 8007e46:	9304      	str	r3, [sp, #16]
 8007e48:	9307      	str	r3, [sp, #28]
 8007e4a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007e4e:	931a      	str	r3, [sp, #104]	; 0x68
 8007e50:	4654      	mov	r4, sl
 8007e52:	2205      	movs	r2, #5
 8007e54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e58:	4851      	ldr	r0, [pc, #324]	; (8007fa0 <_svfiprintf_r+0x1ec>)
 8007e5a:	f7f8 f9d1 	bl	8000200 <memchr>
 8007e5e:	9a04      	ldr	r2, [sp, #16]
 8007e60:	b9d8      	cbnz	r0, 8007e9a <_svfiprintf_r+0xe6>
 8007e62:	06d0      	lsls	r0, r2, #27
 8007e64:	bf44      	itt	mi
 8007e66:	2320      	movmi	r3, #32
 8007e68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e6c:	0711      	lsls	r1, r2, #28
 8007e6e:	bf44      	itt	mi
 8007e70:	232b      	movmi	r3, #43	; 0x2b
 8007e72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e76:	f89a 3000 	ldrb.w	r3, [sl]
 8007e7a:	2b2a      	cmp	r3, #42	; 0x2a
 8007e7c:	d015      	beq.n	8007eaa <_svfiprintf_r+0xf6>
 8007e7e:	9a07      	ldr	r2, [sp, #28]
 8007e80:	4654      	mov	r4, sl
 8007e82:	2000      	movs	r0, #0
 8007e84:	f04f 0c0a 	mov.w	ip, #10
 8007e88:	4621      	mov	r1, r4
 8007e8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e8e:	3b30      	subs	r3, #48	; 0x30
 8007e90:	2b09      	cmp	r3, #9
 8007e92:	d94e      	bls.n	8007f32 <_svfiprintf_r+0x17e>
 8007e94:	b1b0      	cbz	r0, 8007ec4 <_svfiprintf_r+0x110>
 8007e96:	9207      	str	r2, [sp, #28]
 8007e98:	e014      	b.n	8007ec4 <_svfiprintf_r+0x110>
 8007e9a:	eba0 0308 	sub.w	r3, r0, r8
 8007e9e:	fa09 f303 	lsl.w	r3, r9, r3
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	9304      	str	r3, [sp, #16]
 8007ea6:	46a2      	mov	sl, r4
 8007ea8:	e7d2      	b.n	8007e50 <_svfiprintf_r+0x9c>
 8007eaa:	9b03      	ldr	r3, [sp, #12]
 8007eac:	1d19      	adds	r1, r3, #4
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	9103      	str	r1, [sp, #12]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	bfbb      	ittet	lt
 8007eb6:	425b      	neglt	r3, r3
 8007eb8:	f042 0202 	orrlt.w	r2, r2, #2
 8007ebc:	9307      	strge	r3, [sp, #28]
 8007ebe:	9307      	strlt	r3, [sp, #28]
 8007ec0:	bfb8      	it	lt
 8007ec2:	9204      	strlt	r2, [sp, #16]
 8007ec4:	7823      	ldrb	r3, [r4, #0]
 8007ec6:	2b2e      	cmp	r3, #46	; 0x2e
 8007ec8:	d10c      	bne.n	8007ee4 <_svfiprintf_r+0x130>
 8007eca:	7863      	ldrb	r3, [r4, #1]
 8007ecc:	2b2a      	cmp	r3, #42	; 0x2a
 8007ece:	d135      	bne.n	8007f3c <_svfiprintf_r+0x188>
 8007ed0:	9b03      	ldr	r3, [sp, #12]
 8007ed2:	1d1a      	adds	r2, r3, #4
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	9203      	str	r2, [sp, #12]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	bfb8      	it	lt
 8007edc:	f04f 33ff 	movlt.w	r3, #4294967295
 8007ee0:	3402      	adds	r4, #2
 8007ee2:	9305      	str	r3, [sp, #20]
 8007ee4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007fb0 <_svfiprintf_r+0x1fc>
 8007ee8:	7821      	ldrb	r1, [r4, #0]
 8007eea:	2203      	movs	r2, #3
 8007eec:	4650      	mov	r0, sl
 8007eee:	f7f8 f987 	bl	8000200 <memchr>
 8007ef2:	b140      	cbz	r0, 8007f06 <_svfiprintf_r+0x152>
 8007ef4:	2340      	movs	r3, #64	; 0x40
 8007ef6:	eba0 000a 	sub.w	r0, r0, sl
 8007efa:	fa03 f000 	lsl.w	r0, r3, r0
 8007efe:	9b04      	ldr	r3, [sp, #16]
 8007f00:	4303      	orrs	r3, r0
 8007f02:	3401      	adds	r4, #1
 8007f04:	9304      	str	r3, [sp, #16]
 8007f06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f0a:	4826      	ldr	r0, [pc, #152]	; (8007fa4 <_svfiprintf_r+0x1f0>)
 8007f0c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007f10:	2206      	movs	r2, #6
 8007f12:	f7f8 f975 	bl	8000200 <memchr>
 8007f16:	2800      	cmp	r0, #0
 8007f18:	d038      	beq.n	8007f8c <_svfiprintf_r+0x1d8>
 8007f1a:	4b23      	ldr	r3, [pc, #140]	; (8007fa8 <_svfiprintf_r+0x1f4>)
 8007f1c:	bb1b      	cbnz	r3, 8007f66 <_svfiprintf_r+0x1b2>
 8007f1e:	9b03      	ldr	r3, [sp, #12]
 8007f20:	3307      	adds	r3, #7
 8007f22:	f023 0307 	bic.w	r3, r3, #7
 8007f26:	3308      	adds	r3, #8
 8007f28:	9303      	str	r3, [sp, #12]
 8007f2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f2c:	4433      	add	r3, r6
 8007f2e:	9309      	str	r3, [sp, #36]	; 0x24
 8007f30:	e767      	b.n	8007e02 <_svfiprintf_r+0x4e>
 8007f32:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f36:	460c      	mov	r4, r1
 8007f38:	2001      	movs	r0, #1
 8007f3a:	e7a5      	b.n	8007e88 <_svfiprintf_r+0xd4>
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	3401      	adds	r4, #1
 8007f40:	9305      	str	r3, [sp, #20]
 8007f42:	4619      	mov	r1, r3
 8007f44:	f04f 0c0a 	mov.w	ip, #10
 8007f48:	4620      	mov	r0, r4
 8007f4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f4e:	3a30      	subs	r2, #48	; 0x30
 8007f50:	2a09      	cmp	r2, #9
 8007f52:	d903      	bls.n	8007f5c <_svfiprintf_r+0x1a8>
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d0c5      	beq.n	8007ee4 <_svfiprintf_r+0x130>
 8007f58:	9105      	str	r1, [sp, #20]
 8007f5a:	e7c3      	b.n	8007ee4 <_svfiprintf_r+0x130>
 8007f5c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f60:	4604      	mov	r4, r0
 8007f62:	2301      	movs	r3, #1
 8007f64:	e7f0      	b.n	8007f48 <_svfiprintf_r+0x194>
 8007f66:	ab03      	add	r3, sp, #12
 8007f68:	9300      	str	r3, [sp, #0]
 8007f6a:	462a      	mov	r2, r5
 8007f6c:	4b0f      	ldr	r3, [pc, #60]	; (8007fac <_svfiprintf_r+0x1f8>)
 8007f6e:	a904      	add	r1, sp, #16
 8007f70:	4638      	mov	r0, r7
 8007f72:	f3af 8000 	nop.w
 8007f76:	1c42      	adds	r2, r0, #1
 8007f78:	4606      	mov	r6, r0
 8007f7a:	d1d6      	bne.n	8007f2a <_svfiprintf_r+0x176>
 8007f7c:	89ab      	ldrh	r3, [r5, #12]
 8007f7e:	065b      	lsls	r3, r3, #25
 8007f80:	f53f af2c 	bmi.w	8007ddc <_svfiprintf_r+0x28>
 8007f84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f86:	b01d      	add	sp, #116	; 0x74
 8007f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f8c:	ab03      	add	r3, sp, #12
 8007f8e:	9300      	str	r3, [sp, #0]
 8007f90:	462a      	mov	r2, r5
 8007f92:	4b06      	ldr	r3, [pc, #24]	; (8007fac <_svfiprintf_r+0x1f8>)
 8007f94:	a904      	add	r1, sp, #16
 8007f96:	4638      	mov	r0, r7
 8007f98:	f000 f9d4 	bl	8008344 <_printf_i>
 8007f9c:	e7eb      	b.n	8007f76 <_svfiprintf_r+0x1c2>
 8007f9e:	bf00      	nop
 8007fa0:	08009094 	.word	0x08009094
 8007fa4:	0800909e 	.word	0x0800909e
 8007fa8:	00000000 	.word	0x00000000
 8007fac:	08007cfd 	.word	0x08007cfd
 8007fb0:	0800909a 	.word	0x0800909a

08007fb4 <__sfputc_r>:
 8007fb4:	6893      	ldr	r3, [r2, #8]
 8007fb6:	3b01      	subs	r3, #1
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	b410      	push	{r4}
 8007fbc:	6093      	str	r3, [r2, #8]
 8007fbe:	da08      	bge.n	8007fd2 <__sfputc_r+0x1e>
 8007fc0:	6994      	ldr	r4, [r2, #24]
 8007fc2:	42a3      	cmp	r3, r4
 8007fc4:	db01      	blt.n	8007fca <__sfputc_r+0x16>
 8007fc6:	290a      	cmp	r1, #10
 8007fc8:	d103      	bne.n	8007fd2 <__sfputc_r+0x1e>
 8007fca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007fce:	f000 bb33 	b.w	8008638 <__swbuf_r>
 8007fd2:	6813      	ldr	r3, [r2, #0]
 8007fd4:	1c58      	adds	r0, r3, #1
 8007fd6:	6010      	str	r0, [r2, #0]
 8007fd8:	7019      	strb	r1, [r3, #0]
 8007fda:	4608      	mov	r0, r1
 8007fdc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007fe0:	4770      	bx	lr

08007fe2 <__sfputs_r>:
 8007fe2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fe4:	4606      	mov	r6, r0
 8007fe6:	460f      	mov	r7, r1
 8007fe8:	4614      	mov	r4, r2
 8007fea:	18d5      	adds	r5, r2, r3
 8007fec:	42ac      	cmp	r4, r5
 8007fee:	d101      	bne.n	8007ff4 <__sfputs_r+0x12>
 8007ff0:	2000      	movs	r0, #0
 8007ff2:	e007      	b.n	8008004 <__sfputs_r+0x22>
 8007ff4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ff8:	463a      	mov	r2, r7
 8007ffa:	4630      	mov	r0, r6
 8007ffc:	f7ff ffda 	bl	8007fb4 <__sfputc_r>
 8008000:	1c43      	adds	r3, r0, #1
 8008002:	d1f3      	bne.n	8007fec <__sfputs_r+0xa>
 8008004:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008008 <_vfiprintf_r>:
 8008008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800800c:	460d      	mov	r5, r1
 800800e:	b09d      	sub	sp, #116	; 0x74
 8008010:	4614      	mov	r4, r2
 8008012:	4698      	mov	r8, r3
 8008014:	4606      	mov	r6, r0
 8008016:	b118      	cbz	r0, 8008020 <_vfiprintf_r+0x18>
 8008018:	6983      	ldr	r3, [r0, #24]
 800801a:	b90b      	cbnz	r3, 8008020 <_vfiprintf_r+0x18>
 800801c:	f7ff fd74 	bl	8007b08 <__sinit>
 8008020:	4b89      	ldr	r3, [pc, #548]	; (8008248 <_vfiprintf_r+0x240>)
 8008022:	429d      	cmp	r5, r3
 8008024:	d11b      	bne.n	800805e <_vfiprintf_r+0x56>
 8008026:	6875      	ldr	r5, [r6, #4]
 8008028:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800802a:	07d9      	lsls	r1, r3, #31
 800802c:	d405      	bmi.n	800803a <_vfiprintf_r+0x32>
 800802e:	89ab      	ldrh	r3, [r5, #12]
 8008030:	059a      	lsls	r2, r3, #22
 8008032:	d402      	bmi.n	800803a <_vfiprintf_r+0x32>
 8008034:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008036:	f7ff fe05 	bl	8007c44 <__retarget_lock_acquire_recursive>
 800803a:	89ab      	ldrh	r3, [r5, #12]
 800803c:	071b      	lsls	r3, r3, #28
 800803e:	d501      	bpl.n	8008044 <_vfiprintf_r+0x3c>
 8008040:	692b      	ldr	r3, [r5, #16]
 8008042:	b9eb      	cbnz	r3, 8008080 <_vfiprintf_r+0x78>
 8008044:	4629      	mov	r1, r5
 8008046:	4630      	mov	r0, r6
 8008048:	f000 fb5a 	bl	8008700 <__swsetup_r>
 800804c:	b1c0      	cbz	r0, 8008080 <_vfiprintf_r+0x78>
 800804e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008050:	07dc      	lsls	r4, r3, #31
 8008052:	d50e      	bpl.n	8008072 <_vfiprintf_r+0x6a>
 8008054:	f04f 30ff 	mov.w	r0, #4294967295
 8008058:	b01d      	add	sp, #116	; 0x74
 800805a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800805e:	4b7b      	ldr	r3, [pc, #492]	; (800824c <_vfiprintf_r+0x244>)
 8008060:	429d      	cmp	r5, r3
 8008062:	d101      	bne.n	8008068 <_vfiprintf_r+0x60>
 8008064:	68b5      	ldr	r5, [r6, #8]
 8008066:	e7df      	b.n	8008028 <_vfiprintf_r+0x20>
 8008068:	4b79      	ldr	r3, [pc, #484]	; (8008250 <_vfiprintf_r+0x248>)
 800806a:	429d      	cmp	r5, r3
 800806c:	bf08      	it	eq
 800806e:	68f5      	ldreq	r5, [r6, #12]
 8008070:	e7da      	b.n	8008028 <_vfiprintf_r+0x20>
 8008072:	89ab      	ldrh	r3, [r5, #12]
 8008074:	0598      	lsls	r0, r3, #22
 8008076:	d4ed      	bmi.n	8008054 <_vfiprintf_r+0x4c>
 8008078:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800807a:	f7ff fde4 	bl	8007c46 <__retarget_lock_release_recursive>
 800807e:	e7e9      	b.n	8008054 <_vfiprintf_r+0x4c>
 8008080:	2300      	movs	r3, #0
 8008082:	9309      	str	r3, [sp, #36]	; 0x24
 8008084:	2320      	movs	r3, #32
 8008086:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800808a:	f8cd 800c 	str.w	r8, [sp, #12]
 800808e:	2330      	movs	r3, #48	; 0x30
 8008090:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008254 <_vfiprintf_r+0x24c>
 8008094:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008098:	f04f 0901 	mov.w	r9, #1
 800809c:	4623      	mov	r3, r4
 800809e:	469a      	mov	sl, r3
 80080a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080a4:	b10a      	cbz	r2, 80080aa <_vfiprintf_r+0xa2>
 80080a6:	2a25      	cmp	r2, #37	; 0x25
 80080a8:	d1f9      	bne.n	800809e <_vfiprintf_r+0x96>
 80080aa:	ebba 0b04 	subs.w	fp, sl, r4
 80080ae:	d00b      	beq.n	80080c8 <_vfiprintf_r+0xc0>
 80080b0:	465b      	mov	r3, fp
 80080b2:	4622      	mov	r2, r4
 80080b4:	4629      	mov	r1, r5
 80080b6:	4630      	mov	r0, r6
 80080b8:	f7ff ff93 	bl	8007fe2 <__sfputs_r>
 80080bc:	3001      	adds	r0, #1
 80080be:	f000 80aa 	beq.w	8008216 <_vfiprintf_r+0x20e>
 80080c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080c4:	445a      	add	r2, fp
 80080c6:	9209      	str	r2, [sp, #36]	; 0x24
 80080c8:	f89a 3000 	ldrb.w	r3, [sl]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	f000 80a2 	beq.w	8008216 <_vfiprintf_r+0x20e>
 80080d2:	2300      	movs	r3, #0
 80080d4:	f04f 32ff 	mov.w	r2, #4294967295
 80080d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80080dc:	f10a 0a01 	add.w	sl, sl, #1
 80080e0:	9304      	str	r3, [sp, #16]
 80080e2:	9307      	str	r3, [sp, #28]
 80080e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80080e8:	931a      	str	r3, [sp, #104]	; 0x68
 80080ea:	4654      	mov	r4, sl
 80080ec:	2205      	movs	r2, #5
 80080ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080f2:	4858      	ldr	r0, [pc, #352]	; (8008254 <_vfiprintf_r+0x24c>)
 80080f4:	f7f8 f884 	bl	8000200 <memchr>
 80080f8:	9a04      	ldr	r2, [sp, #16]
 80080fa:	b9d8      	cbnz	r0, 8008134 <_vfiprintf_r+0x12c>
 80080fc:	06d1      	lsls	r1, r2, #27
 80080fe:	bf44      	itt	mi
 8008100:	2320      	movmi	r3, #32
 8008102:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008106:	0713      	lsls	r3, r2, #28
 8008108:	bf44      	itt	mi
 800810a:	232b      	movmi	r3, #43	; 0x2b
 800810c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008110:	f89a 3000 	ldrb.w	r3, [sl]
 8008114:	2b2a      	cmp	r3, #42	; 0x2a
 8008116:	d015      	beq.n	8008144 <_vfiprintf_r+0x13c>
 8008118:	9a07      	ldr	r2, [sp, #28]
 800811a:	4654      	mov	r4, sl
 800811c:	2000      	movs	r0, #0
 800811e:	f04f 0c0a 	mov.w	ip, #10
 8008122:	4621      	mov	r1, r4
 8008124:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008128:	3b30      	subs	r3, #48	; 0x30
 800812a:	2b09      	cmp	r3, #9
 800812c:	d94e      	bls.n	80081cc <_vfiprintf_r+0x1c4>
 800812e:	b1b0      	cbz	r0, 800815e <_vfiprintf_r+0x156>
 8008130:	9207      	str	r2, [sp, #28]
 8008132:	e014      	b.n	800815e <_vfiprintf_r+0x156>
 8008134:	eba0 0308 	sub.w	r3, r0, r8
 8008138:	fa09 f303 	lsl.w	r3, r9, r3
 800813c:	4313      	orrs	r3, r2
 800813e:	9304      	str	r3, [sp, #16]
 8008140:	46a2      	mov	sl, r4
 8008142:	e7d2      	b.n	80080ea <_vfiprintf_r+0xe2>
 8008144:	9b03      	ldr	r3, [sp, #12]
 8008146:	1d19      	adds	r1, r3, #4
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	9103      	str	r1, [sp, #12]
 800814c:	2b00      	cmp	r3, #0
 800814e:	bfbb      	ittet	lt
 8008150:	425b      	neglt	r3, r3
 8008152:	f042 0202 	orrlt.w	r2, r2, #2
 8008156:	9307      	strge	r3, [sp, #28]
 8008158:	9307      	strlt	r3, [sp, #28]
 800815a:	bfb8      	it	lt
 800815c:	9204      	strlt	r2, [sp, #16]
 800815e:	7823      	ldrb	r3, [r4, #0]
 8008160:	2b2e      	cmp	r3, #46	; 0x2e
 8008162:	d10c      	bne.n	800817e <_vfiprintf_r+0x176>
 8008164:	7863      	ldrb	r3, [r4, #1]
 8008166:	2b2a      	cmp	r3, #42	; 0x2a
 8008168:	d135      	bne.n	80081d6 <_vfiprintf_r+0x1ce>
 800816a:	9b03      	ldr	r3, [sp, #12]
 800816c:	1d1a      	adds	r2, r3, #4
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	9203      	str	r2, [sp, #12]
 8008172:	2b00      	cmp	r3, #0
 8008174:	bfb8      	it	lt
 8008176:	f04f 33ff 	movlt.w	r3, #4294967295
 800817a:	3402      	adds	r4, #2
 800817c:	9305      	str	r3, [sp, #20]
 800817e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008264 <_vfiprintf_r+0x25c>
 8008182:	7821      	ldrb	r1, [r4, #0]
 8008184:	2203      	movs	r2, #3
 8008186:	4650      	mov	r0, sl
 8008188:	f7f8 f83a 	bl	8000200 <memchr>
 800818c:	b140      	cbz	r0, 80081a0 <_vfiprintf_r+0x198>
 800818e:	2340      	movs	r3, #64	; 0x40
 8008190:	eba0 000a 	sub.w	r0, r0, sl
 8008194:	fa03 f000 	lsl.w	r0, r3, r0
 8008198:	9b04      	ldr	r3, [sp, #16]
 800819a:	4303      	orrs	r3, r0
 800819c:	3401      	adds	r4, #1
 800819e:	9304      	str	r3, [sp, #16]
 80081a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081a4:	482c      	ldr	r0, [pc, #176]	; (8008258 <_vfiprintf_r+0x250>)
 80081a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80081aa:	2206      	movs	r2, #6
 80081ac:	f7f8 f828 	bl	8000200 <memchr>
 80081b0:	2800      	cmp	r0, #0
 80081b2:	d03f      	beq.n	8008234 <_vfiprintf_r+0x22c>
 80081b4:	4b29      	ldr	r3, [pc, #164]	; (800825c <_vfiprintf_r+0x254>)
 80081b6:	bb1b      	cbnz	r3, 8008200 <_vfiprintf_r+0x1f8>
 80081b8:	9b03      	ldr	r3, [sp, #12]
 80081ba:	3307      	adds	r3, #7
 80081bc:	f023 0307 	bic.w	r3, r3, #7
 80081c0:	3308      	adds	r3, #8
 80081c2:	9303      	str	r3, [sp, #12]
 80081c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081c6:	443b      	add	r3, r7
 80081c8:	9309      	str	r3, [sp, #36]	; 0x24
 80081ca:	e767      	b.n	800809c <_vfiprintf_r+0x94>
 80081cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80081d0:	460c      	mov	r4, r1
 80081d2:	2001      	movs	r0, #1
 80081d4:	e7a5      	b.n	8008122 <_vfiprintf_r+0x11a>
 80081d6:	2300      	movs	r3, #0
 80081d8:	3401      	adds	r4, #1
 80081da:	9305      	str	r3, [sp, #20]
 80081dc:	4619      	mov	r1, r3
 80081de:	f04f 0c0a 	mov.w	ip, #10
 80081e2:	4620      	mov	r0, r4
 80081e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081e8:	3a30      	subs	r2, #48	; 0x30
 80081ea:	2a09      	cmp	r2, #9
 80081ec:	d903      	bls.n	80081f6 <_vfiprintf_r+0x1ee>
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d0c5      	beq.n	800817e <_vfiprintf_r+0x176>
 80081f2:	9105      	str	r1, [sp, #20]
 80081f4:	e7c3      	b.n	800817e <_vfiprintf_r+0x176>
 80081f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80081fa:	4604      	mov	r4, r0
 80081fc:	2301      	movs	r3, #1
 80081fe:	e7f0      	b.n	80081e2 <_vfiprintf_r+0x1da>
 8008200:	ab03      	add	r3, sp, #12
 8008202:	9300      	str	r3, [sp, #0]
 8008204:	462a      	mov	r2, r5
 8008206:	4b16      	ldr	r3, [pc, #88]	; (8008260 <_vfiprintf_r+0x258>)
 8008208:	a904      	add	r1, sp, #16
 800820a:	4630      	mov	r0, r6
 800820c:	f3af 8000 	nop.w
 8008210:	4607      	mov	r7, r0
 8008212:	1c78      	adds	r0, r7, #1
 8008214:	d1d6      	bne.n	80081c4 <_vfiprintf_r+0x1bc>
 8008216:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008218:	07d9      	lsls	r1, r3, #31
 800821a:	d405      	bmi.n	8008228 <_vfiprintf_r+0x220>
 800821c:	89ab      	ldrh	r3, [r5, #12]
 800821e:	059a      	lsls	r2, r3, #22
 8008220:	d402      	bmi.n	8008228 <_vfiprintf_r+0x220>
 8008222:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008224:	f7ff fd0f 	bl	8007c46 <__retarget_lock_release_recursive>
 8008228:	89ab      	ldrh	r3, [r5, #12]
 800822a:	065b      	lsls	r3, r3, #25
 800822c:	f53f af12 	bmi.w	8008054 <_vfiprintf_r+0x4c>
 8008230:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008232:	e711      	b.n	8008058 <_vfiprintf_r+0x50>
 8008234:	ab03      	add	r3, sp, #12
 8008236:	9300      	str	r3, [sp, #0]
 8008238:	462a      	mov	r2, r5
 800823a:	4b09      	ldr	r3, [pc, #36]	; (8008260 <_vfiprintf_r+0x258>)
 800823c:	a904      	add	r1, sp, #16
 800823e:	4630      	mov	r0, r6
 8008240:	f000 f880 	bl	8008344 <_printf_i>
 8008244:	e7e4      	b.n	8008210 <_vfiprintf_r+0x208>
 8008246:	bf00      	nop
 8008248:	08009054 	.word	0x08009054
 800824c:	08009074 	.word	0x08009074
 8008250:	08009034 	.word	0x08009034
 8008254:	08009094 	.word	0x08009094
 8008258:	0800909e 	.word	0x0800909e
 800825c:	00000000 	.word	0x00000000
 8008260:	08007fe3 	.word	0x08007fe3
 8008264:	0800909a 	.word	0x0800909a

08008268 <_printf_common>:
 8008268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800826c:	4616      	mov	r6, r2
 800826e:	4699      	mov	r9, r3
 8008270:	688a      	ldr	r2, [r1, #8]
 8008272:	690b      	ldr	r3, [r1, #16]
 8008274:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008278:	4293      	cmp	r3, r2
 800827a:	bfb8      	it	lt
 800827c:	4613      	movlt	r3, r2
 800827e:	6033      	str	r3, [r6, #0]
 8008280:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008284:	4607      	mov	r7, r0
 8008286:	460c      	mov	r4, r1
 8008288:	b10a      	cbz	r2, 800828e <_printf_common+0x26>
 800828a:	3301      	adds	r3, #1
 800828c:	6033      	str	r3, [r6, #0]
 800828e:	6823      	ldr	r3, [r4, #0]
 8008290:	0699      	lsls	r1, r3, #26
 8008292:	bf42      	ittt	mi
 8008294:	6833      	ldrmi	r3, [r6, #0]
 8008296:	3302      	addmi	r3, #2
 8008298:	6033      	strmi	r3, [r6, #0]
 800829a:	6825      	ldr	r5, [r4, #0]
 800829c:	f015 0506 	ands.w	r5, r5, #6
 80082a0:	d106      	bne.n	80082b0 <_printf_common+0x48>
 80082a2:	f104 0a19 	add.w	sl, r4, #25
 80082a6:	68e3      	ldr	r3, [r4, #12]
 80082a8:	6832      	ldr	r2, [r6, #0]
 80082aa:	1a9b      	subs	r3, r3, r2
 80082ac:	42ab      	cmp	r3, r5
 80082ae:	dc26      	bgt.n	80082fe <_printf_common+0x96>
 80082b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80082b4:	1e13      	subs	r3, r2, #0
 80082b6:	6822      	ldr	r2, [r4, #0]
 80082b8:	bf18      	it	ne
 80082ba:	2301      	movne	r3, #1
 80082bc:	0692      	lsls	r2, r2, #26
 80082be:	d42b      	bmi.n	8008318 <_printf_common+0xb0>
 80082c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80082c4:	4649      	mov	r1, r9
 80082c6:	4638      	mov	r0, r7
 80082c8:	47c0      	blx	r8
 80082ca:	3001      	adds	r0, #1
 80082cc:	d01e      	beq.n	800830c <_printf_common+0xa4>
 80082ce:	6823      	ldr	r3, [r4, #0]
 80082d0:	68e5      	ldr	r5, [r4, #12]
 80082d2:	6832      	ldr	r2, [r6, #0]
 80082d4:	f003 0306 	and.w	r3, r3, #6
 80082d8:	2b04      	cmp	r3, #4
 80082da:	bf08      	it	eq
 80082dc:	1aad      	subeq	r5, r5, r2
 80082de:	68a3      	ldr	r3, [r4, #8]
 80082e0:	6922      	ldr	r2, [r4, #16]
 80082e2:	bf0c      	ite	eq
 80082e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80082e8:	2500      	movne	r5, #0
 80082ea:	4293      	cmp	r3, r2
 80082ec:	bfc4      	itt	gt
 80082ee:	1a9b      	subgt	r3, r3, r2
 80082f0:	18ed      	addgt	r5, r5, r3
 80082f2:	2600      	movs	r6, #0
 80082f4:	341a      	adds	r4, #26
 80082f6:	42b5      	cmp	r5, r6
 80082f8:	d11a      	bne.n	8008330 <_printf_common+0xc8>
 80082fa:	2000      	movs	r0, #0
 80082fc:	e008      	b.n	8008310 <_printf_common+0xa8>
 80082fe:	2301      	movs	r3, #1
 8008300:	4652      	mov	r2, sl
 8008302:	4649      	mov	r1, r9
 8008304:	4638      	mov	r0, r7
 8008306:	47c0      	blx	r8
 8008308:	3001      	adds	r0, #1
 800830a:	d103      	bne.n	8008314 <_printf_common+0xac>
 800830c:	f04f 30ff 	mov.w	r0, #4294967295
 8008310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008314:	3501      	adds	r5, #1
 8008316:	e7c6      	b.n	80082a6 <_printf_common+0x3e>
 8008318:	18e1      	adds	r1, r4, r3
 800831a:	1c5a      	adds	r2, r3, #1
 800831c:	2030      	movs	r0, #48	; 0x30
 800831e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008322:	4422      	add	r2, r4
 8008324:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008328:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800832c:	3302      	adds	r3, #2
 800832e:	e7c7      	b.n	80082c0 <_printf_common+0x58>
 8008330:	2301      	movs	r3, #1
 8008332:	4622      	mov	r2, r4
 8008334:	4649      	mov	r1, r9
 8008336:	4638      	mov	r0, r7
 8008338:	47c0      	blx	r8
 800833a:	3001      	adds	r0, #1
 800833c:	d0e6      	beq.n	800830c <_printf_common+0xa4>
 800833e:	3601      	adds	r6, #1
 8008340:	e7d9      	b.n	80082f6 <_printf_common+0x8e>
	...

08008344 <_printf_i>:
 8008344:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008348:	460c      	mov	r4, r1
 800834a:	4691      	mov	r9, r2
 800834c:	7e27      	ldrb	r7, [r4, #24]
 800834e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008350:	2f78      	cmp	r7, #120	; 0x78
 8008352:	4680      	mov	r8, r0
 8008354:	469a      	mov	sl, r3
 8008356:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800835a:	d807      	bhi.n	800836c <_printf_i+0x28>
 800835c:	2f62      	cmp	r7, #98	; 0x62
 800835e:	d80a      	bhi.n	8008376 <_printf_i+0x32>
 8008360:	2f00      	cmp	r7, #0
 8008362:	f000 80d8 	beq.w	8008516 <_printf_i+0x1d2>
 8008366:	2f58      	cmp	r7, #88	; 0x58
 8008368:	f000 80a3 	beq.w	80084b2 <_printf_i+0x16e>
 800836c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008370:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008374:	e03a      	b.n	80083ec <_printf_i+0xa8>
 8008376:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800837a:	2b15      	cmp	r3, #21
 800837c:	d8f6      	bhi.n	800836c <_printf_i+0x28>
 800837e:	a001      	add	r0, pc, #4	; (adr r0, 8008384 <_printf_i+0x40>)
 8008380:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008384:	080083dd 	.word	0x080083dd
 8008388:	080083f1 	.word	0x080083f1
 800838c:	0800836d 	.word	0x0800836d
 8008390:	0800836d 	.word	0x0800836d
 8008394:	0800836d 	.word	0x0800836d
 8008398:	0800836d 	.word	0x0800836d
 800839c:	080083f1 	.word	0x080083f1
 80083a0:	0800836d 	.word	0x0800836d
 80083a4:	0800836d 	.word	0x0800836d
 80083a8:	0800836d 	.word	0x0800836d
 80083ac:	0800836d 	.word	0x0800836d
 80083b0:	080084fd 	.word	0x080084fd
 80083b4:	08008421 	.word	0x08008421
 80083b8:	080084df 	.word	0x080084df
 80083bc:	0800836d 	.word	0x0800836d
 80083c0:	0800836d 	.word	0x0800836d
 80083c4:	0800851f 	.word	0x0800851f
 80083c8:	0800836d 	.word	0x0800836d
 80083cc:	08008421 	.word	0x08008421
 80083d0:	0800836d 	.word	0x0800836d
 80083d4:	0800836d 	.word	0x0800836d
 80083d8:	080084e7 	.word	0x080084e7
 80083dc:	680b      	ldr	r3, [r1, #0]
 80083de:	1d1a      	adds	r2, r3, #4
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	600a      	str	r2, [r1, #0]
 80083e4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80083e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80083ec:	2301      	movs	r3, #1
 80083ee:	e0a3      	b.n	8008538 <_printf_i+0x1f4>
 80083f0:	6825      	ldr	r5, [r4, #0]
 80083f2:	6808      	ldr	r0, [r1, #0]
 80083f4:	062e      	lsls	r6, r5, #24
 80083f6:	f100 0304 	add.w	r3, r0, #4
 80083fa:	d50a      	bpl.n	8008412 <_printf_i+0xce>
 80083fc:	6805      	ldr	r5, [r0, #0]
 80083fe:	600b      	str	r3, [r1, #0]
 8008400:	2d00      	cmp	r5, #0
 8008402:	da03      	bge.n	800840c <_printf_i+0xc8>
 8008404:	232d      	movs	r3, #45	; 0x2d
 8008406:	426d      	negs	r5, r5
 8008408:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800840c:	485e      	ldr	r0, [pc, #376]	; (8008588 <_printf_i+0x244>)
 800840e:	230a      	movs	r3, #10
 8008410:	e019      	b.n	8008446 <_printf_i+0x102>
 8008412:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008416:	6805      	ldr	r5, [r0, #0]
 8008418:	600b      	str	r3, [r1, #0]
 800841a:	bf18      	it	ne
 800841c:	b22d      	sxthne	r5, r5
 800841e:	e7ef      	b.n	8008400 <_printf_i+0xbc>
 8008420:	680b      	ldr	r3, [r1, #0]
 8008422:	6825      	ldr	r5, [r4, #0]
 8008424:	1d18      	adds	r0, r3, #4
 8008426:	6008      	str	r0, [r1, #0]
 8008428:	0628      	lsls	r0, r5, #24
 800842a:	d501      	bpl.n	8008430 <_printf_i+0xec>
 800842c:	681d      	ldr	r5, [r3, #0]
 800842e:	e002      	b.n	8008436 <_printf_i+0xf2>
 8008430:	0669      	lsls	r1, r5, #25
 8008432:	d5fb      	bpl.n	800842c <_printf_i+0xe8>
 8008434:	881d      	ldrh	r5, [r3, #0]
 8008436:	4854      	ldr	r0, [pc, #336]	; (8008588 <_printf_i+0x244>)
 8008438:	2f6f      	cmp	r7, #111	; 0x6f
 800843a:	bf0c      	ite	eq
 800843c:	2308      	moveq	r3, #8
 800843e:	230a      	movne	r3, #10
 8008440:	2100      	movs	r1, #0
 8008442:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008446:	6866      	ldr	r6, [r4, #4]
 8008448:	60a6      	str	r6, [r4, #8]
 800844a:	2e00      	cmp	r6, #0
 800844c:	bfa2      	ittt	ge
 800844e:	6821      	ldrge	r1, [r4, #0]
 8008450:	f021 0104 	bicge.w	r1, r1, #4
 8008454:	6021      	strge	r1, [r4, #0]
 8008456:	b90d      	cbnz	r5, 800845c <_printf_i+0x118>
 8008458:	2e00      	cmp	r6, #0
 800845a:	d04d      	beq.n	80084f8 <_printf_i+0x1b4>
 800845c:	4616      	mov	r6, r2
 800845e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008462:	fb03 5711 	mls	r7, r3, r1, r5
 8008466:	5dc7      	ldrb	r7, [r0, r7]
 8008468:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800846c:	462f      	mov	r7, r5
 800846e:	42bb      	cmp	r3, r7
 8008470:	460d      	mov	r5, r1
 8008472:	d9f4      	bls.n	800845e <_printf_i+0x11a>
 8008474:	2b08      	cmp	r3, #8
 8008476:	d10b      	bne.n	8008490 <_printf_i+0x14c>
 8008478:	6823      	ldr	r3, [r4, #0]
 800847a:	07df      	lsls	r7, r3, #31
 800847c:	d508      	bpl.n	8008490 <_printf_i+0x14c>
 800847e:	6923      	ldr	r3, [r4, #16]
 8008480:	6861      	ldr	r1, [r4, #4]
 8008482:	4299      	cmp	r1, r3
 8008484:	bfde      	ittt	le
 8008486:	2330      	movle	r3, #48	; 0x30
 8008488:	f806 3c01 	strble.w	r3, [r6, #-1]
 800848c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008490:	1b92      	subs	r2, r2, r6
 8008492:	6122      	str	r2, [r4, #16]
 8008494:	f8cd a000 	str.w	sl, [sp]
 8008498:	464b      	mov	r3, r9
 800849a:	aa03      	add	r2, sp, #12
 800849c:	4621      	mov	r1, r4
 800849e:	4640      	mov	r0, r8
 80084a0:	f7ff fee2 	bl	8008268 <_printf_common>
 80084a4:	3001      	adds	r0, #1
 80084a6:	d14c      	bne.n	8008542 <_printf_i+0x1fe>
 80084a8:	f04f 30ff 	mov.w	r0, #4294967295
 80084ac:	b004      	add	sp, #16
 80084ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084b2:	4835      	ldr	r0, [pc, #212]	; (8008588 <_printf_i+0x244>)
 80084b4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80084b8:	6823      	ldr	r3, [r4, #0]
 80084ba:	680e      	ldr	r6, [r1, #0]
 80084bc:	061f      	lsls	r7, r3, #24
 80084be:	f856 5b04 	ldr.w	r5, [r6], #4
 80084c2:	600e      	str	r6, [r1, #0]
 80084c4:	d514      	bpl.n	80084f0 <_printf_i+0x1ac>
 80084c6:	07d9      	lsls	r1, r3, #31
 80084c8:	bf44      	itt	mi
 80084ca:	f043 0320 	orrmi.w	r3, r3, #32
 80084ce:	6023      	strmi	r3, [r4, #0]
 80084d0:	b91d      	cbnz	r5, 80084da <_printf_i+0x196>
 80084d2:	6823      	ldr	r3, [r4, #0]
 80084d4:	f023 0320 	bic.w	r3, r3, #32
 80084d8:	6023      	str	r3, [r4, #0]
 80084da:	2310      	movs	r3, #16
 80084dc:	e7b0      	b.n	8008440 <_printf_i+0xfc>
 80084de:	6823      	ldr	r3, [r4, #0]
 80084e0:	f043 0320 	orr.w	r3, r3, #32
 80084e4:	6023      	str	r3, [r4, #0]
 80084e6:	2378      	movs	r3, #120	; 0x78
 80084e8:	4828      	ldr	r0, [pc, #160]	; (800858c <_printf_i+0x248>)
 80084ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80084ee:	e7e3      	b.n	80084b8 <_printf_i+0x174>
 80084f0:	065e      	lsls	r6, r3, #25
 80084f2:	bf48      	it	mi
 80084f4:	b2ad      	uxthmi	r5, r5
 80084f6:	e7e6      	b.n	80084c6 <_printf_i+0x182>
 80084f8:	4616      	mov	r6, r2
 80084fa:	e7bb      	b.n	8008474 <_printf_i+0x130>
 80084fc:	680b      	ldr	r3, [r1, #0]
 80084fe:	6826      	ldr	r6, [r4, #0]
 8008500:	6960      	ldr	r0, [r4, #20]
 8008502:	1d1d      	adds	r5, r3, #4
 8008504:	600d      	str	r5, [r1, #0]
 8008506:	0635      	lsls	r5, r6, #24
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	d501      	bpl.n	8008510 <_printf_i+0x1cc>
 800850c:	6018      	str	r0, [r3, #0]
 800850e:	e002      	b.n	8008516 <_printf_i+0x1d2>
 8008510:	0671      	lsls	r1, r6, #25
 8008512:	d5fb      	bpl.n	800850c <_printf_i+0x1c8>
 8008514:	8018      	strh	r0, [r3, #0]
 8008516:	2300      	movs	r3, #0
 8008518:	6123      	str	r3, [r4, #16]
 800851a:	4616      	mov	r6, r2
 800851c:	e7ba      	b.n	8008494 <_printf_i+0x150>
 800851e:	680b      	ldr	r3, [r1, #0]
 8008520:	1d1a      	adds	r2, r3, #4
 8008522:	600a      	str	r2, [r1, #0]
 8008524:	681e      	ldr	r6, [r3, #0]
 8008526:	6862      	ldr	r2, [r4, #4]
 8008528:	2100      	movs	r1, #0
 800852a:	4630      	mov	r0, r6
 800852c:	f7f7 fe68 	bl	8000200 <memchr>
 8008530:	b108      	cbz	r0, 8008536 <_printf_i+0x1f2>
 8008532:	1b80      	subs	r0, r0, r6
 8008534:	6060      	str	r0, [r4, #4]
 8008536:	6863      	ldr	r3, [r4, #4]
 8008538:	6123      	str	r3, [r4, #16]
 800853a:	2300      	movs	r3, #0
 800853c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008540:	e7a8      	b.n	8008494 <_printf_i+0x150>
 8008542:	6923      	ldr	r3, [r4, #16]
 8008544:	4632      	mov	r2, r6
 8008546:	4649      	mov	r1, r9
 8008548:	4640      	mov	r0, r8
 800854a:	47d0      	blx	sl
 800854c:	3001      	adds	r0, #1
 800854e:	d0ab      	beq.n	80084a8 <_printf_i+0x164>
 8008550:	6823      	ldr	r3, [r4, #0]
 8008552:	079b      	lsls	r3, r3, #30
 8008554:	d413      	bmi.n	800857e <_printf_i+0x23a>
 8008556:	68e0      	ldr	r0, [r4, #12]
 8008558:	9b03      	ldr	r3, [sp, #12]
 800855a:	4298      	cmp	r0, r3
 800855c:	bfb8      	it	lt
 800855e:	4618      	movlt	r0, r3
 8008560:	e7a4      	b.n	80084ac <_printf_i+0x168>
 8008562:	2301      	movs	r3, #1
 8008564:	4632      	mov	r2, r6
 8008566:	4649      	mov	r1, r9
 8008568:	4640      	mov	r0, r8
 800856a:	47d0      	blx	sl
 800856c:	3001      	adds	r0, #1
 800856e:	d09b      	beq.n	80084a8 <_printf_i+0x164>
 8008570:	3501      	adds	r5, #1
 8008572:	68e3      	ldr	r3, [r4, #12]
 8008574:	9903      	ldr	r1, [sp, #12]
 8008576:	1a5b      	subs	r3, r3, r1
 8008578:	42ab      	cmp	r3, r5
 800857a:	dcf2      	bgt.n	8008562 <_printf_i+0x21e>
 800857c:	e7eb      	b.n	8008556 <_printf_i+0x212>
 800857e:	2500      	movs	r5, #0
 8008580:	f104 0619 	add.w	r6, r4, #25
 8008584:	e7f5      	b.n	8008572 <_printf_i+0x22e>
 8008586:	bf00      	nop
 8008588:	080090a5 	.word	0x080090a5
 800858c:	080090b6 	.word	0x080090b6

08008590 <_sbrk_r>:
 8008590:	b538      	push	{r3, r4, r5, lr}
 8008592:	4d06      	ldr	r5, [pc, #24]	; (80085ac <_sbrk_r+0x1c>)
 8008594:	2300      	movs	r3, #0
 8008596:	4604      	mov	r4, r0
 8008598:	4608      	mov	r0, r1
 800859a:	602b      	str	r3, [r5, #0]
 800859c:	f7f8 ffa6 	bl	80014ec <_sbrk>
 80085a0:	1c43      	adds	r3, r0, #1
 80085a2:	d102      	bne.n	80085aa <_sbrk_r+0x1a>
 80085a4:	682b      	ldr	r3, [r5, #0]
 80085a6:	b103      	cbz	r3, 80085aa <_sbrk_r+0x1a>
 80085a8:	6023      	str	r3, [r4, #0]
 80085aa:	bd38      	pop	{r3, r4, r5, pc}
 80085ac:	200193ac 	.word	0x200193ac

080085b0 <__sread>:
 80085b0:	b510      	push	{r4, lr}
 80085b2:	460c      	mov	r4, r1
 80085b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085b8:	f000 faf4 	bl	8008ba4 <_read_r>
 80085bc:	2800      	cmp	r0, #0
 80085be:	bfab      	itete	ge
 80085c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80085c2:	89a3      	ldrhlt	r3, [r4, #12]
 80085c4:	181b      	addge	r3, r3, r0
 80085c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80085ca:	bfac      	ite	ge
 80085cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80085ce:	81a3      	strhlt	r3, [r4, #12]
 80085d0:	bd10      	pop	{r4, pc}

080085d2 <__swrite>:
 80085d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085d6:	461f      	mov	r7, r3
 80085d8:	898b      	ldrh	r3, [r1, #12]
 80085da:	05db      	lsls	r3, r3, #23
 80085dc:	4605      	mov	r5, r0
 80085de:	460c      	mov	r4, r1
 80085e0:	4616      	mov	r6, r2
 80085e2:	d505      	bpl.n	80085f0 <__swrite+0x1e>
 80085e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085e8:	2302      	movs	r3, #2
 80085ea:	2200      	movs	r2, #0
 80085ec:	f000 f9c8 	bl	8008980 <_lseek_r>
 80085f0:	89a3      	ldrh	r3, [r4, #12]
 80085f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80085f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80085fa:	81a3      	strh	r3, [r4, #12]
 80085fc:	4632      	mov	r2, r6
 80085fe:	463b      	mov	r3, r7
 8008600:	4628      	mov	r0, r5
 8008602:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008606:	f000 b869 	b.w	80086dc <_write_r>

0800860a <__sseek>:
 800860a:	b510      	push	{r4, lr}
 800860c:	460c      	mov	r4, r1
 800860e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008612:	f000 f9b5 	bl	8008980 <_lseek_r>
 8008616:	1c43      	adds	r3, r0, #1
 8008618:	89a3      	ldrh	r3, [r4, #12]
 800861a:	bf15      	itete	ne
 800861c:	6560      	strne	r0, [r4, #84]	; 0x54
 800861e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008622:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008626:	81a3      	strheq	r3, [r4, #12]
 8008628:	bf18      	it	ne
 800862a:	81a3      	strhne	r3, [r4, #12]
 800862c:	bd10      	pop	{r4, pc}

0800862e <__sclose>:
 800862e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008632:	f000 b8d3 	b.w	80087dc <_close_r>
	...

08008638 <__swbuf_r>:
 8008638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800863a:	460e      	mov	r6, r1
 800863c:	4614      	mov	r4, r2
 800863e:	4605      	mov	r5, r0
 8008640:	b118      	cbz	r0, 800864a <__swbuf_r+0x12>
 8008642:	6983      	ldr	r3, [r0, #24]
 8008644:	b90b      	cbnz	r3, 800864a <__swbuf_r+0x12>
 8008646:	f7ff fa5f 	bl	8007b08 <__sinit>
 800864a:	4b21      	ldr	r3, [pc, #132]	; (80086d0 <__swbuf_r+0x98>)
 800864c:	429c      	cmp	r4, r3
 800864e:	d12b      	bne.n	80086a8 <__swbuf_r+0x70>
 8008650:	686c      	ldr	r4, [r5, #4]
 8008652:	69a3      	ldr	r3, [r4, #24]
 8008654:	60a3      	str	r3, [r4, #8]
 8008656:	89a3      	ldrh	r3, [r4, #12]
 8008658:	071a      	lsls	r2, r3, #28
 800865a:	d52f      	bpl.n	80086bc <__swbuf_r+0x84>
 800865c:	6923      	ldr	r3, [r4, #16]
 800865e:	b36b      	cbz	r3, 80086bc <__swbuf_r+0x84>
 8008660:	6923      	ldr	r3, [r4, #16]
 8008662:	6820      	ldr	r0, [r4, #0]
 8008664:	1ac0      	subs	r0, r0, r3
 8008666:	6963      	ldr	r3, [r4, #20]
 8008668:	b2f6      	uxtb	r6, r6
 800866a:	4283      	cmp	r3, r0
 800866c:	4637      	mov	r7, r6
 800866e:	dc04      	bgt.n	800867a <__swbuf_r+0x42>
 8008670:	4621      	mov	r1, r4
 8008672:	4628      	mov	r0, r5
 8008674:	f000 f948 	bl	8008908 <_fflush_r>
 8008678:	bb30      	cbnz	r0, 80086c8 <__swbuf_r+0x90>
 800867a:	68a3      	ldr	r3, [r4, #8]
 800867c:	3b01      	subs	r3, #1
 800867e:	60a3      	str	r3, [r4, #8]
 8008680:	6823      	ldr	r3, [r4, #0]
 8008682:	1c5a      	adds	r2, r3, #1
 8008684:	6022      	str	r2, [r4, #0]
 8008686:	701e      	strb	r6, [r3, #0]
 8008688:	6963      	ldr	r3, [r4, #20]
 800868a:	3001      	adds	r0, #1
 800868c:	4283      	cmp	r3, r0
 800868e:	d004      	beq.n	800869a <__swbuf_r+0x62>
 8008690:	89a3      	ldrh	r3, [r4, #12]
 8008692:	07db      	lsls	r3, r3, #31
 8008694:	d506      	bpl.n	80086a4 <__swbuf_r+0x6c>
 8008696:	2e0a      	cmp	r6, #10
 8008698:	d104      	bne.n	80086a4 <__swbuf_r+0x6c>
 800869a:	4621      	mov	r1, r4
 800869c:	4628      	mov	r0, r5
 800869e:	f000 f933 	bl	8008908 <_fflush_r>
 80086a2:	b988      	cbnz	r0, 80086c8 <__swbuf_r+0x90>
 80086a4:	4638      	mov	r0, r7
 80086a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086a8:	4b0a      	ldr	r3, [pc, #40]	; (80086d4 <__swbuf_r+0x9c>)
 80086aa:	429c      	cmp	r4, r3
 80086ac:	d101      	bne.n	80086b2 <__swbuf_r+0x7a>
 80086ae:	68ac      	ldr	r4, [r5, #8]
 80086b0:	e7cf      	b.n	8008652 <__swbuf_r+0x1a>
 80086b2:	4b09      	ldr	r3, [pc, #36]	; (80086d8 <__swbuf_r+0xa0>)
 80086b4:	429c      	cmp	r4, r3
 80086b6:	bf08      	it	eq
 80086b8:	68ec      	ldreq	r4, [r5, #12]
 80086ba:	e7ca      	b.n	8008652 <__swbuf_r+0x1a>
 80086bc:	4621      	mov	r1, r4
 80086be:	4628      	mov	r0, r5
 80086c0:	f000 f81e 	bl	8008700 <__swsetup_r>
 80086c4:	2800      	cmp	r0, #0
 80086c6:	d0cb      	beq.n	8008660 <__swbuf_r+0x28>
 80086c8:	f04f 37ff 	mov.w	r7, #4294967295
 80086cc:	e7ea      	b.n	80086a4 <__swbuf_r+0x6c>
 80086ce:	bf00      	nop
 80086d0:	08009054 	.word	0x08009054
 80086d4:	08009074 	.word	0x08009074
 80086d8:	08009034 	.word	0x08009034

080086dc <_write_r>:
 80086dc:	b538      	push	{r3, r4, r5, lr}
 80086de:	4d07      	ldr	r5, [pc, #28]	; (80086fc <_write_r+0x20>)
 80086e0:	4604      	mov	r4, r0
 80086e2:	4608      	mov	r0, r1
 80086e4:	4611      	mov	r1, r2
 80086e6:	2200      	movs	r2, #0
 80086e8:	602a      	str	r2, [r5, #0]
 80086ea:	461a      	mov	r2, r3
 80086ec:	f7f8 fead 	bl	800144a <_write>
 80086f0:	1c43      	adds	r3, r0, #1
 80086f2:	d102      	bne.n	80086fa <_write_r+0x1e>
 80086f4:	682b      	ldr	r3, [r5, #0]
 80086f6:	b103      	cbz	r3, 80086fa <_write_r+0x1e>
 80086f8:	6023      	str	r3, [r4, #0]
 80086fa:	bd38      	pop	{r3, r4, r5, pc}
 80086fc:	200193ac 	.word	0x200193ac

08008700 <__swsetup_r>:
 8008700:	4b32      	ldr	r3, [pc, #200]	; (80087cc <__swsetup_r+0xcc>)
 8008702:	b570      	push	{r4, r5, r6, lr}
 8008704:	681d      	ldr	r5, [r3, #0]
 8008706:	4606      	mov	r6, r0
 8008708:	460c      	mov	r4, r1
 800870a:	b125      	cbz	r5, 8008716 <__swsetup_r+0x16>
 800870c:	69ab      	ldr	r3, [r5, #24]
 800870e:	b913      	cbnz	r3, 8008716 <__swsetup_r+0x16>
 8008710:	4628      	mov	r0, r5
 8008712:	f7ff f9f9 	bl	8007b08 <__sinit>
 8008716:	4b2e      	ldr	r3, [pc, #184]	; (80087d0 <__swsetup_r+0xd0>)
 8008718:	429c      	cmp	r4, r3
 800871a:	d10f      	bne.n	800873c <__swsetup_r+0x3c>
 800871c:	686c      	ldr	r4, [r5, #4]
 800871e:	89a3      	ldrh	r3, [r4, #12]
 8008720:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008724:	0719      	lsls	r1, r3, #28
 8008726:	d42c      	bmi.n	8008782 <__swsetup_r+0x82>
 8008728:	06dd      	lsls	r5, r3, #27
 800872a:	d411      	bmi.n	8008750 <__swsetup_r+0x50>
 800872c:	2309      	movs	r3, #9
 800872e:	6033      	str	r3, [r6, #0]
 8008730:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008734:	81a3      	strh	r3, [r4, #12]
 8008736:	f04f 30ff 	mov.w	r0, #4294967295
 800873a:	e03e      	b.n	80087ba <__swsetup_r+0xba>
 800873c:	4b25      	ldr	r3, [pc, #148]	; (80087d4 <__swsetup_r+0xd4>)
 800873e:	429c      	cmp	r4, r3
 8008740:	d101      	bne.n	8008746 <__swsetup_r+0x46>
 8008742:	68ac      	ldr	r4, [r5, #8]
 8008744:	e7eb      	b.n	800871e <__swsetup_r+0x1e>
 8008746:	4b24      	ldr	r3, [pc, #144]	; (80087d8 <__swsetup_r+0xd8>)
 8008748:	429c      	cmp	r4, r3
 800874a:	bf08      	it	eq
 800874c:	68ec      	ldreq	r4, [r5, #12]
 800874e:	e7e6      	b.n	800871e <__swsetup_r+0x1e>
 8008750:	0758      	lsls	r0, r3, #29
 8008752:	d512      	bpl.n	800877a <__swsetup_r+0x7a>
 8008754:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008756:	b141      	cbz	r1, 800876a <__swsetup_r+0x6a>
 8008758:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800875c:	4299      	cmp	r1, r3
 800875e:	d002      	beq.n	8008766 <__swsetup_r+0x66>
 8008760:	4630      	mov	r0, r6
 8008762:	f000 f9a9 	bl	8008ab8 <_free_r>
 8008766:	2300      	movs	r3, #0
 8008768:	6363      	str	r3, [r4, #52]	; 0x34
 800876a:	89a3      	ldrh	r3, [r4, #12]
 800876c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008770:	81a3      	strh	r3, [r4, #12]
 8008772:	2300      	movs	r3, #0
 8008774:	6063      	str	r3, [r4, #4]
 8008776:	6923      	ldr	r3, [r4, #16]
 8008778:	6023      	str	r3, [r4, #0]
 800877a:	89a3      	ldrh	r3, [r4, #12]
 800877c:	f043 0308 	orr.w	r3, r3, #8
 8008780:	81a3      	strh	r3, [r4, #12]
 8008782:	6923      	ldr	r3, [r4, #16]
 8008784:	b94b      	cbnz	r3, 800879a <__swsetup_r+0x9a>
 8008786:	89a3      	ldrh	r3, [r4, #12]
 8008788:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800878c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008790:	d003      	beq.n	800879a <__swsetup_r+0x9a>
 8008792:	4621      	mov	r1, r4
 8008794:	4630      	mov	r0, r6
 8008796:	f000 f929 	bl	80089ec <__smakebuf_r>
 800879a:	89a0      	ldrh	r0, [r4, #12]
 800879c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80087a0:	f010 0301 	ands.w	r3, r0, #1
 80087a4:	d00a      	beq.n	80087bc <__swsetup_r+0xbc>
 80087a6:	2300      	movs	r3, #0
 80087a8:	60a3      	str	r3, [r4, #8]
 80087aa:	6963      	ldr	r3, [r4, #20]
 80087ac:	425b      	negs	r3, r3
 80087ae:	61a3      	str	r3, [r4, #24]
 80087b0:	6923      	ldr	r3, [r4, #16]
 80087b2:	b943      	cbnz	r3, 80087c6 <__swsetup_r+0xc6>
 80087b4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80087b8:	d1ba      	bne.n	8008730 <__swsetup_r+0x30>
 80087ba:	bd70      	pop	{r4, r5, r6, pc}
 80087bc:	0781      	lsls	r1, r0, #30
 80087be:	bf58      	it	pl
 80087c0:	6963      	ldrpl	r3, [r4, #20]
 80087c2:	60a3      	str	r3, [r4, #8]
 80087c4:	e7f4      	b.n	80087b0 <__swsetup_r+0xb0>
 80087c6:	2000      	movs	r0, #0
 80087c8:	e7f7      	b.n	80087ba <__swsetup_r+0xba>
 80087ca:	bf00      	nop
 80087cc:	20000028 	.word	0x20000028
 80087d0:	08009054 	.word	0x08009054
 80087d4:	08009074 	.word	0x08009074
 80087d8:	08009034 	.word	0x08009034

080087dc <_close_r>:
 80087dc:	b538      	push	{r3, r4, r5, lr}
 80087de:	4d06      	ldr	r5, [pc, #24]	; (80087f8 <_close_r+0x1c>)
 80087e0:	2300      	movs	r3, #0
 80087e2:	4604      	mov	r4, r0
 80087e4:	4608      	mov	r0, r1
 80087e6:	602b      	str	r3, [r5, #0]
 80087e8:	f7f8 fe4b 	bl	8001482 <_close>
 80087ec:	1c43      	adds	r3, r0, #1
 80087ee:	d102      	bne.n	80087f6 <_close_r+0x1a>
 80087f0:	682b      	ldr	r3, [r5, #0]
 80087f2:	b103      	cbz	r3, 80087f6 <_close_r+0x1a>
 80087f4:	6023      	str	r3, [r4, #0]
 80087f6:	bd38      	pop	{r3, r4, r5, pc}
 80087f8:	200193ac 	.word	0x200193ac

080087fc <__sflush_r>:
 80087fc:	898a      	ldrh	r2, [r1, #12]
 80087fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008802:	4605      	mov	r5, r0
 8008804:	0710      	lsls	r0, r2, #28
 8008806:	460c      	mov	r4, r1
 8008808:	d458      	bmi.n	80088bc <__sflush_r+0xc0>
 800880a:	684b      	ldr	r3, [r1, #4]
 800880c:	2b00      	cmp	r3, #0
 800880e:	dc05      	bgt.n	800881c <__sflush_r+0x20>
 8008810:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008812:	2b00      	cmp	r3, #0
 8008814:	dc02      	bgt.n	800881c <__sflush_r+0x20>
 8008816:	2000      	movs	r0, #0
 8008818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800881c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800881e:	2e00      	cmp	r6, #0
 8008820:	d0f9      	beq.n	8008816 <__sflush_r+0x1a>
 8008822:	2300      	movs	r3, #0
 8008824:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008828:	682f      	ldr	r7, [r5, #0]
 800882a:	602b      	str	r3, [r5, #0]
 800882c:	d032      	beq.n	8008894 <__sflush_r+0x98>
 800882e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008830:	89a3      	ldrh	r3, [r4, #12]
 8008832:	075a      	lsls	r2, r3, #29
 8008834:	d505      	bpl.n	8008842 <__sflush_r+0x46>
 8008836:	6863      	ldr	r3, [r4, #4]
 8008838:	1ac0      	subs	r0, r0, r3
 800883a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800883c:	b10b      	cbz	r3, 8008842 <__sflush_r+0x46>
 800883e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008840:	1ac0      	subs	r0, r0, r3
 8008842:	2300      	movs	r3, #0
 8008844:	4602      	mov	r2, r0
 8008846:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008848:	6a21      	ldr	r1, [r4, #32]
 800884a:	4628      	mov	r0, r5
 800884c:	47b0      	blx	r6
 800884e:	1c43      	adds	r3, r0, #1
 8008850:	89a3      	ldrh	r3, [r4, #12]
 8008852:	d106      	bne.n	8008862 <__sflush_r+0x66>
 8008854:	6829      	ldr	r1, [r5, #0]
 8008856:	291d      	cmp	r1, #29
 8008858:	d82c      	bhi.n	80088b4 <__sflush_r+0xb8>
 800885a:	4a2a      	ldr	r2, [pc, #168]	; (8008904 <__sflush_r+0x108>)
 800885c:	40ca      	lsrs	r2, r1
 800885e:	07d6      	lsls	r6, r2, #31
 8008860:	d528      	bpl.n	80088b4 <__sflush_r+0xb8>
 8008862:	2200      	movs	r2, #0
 8008864:	6062      	str	r2, [r4, #4]
 8008866:	04d9      	lsls	r1, r3, #19
 8008868:	6922      	ldr	r2, [r4, #16]
 800886a:	6022      	str	r2, [r4, #0]
 800886c:	d504      	bpl.n	8008878 <__sflush_r+0x7c>
 800886e:	1c42      	adds	r2, r0, #1
 8008870:	d101      	bne.n	8008876 <__sflush_r+0x7a>
 8008872:	682b      	ldr	r3, [r5, #0]
 8008874:	b903      	cbnz	r3, 8008878 <__sflush_r+0x7c>
 8008876:	6560      	str	r0, [r4, #84]	; 0x54
 8008878:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800887a:	602f      	str	r7, [r5, #0]
 800887c:	2900      	cmp	r1, #0
 800887e:	d0ca      	beq.n	8008816 <__sflush_r+0x1a>
 8008880:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008884:	4299      	cmp	r1, r3
 8008886:	d002      	beq.n	800888e <__sflush_r+0x92>
 8008888:	4628      	mov	r0, r5
 800888a:	f000 f915 	bl	8008ab8 <_free_r>
 800888e:	2000      	movs	r0, #0
 8008890:	6360      	str	r0, [r4, #52]	; 0x34
 8008892:	e7c1      	b.n	8008818 <__sflush_r+0x1c>
 8008894:	6a21      	ldr	r1, [r4, #32]
 8008896:	2301      	movs	r3, #1
 8008898:	4628      	mov	r0, r5
 800889a:	47b0      	blx	r6
 800889c:	1c41      	adds	r1, r0, #1
 800889e:	d1c7      	bne.n	8008830 <__sflush_r+0x34>
 80088a0:	682b      	ldr	r3, [r5, #0]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d0c4      	beq.n	8008830 <__sflush_r+0x34>
 80088a6:	2b1d      	cmp	r3, #29
 80088a8:	d001      	beq.n	80088ae <__sflush_r+0xb2>
 80088aa:	2b16      	cmp	r3, #22
 80088ac:	d101      	bne.n	80088b2 <__sflush_r+0xb6>
 80088ae:	602f      	str	r7, [r5, #0]
 80088b0:	e7b1      	b.n	8008816 <__sflush_r+0x1a>
 80088b2:	89a3      	ldrh	r3, [r4, #12]
 80088b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088b8:	81a3      	strh	r3, [r4, #12]
 80088ba:	e7ad      	b.n	8008818 <__sflush_r+0x1c>
 80088bc:	690f      	ldr	r7, [r1, #16]
 80088be:	2f00      	cmp	r7, #0
 80088c0:	d0a9      	beq.n	8008816 <__sflush_r+0x1a>
 80088c2:	0793      	lsls	r3, r2, #30
 80088c4:	680e      	ldr	r6, [r1, #0]
 80088c6:	bf08      	it	eq
 80088c8:	694b      	ldreq	r3, [r1, #20]
 80088ca:	600f      	str	r7, [r1, #0]
 80088cc:	bf18      	it	ne
 80088ce:	2300      	movne	r3, #0
 80088d0:	eba6 0807 	sub.w	r8, r6, r7
 80088d4:	608b      	str	r3, [r1, #8]
 80088d6:	f1b8 0f00 	cmp.w	r8, #0
 80088da:	dd9c      	ble.n	8008816 <__sflush_r+0x1a>
 80088dc:	6a21      	ldr	r1, [r4, #32]
 80088de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80088e0:	4643      	mov	r3, r8
 80088e2:	463a      	mov	r2, r7
 80088e4:	4628      	mov	r0, r5
 80088e6:	47b0      	blx	r6
 80088e8:	2800      	cmp	r0, #0
 80088ea:	dc06      	bgt.n	80088fa <__sflush_r+0xfe>
 80088ec:	89a3      	ldrh	r3, [r4, #12]
 80088ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088f2:	81a3      	strh	r3, [r4, #12]
 80088f4:	f04f 30ff 	mov.w	r0, #4294967295
 80088f8:	e78e      	b.n	8008818 <__sflush_r+0x1c>
 80088fa:	4407      	add	r7, r0
 80088fc:	eba8 0800 	sub.w	r8, r8, r0
 8008900:	e7e9      	b.n	80088d6 <__sflush_r+0xda>
 8008902:	bf00      	nop
 8008904:	20400001 	.word	0x20400001

08008908 <_fflush_r>:
 8008908:	b538      	push	{r3, r4, r5, lr}
 800890a:	690b      	ldr	r3, [r1, #16]
 800890c:	4605      	mov	r5, r0
 800890e:	460c      	mov	r4, r1
 8008910:	b913      	cbnz	r3, 8008918 <_fflush_r+0x10>
 8008912:	2500      	movs	r5, #0
 8008914:	4628      	mov	r0, r5
 8008916:	bd38      	pop	{r3, r4, r5, pc}
 8008918:	b118      	cbz	r0, 8008922 <_fflush_r+0x1a>
 800891a:	6983      	ldr	r3, [r0, #24]
 800891c:	b90b      	cbnz	r3, 8008922 <_fflush_r+0x1a>
 800891e:	f7ff f8f3 	bl	8007b08 <__sinit>
 8008922:	4b14      	ldr	r3, [pc, #80]	; (8008974 <_fflush_r+0x6c>)
 8008924:	429c      	cmp	r4, r3
 8008926:	d11b      	bne.n	8008960 <_fflush_r+0x58>
 8008928:	686c      	ldr	r4, [r5, #4]
 800892a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d0ef      	beq.n	8008912 <_fflush_r+0xa>
 8008932:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008934:	07d0      	lsls	r0, r2, #31
 8008936:	d404      	bmi.n	8008942 <_fflush_r+0x3a>
 8008938:	0599      	lsls	r1, r3, #22
 800893a:	d402      	bmi.n	8008942 <_fflush_r+0x3a>
 800893c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800893e:	f7ff f981 	bl	8007c44 <__retarget_lock_acquire_recursive>
 8008942:	4628      	mov	r0, r5
 8008944:	4621      	mov	r1, r4
 8008946:	f7ff ff59 	bl	80087fc <__sflush_r>
 800894a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800894c:	07da      	lsls	r2, r3, #31
 800894e:	4605      	mov	r5, r0
 8008950:	d4e0      	bmi.n	8008914 <_fflush_r+0xc>
 8008952:	89a3      	ldrh	r3, [r4, #12]
 8008954:	059b      	lsls	r3, r3, #22
 8008956:	d4dd      	bmi.n	8008914 <_fflush_r+0xc>
 8008958:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800895a:	f7ff f974 	bl	8007c46 <__retarget_lock_release_recursive>
 800895e:	e7d9      	b.n	8008914 <_fflush_r+0xc>
 8008960:	4b05      	ldr	r3, [pc, #20]	; (8008978 <_fflush_r+0x70>)
 8008962:	429c      	cmp	r4, r3
 8008964:	d101      	bne.n	800896a <_fflush_r+0x62>
 8008966:	68ac      	ldr	r4, [r5, #8]
 8008968:	e7df      	b.n	800892a <_fflush_r+0x22>
 800896a:	4b04      	ldr	r3, [pc, #16]	; (800897c <_fflush_r+0x74>)
 800896c:	429c      	cmp	r4, r3
 800896e:	bf08      	it	eq
 8008970:	68ec      	ldreq	r4, [r5, #12]
 8008972:	e7da      	b.n	800892a <_fflush_r+0x22>
 8008974:	08009054 	.word	0x08009054
 8008978:	08009074 	.word	0x08009074
 800897c:	08009034 	.word	0x08009034

08008980 <_lseek_r>:
 8008980:	b538      	push	{r3, r4, r5, lr}
 8008982:	4d07      	ldr	r5, [pc, #28]	; (80089a0 <_lseek_r+0x20>)
 8008984:	4604      	mov	r4, r0
 8008986:	4608      	mov	r0, r1
 8008988:	4611      	mov	r1, r2
 800898a:	2200      	movs	r2, #0
 800898c:	602a      	str	r2, [r5, #0]
 800898e:	461a      	mov	r2, r3
 8008990:	f7f8 fd9e 	bl	80014d0 <_lseek>
 8008994:	1c43      	adds	r3, r0, #1
 8008996:	d102      	bne.n	800899e <_lseek_r+0x1e>
 8008998:	682b      	ldr	r3, [r5, #0]
 800899a:	b103      	cbz	r3, 800899e <_lseek_r+0x1e>
 800899c:	6023      	str	r3, [r4, #0]
 800899e:	bd38      	pop	{r3, r4, r5, pc}
 80089a0:	200193ac 	.word	0x200193ac

080089a4 <__swhatbuf_r>:
 80089a4:	b570      	push	{r4, r5, r6, lr}
 80089a6:	460e      	mov	r6, r1
 80089a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089ac:	2900      	cmp	r1, #0
 80089ae:	b096      	sub	sp, #88	; 0x58
 80089b0:	4614      	mov	r4, r2
 80089b2:	461d      	mov	r5, r3
 80089b4:	da07      	bge.n	80089c6 <__swhatbuf_r+0x22>
 80089b6:	2300      	movs	r3, #0
 80089b8:	602b      	str	r3, [r5, #0]
 80089ba:	89b3      	ldrh	r3, [r6, #12]
 80089bc:	061a      	lsls	r2, r3, #24
 80089be:	d410      	bmi.n	80089e2 <__swhatbuf_r+0x3e>
 80089c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80089c4:	e00e      	b.n	80089e4 <__swhatbuf_r+0x40>
 80089c6:	466a      	mov	r2, sp
 80089c8:	f000 f8fe 	bl	8008bc8 <_fstat_r>
 80089cc:	2800      	cmp	r0, #0
 80089ce:	dbf2      	blt.n	80089b6 <__swhatbuf_r+0x12>
 80089d0:	9a01      	ldr	r2, [sp, #4]
 80089d2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80089d6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80089da:	425a      	negs	r2, r3
 80089dc:	415a      	adcs	r2, r3
 80089de:	602a      	str	r2, [r5, #0]
 80089e0:	e7ee      	b.n	80089c0 <__swhatbuf_r+0x1c>
 80089e2:	2340      	movs	r3, #64	; 0x40
 80089e4:	2000      	movs	r0, #0
 80089e6:	6023      	str	r3, [r4, #0]
 80089e8:	b016      	add	sp, #88	; 0x58
 80089ea:	bd70      	pop	{r4, r5, r6, pc}

080089ec <__smakebuf_r>:
 80089ec:	898b      	ldrh	r3, [r1, #12]
 80089ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80089f0:	079d      	lsls	r5, r3, #30
 80089f2:	4606      	mov	r6, r0
 80089f4:	460c      	mov	r4, r1
 80089f6:	d507      	bpl.n	8008a08 <__smakebuf_r+0x1c>
 80089f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80089fc:	6023      	str	r3, [r4, #0]
 80089fe:	6123      	str	r3, [r4, #16]
 8008a00:	2301      	movs	r3, #1
 8008a02:	6163      	str	r3, [r4, #20]
 8008a04:	b002      	add	sp, #8
 8008a06:	bd70      	pop	{r4, r5, r6, pc}
 8008a08:	ab01      	add	r3, sp, #4
 8008a0a:	466a      	mov	r2, sp
 8008a0c:	f7ff ffca 	bl	80089a4 <__swhatbuf_r>
 8008a10:	9900      	ldr	r1, [sp, #0]
 8008a12:	4605      	mov	r5, r0
 8008a14:	4630      	mov	r0, r6
 8008a16:	f7ff f917 	bl	8007c48 <_malloc_r>
 8008a1a:	b948      	cbnz	r0, 8008a30 <__smakebuf_r+0x44>
 8008a1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a20:	059a      	lsls	r2, r3, #22
 8008a22:	d4ef      	bmi.n	8008a04 <__smakebuf_r+0x18>
 8008a24:	f023 0303 	bic.w	r3, r3, #3
 8008a28:	f043 0302 	orr.w	r3, r3, #2
 8008a2c:	81a3      	strh	r3, [r4, #12]
 8008a2e:	e7e3      	b.n	80089f8 <__smakebuf_r+0xc>
 8008a30:	4b0d      	ldr	r3, [pc, #52]	; (8008a68 <__smakebuf_r+0x7c>)
 8008a32:	62b3      	str	r3, [r6, #40]	; 0x28
 8008a34:	89a3      	ldrh	r3, [r4, #12]
 8008a36:	6020      	str	r0, [r4, #0]
 8008a38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a3c:	81a3      	strh	r3, [r4, #12]
 8008a3e:	9b00      	ldr	r3, [sp, #0]
 8008a40:	6163      	str	r3, [r4, #20]
 8008a42:	9b01      	ldr	r3, [sp, #4]
 8008a44:	6120      	str	r0, [r4, #16]
 8008a46:	b15b      	cbz	r3, 8008a60 <__smakebuf_r+0x74>
 8008a48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a4c:	4630      	mov	r0, r6
 8008a4e:	f000 f8cd 	bl	8008bec <_isatty_r>
 8008a52:	b128      	cbz	r0, 8008a60 <__smakebuf_r+0x74>
 8008a54:	89a3      	ldrh	r3, [r4, #12]
 8008a56:	f023 0303 	bic.w	r3, r3, #3
 8008a5a:	f043 0301 	orr.w	r3, r3, #1
 8008a5e:	81a3      	strh	r3, [r4, #12]
 8008a60:	89a0      	ldrh	r0, [r4, #12]
 8008a62:	4305      	orrs	r5, r0
 8008a64:	81a5      	strh	r5, [r4, #12]
 8008a66:	e7cd      	b.n	8008a04 <__smakebuf_r+0x18>
 8008a68:	08007aa1 	.word	0x08007aa1

08008a6c <memmove>:
 8008a6c:	4288      	cmp	r0, r1
 8008a6e:	b510      	push	{r4, lr}
 8008a70:	eb01 0402 	add.w	r4, r1, r2
 8008a74:	d902      	bls.n	8008a7c <memmove+0x10>
 8008a76:	4284      	cmp	r4, r0
 8008a78:	4623      	mov	r3, r4
 8008a7a:	d807      	bhi.n	8008a8c <memmove+0x20>
 8008a7c:	1e43      	subs	r3, r0, #1
 8008a7e:	42a1      	cmp	r1, r4
 8008a80:	d008      	beq.n	8008a94 <memmove+0x28>
 8008a82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008a86:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008a8a:	e7f8      	b.n	8008a7e <memmove+0x12>
 8008a8c:	4402      	add	r2, r0
 8008a8e:	4601      	mov	r1, r0
 8008a90:	428a      	cmp	r2, r1
 8008a92:	d100      	bne.n	8008a96 <memmove+0x2a>
 8008a94:	bd10      	pop	{r4, pc}
 8008a96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008a9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008a9e:	e7f7      	b.n	8008a90 <memmove+0x24>

08008aa0 <__malloc_lock>:
 8008aa0:	4801      	ldr	r0, [pc, #4]	; (8008aa8 <__malloc_lock+0x8>)
 8008aa2:	f7ff b8cf 	b.w	8007c44 <__retarget_lock_acquire_recursive>
 8008aa6:	bf00      	nop
 8008aa8:	200193a4 	.word	0x200193a4

08008aac <__malloc_unlock>:
 8008aac:	4801      	ldr	r0, [pc, #4]	; (8008ab4 <__malloc_unlock+0x8>)
 8008aae:	f7ff b8ca 	b.w	8007c46 <__retarget_lock_release_recursive>
 8008ab2:	bf00      	nop
 8008ab4:	200193a4 	.word	0x200193a4

08008ab8 <_free_r>:
 8008ab8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008aba:	2900      	cmp	r1, #0
 8008abc:	d048      	beq.n	8008b50 <_free_r+0x98>
 8008abe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ac2:	9001      	str	r0, [sp, #4]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	f1a1 0404 	sub.w	r4, r1, #4
 8008aca:	bfb8      	it	lt
 8008acc:	18e4      	addlt	r4, r4, r3
 8008ace:	f7ff ffe7 	bl	8008aa0 <__malloc_lock>
 8008ad2:	4a20      	ldr	r2, [pc, #128]	; (8008b54 <_free_r+0x9c>)
 8008ad4:	9801      	ldr	r0, [sp, #4]
 8008ad6:	6813      	ldr	r3, [r2, #0]
 8008ad8:	4615      	mov	r5, r2
 8008ada:	b933      	cbnz	r3, 8008aea <_free_r+0x32>
 8008adc:	6063      	str	r3, [r4, #4]
 8008ade:	6014      	str	r4, [r2, #0]
 8008ae0:	b003      	add	sp, #12
 8008ae2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ae6:	f7ff bfe1 	b.w	8008aac <__malloc_unlock>
 8008aea:	42a3      	cmp	r3, r4
 8008aec:	d90b      	bls.n	8008b06 <_free_r+0x4e>
 8008aee:	6821      	ldr	r1, [r4, #0]
 8008af0:	1862      	adds	r2, r4, r1
 8008af2:	4293      	cmp	r3, r2
 8008af4:	bf04      	itt	eq
 8008af6:	681a      	ldreq	r2, [r3, #0]
 8008af8:	685b      	ldreq	r3, [r3, #4]
 8008afa:	6063      	str	r3, [r4, #4]
 8008afc:	bf04      	itt	eq
 8008afe:	1852      	addeq	r2, r2, r1
 8008b00:	6022      	streq	r2, [r4, #0]
 8008b02:	602c      	str	r4, [r5, #0]
 8008b04:	e7ec      	b.n	8008ae0 <_free_r+0x28>
 8008b06:	461a      	mov	r2, r3
 8008b08:	685b      	ldr	r3, [r3, #4]
 8008b0a:	b10b      	cbz	r3, 8008b10 <_free_r+0x58>
 8008b0c:	42a3      	cmp	r3, r4
 8008b0e:	d9fa      	bls.n	8008b06 <_free_r+0x4e>
 8008b10:	6811      	ldr	r1, [r2, #0]
 8008b12:	1855      	adds	r5, r2, r1
 8008b14:	42a5      	cmp	r5, r4
 8008b16:	d10b      	bne.n	8008b30 <_free_r+0x78>
 8008b18:	6824      	ldr	r4, [r4, #0]
 8008b1a:	4421      	add	r1, r4
 8008b1c:	1854      	adds	r4, r2, r1
 8008b1e:	42a3      	cmp	r3, r4
 8008b20:	6011      	str	r1, [r2, #0]
 8008b22:	d1dd      	bne.n	8008ae0 <_free_r+0x28>
 8008b24:	681c      	ldr	r4, [r3, #0]
 8008b26:	685b      	ldr	r3, [r3, #4]
 8008b28:	6053      	str	r3, [r2, #4]
 8008b2a:	4421      	add	r1, r4
 8008b2c:	6011      	str	r1, [r2, #0]
 8008b2e:	e7d7      	b.n	8008ae0 <_free_r+0x28>
 8008b30:	d902      	bls.n	8008b38 <_free_r+0x80>
 8008b32:	230c      	movs	r3, #12
 8008b34:	6003      	str	r3, [r0, #0]
 8008b36:	e7d3      	b.n	8008ae0 <_free_r+0x28>
 8008b38:	6825      	ldr	r5, [r4, #0]
 8008b3a:	1961      	adds	r1, r4, r5
 8008b3c:	428b      	cmp	r3, r1
 8008b3e:	bf04      	itt	eq
 8008b40:	6819      	ldreq	r1, [r3, #0]
 8008b42:	685b      	ldreq	r3, [r3, #4]
 8008b44:	6063      	str	r3, [r4, #4]
 8008b46:	bf04      	itt	eq
 8008b48:	1949      	addeq	r1, r1, r5
 8008b4a:	6021      	streq	r1, [r4, #0]
 8008b4c:	6054      	str	r4, [r2, #4]
 8008b4e:	e7c7      	b.n	8008ae0 <_free_r+0x28>
 8008b50:	b003      	add	sp, #12
 8008b52:	bd30      	pop	{r4, r5, pc}
 8008b54:	20019274 	.word	0x20019274

08008b58 <_realloc_r>:
 8008b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b5a:	4607      	mov	r7, r0
 8008b5c:	4614      	mov	r4, r2
 8008b5e:	460e      	mov	r6, r1
 8008b60:	b921      	cbnz	r1, 8008b6c <_realloc_r+0x14>
 8008b62:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008b66:	4611      	mov	r1, r2
 8008b68:	f7ff b86e 	b.w	8007c48 <_malloc_r>
 8008b6c:	b922      	cbnz	r2, 8008b78 <_realloc_r+0x20>
 8008b6e:	f7ff ffa3 	bl	8008ab8 <_free_r>
 8008b72:	4625      	mov	r5, r4
 8008b74:	4628      	mov	r0, r5
 8008b76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b78:	f000 f848 	bl	8008c0c <_malloc_usable_size_r>
 8008b7c:	42a0      	cmp	r0, r4
 8008b7e:	d20f      	bcs.n	8008ba0 <_realloc_r+0x48>
 8008b80:	4621      	mov	r1, r4
 8008b82:	4638      	mov	r0, r7
 8008b84:	f7ff f860 	bl	8007c48 <_malloc_r>
 8008b88:	4605      	mov	r5, r0
 8008b8a:	2800      	cmp	r0, #0
 8008b8c:	d0f2      	beq.n	8008b74 <_realloc_r+0x1c>
 8008b8e:	4631      	mov	r1, r6
 8008b90:	4622      	mov	r2, r4
 8008b92:	f7fe ff13 	bl	80079bc <memcpy>
 8008b96:	4631      	mov	r1, r6
 8008b98:	4638      	mov	r0, r7
 8008b9a:	f7ff ff8d 	bl	8008ab8 <_free_r>
 8008b9e:	e7e9      	b.n	8008b74 <_realloc_r+0x1c>
 8008ba0:	4635      	mov	r5, r6
 8008ba2:	e7e7      	b.n	8008b74 <_realloc_r+0x1c>

08008ba4 <_read_r>:
 8008ba4:	b538      	push	{r3, r4, r5, lr}
 8008ba6:	4d07      	ldr	r5, [pc, #28]	; (8008bc4 <_read_r+0x20>)
 8008ba8:	4604      	mov	r4, r0
 8008baa:	4608      	mov	r0, r1
 8008bac:	4611      	mov	r1, r2
 8008bae:	2200      	movs	r2, #0
 8008bb0:	602a      	str	r2, [r5, #0]
 8008bb2:	461a      	mov	r2, r3
 8008bb4:	f7f8 fc2c 	bl	8001410 <_read>
 8008bb8:	1c43      	adds	r3, r0, #1
 8008bba:	d102      	bne.n	8008bc2 <_read_r+0x1e>
 8008bbc:	682b      	ldr	r3, [r5, #0]
 8008bbe:	b103      	cbz	r3, 8008bc2 <_read_r+0x1e>
 8008bc0:	6023      	str	r3, [r4, #0]
 8008bc2:	bd38      	pop	{r3, r4, r5, pc}
 8008bc4:	200193ac 	.word	0x200193ac

08008bc8 <_fstat_r>:
 8008bc8:	b538      	push	{r3, r4, r5, lr}
 8008bca:	4d07      	ldr	r5, [pc, #28]	; (8008be8 <_fstat_r+0x20>)
 8008bcc:	2300      	movs	r3, #0
 8008bce:	4604      	mov	r4, r0
 8008bd0:	4608      	mov	r0, r1
 8008bd2:	4611      	mov	r1, r2
 8008bd4:	602b      	str	r3, [r5, #0]
 8008bd6:	f7f8 fc60 	bl	800149a <_fstat>
 8008bda:	1c43      	adds	r3, r0, #1
 8008bdc:	d102      	bne.n	8008be4 <_fstat_r+0x1c>
 8008bde:	682b      	ldr	r3, [r5, #0]
 8008be0:	b103      	cbz	r3, 8008be4 <_fstat_r+0x1c>
 8008be2:	6023      	str	r3, [r4, #0]
 8008be4:	bd38      	pop	{r3, r4, r5, pc}
 8008be6:	bf00      	nop
 8008be8:	200193ac 	.word	0x200193ac

08008bec <_isatty_r>:
 8008bec:	b538      	push	{r3, r4, r5, lr}
 8008bee:	4d06      	ldr	r5, [pc, #24]	; (8008c08 <_isatty_r+0x1c>)
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	4604      	mov	r4, r0
 8008bf4:	4608      	mov	r0, r1
 8008bf6:	602b      	str	r3, [r5, #0]
 8008bf8:	f7f8 fc5f 	bl	80014ba <_isatty>
 8008bfc:	1c43      	adds	r3, r0, #1
 8008bfe:	d102      	bne.n	8008c06 <_isatty_r+0x1a>
 8008c00:	682b      	ldr	r3, [r5, #0]
 8008c02:	b103      	cbz	r3, 8008c06 <_isatty_r+0x1a>
 8008c04:	6023      	str	r3, [r4, #0]
 8008c06:	bd38      	pop	{r3, r4, r5, pc}
 8008c08:	200193ac 	.word	0x200193ac

08008c0c <_malloc_usable_size_r>:
 8008c0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c10:	1f18      	subs	r0, r3, #4
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	bfbc      	itt	lt
 8008c16:	580b      	ldrlt	r3, [r1, r0]
 8008c18:	18c0      	addlt	r0, r0, r3
 8008c1a:	4770      	bx	lr

08008c1c <_init>:
 8008c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c1e:	bf00      	nop
 8008c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c22:	bc08      	pop	{r3}
 8008c24:	469e      	mov	lr, r3
 8008c26:	4770      	bx	lr

08008c28 <_fini>:
 8008c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c2a:	bf00      	nop
 8008c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c2e:	bc08      	pop	{r3}
 8008c30:	469e      	mov	lr, r3
 8008c32:	4770      	bx	lr
