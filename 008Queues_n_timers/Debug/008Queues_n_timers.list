
008Queues_n_timers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ae0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ac  08008c70  08008c70  00018c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800911c  0800911c  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  0800911c  0800911c  0001911c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009124  08009124  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009124  08009124  00019124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009128  08009128  00019128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800912c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000197dc  2000008c  080091b8  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20019868  080091b8  00029868  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020654  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000042c0  00000000  00000000  00040710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015d0  00000000  00000000  000449d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001438  00000000  00000000  00045fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025b2b  00000000  00000000  000473d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001969a  00000000  00000000  0006cf03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc52d  00000000  00000000  0008659d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00162aca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062f4  00000000  00000000  00162b20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000008c 	.word	0x2000008c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008c58 	.word	0x08008c58

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000090 	.word	0x20000090
 80001cc:	08008c58 	.word	0x08008c58

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <led_effect_stop>:


#include "main.h"

void led_effect_stop(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af02      	add	r7, sp, #8
	for(int i = 0 ; i < 4 ; i++)
 800059e:	2300      	movs	r3, #0
 80005a0:	607b      	str	r3, [r7, #4]
 80005a2:	e00e      	b.n	80005c2 <led_effect_stop+0x2a>
		xTimerStop(handle_led_timer[i],portMAX_DELAY);
 80005a4:	4a0b      	ldr	r2, [pc, #44]	; (80005d4 <led_effect_stop+0x3c>)
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80005ac:	f04f 33ff 	mov.w	r3, #4294967295
 80005b0:	9300      	str	r3, [sp, #0]
 80005b2:	2300      	movs	r3, #0
 80005b4:	2200      	movs	r2, #0
 80005b6:	2103      	movs	r1, #3
 80005b8:	f006 f8e6 	bl	8006788 <xTimerGenericCommand>
	for(int i = 0 ; i < 4 ; i++)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	3301      	adds	r3, #1
 80005c0:	607b      	str	r3, [r7, #4]
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	2b03      	cmp	r3, #3
 80005c6:	dded      	ble.n	80005a4 <led_effect_stop+0xc>
}
 80005c8:	bf00      	nop
 80005ca:	bf00      	nop
 80005cc:	3708      	adds	r7, #8
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	2001968c 	.word	0x2001968c

080005d8 <led_effect>:

void led_effect(int n )
{
 80005d8:	b590      	push	{r4, r7, lr}
 80005da:	b085      	sub	sp, #20
 80005dc:	af02      	add	r7, sp, #8
 80005de:	6078      	str	r0, [r7, #4]
	led_effect_stop();
 80005e0:	f7ff ffda 	bl	8000598 <led_effect_stop>
	xTimerStart(handle_led_timer[n-1], portMAX_DELAY);
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	3b01      	subs	r3, #1
 80005e8:	4a08      	ldr	r2, [pc, #32]	; (800060c <led_effect+0x34>)
 80005ea:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80005ee:	f005 f9cd 	bl	800598c <xTaskGetTickCount>
 80005f2:	4602      	mov	r2, r0
 80005f4:	f04f 33ff 	mov.w	r3, #4294967295
 80005f8:	9300      	str	r3, [sp, #0]
 80005fa:	2300      	movs	r3, #0
 80005fc:	2101      	movs	r1, #1
 80005fe:	4620      	mov	r0, r4
 8000600:	f006 f8c2 	bl	8006788 <xTimerGenericCommand>

}
 8000604:	bf00      	nop
 8000606:	370c      	adds	r7, #12
 8000608:	46bd      	mov	sp, r7
 800060a:	bd90      	pop	{r4, r7, pc}
 800060c:	2001968c 	.word	0x2001968c

08000610 <turn_off_all_leds>:

void turn_off_all_leds(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin,GPIO_PIN_RESET);
 8000614:	2200      	movs	r2, #0
 8000616:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800061a:	480b      	ldr	r0, [pc, #44]	; (8000648 <turn_off_all_leds+0x38>)
 800061c:	f001 ff22 	bl	8002464 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin,GPIO_PIN_RESET);
 8000620:	2200      	movs	r2, #0
 8000622:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000626:	4808      	ldr	r0, [pc, #32]	; (8000648 <turn_off_all_leds+0x38>)
 8000628:	f001 ff1c 	bl	8002464 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin,GPIO_PIN_RESET);
 800062c:	2200      	movs	r2, #0
 800062e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000632:	4805      	ldr	r0, [pc, #20]	; (8000648 <turn_off_all_leds+0x38>)
 8000634:	f001 ff16 	bl	8002464 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin,GPIO_PIN_RESET);
 8000638:	2200      	movs	r2, #0
 800063a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800063e:	4802      	ldr	r0, [pc, #8]	; (8000648 <turn_off_all_leds+0x38>)
 8000640:	f001 ff10 	bl	8002464 <HAL_GPIO_WritePin>
}
 8000644:	bf00      	nop
 8000646:	bd80      	pop	{r7, pc}
 8000648:	40020c00 	.word	0x40020c00

0800064c <turn_on_all_leds>:


void turn_on_all_leds(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin,GPIO_PIN_SET);
 8000650:	2201      	movs	r2, #1
 8000652:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000656:	480b      	ldr	r0, [pc, #44]	; (8000684 <turn_on_all_leds+0x38>)
 8000658:	f001 ff04 	bl	8002464 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin,GPIO_PIN_SET);
 800065c:	2201      	movs	r2, #1
 800065e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000662:	4808      	ldr	r0, [pc, #32]	; (8000684 <turn_on_all_leds+0x38>)
 8000664:	f001 fefe 	bl	8002464 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin,GPIO_PIN_SET);
 8000668:	2201      	movs	r2, #1
 800066a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800066e:	4805      	ldr	r0, [pc, #20]	; (8000684 <turn_on_all_leds+0x38>)
 8000670:	f001 fef8 	bl	8002464 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin,GPIO_PIN_SET);
 8000674:	2201      	movs	r2, #1
 8000676:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800067a:	4802      	ldr	r0, [pc, #8]	; (8000684 <turn_on_all_leds+0x38>)
 800067c:	f001 fef2 	bl	8002464 <HAL_GPIO_WritePin>
}
 8000680:	bf00      	nop
 8000682:	bd80      	pop	{r7, pc}
 8000684:	40020c00 	.word	0x40020c00

08000688 <turn_on_odd_leds>:

void turn_on_odd_leds(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD3_GPIO_Port, LED1,GPIO_PIN_SET);
 800068c:	2201      	movs	r2, #1
 800068e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000692:	480b      	ldr	r0, [pc, #44]	; (80006c0 <turn_on_odd_leds+0x38>)
 8000694:	f001 fee6 	bl	8002464 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD4_GPIO_Port, LED2,GPIO_PIN_RESET);
 8000698:	2200      	movs	r2, #0
 800069a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800069e:	4808      	ldr	r0, [pc, #32]	; (80006c0 <turn_on_odd_leds+0x38>)
 80006a0:	f001 fee0 	bl	8002464 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD5_GPIO_Port, LED3,GPIO_PIN_SET);
 80006a4:	2201      	movs	r2, #1
 80006a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006aa:	4805      	ldr	r0, [pc, #20]	; (80006c0 <turn_on_odd_leds+0x38>)
 80006ac:	f001 feda 	bl	8002464 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD6_GPIO_Port, LED4,GPIO_PIN_RESET);
 80006b0:	2200      	movs	r2, #0
 80006b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006b6:	4802      	ldr	r0, [pc, #8]	; (80006c0 <turn_on_odd_leds+0x38>)
 80006b8:	f001 fed4 	bl	8002464 <HAL_GPIO_WritePin>
}
 80006bc:	bf00      	nop
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40020c00 	.word	0x40020c00

080006c4 <turn_on_even_leds>:


void turn_on_even_leds(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD3_GPIO_Port, LED1,GPIO_PIN_RESET);
 80006c8:	2200      	movs	r2, #0
 80006ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006ce:	480b      	ldr	r0, [pc, #44]	; (80006fc <turn_on_even_leds+0x38>)
 80006d0:	f001 fec8 	bl	8002464 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD4_GPIO_Port, LED2,GPIO_PIN_SET);
 80006d4:	2201      	movs	r2, #1
 80006d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006da:	4808      	ldr	r0, [pc, #32]	; (80006fc <turn_on_even_leds+0x38>)
 80006dc:	f001 fec2 	bl	8002464 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD5_GPIO_Port, LED3,GPIO_PIN_RESET);
 80006e0:	2200      	movs	r2, #0
 80006e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006e6:	4805      	ldr	r0, [pc, #20]	; (80006fc <turn_on_even_leds+0x38>)
 80006e8:	f001 febc 	bl	8002464 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD6_GPIO_Port, LED4,GPIO_PIN_SET);
 80006ec:	2201      	movs	r2, #1
 80006ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006f2:	4802      	ldr	r0, [pc, #8]	; (80006fc <turn_on_even_leds+0x38>)
 80006f4:	f001 feb6 	bl	8002464 <HAL_GPIO_WritePin>
}
 80006f8:	bf00      	nop
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	40020c00 	.word	0x40020c00

08000700 <LED_control>:

void LED_control( int value )
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  for(int i = 0 ; i < 4 ; i++)
 8000708:	2300      	movs	r3, #0
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	e014      	b.n	8000738 <LED_control+0x38>
	  HAL_GPIO_WritePin(LD3_GPIO_Port, (LED1 << i), ((value >> i)& 0x1));
 800070e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	fa02 f303 	lsl.w	r3, r2, r3
 8000718:	b299      	uxth	r1, r3
 800071a:	687a      	ldr	r2, [r7, #4]
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	fa42 f303 	asr.w	r3, r2, r3
 8000722:	b2db      	uxtb	r3, r3
 8000724:	f003 0301 	and.w	r3, r3, #1
 8000728:	b2db      	uxtb	r3, r3
 800072a:	461a      	mov	r2, r3
 800072c:	4806      	ldr	r0, [pc, #24]	; (8000748 <LED_control+0x48>)
 800072e:	f001 fe99 	bl	8002464 <HAL_GPIO_WritePin>
  for(int i = 0 ; i < 4 ; i++)
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	3301      	adds	r3, #1
 8000736:	60fb      	str	r3, [r7, #12]
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	2b03      	cmp	r3, #3
 800073c:	dde7      	ble.n	800070e <LED_control+0xe>
}
 800073e:	bf00      	nop
 8000740:	bf00      	nop
 8000742:	3710      	adds	r7, #16
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	40020c00 	.word	0x40020c00

0800074c <LED_effect1>:


void LED_effect1(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
	static int flag = 1;
	(flag ^= 1) ? turn_off_all_leds() : turn_on_all_leds();
 8000750:	4b08      	ldr	r3, [pc, #32]	; (8000774 <LED_effect1+0x28>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f083 0301 	eor.w	r3, r3, #1
 8000758:	4a06      	ldr	r2, [pc, #24]	; (8000774 <LED_effect1+0x28>)
 800075a:	6013      	str	r3, [r2, #0]
 800075c:	4b05      	ldr	r3, [pc, #20]	; (8000774 <LED_effect1+0x28>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d002      	beq.n	800076a <LED_effect1+0x1e>
 8000764:	f7ff ff54 	bl	8000610 <turn_off_all_leds>
}
 8000768:	e001      	b.n	800076e <LED_effect1+0x22>
	(flag ^= 1) ? turn_off_all_leds() : turn_on_all_leds();
 800076a:	f7ff ff6f 	bl	800064c <turn_on_all_leds>
}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	20000000 	.word	0x20000000

08000778 <LED_effect2>:


void LED_effect2(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
	static int flag = 1;
	(flag ^= 1) ? turn_on_even_leds() : turn_on_odd_leds();
 800077c:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <LED_effect2+0x28>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	f083 0301 	eor.w	r3, r3, #1
 8000784:	4a06      	ldr	r2, [pc, #24]	; (80007a0 <LED_effect2+0x28>)
 8000786:	6013      	str	r3, [r2, #0]
 8000788:	4b05      	ldr	r3, [pc, #20]	; (80007a0 <LED_effect2+0x28>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d002      	beq.n	8000796 <LED_effect2+0x1e>
 8000790:	f7ff ff98 	bl	80006c4 <turn_on_even_leds>
}
 8000794:	e001      	b.n	800079a <LED_effect2+0x22>
	(flag ^= 1) ? turn_on_even_leds() : turn_on_odd_leds();
 8000796:	f7ff ff77 	bl	8000688 <turn_on_odd_leds>
}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	20000004 	.word	0x20000004

080007a4 <LED_effect3>:

void LED_effect3(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
	static int i = 0;
	LED_control( 0x1 << (i++ % 4) );
 80007a8:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <LED_effect3+0x2c>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	1c5a      	adds	r2, r3, #1
 80007ae:	4908      	ldr	r1, [pc, #32]	; (80007d0 <LED_effect3+0x2c>)
 80007b0:	600a      	str	r2, [r1, #0]
 80007b2:	425a      	negs	r2, r3
 80007b4:	f003 0303 	and.w	r3, r3, #3
 80007b8:	f002 0203 	and.w	r2, r2, #3
 80007bc:	bf58      	it	pl
 80007be:	4253      	negpl	r3, r2
 80007c0:	2201      	movs	r2, #1
 80007c2:	fa02 f303 	lsl.w	r3, r2, r3
 80007c6:	4618      	mov	r0, r3
 80007c8:	f7ff ff9a 	bl	8000700 <LED_control>
}
 80007cc:	bf00      	nop
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	200000a8 	.word	0x200000a8

080007d4 <LED_effect4>:


void LED_effect4(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
	static int i = 0;
	LED_control( 0x08 >> (i++ % 4) );
 80007d8:	4b09      	ldr	r3, [pc, #36]	; (8000800 <LED_effect4+0x2c>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	1c5a      	adds	r2, r3, #1
 80007de:	4908      	ldr	r1, [pc, #32]	; (8000800 <LED_effect4+0x2c>)
 80007e0:	600a      	str	r2, [r1, #0]
 80007e2:	425a      	negs	r2, r3
 80007e4:	f003 0303 	and.w	r3, r3, #3
 80007e8:	f002 0203 	and.w	r2, r2, #3
 80007ec:	bf58      	it	pl
 80007ee:	4253      	negpl	r3, r2
 80007f0:	2208      	movs	r2, #8
 80007f2:	fa42 f303 	asr.w	r3, r2, r3
 80007f6:	4618      	mov	r0, r3
 80007f8:	f7ff ff82 	bl	8000700 <LED_control>
}
 80007fc:	bf00      	nop
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	200000ac 	.word	0x200000ac

08000804 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b08c      	sub	sp, #48	; 0x30
 8000808:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800080a:	f001 fad9 	bl	8001dc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800080e:	f000 f911 	bl	8000a34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000812:	f000 f9e1 	bl	8000bd8 <MX_GPIO_Init>
  MX_RTC_Init();
 8000816:	f000 f98f 	bl	8000b38 <MX_RTC_Init>
  MX_USART2_UART_Init();
 800081a:	f000 f9b3 	bl	8000b84 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */


	status = xTaskCreate(menu_task, "menu_task", 250, NULL, 2, &handle_menu_task);
 800081e:	4b6c      	ldr	r3, [pc, #432]	; (80009d0 <main+0x1cc>)
 8000820:	9301      	str	r3, [sp, #4]
 8000822:	2302      	movs	r3, #2
 8000824:	9300      	str	r3, [sp, #0]
 8000826:	2300      	movs	r3, #0
 8000828:	22fa      	movs	r2, #250	; 0xfa
 800082a:	496a      	ldr	r1, [pc, #424]	; (80009d4 <main+0x1d0>)
 800082c:	486a      	ldr	r0, [pc, #424]	; (80009d8 <main+0x1d4>)
 800082e:	f004 fe6b 	bl	8005508 <xTaskCreate>
 8000832:	6238      	str	r0, [r7, #32]

	configASSERT(status == pdPASS);
 8000834:	6a3b      	ldr	r3, [r7, #32]
 8000836:	2b01      	cmp	r3, #1
 8000838:	d00a      	beq.n	8000850 <main+0x4c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800083a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800083e:	f383 8811 	msr	BASEPRI, r3
 8000842:	f3bf 8f6f 	isb	sy
 8000846:	f3bf 8f4f 	dsb	sy
 800084a:	61fb      	str	r3, [r7, #28]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800084c:	bf00      	nop
 800084e:	e7fe      	b.n	800084e <main+0x4a>

	status = xTaskCreate(cmd_handler_task, "cmd_task", 250, NULL, 2, &handle_cmd_task);
 8000850:	4b62      	ldr	r3, [pc, #392]	; (80009dc <main+0x1d8>)
 8000852:	9301      	str	r3, [sp, #4]
 8000854:	2302      	movs	r3, #2
 8000856:	9300      	str	r3, [sp, #0]
 8000858:	2300      	movs	r3, #0
 800085a:	22fa      	movs	r2, #250	; 0xfa
 800085c:	4960      	ldr	r1, [pc, #384]	; (80009e0 <main+0x1dc>)
 800085e:	4861      	ldr	r0, [pc, #388]	; (80009e4 <main+0x1e0>)
 8000860:	f004 fe52 	bl	8005508 <xTaskCreate>
 8000864:	6238      	str	r0, [r7, #32]

	configASSERT(status == pdPASS);
 8000866:	6a3b      	ldr	r3, [r7, #32]
 8000868:	2b01      	cmp	r3, #1
 800086a:	d00a      	beq.n	8000882 <main+0x7e>
        __asm volatile
 800086c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000870:	f383 8811 	msr	BASEPRI, r3
 8000874:	f3bf 8f6f 	isb	sy
 8000878:	f3bf 8f4f 	dsb	sy
 800087c:	61bb      	str	r3, [r7, #24]
    }
 800087e:	bf00      	nop
 8000880:	e7fe      	b.n	8000880 <main+0x7c>

	status = xTaskCreate(print_task, "print_task", 250, NULL, 2, &handle_print_task);
 8000882:	4b59      	ldr	r3, [pc, #356]	; (80009e8 <main+0x1e4>)
 8000884:	9301      	str	r3, [sp, #4]
 8000886:	2302      	movs	r3, #2
 8000888:	9300      	str	r3, [sp, #0]
 800088a:	2300      	movs	r3, #0
 800088c:	22fa      	movs	r2, #250	; 0xfa
 800088e:	4957      	ldr	r1, [pc, #348]	; (80009ec <main+0x1e8>)
 8000890:	4857      	ldr	r0, [pc, #348]	; (80009f0 <main+0x1ec>)
 8000892:	f004 fe39 	bl	8005508 <xTaskCreate>
 8000896:	6238      	str	r0, [r7, #32]

	configASSERT(status == pdPASS);
 8000898:	6a3b      	ldr	r3, [r7, #32]
 800089a:	2b01      	cmp	r3, #1
 800089c:	d00a      	beq.n	80008b4 <main+0xb0>
        __asm volatile
 800089e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008a2:	f383 8811 	msr	BASEPRI, r3
 80008a6:	f3bf 8f6f 	isb	sy
 80008aa:	f3bf 8f4f 	dsb	sy
 80008ae:	617b      	str	r3, [r7, #20]
    }
 80008b0:	bf00      	nop
 80008b2:	e7fe      	b.n	80008b2 <main+0xae>

	status = xTaskCreate(led_task, "led_task", 250, NULL, 2, &handle_led_task);
 80008b4:	4b4f      	ldr	r3, [pc, #316]	; (80009f4 <main+0x1f0>)
 80008b6:	9301      	str	r3, [sp, #4]
 80008b8:	2302      	movs	r3, #2
 80008ba:	9300      	str	r3, [sp, #0]
 80008bc:	2300      	movs	r3, #0
 80008be:	22fa      	movs	r2, #250	; 0xfa
 80008c0:	494d      	ldr	r1, [pc, #308]	; (80009f8 <main+0x1f4>)
 80008c2:	484e      	ldr	r0, [pc, #312]	; (80009fc <main+0x1f8>)
 80008c4:	f004 fe20 	bl	8005508 <xTaskCreate>
 80008c8:	6238      	str	r0, [r7, #32]

	configASSERT(status == pdPASS);
 80008ca:	6a3b      	ldr	r3, [r7, #32]
 80008cc:	2b01      	cmp	r3, #1
 80008ce:	d00a      	beq.n	80008e6 <main+0xe2>
        __asm volatile
 80008d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008d4:	f383 8811 	msr	BASEPRI, r3
 80008d8:	f3bf 8f6f 	isb	sy
 80008dc:	f3bf 8f4f 	dsb	sy
 80008e0:	613b      	str	r3, [r7, #16]
    }
 80008e2:	bf00      	nop
 80008e4:	e7fe      	b.n	80008e4 <main+0xe0>

	status = xTaskCreate(rtc_task, "rtc_task", 250, NULL, 2, &handle_rtc_task);
 80008e6:	4b46      	ldr	r3, [pc, #280]	; (8000a00 <main+0x1fc>)
 80008e8:	9301      	str	r3, [sp, #4]
 80008ea:	2302      	movs	r3, #2
 80008ec:	9300      	str	r3, [sp, #0]
 80008ee:	2300      	movs	r3, #0
 80008f0:	22fa      	movs	r2, #250	; 0xfa
 80008f2:	4944      	ldr	r1, [pc, #272]	; (8000a04 <main+0x200>)
 80008f4:	4844      	ldr	r0, [pc, #272]	; (8000a08 <main+0x204>)
 80008f6:	f004 fe07 	bl	8005508 <xTaskCreate>
 80008fa:	6238      	str	r0, [r7, #32]

	configASSERT(status == pdPASS);
 80008fc:	6a3b      	ldr	r3, [r7, #32]
 80008fe:	2b01      	cmp	r3, #1
 8000900:	d00a      	beq.n	8000918 <main+0x114>
        __asm volatile
 8000902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000906:	f383 8811 	msr	BASEPRI, r3
 800090a:	f3bf 8f6f 	isb	sy
 800090e:	f3bf 8f4f 	dsb	sy
 8000912:	60fb      	str	r3, [r7, #12]
    }
 8000914:	bf00      	nop
 8000916:	e7fe      	b.n	8000916 <main+0x112>

	q_data = xQueueCreate (10, sizeof(char));
 8000918:	2200      	movs	r2, #0
 800091a:	2101      	movs	r1, #1
 800091c:	200a      	movs	r0, #10
 800091e:	f004 f8a7 	bl	8004a70 <xQueueGenericCreate>
 8000922:	4603      	mov	r3, r0
 8000924:	4a39      	ldr	r2, [pc, #228]	; (8000a0c <main+0x208>)
 8000926:	6013      	str	r3, [r2, #0]

	configASSERT(q_data != NULL);
 8000928:	4b38      	ldr	r3, [pc, #224]	; (8000a0c <main+0x208>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d10a      	bne.n	8000946 <main+0x142>
        __asm volatile
 8000930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000934:	f383 8811 	msr	BASEPRI, r3
 8000938:	f3bf 8f6f 	isb	sy
 800093c:	f3bf 8f4f 	dsb	sy
 8000940:	60bb      	str	r3, [r7, #8]
    }
 8000942:	bf00      	nop
 8000944:	e7fe      	b.n	8000944 <main+0x140>

	q_print = xQueueCreate (10, sizeof(size_t));
 8000946:	2200      	movs	r2, #0
 8000948:	2104      	movs	r1, #4
 800094a:	200a      	movs	r0, #10
 800094c:	f004 f890 	bl	8004a70 <xQueueGenericCreate>
 8000950:	4603      	mov	r3, r0
 8000952:	4a2f      	ldr	r2, [pc, #188]	; (8000a10 <main+0x20c>)
 8000954:	6013      	str	r3, [r2, #0]

	configASSERT(q_print != NULL);
 8000956:	4b2e      	ldr	r3, [pc, #184]	; (8000a10 <main+0x20c>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d10a      	bne.n	8000974 <main+0x170>
        __asm volatile
 800095e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000962:	f383 8811 	msr	BASEPRI, r3
 8000966:	f3bf 8f6f 	isb	sy
 800096a:	f3bf 8f4f 	dsb	sy
 800096e:	607b      	str	r3, [r7, #4]
    }
 8000970:	bf00      	nop
 8000972:	e7fe      	b.n	8000972 <main+0x16e>


	//Create software timers for LED effects
	for(int i = 0 ; i < 4 ; i++)
 8000974:	2300      	movs	r3, #0
 8000976:	627b      	str	r3, [r7, #36]	; 0x24
 8000978:	e013      	b.n	80009a2 <main+0x19e>
		handle_led_timer[i] = xTimerCreate("led_timer",pdMS_TO_TICKS(500),pdTRUE, (void*)(i+1),led_effect_callback);
 800097a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800097c:	3301      	adds	r3, #1
 800097e:	461a      	mov	r2, r3
 8000980:	4b24      	ldr	r3, [pc, #144]	; (8000a14 <main+0x210>)
 8000982:	9300      	str	r3, [sp, #0]
 8000984:	4613      	mov	r3, r2
 8000986:	2201      	movs	r2, #1
 8000988:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800098c:	4822      	ldr	r0, [pc, #136]	; (8000a18 <main+0x214>)
 800098e:	f005 fe9f 	bl	80066d0 <xTimerCreate>
 8000992:	4602      	mov	r2, r0
 8000994:	4921      	ldr	r1, [pc, #132]	; (8000a1c <main+0x218>)
 8000996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000998:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0 ; i < 4 ; i++)
 800099c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800099e:	3301      	adds	r3, #1
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24
 80009a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a4:	2b03      	cmp	r3, #3
 80009a6:	dde8      	ble.n	800097a <main+0x176>


	rtc_timer = xTimerCreate ("rtc_report_timer",pdMS_TO_TICKS(1000),pdTRUE,NULL,rtc_report_callback);
 80009a8:	4b1d      	ldr	r3, [pc, #116]	; (8000a20 <main+0x21c>)
 80009aa:	9300      	str	r3, [sp, #0]
 80009ac:	2300      	movs	r3, #0
 80009ae:	2201      	movs	r2, #1
 80009b0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80009b4:	481b      	ldr	r0, [pc, #108]	; (8000a24 <main+0x220>)
 80009b6:	f005 fe8b 	bl	80066d0 <xTimerCreate>
 80009ba:	4603      	mov	r3, r0
 80009bc:	4a1a      	ldr	r2, [pc, #104]	; (8000a28 <main+0x224>)
 80009be:	6013      	str	r3, [r2, #0]

	HAL_UART_Receive_IT(&huart2, (uint8_t*)&user_data, 1);
 80009c0:	2201      	movs	r2, #1
 80009c2:	491a      	ldr	r1, [pc, #104]	; (8000a2c <main+0x228>)
 80009c4:	481a      	ldr	r0, [pc, #104]	; (8000a30 <main+0x22c>)
 80009c6:	f003 f9ae 	bl	8003d26 <HAL_UART_Receive_IT>

	vTaskStartScheduler();
 80009ca:	f004 fee3 	bl	8005794 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009ce:	e7fe      	b.n	80009ce <main+0x1ca>
 80009d0:	200196ac 	.word	0x200196ac
 80009d4:	08008c70 	.word	0x08008c70
 80009d8:	08001549 	.word	0x08001549
 80009dc:	200196a4 	.word	0x200196a4
 80009e0:	08008c7c 	.word	0x08008c7c
 80009e4:	08001c51 	.word	0x08001c51
 80009e8:	200196d4 	.word	0x200196d4
 80009ec:	08008c88 	.word	0x08008c88
 80009f0:	08001c11 	.word	0x08001c11
 80009f4:	200196d8 	.word	0x200196d8
 80009f8:	08008c94 	.word	0x08008c94
 80009fc:	08001631 	.word	0x08001631
 8000a00:	200196a0 	.word	0x200196a0
 8000a04:	08008ca0 	.word	0x08008ca0
 8000a08:	080017a5 	.word	0x080017a5
 8000a0c:	200196a8 	.word	0x200196a8
 8000a10:	200196b0 	.word	0x200196b0
 8000a14:	08000ead 	.word	0x08000ead
 8000a18:	08008cac 	.word	0x08008cac
 8000a1c:	2001968c 	.word	0x2001968c
 8000a20:	08000e99 	.word	0x08000e99
 8000a24:	08008cb8 	.word	0x08008cb8
 8000a28:	2001969c 	.word	0x2001969c
 8000a2c:	200196dc 	.word	0x200196dc
 8000a30:	200196e0 	.word	0x200196e0

08000a34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b098      	sub	sp, #96	; 0x60
 8000a38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a3a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a3e:	2230      	movs	r2, #48	; 0x30
 8000a40:	2100      	movs	r1, #0
 8000a42:	4618      	mov	r0, r3
 8000a44:	f006 fff8 	bl	8007a38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a48:	f107 031c 	add.w	r3, r7, #28
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	60da      	str	r2, [r3, #12]
 8000a56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a58:	f107 030c 	add.w	r3, r7, #12
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	60bb      	str	r3, [r7, #8]
 8000a6a:	4b31      	ldr	r3, [pc, #196]	; (8000b30 <SystemClock_Config+0xfc>)
 8000a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6e:	4a30      	ldr	r2, [pc, #192]	; (8000b30 <SystemClock_Config+0xfc>)
 8000a70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a74:	6413      	str	r3, [r2, #64]	; 0x40
 8000a76:	4b2e      	ldr	r3, [pc, #184]	; (8000b30 <SystemClock_Config+0xfc>)
 8000a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a7e:	60bb      	str	r3, [r7, #8]
 8000a80:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a82:	2300      	movs	r3, #0
 8000a84:	607b      	str	r3, [r7, #4]
 8000a86:	4b2b      	ldr	r3, [pc, #172]	; (8000b34 <SystemClock_Config+0x100>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4a2a      	ldr	r2, [pc, #168]	; (8000b34 <SystemClock_Config+0x100>)
 8000a8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a90:	6013      	str	r3, [r2, #0]
 8000a92:	4b28      	ldr	r3, [pc, #160]	; (8000b34 <SystemClock_Config+0x100>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a9a:	607b      	str	r3, [r7, #4]
 8000a9c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000a9e:	230a      	movs	r3, #10
 8000aa0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000aa6:	2310      	movs	r3, #16
 8000aa8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ab6:	2308      	movs	r3, #8
 8000ab8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000aba:	2332      	movs	r3, #50	; 0x32
 8000abc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000abe:	2304      	movs	r3, #4
 8000ac0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ac2:	2307      	movs	r3, #7
 8000ac4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ac6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000aca:	4618      	mov	r0, r3
 8000acc:	f001 fce4 	bl	8002498 <HAL_RCC_OscConfig>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000ad6:	f000 fa77 	bl	8000fc8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ada:	230f      	movs	r3, #15
 8000adc:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ae6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000aea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000aec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000af0:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000af2:	f107 031c 	add.w	r3, r7, #28
 8000af6:	2100      	movs	r1, #0
 8000af8:	4618      	mov	r0, r3
 8000afa:	f001 ff45 	bl	8002988 <HAL_RCC_ClockConfig>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000b04:	f000 fa60 	bl	8000fc8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000b0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b10:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b12:	f107 030c 	add.w	r3, r7, #12
 8000b16:	4618      	mov	r0, r3
 8000b18:	f002 f964 	bl	8002de4 <HAL_RCCEx_PeriphCLKConfig>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000b22:	f000 fa51 	bl	8000fc8 <Error_Handler>
  }
}
 8000b26:	bf00      	nop
 8000b28:	3760      	adds	r7, #96	; 0x60
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40023800 	.word	0x40023800
 8000b34:	40007000 	.word	0x40007000

08000b38 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000b3c:	4b0f      	ldr	r3, [pc, #60]	; (8000b7c <MX_RTC_Init+0x44>)
 8000b3e:	4a10      	ldr	r2, [pc, #64]	; (8000b80 <MX_RTC_Init+0x48>)
 8000b40:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000b42:	4b0e      	ldr	r3, [pc, #56]	; (8000b7c <MX_RTC_Init+0x44>)
 8000b44:	2240      	movs	r2, #64	; 0x40
 8000b46:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000b48:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <MX_RTC_Init+0x44>)
 8000b4a:	227f      	movs	r2, #127	; 0x7f
 8000b4c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000b4e:	4b0b      	ldr	r3, [pc, #44]	; (8000b7c <MX_RTC_Init+0x44>)
 8000b50:	22ff      	movs	r2, #255	; 0xff
 8000b52:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000b54:	4b09      	ldr	r3, [pc, #36]	; (8000b7c <MX_RTC_Init+0x44>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000b5a:	4b08      	ldr	r3, [pc, #32]	; (8000b7c <MX_RTC_Init+0x44>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000b60:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <MX_RTC_Init+0x44>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b66:	4805      	ldr	r0, [pc, #20]	; (8000b7c <MX_RTC_Init+0x44>)
 8000b68:	f002 fa1e 	bl	8002fa8 <HAL_RTC_Init>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000b72:	f000 fa29 	bl	8000fc8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	200196b4 	.word	0x200196b4
 8000b80:	40002800 	.word	0x40002800

08000b84 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b88:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <MX_USART2_UART_Init+0x4c>)
 8000b8a:	4a12      	ldr	r2, [pc, #72]	; (8000bd4 <MX_USART2_UART_Init+0x50>)
 8000b8c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b8e:	4b10      	ldr	r3, [pc, #64]	; (8000bd0 <MX_USART2_UART_Init+0x4c>)
 8000b90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b94:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b96:	4b0e      	ldr	r3, [pc, #56]	; (8000bd0 <MX_USART2_UART_Init+0x4c>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b9c:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <MX_USART2_UART_Init+0x4c>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ba2:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <MX_USART2_UART_Init+0x4c>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ba8:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <MX_USART2_UART_Init+0x4c>)
 8000baa:	220c      	movs	r2, #12
 8000bac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bae:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <MX_USART2_UART_Init+0x4c>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bb4:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <MX_USART2_UART_Init+0x4c>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bba:	4805      	ldr	r0, [pc, #20]	; (8000bd0 <MX_USART2_UART_Init+0x4c>)
 8000bbc:	f002 ffd4 	bl	8003b68 <HAL_UART_Init>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000bc6:	f000 f9ff 	bl	8000fc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	200196e0 	.word	0x200196e0
 8000bd4:	40004400 	.word	0x40004400

08000bd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08c      	sub	sp, #48	; 0x30
 8000bdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bde:	f107 031c 	add.w	r3, r7, #28
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	605a      	str	r2, [r3, #4]
 8000be8:	609a      	str	r2, [r3, #8]
 8000bea:	60da      	str	r2, [r3, #12]
 8000bec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	61bb      	str	r3, [r7, #24]
 8000bf2:	4ba1      	ldr	r3, [pc, #644]	; (8000e78 <MX_GPIO_Init+0x2a0>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	4aa0      	ldr	r2, [pc, #640]	; (8000e78 <MX_GPIO_Init+0x2a0>)
 8000bf8:	f043 0310 	orr.w	r3, r3, #16
 8000bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfe:	4b9e      	ldr	r3, [pc, #632]	; (8000e78 <MX_GPIO_Init+0x2a0>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	f003 0310 	and.w	r3, r3, #16
 8000c06:	61bb      	str	r3, [r7, #24]
 8000c08:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	617b      	str	r3, [r7, #20]
 8000c0e:	4b9a      	ldr	r3, [pc, #616]	; (8000e78 <MX_GPIO_Init+0x2a0>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	4a99      	ldr	r2, [pc, #612]	; (8000e78 <MX_GPIO_Init+0x2a0>)
 8000c14:	f043 0304 	orr.w	r3, r3, #4
 8000c18:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1a:	4b97      	ldr	r3, [pc, #604]	; (8000e78 <MX_GPIO_Init+0x2a0>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	f003 0304 	and.w	r3, r3, #4
 8000c22:	617b      	str	r3, [r7, #20]
 8000c24:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	613b      	str	r3, [r7, #16]
 8000c2a:	4b93      	ldr	r3, [pc, #588]	; (8000e78 <MX_GPIO_Init+0x2a0>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	4a92      	ldr	r2, [pc, #584]	; (8000e78 <MX_GPIO_Init+0x2a0>)
 8000c30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c34:	6313      	str	r3, [r2, #48]	; 0x30
 8000c36:	4b90      	ldr	r3, [pc, #576]	; (8000e78 <MX_GPIO_Init+0x2a0>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c3e:	613b      	str	r3, [r7, #16]
 8000c40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	60fb      	str	r3, [r7, #12]
 8000c46:	4b8c      	ldr	r3, [pc, #560]	; (8000e78 <MX_GPIO_Init+0x2a0>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	4a8b      	ldr	r2, [pc, #556]	; (8000e78 <MX_GPIO_Init+0x2a0>)
 8000c4c:	f043 0301 	orr.w	r3, r3, #1
 8000c50:	6313      	str	r3, [r2, #48]	; 0x30
 8000c52:	4b89      	ldr	r3, [pc, #548]	; (8000e78 <MX_GPIO_Init+0x2a0>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	f003 0301 	and.w	r3, r3, #1
 8000c5a:	60fb      	str	r3, [r7, #12]
 8000c5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60bb      	str	r3, [r7, #8]
 8000c62:	4b85      	ldr	r3, [pc, #532]	; (8000e78 <MX_GPIO_Init+0x2a0>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	4a84      	ldr	r2, [pc, #528]	; (8000e78 <MX_GPIO_Init+0x2a0>)
 8000c68:	f043 0302 	orr.w	r3, r3, #2
 8000c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6e:	4b82      	ldr	r3, [pc, #520]	; (8000e78 <MX_GPIO_Init+0x2a0>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	f003 0302 	and.w	r3, r3, #2
 8000c76:	60bb      	str	r3, [r7, #8]
 8000c78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	607b      	str	r3, [r7, #4]
 8000c7e:	4b7e      	ldr	r3, [pc, #504]	; (8000e78 <MX_GPIO_Init+0x2a0>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	4a7d      	ldr	r2, [pc, #500]	; (8000e78 <MX_GPIO_Init+0x2a0>)
 8000c84:	f043 0308 	orr.w	r3, r3, #8
 8000c88:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8a:	4b7b      	ldr	r3, [pc, #492]	; (8000e78 <MX_GPIO_Init+0x2a0>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	f003 0308 	and.w	r3, r3, #8
 8000c92:	607b      	str	r3, [r7, #4]
 8000c94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000c96:	2200      	movs	r2, #0
 8000c98:	2108      	movs	r1, #8
 8000c9a:	4878      	ldr	r0, [pc, #480]	; (8000e7c <MX_GPIO_Init+0x2a4>)
 8000c9c:	f001 fbe2 	bl	8002464 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	2101      	movs	r1, #1
 8000ca4:	4876      	ldr	r0, [pc, #472]	; (8000e80 <MX_GPIO_Init+0x2a8>)
 8000ca6:	f001 fbdd 	bl	8002464 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000caa:	2200      	movs	r2, #0
 8000cac:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000cb0:	4874      	ldr	r0, [pc, #464]	; (8000e84 <MX_GPIO_Init+0x2ac>)
 8000cb2:	f001 fbd7 	bl	8002464 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000cb6:	2308      	movs	r3, #8
 8000cb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000cc6:	f107 031c 	add.w	r3, r7, #28
 8000cca:	4619      	mov	r1, r3
 8000ccc:	486b      	ldr	r0, [pc, #428]	; (8000e7c <MX_GPIO_Init+0x2a4>)
 8000cce:	f001 fa2d 	bl	800212c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ce2:	f107 031c 	add.w	r3, r7, #28
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4865      	ldr	r0, [pc, #404]	; (8000e80 <MX_GPIO_Init+0x2a8>)
 8000cea:	f001 fa1f 	bl	800212c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000cee:	2308      	movs	r3, #8
 8000cf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cfe:	2305      	movs	r3, #5
 8000d00:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000d02:	f107 031c 	add.w	r3, r7, #28
 8000d06:	4619      	mov	r1, r3
 8000d08:	485d      	ldr	r0, [pc, #372]	; (8000e80 <MX_GPIO_Init+0x2a8>)
 8000d0a:	f001 fa0f 	bl	800212c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d12:	4b5d      	ldr	r3, [pc, #372]	; (8000e88 <MX_GPIO_Init+0x2b0>)
 8000d14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d1a:	f107 031c 	add.w	r3, r7, #28
 8000d1e:	4619      	mov	r1, r3
 8000d20:	485a      	ldr	r0, [pc, #360]	; (8000e8c <MX_GPIO_Init+0x2b4>)
 8000d22:	f001 fa03 	bl	800212c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000d26:	2310      	movs	r3, #16
 8000d28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d32:	2300      	movs	r3, #0
 8000d34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d36:	2306      	movs	r3, #6
 8000d38:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000d3a:	f107 031c 	add.w	r3, r7, #28
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4852      	ldr	r0, [pc, #328]	; (8000e8c <MX_GPIO_Init+0x2b4>)
 8000d42:	f001 f9f3 	bl	800212c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000d46:	23e0      	movs	r3, #224	; 0xe0
 8000d48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d52:	2300      	movs	r3, #0
 8000d54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d56:	2305      	movs	r3, #5
 8000d58:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d5a:	f107 031c 	add.w	r3, r7, #28
 8000d5e:	4619      	mov	r1, r3
 8000d60:	484a      	ldr	r0, [pc, #296]	; (8000e8c <MX_GPIO_Init+0x2b4>)
 8000d62:	f001 f9e3 	bl	800212c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000d66:	2304      	movs	r3, #4
 8000d68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000d72:	f107 031c 	add.w	r3, r7, #28
 8000d76:	4619      	mov	r1, r3
 8000d78:	4845      	ldr	r0, [pc, #276]	; (8000e90 <MX_GPIO_Init+0x2b8>)
 8000d7a:	f001 f9d7 	bl	800212c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000d7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d84:	2302      	movs	r3, #2
 8000d86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d90:	2305      	movs	r3, #5
 8000d92:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000d94:	f107 031c 	add.w	r3, r7, #28
 8000d98:	4619      	mov	r1, r3
 8000d9a:	483d      	ldr	r0, [pc, #244]	; (8000e90 <MX_GPIO_Init+0x2b8>)
 8000d9c:	f001 f9c6 	bl	800212c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000da0:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000da4:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da6:	2301      	movs	r3, #1
 8000da8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dae:	2300      	movs	r3, #0
 8000db0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000db2:	f107 031c 	add.w	r3, r7, #28
 8000db6:	4619      	mov	r1, r3
 8000db8:	4832      	ldr	r0, [pc, #200]	; (8000e84 <MX_GPIO_Init+0x2ac>)
 8000dba:	f001 f9b7 	bl	800212c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000dbe:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000dc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000dd0:	2306      	movs	r3, #6
 8000dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dd4:	f107 031c 	add.w	r3, r7, #28
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4829      	ldr	r0, [pc, #164]	; (8000e80 <MX_GPIO_Init+0x2a8>)
 8000ddc:	f001 f9a6 	bl	800212c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000de0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000de4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000de6:	2300      	movs	r3, #0
 8000de8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dea:	2300      	movs	r3, #0
 8000dec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000dee:	f107 031c 	add.w	r3, r7, #28
 8000df2:	4619      	mov	r1, r3
 8000df4:	4825      	ldr	r0, [pc, #148]	; (8000e8c <MX_GPIO_Init+0x2b4>)
 8000df6:	f001 f999 	bl	800212c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000dfa:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000dfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e00:	2302      	movs	r3, #2
 8000e02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e04:	2300      	movs	r3, #0
 8000e06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e0c:	230a      	movs	r3, #10
 8000e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e10:	f107 031c 	add.w	r3, r7, #28
 8000e14:	4619      	mov	r1, r3
 8000e16:	481d      	ldr	r0, [pc, #116]	; (8000e8c <MX_GPIO_Init+0x2b4>)
 8000e18:	f001 f988 	bl	800212c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000e1c:	2320      	movs	r3, #32
 8000e1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e20:	2300      	movs	r3, #0
 8000e22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e24:	2300      	movs	r3, #0
 8000e26:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000e28:	f107 031c 	add.w	r3, r7, #28
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4815      	ldr	r0, [pc, #84]	; (8000e84 <MX_GPIO_Init+0x2ac>)
 8000e30:	f001 f97c 	bl	800212c <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000e34:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000e38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e3a:	2312      	movs	r3, #18
 8000e3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e42:	2300      	movs	r3, #0
 8000e44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e46:	2304      	movs	r3, #4
 8000e48:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e4a:	f107 031c 	add.w	r3, r7, #28
 8000e4e:	4619      	mov	r1, r3
 8000e50:	480f      	ldr	r0, [pc, #60]	; (8000e90 <MX_GPIO_Init+0x2b8>)
 8000e52:	f001 f96b 	bl	800212c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000e56:	2302      	movs	r3, #2
 8000e58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e5a:	4b0e      	ldr	r3, [pc, #56]	; (8000e94 <MX_GPIO_Init+0x2bc>)
 8000e5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000e62:	f107 031c 	add.w	r3, r7, #28
 8000e66:	4619      	mov	r1, r3
 8000e68:	4804      	ldr	r0, [pc, #16]	; (8000e7c <MX_GPIO_Init+0x2a4>)
 8000e6a:	f001 f95f 	bl	800212c <HAL_GPIO_Init>

}
 8000e6e:	bf00      	nop
 8000e70:	3730      	adds	r7, #48	; 0x30
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40023800 	.word	0x40023800
 8000e7c:	40021000 	.word	0x40021000
 8000e80:	40020800 	.word	0x40020800
 8000e84:	40020c00 	.word	0x40020c00
 8000e88:	10110000 	.word	0x10110000
 8000e8c:	40020000 	.word	0x40020000
 8000e90:	40020400 	.word	0x40020400
 8000e94:	10120000 	.word	0x10120000

08000e98 <rtc_report_callback>:

/* USER CODE BEGIN 4 */

void rtc_report_callback( TimerHandle_t xTimer )
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
	 show_time_date_itm();
 8000ea0:	f000 f898 	bl	8000fd4 <show_time_date_itm>

}
 8000ea4:	bf00      	nop
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <led_effect_callback>:


void led_effect_callback(TimerHandle_t xTimer)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
	 int id;
	 id = ( uint32_t ) pvTimerGetTimerID( xTimer );
 8000eb4:	6878      	ldr	r0, [r7, #4]
 8000eb6:	f005 ff70 	bl	8006d9a <pvTimerGetTimerID>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	60fb      	str	r3, [r7, #12]
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	3b01      	subs	r3, #1
 8000ec2:	2b03      	cmp	r3, #3
 8000ec4:	d816      	bhi.n	8000ef4 <led_effect_callback+0x48>
 8000ec6:	a201      	add	r2, pc, #4	; (adr r2, 8000ecc <led_effect_callback+0x20>)
 8000ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ecc:	08000edd 	.word	0x08000edd
 8000ed0:	08000ee3 	.word	0x08000ee3
 8000ed4:	08000ee9 	.word	0x08000ee9
 8000ed8:	08000eef 	.word	0x08000eef

	 switch(id)
	 {
	 case 1 :
		 LED_effect1();
 8000edc:	f7ff fc36 	bl	800074c <LED_effect1>
		 break;
 8000ee0:	e008      	b.n	8000ef4 <led_effect_callback+0x48>
	 case 2:
		 LED_effect2();
 8000ee2:	f7ff fc49 	bl	8000778 <LED_effect2>
		 break;
 8000ee6:	e005      	b.n	8000ef4 <led_effect_callback+0x48>
	 case 3:
		 LED_effect3();
 8000ee8:	f7ff fc5c 	bl	80007a4 <LED_effect3>
		 break;
 8000eec:	e002      	b.n	8000ef4 <led_effect_callback+0x48>
	 case 4:
		 LED_effect4();
 8000eee:	f7ff fc71 	bl	80007d4 <LED_effect4>
	 }


}
 8000ef2:	e7ff      	b.n	8000ef4 <led_effect_callback+0x48>
 8000ef4:	bf00      	nop
 8000ef6:	3710      	adds	r7, #16
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}

08000efc <HAL_UART_RxCpltCallback>:


/* This function called from UART interrupt handler , hence executes in interrupt context */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b086      	sub	sp, #24
 8000f00:	af02      	add	r7, sp, #8
 8000f02:	6078      	str	r0, [r7, #4]
	uint8_t dummy;

	for(uint32_t i = 0 ; i < 4000 ; i++);
 8000f04:	2300      	movs	r3, #0
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	e002      	b.n	8000f10 <HAL_UART_RxCpltCallback+0x14>
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000f16:	d3f8      	bcc.n	8000f0a <HAL_UART_RxCpltCallback+0xe>

	if(! xQueueIsQueueFullFromISR(q_data))
 8000f18:	4b1e      	ldr	r3, [pc, #120]	; (8000f94 <HAL_UART_RxCpltCallback+0x98>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f004 fa6e 	bl	80053fe <xQueueIsQueueFullFromISR>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d107      	bne.n	8000f38 <HAL_UART_RxCpltCallback+0x3c>
	{
		/*Enqueue data byte */
		xQueueSendFromISR(q_data , (void*)&user_data , NULL);
 8000f28:	4b1a      	ldr	r3, [pc, #104]	; (8000f94 <HAL_UART_RxCpltCallback+0x98>)
 8000f2a:	6818      	ldr	r0, [r3, #0]
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	2200      	movs	r2, #0
 8000f30:	4919      	ldr	r1, [pc, #100]	; (8000f98 <HAL_UART_RxCpltCallback+0x9c>)
 8000f32:	f003 ff1d 	bl	8004d70 <xQueueGenericSendFromISR>
 8000f36:	e013      	b.n	8000f60 <HAL_UART_RxCpltCallback+0x64>
	}else{
		if(user_data == '\n')
 8000f38:	4b17      	ldr	r3, [pc, #92]	; (8000f98 <HAL_UART_RxCpltCallback+0x9c>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	2b0a      	cmp	r3, #10
 8000f40:	d10e      	bne.n	8000f60 <HAL_UART_RxCpltCallback+0x64>
		{
			/*Make sure that last data byte of the queue is '\n' */
			xQueueReceiveFromISR(q_data,(void*)&dummy,NULL);
 8000f42:	4b14      	ldr	r3, [pc, #80]	; (8000f94 <HAL_UART_RxCpltCallback+0x98>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f107 010b 	add.w	r1, r7, #11
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f004 f899 	bl	8005084 <xQueueReceiveFromISR>
			xQueueSendFromISR(q_data ,(void*)&user_data , NULL);
 8000f52:	4b10      	ldr	r3, [pc, #64]	; (8000f94 <HAL_UART_RxCpltCallback+0x98>)
 8000f54:	6818      	ldr	r0, [r3, #0]
 8000f56:	2300      	movs	r3, #0
 8000f58:	2200      	movs	r2, #0
 8000f5a:	490f      	ldr	r1, [pc, #60]	; (8000f98 <HAL_UART_RxCpltCallback+0x9c>)
 8000f5c:	f003 ff08 	bl	8004d70 <xQueueGenericSendFromISR>
		}
	}

	/*Send notification to command handling task if user_data = '\n' */
	if( user_data == '\n' ){
 8000f60:	4b0d      	ldr	r3, [pc, #52]	; (8000f98 <HAL_UART_RxCpltCallback+0x9c>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	2b0a      	cmp	r3, #10
 8000f68:	d10a      	bne.n	8000f80 <HAL_UART_RxCpltCallback+0x84>
		/*send notification to command handling task */
		xTaskNotifyFromISR (handle_cmd_task,0,eNoAction,NULL);
 8000f6a:	4b0c      	ldr	r3, [pc, #48]	; (8000f9c <HAL_UART_RxCpltCallback+0xa0>)
 8000f6c:	6818      	ldr	r0, [r3, #0]
 8000f6e:	2300      	movs	r3, #0
 8000f70:	9301      	str	r3, [sp, #4]
 8000f72:	2300      	movs	r3, #0
 8000f74:	9300      	str	r3, [sp, #0]
 8000f76:	2300      	movs	r3, #0
 8000f78:	2200      	movs	r2, #0
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	f005 fa0e 	bl	800639c <xTaskGenericNotifyFromISR>
	}

	/* Enable UART data byte reception again in IT mode */
	 HAL_UART_Receive_IT(&huart2, (uint8_t*)&user_data, 1);
 8000f80:	2201      	movs	r2, #1
 8000f82:	4905      	ldr	r1, [pc, #20]	; (8000f98 <HAL_UART_RxCpltCallback+0x9c>)
 8000f84:	4806      	ldr	r0, [pc, #24]	; (8000fa0 <HAL_UART_RxCpltCallback+0xa4>)
 8000f86:	f002 fece 	bl	8003d26 <HAL_UART_Receive_IT>


}
 8000f8a:	bf00      	nop
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	200196a8 	.word	0x200196a8
 8000f98:	200196dc 	.word	0x200196dc
 8000f9c:	200196a4 	.word	0x200196a4
 8000fa0:	200196e0 	.word	0x200196e0

08000fa4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a04      	ldr	r2, [pc, #16]	; (8000fc4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d101      	bne.n	8000fba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000fb6:	f000 ff25 	bl	8001e04 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	40001000 	.word	0x40001000

08000fc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fcc:	b672      	cpsid	i
}
 8000fce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fd0:	e7fe      	b.n	8000fd0 <Error_Handler+0x8>
	...

08000fd4 <show_time_date_itm>:


#include "main.h"

 void show_time_date_itm(void)
 {
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b08a      	sub	sp, #40	; 0x28
 8000fd8:	af02      	add	r7, sp, #8
	RTC_DateTypeDef rtc_date;
	RTC_TimeTypeDef rtc_time;

	memset(&rtc_date,0,sizeof(rtc_date));
 8000fda:	f107 0318 	add.w	r3, r7, #24
 8000fde:	2204      	movs	r2, #4
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f006 fd28 	bl	8007a38 <memset>
	memset(&rtc_time,0,sizeof(rtc_time));
 8000fe8:	1d3b      	adds	r3, r7, #4
 8000fea:	2214      	movs	r2, #20
 8000fec:	2100      	movs	r1, #0
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f006 fd22 	bl	8007a38 <memset>

	/* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 8000ff4:	1d3b      	adds	r3, r7, #4
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4815      	ldr	r0, [pc, #84]	; (8001050 <show_time_date_itm+0x7c>)
 8000ffc:	f002 f922 	bl	8003244 <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 8001000:	f107 0318 	add.w	r3, r7, #24
 8001004:	2200      	movs	r2, #0
 8001006:	4619      	mov	r1, r3
 8001008:	4811      	ldr	r0, [pc, #68]	; (8001050 <show_time_date_itm+0x7c>)
 800100a:	f002 fa20 	bl	800344e <HAL_RTC_GetDate>

	char *format;
	format = (rtc_time.TimeFormat == RTC_HOURFORMAT12_AM) ? "AM" : "PM";
 800100e:	79fb      	ldrb	r3, [r7, #7]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d101      	bne.n	8001018 <show_time_date_itm+0x44>
 8001014:	4b0f      	ldr	r3, [pc, #60]	; (8001054 <show_time_date_itm+0x80>)
 8001016:	e000      	b.n	800101a <show_time_date_itm+0x46>
 8001018:	4b0f      	ldr	r3, [pc, #60]	; (8001058 <show_time_date_itm+0x84>)
 800101a:	61fb      	str	r3, [r7, #28]


	printf("%02d:%02d:%02d [%s]",rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds,format);
 800101c:	793b      	ldrb	r3, [r7, #4]
 800101e:	4619      	mov	r1, r3
 8001020:	797b      	ldrb	r3, [r7, #5]
 8001022:	461a      	mov	r2, r3
 8001024:	79bb      	ldrb	r3, [r7, #6]
 8001026:	4618      	mov	r0, r3
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	9300      	str	r3, [sp, #0]
 800102c:	4603      	mov	r3, r0
 800102e:	480b      	ldr	r0, [pc, #44]	; (800105c <show_time_date_itm+0x88>)
 8001030:	f006 fd0a 	bl	8007a48 <iprintf>
	printf("\t%02d-%02d-%2d\n",rtc_date.Month, rtc_date.Date, 2000 + rtc_date.Year);
 8001034:	7e7b      	ldrb	r3, [r7, #25]
 8001036:	4619      	mov	r1, r3
 8001038:	7ebb      	ldrb	r3, [r7, #26]
 800103a:	461a      	mov	r2, r3
 800103c:	7efb      	ldrb	r3, [r7, #27]
 800103e:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001042:	4807      	ldr	r0, [pc, #28]	; (8001060 <show_time_date_itm+0x8c>)
 8001044:	f006 fd00 	bl	8007a48 <iprintf>

 }
 8001048:	bf00      	nop
 800104a:	3720      	adds	r7, #32
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	200196b4 	.word	0x200196b4
 8001054:	08008ccc 	.word	0x08008ccc
 8001058:	08008cd0 	.word	0x08008cd0
 800105c:	08008cd4 	.word	0x08008cd4
 8001060:	08008ce8 	.word	0x08008ce8

08001064 <show_time_date>:

void show_time_date(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b08c      	sub	sp, #48	; 0x30
 8001068:	af04      	add	r7, sp, #16
	RTC_TimeTypeDef rtc_time;

	static char *time = showtime;
	static char *date = showdate;

	memset(&rtc_date,0,sizeof(rtc_date));
 800106a:	f107 0318 	add.w	r3, r7, #24
 800106e:	2204      	movs	r2, #4
 8001070:	2100      	movs	r1, #0
 8001072:	4618      	mov	r0, r3
 8001074:	f006 fce0 	bl	8007a38 <memset>
	memset(&rtc_time,0,sizeof(rtc_time));
 8001078:	1d3b      	adds	r3, r7, #4
 800107a:	2214      	movs	r2, #20
 800107c:	2100      	movs	r1, #0
 800107e:	4618      	mov	r0, r3
 8001080:	f006 fcda 	bl	8007a38 <memset>

	/* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 8001084:	1d3b      	adds	r3, r7, #4
 8001086:	2200      	movs	r2, #0
 8001088:	4619      	mov	r1, r3
 800108a:	4821      	ldr	r0, [pc, #132]	; (8001110 <show_time_date+0xac>)
 800108c:	f002 f8da 	bl	8003244 <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 8001090:	f107 0318 	add.w	r3, r7, #24
 8001094:	2200      	movs	r2, #0
 8001096:	4619      	mov	r1, r3
 8001098:	481d      	ldr	r0, [pc, #116]	; (8001110 <show_time_date+0xac>)
 800109a:	f002 f9d8 	bl	800344e <HAL_RTC_GetDate>

	char *format;
	format = (rtc_time.TimeFormat == RTC_HOURFORMAT12_AM) ? "AM" : "PM";
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d101      	bne.n	80010a8 <show_time_date+0x44>
 80010a4:	4b1b      	ldr	r3, [pc, #108]	; (8001114 <show_time_date+0xb0>)
 80010a6:	e000      	b.n	80010aa <show_time_date+0x46>
 80010a8:	4b1b      	ldr	r3, [pc, #108]	; (8001118 <show_time_date+0xb4>)
 80010aa:	61fb      	str	r3, [r7, #28]

	/* Display time Format : hh:mm:ss [AM/PM] */
	sprintf((char*)showtime,"%s:\t%02d:%02d:%02d [%s]","\nCurrent Time&Date",rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds,format);
 80010ac:	793b      	ldrb	r3, [r7, #4]
 80010ae:	4618      	mov	r0, r3
 80010b0:	797b      	ldrb	r3, [r7, #5]
 80010b2:	461a      	mov	r2, r3
 80010b4:	79bb      	ldrb	r3, [r7, #6]
 80010b6:	4619      	mov	r1, r3
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	9302      	str	r3, [sp, #8]
 80010bc:	9101      	str	r1, [sp, #4]
 80010be:	9200      	str	r2, [sp, #0]
 80010c0:	4603      	mov	r3, r0
 80010c2:	4a16      	ldr	r2, [pc, #88]	; (800111c <show_time_date+0xb8>)
 80010c4:	4916      	ldr	r1, [pc, #88]	; (8001120 <show_time_date+0xbc>)
 80010c6:	4817      	ldr	r0, [pc, #92]	; (8001124 <show_time_date+0xc0>)
 80010c8:	f006 fcd6 	bl	8007a78 <siprintf>
	xQueueSend(q_print,&time,portMAX_DELAY);
 80010cc:	4b16      	ldr	r3, [pc, #88]	; (8001128 <show_time_date+0xc4>)
 80010ce:	6818      	ldr	r0, [r3, #0]
 80010d0:	2300      	movs	r3, #0
 80010d2:	f04f 32ff 	mov.w	r2, #4294967295
 80010d6:	4915      	ldr	r1, [pc, #84]	; (800112c <show_time_date+0xc8>)
 80010d8:	f003 fd4c 	bl	8004b74 <xQueueGenericSend>

	/* Display date Format : date-month-year */
	sprintf((char*)showdate,"\t%02d-%02d-%2d\n",rtc_date.Month, rtc_date.Date, 2000 + rtc_date.Year);
 80010dc:	7e7b      	ldrb	r3, [r7, #25]
 80010de:	461a      	mov	r2, r3
 80010e0:	7ebb      	ldrb	r3, [r7, #26]
 80010e2:	4619      	mov	r1, r3
 80010e4:	7efb      	ldrb	r3, [r7, #27]
 80010e6:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80010ea:	9300      	str	r3, [sp, #0]
 80010ec:	460b      	mov	r3, r1
 80010ee:	4910      	ldr	r1, [pc, #64]	; (8001130 <show_time_date+0xcc>)
 80010f0:	4810      	ldr	r0, [pc, #64]	; (8001134 <show_time_date+0xd0>)
 80010f2:	f006 fcc1 	bl	8007a78 <siprintf>
	xQueueSend(q_print,&date,portMAX_DELAY);
 80010f6:	4b0c      	ldr	r3, [pc, #48]	; (8001128 <show_time_date+0xc4>)
 80010f8:	6818      	ldr	r0, [r3, #0]
 80010fa:	2300      	movs	r3, #0
 80010fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001100:	490d      	ldr	r1, [pc, #52]	; (8001138 <show_time_date+0xd4>)
 8001102:	f003 fd37 	bl	8004b74 <xQueueGenericSend>
}
 8001106:	bf00      	nop
 8001108:	3720      	adds	r7, #32
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	200196b4 	.word	0x200196b4
 8001114:	08008ccc 	.word	0x08008ccc
 8001118:	08008cd0 	.word	0x08008cd0
 800111c:	08008cf8 	.word	0x08008cf8
 8001120:	08008d0c 	.word	0x08008d0c
 8001124:	200000b4 	.word	0x200000b4
 8001128:	200196b0 	.word	0x200196b0
 800112c:	20000008 	.word	0x20000008
 8001130:	08008ce8 	.word	0x08008ce8
 8001134:	200000dc 	.word	0x200000dc
 8001138:	2000000c 	.word	0x2000000c

0800113c <rtc_configure_time>:


void rtc_configure_time(RTC_TimeTypeDef *time)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]

	time->TimeFormat = RTC_HOURFORMAT12_AM;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2200      	movs	r2, #0
 8001148:	70da      	strb	r2, [r3, #3]
	time->DayLightSaving = RTC_DAYLIGHTSAVING_NONE ;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2200      	movs	r2, #0
 800114e:	60da      	str	r2, [r3, #12]
	time->StoreOperation = RTC_STOREOPERATION_RESET;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2200      	movs	r2, #0
 8001154:	611a      	str	r2, [r3, #16]

	HAL_RTC_SetTime(&hrtc,time,RTC_FORMAT_BIN);
 8001156:	2200      	movs	r2, #0
 8001158:	6879      	ldr	r1, [r7, #4]
 800115a:	4803      	ldr	r0, [pc, #12]	; (8001168 <rtc_configure_time+0x2c>)
 800115c:	f001 ffb5 	bl	80030ca <HAL_RTC_SetTime>
}
 8001160:	bf00      	nop
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	200196b4 	.word	0x200196b4

0800116c <rtc_configure_date>:


void rtc_configure_date(RTC_DateTypeDef *date)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
	HAL_RTC_SetDate(&hrtc,date,RTC_FORMAT_BIN);
 8001174:	2200      	movs	r2, #0
 8001176:	6879      	ldr	r1, [r7, #4]
 8001178:	4803      	ldr	r0, [pc, #12]	; (8001188 <rtc_configure_date+0x1c>)
 800117a:	f002 f8c1 	bl	8003300 <HAL_RTC_SetDate>
}
 800117e:	bf00      	nop
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	200196b4 	.word	0x200196b4

0800118c <validate_rtc_information>:


int validate_rtc_information(RTC_TimeTypeDef *time , RTC_DateTypeDef *date)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	6039      	str	r1, [r7, #0]
	if(time){
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d00d      	beq.n	80011b8 <validate_rtc_information+0x2c>
		if( (time->Hours > 12) || (time->Minutes > 59) || (time->Seconds > 59) )
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	2b0c      	cmp	r3, #12
 80011a2:	d807      	bhi.n	80011b4 <validate_rtc_information+0x28>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	785b      	ldrb	r3, [r3, #1]
 80011a8:	2b3b      	cmp	r3, #59	; 0x3b
 80011aa:	d803      	bhi.n	80011b4 <validate_rtc_information+0x28>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	789b      	ldrb	r3, [r3, #2]
 80011b0:	2b3b      	cmp	r3, #59	; 0x3b
 80011b2:	d901      	bls.n	80011b8 <validate_rtc_information+0x2c>
			return 1;
 80011b4:	2301      	movs	r3, #1
 80011b6:	e015      	b.n	80011e4 <validate_rtc_information+0x58>
	}

	if(date){
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d011      	beq.n	80011e2 <validate_rtc_information+0x56>
		if( (date->Date > 31) || (date->WeekDay > 7) || (date->Year > 99) || (date->Month > 12) )
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	789b      	ldrb	r3, [r3, #2]
 80011c2:	2b1f      	cmp	r3, #31
 80011c4:	d80b      	bhi.n	80011de <validate_rtc_information+0x52>
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	2b07      	cmp	r3, #7
 80011cc:	d807      	bhi.n	80011de <validate_rtc_information+0x52>
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	78db      	ldrb	r3, [r3, #3]
 80011d2:	2b63      	cmp	r3, #99	; 0x63
 80011d4:	d803      	bhi.n	80011de <validate_rtc_information+0x52>
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	785b      	ldrb	r3, [r3, #1]
 80011da:	2b0c      	cmp	r3, #12
 80011dc:	d901      	bls.n	80011e2 <validate_rtc_information+0x56>
			return 1;
 80011de:	2301      	movs	r3, #1
 80011e0:	e000      	b.n	80011e4 <validate_rtc_information+0x58>
	}

	return 0;
 80011e2:	2300      	movs	r3, #0
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	607b      	str	r3, [r7, #4]
 80011fa:	4b10      	ldr	r3, [pc, #64]	; (800123c <HAL_MspInit+0x4c>)
 80011fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fe:	4a0f      	ldr	r2, [pc, #60]	; (800123c <HAL_MspInit+0x4c>)
 8001200:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001204:	6453      	str	r3, [r2, #68]	; 0x44
 8001206:	4b0d      	ldr	r3, [pc, #52]	; (800123c <HAL_MspInit+0x4c>)
 8001208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800120e:	607b      	str	r3, [r7, #4]
 8001210:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	603b      	str	r3, [r7, #0]
 8001216:	4b09      	ldr	r3, [pc, #36]	; (800123c <HAL_MspInit+0x4c>)
 8001218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121a:	4a08      	ldr	r2, [pc, #32]	; (800123c <HAL_MspInit+0x4c>)
 800121c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001220:	6413      	str	r3, [r2, #64]	; 0x40
 8001222:	4b06      	ldr	r3, [pc, #24]	; (800123c <HAL_MspInit+0x4c>)
 8001224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001226:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800122a:	603b      	str	r3, [r7, #0]
 800122c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800122e:	bf00      	nop
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	40023800 	.word	0x40023800

08001240 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a05      	ldr	r2, [pc, #20]	; (8001264 <HAL_RTC_MspInit+0x24>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d102      	bne.n	8001258 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001252:	4b05      	ldr	r3, [pc, #20]	; (8001268 <HAL_RTC_MspInit+0x28>)
 8001254:	2201      	movs	r2, #1
 8001256:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001258:	bf00      	nop
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	40002800 	.word	0x40002800
 8001268:	42470e3c 	.word	0x42470e3c

0800126c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b08a      	sub	sp, #40	; 0x28
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001274:	f107 0314 	add.w	r3, r7, #20
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	60da      	str	r2, [r3, #12]
 8001282:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a1d      	ldr	r2, [pc, #116]	; (8001300 <HAL_UART_MspInit+0x94>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d133      	bne.n	80012f6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	613b      	str	r3, [r7, #16]
 8001292:	4b1c      	ldr	r3, [pc, #112]	; (8001304 <HAL_UART_MspInit+0x98>)
 8001294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001296:	4a1b      	ldr	r2, [pc, #108]	; (8001304 <HAL_UART_MspInit+0x98>)
 8001298:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800129c:	6413      	str	r3, [r2, #64]	; 0x40
 800129e:	4b19      	ldr	r3, [pc, #100]	; (8001304 <HAL_UART_MspInit+0x98>)
 80012a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a6:	613b      	str	r3, [r7, #16]
 80012a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	4b15      	ldr	r3, [pc, #84]	; (8001304 <HAL_UART_MspInit+0x98>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	4a14      	ldr	r2, [pc, #80]	; (8001304 <HAL_UART_MspInit+0x98>)
 80012b4:	f043 0301 	orr.w	r3, r3, #1
 80012b8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ba:	4b12      	ldr	r3, [pc, #72]	; (8001304 <HAL_UART_MspInit+0x98>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	f003 0301 	and.w	r3, r3, #1
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80012c6:	230c      	movs	r3, #12
 80012c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ca:	2302      	movs	r3, #2
 80012cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d2:	2303      	movs	r3, #3
 80012d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012d6:	2307      	movs	r3, #7
 80012d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012da:	f107 0314 	add.w	r3, r7, #20
 80012de:	4619      	mov	r1, r3
 80012e0:	4809      	ldr	r0, [pc, #36]	; (8001308 <HAL_UART_MspInit+0x9c>)
 80012e2:	f000 ff23 	bl	800212c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 80012e6:	2200      	movs	r2, #0
 80012e8:	2106      	movs	r1, #6
 80012ea:	2026      	movs	r0, #38	; 0x26
 80012ec:	f000 fe62 	bl	8001fb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80012f0:	2026      	movs	r0, #38	; 0x26
 80012f2:	f000 fe7b 	bl	8001fec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80012f6:	bf00      	nop
 80012f8:	3728      	adds	r7, #40	; 0x28
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40004400 	.word	0x40004400
 8001304:	40023800 	.word	0x40023800
 8001308:	40020000 	.word	0x40020000

0800130c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b08c      	sub	sp, #48	; 0x30
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001314:	2300      	movs	r3, #0
 8001316:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001318:	2300      	movs	r3, #0
 800131a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800131c:	2200      	movs	r2, #0
 800131e:	6879      	ldr	r1, [r7, #4]
 8001320:	2036      	movs	r0, #54	; 0x36
 8001322:	f000 fe47 	bl	8001fb4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001326:	2036      	movs	r0, #54	; 0x36
 8001328:	f000 fe60 	bl	8001fec <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800132c:	2300      	movs	r3, #0
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	4b1f      	ldr	r3, [pc, #124]	; (80013b0 <HAL_InitTick+0xa4>)
 8001332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001334:	4a1e      	ldr	r2, [pc, #120]	; (80013b0 <HAL_InitTick+0xa4>)
 8001336:	f043 0310 	orr.w	r3, r3, #16
 800133a:	6413      	str	r3, [r2, #64]	; 0x40
 800133c:	4b1c      	ldr	r3, [pc, #112]	; (80013b0 <HAL_InitTick+0xa4>)
 800133e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001340:	f003 0310 	and.w	r3, r3, #16
 8001344:	60fb      	str	r3, [r7, #12]
 8001346:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001348:	f107 0210 	add.w	r2, r7, #16
 800134c:	f107 0314 	add.w	r3, r7, #20
 8001350:	4611      	mov	r1, r2
 8001352:	4618      	mov	r0, r3
 8001354:	f001 fd14 	bl	8002d80 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001358:	f001 fcea 	bl	8002d30 <HAL_RCC_GetPCLK1Freq>
 800135c:	4603      	mov	r3, r0
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001364:	4a13      	ldr	r2, [pc, #76]	; (80013b4 <HAL_InitTick+0xa8>)
 8001366:	fba2 2303 	umull	r2, r3, r2, r3
 800136a:	0c9b      	lsrs	r3, r3, #18
 800136c:	3b01      	subs	r3, #1
 800136e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001370:	4b11      	ldr	r3, [pc, #68]	; (80013b8 <HAL_InitTick+0xac>)
 8001372:	4a12      	ldr	r2, [pc, #72]	; (80013bc <HAL_InitTick+0xb0>)
 8001374:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001376:	4b10      	ldr	r3, [pc, #64]	; (80013b8 <HAL_InitTick+0xac>)
 8001378:	f240 32e7 	movw	r2, #999	; 0x3e7
 800137c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800137e:	4a0e      	ldr	r2, [pc, #56]	; (80013b8 <HAL_InitTick+0xac>)
 8001380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001382:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001384:	4b0c      	ldr	r3, [pc, #48]	; (80013b8 <HAL_InitTick+0xac>)
 8001386:	2200      	movs	r2, #0
 8001388:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800138a:	4b0b      	ldr	r3, [pc, #44]	; (80013b8 <HAL_InitTick+0xac>)
 800138c:	2200      	movs	r2, #0
 800138e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001390:	4809      	ldr	r0, [pc, #36]	; (80013b8 <HAL_InitTick+0xac>)
 8001392:	f002 f93b 	bl	800360c <HAL_TIM_Base_Init>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d104      	bne.n	80013a6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800139c:	4806      	ldr	r0, [pc, #24]	; (80013b8 <HAL_InitTick+0xac>)
 800139e:	f002 f98f 	bl	80036c0 <HAL_TIM_Base_Start_IT>
 80013a2:	4603      	mov	r3, r0
 80013a4:	e000      	b.n	80013a8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3730      	adds	r7, #48	; 0x30
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	40023800 	.word	0x40023800
 80013b4:	431bde83 	.word	0x431bde83
 80013b8:	20019724 	.word	0x20019724
 80013bc:	40001000 	.word	0x40001000

080013c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013c4:	e7fe      	b.n	80013c4 <NMI_Handler+0x4>

080013c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013c6:	b480      	push	{r7}
 80013c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ca:	e7fe      	b.n	80013ca <HardFault_Handler+0x4>

080013cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013d0:	e7fe      	b.n	80013d0 <MemManage_Handler+0x4>

080013d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013d2:	b480      	push	{r7}
 80013d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013d6:	e7fe      	b.n	80013d6 <BusFault_Handler+0x4>

080013d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013dc:	e7fe      	b.n	80013dc <UsageFault_Handler+0x4>

080013de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013de:	b480      	push	{r7}
 80013e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013e2:	bf00      	nop
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80013f0:	4802      	ldr	r0, [pc, #8]	; (80013fc <USART2_IRQHandler+0x10>)
 80013f2:	f002 fcc9 	bl	8003d88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80013f6:	bf00      	nop
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	200196e0 	.word	0x200196e0

08001400 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001404:	4802      	ldr	r0, [pc, #8]	; (8001410 <TIM6_DAC_IRQHandler+0x10>)
 8001406:	f002 f9cb 	bl	80037a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800140a:	bf00      	nop
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	20019724 	.word	0x20019724

08001414 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b086      	sub	sp, #24
 8001418:	af00      	add	r7, sp, #0
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	60b9      	str	r1, [r7, #8]
 800141e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001420:	2300      	movs	r3, #0
 8001422:	617b      	str	r3, [r7, #20]
 8001424:	e00a      	b.n	800143c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001426:	f3af 8000 	nop.w
 800142a:	4601      	mov	r1, r0
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	1c5a      	adds	r2, r3, #1
 8001430:	60ba      	str	r2, [r7, #8]
 8001432:	b2ca      	uxtb	r2, r1
 8001434:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	3301      	adds	r3, #1
 800143a:	617b      	str	r3, [r7, #20]
 800143c:	697a      	ldr	r2, [r7, #20]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	429a      	cmp	r2, r3
 8001442:	dbf0      	blt.n	8001426 <_read+0x12>
	}

return len;
 8001444:	687b      	ldr	r3, [r7, #4]
}
 8001446:	4618      	mov	r0, r3
 8001448:	3718      	adds	r7, #24
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <_close>:
	}
	return len;
}

int _close(int file)
{
 800144e:	b480      	push	{r7}
 8001450:	b083      	sub	sp, #12
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
	return -1;
 8001456:	f04f 33ff 	mov.w	r3, #4294967295
}
 800145a:	4618      	mov	r0, r3
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr

08001466 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001466:	b480      	push	{r7}
 8001468:	b083      	sub	sp, #12
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
 800146e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001476:	605a      	str	r2, [r3, #4]
	return 0;
 8001478:	2300      	movs	r3, #0
}
 800147a:	4618      	mov	r0, r3
 800147c:	370c      	adds	r7, #12
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr

08001486 <_isatty>:

int _isatty(int file)
{
 8001486:	b480      	push	{r7}
 8001488:	b083      	sub	sp, #12
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
	return 1;
 800148e:	2301      	movs	r3, #1
}
 8001490:	4618      	mov	r0, r3
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800149c:	b480      	push	{r7}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	60f8      	str	r0, [r7, #12]
 80014a4:	60b9      	str	r1, [r7, #8]
 80014a6:	607a      	str	r2, [r7, #4]
	return 0;
 80014a8:	2300      	movs	r3, #0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3714      	adds	r7, #20
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
	...

080014b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b086      	sub	sp, #24
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014c0:	4a14      	ldr	r2, [pc, #80]	; (8001514 <_sbrk+0x5c>)
 80014c2:	4b15      	ldr	r3, [pc, #84]	; (8001518 <_sbrk+0x60>)
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014cc:	4b13      	ldr	r3, [pc, #76]	; (800151c <_sbrk+0x64>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d102      	bne.n	80014da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014d4:	4b11      	ldr	r3, [pc, #68]	; (800151c <_sbrk+0x64>)
 80014d6:	4a12      	ldr	r2, [pc, #72]	; (8001520 <_sbrk+0x68>)
 80014d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014da:	4b10      	ldr	r3, [pc, #64]	; (800151c <_sbrk+0x64>)
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4413      	add	r3, r2
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d207      	bcs.n	80014f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014e8:	f006 fa6e 	bl	80079c8 <__errno>
 80014ec:	4603      	mov	r3, r0
 80014ee:	220c      	movs	r2, #12
 80014f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014f2:	f04f 33ff 	mov.w	r3, #4294967295
 80014f6:	e009      	b.n	800150c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014f8:	4b08      	ldr	r3, [pc, #32]	; (800151c <_sbrk+0x64>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014fe:	4b07      	ldr	r3, [pc, #28]	; (800151c <_sbrk+0x64>)
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4413      	add	r3, r2
 8001506:	4a05      	ldr	r2, [pc, #20]	; (800151c <_sbrk+0x64>)
 8001508:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800150a:	68fb      	ldr	r3, [r7, #12]
}
 800150c:	4618      	mov	r0, r3
 800150e:	3718      	adds	r7, #24
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	20020000 	.word	0x20020000
 8001518:	00000400 	.word	0x00000400
 800151c:	20000104 	.word	0x20000104
 8001520:	20019868 	.word	0x20019868

08001524 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001528:	4b06      	ldr	r3, [pc, #24]	; (8001544 <SystemInit+0x20>)
 800152a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800152e:	4a05      	ldr	r2, [pc, #20]	; (8001544 <SystemInit+0x20>)
 8001530:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001534:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001538:	bf00      	nop
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	e000ed00 	.word	0xe000ed00

08001548 <menu_task>:

const char *msg_inv = "////Invalid option////\n";


void menu_task(void *param)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b088      	sub	sp, #32
 800154c:	af02      	add	r7, sp, #8
 800154e:	6078      	str	r0, [r7, #4]

	command_t *cmd;

	int option;

	const char* msg_menu = "\n========================\n"
 8001550:	4b31      	ldr	r3, [pc, #196]	; (8001618 <menu_task+0xd0>)
 8001552:	60bb      	str	r3, [r7, #8]
								"Date and time ----> 1\n"
								"Exit          ----> 2\n"
								"Enter your choice here : ";

	while(1){
		xQueueSend(q_print,&msg_menu,portMAX_DELAY);
 8001554:	4b31      	ldr	r3, [pc, #196]	; (800161c <menu_task+0xd4>)
 8001556:	6818      	ldr	r0, [r3, #0]
 8001558:	f107 0108 	add.w	r1, r7, #8
 800155c:	2300      	movs	r3, #0
 800155e:	f04f 32ff 	mov.w	r2, #4294967295
 8001562:	f003 fb07 	bl	8004b74 <xQueueGenericSend>

		//wait for menu commands
		xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);
 8001566:	f107 030c 	add.w	r3, r7, #12
 800156a:	f04f 32ff 	mov.w	r2, #4294967295
 800156e:	9200      	str	r2, [sp, #0]
 8001570:	2200      	movs	r2, #0
 8001572:	2100      	movs	r1, #0
 8001574:	2000      	movs	r0, #0
 8001576:	f004 fdb1 	bl	80060dc <xTaskGenericNotifyWait>
		cmd = (command_t*)cmd_addr;
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	617b      	str	r3, [r7, #20]

		if(cmd->len == 1)
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	68db      	ldr	r3, [r3, #12]
 8001582:	2b01      	cmp	r3, #1
 8001584:	d133      	bne.n	80015ee <menu_task+0xa6>
		{
			option = cmd->payload[0] - 48;
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	3b30      	subs	r3, #48	; 0x30
 800158c:	613b      	str	r3, [r7, #16]
			switch(option)
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	2b02      	cmp	r3, #2
 8001592:	d035      	beq.n	8001600 <menu_task+0xb8>
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	2b02      	cmp	r3, #2
 8001598:	dc20      	bgt.n	80015dc <menu_task+0x94>
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d003      	beq.n	80015a8 <menu_task+0x60>
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d00d      	beq.n	80015c2 <menu_task+0x7a>
 80015a6:	e019      	b.n	80015dc <menu_task+0x94>
			{
				case 0:
					curr_state = sLedEffect;
 80015a8:	4b1d      	ldr	r3, [pc, #116]	; (8001620 <menu_task+0xd8>)
 80015aa:	2201      	movs	r2, #1
 80015ac:	701a      	strb	r2, [r3, #0]
					xTaskNotify(handle_led_task,0,eNoAction);
 80015ae:	4b1d      	ldr	r3, [pc, #116]	; (8001624 <menu_task+0xdc>)
 80015b0:	6818      	ldr	r0, [r3, #0]
 80015b2:	2300      	movs	r3, #0
 80015b4:	9300      	str	r3, [sp, #0]
 80015b6:	2300      	movs	r3, #0
 80015b8:	2200      	movs	r2, #0
 80015ba:	2100      	movs	r1, #0
 80015bc:	f004 fe0e 	bl	80061dc <xTaskGenericNotify>
					break;
 80015c0:	e01f      	b.n	8001602 <menu_task+0xba>
				case 1:
					curr_state = sRtcMenu;
 80015c2:	4b17      	ldr	r3, [pc, #92]	; (8001620 <menu_task+0xd8>)
 80015c4:	2202      	movs	r2, #2
 80015c6:	701a      	strb	r2, [r3, #0]
					xTaskNotify(handle_rtc_task,0,eNoAction);
 80015c8:	4b17      	ldr	r3, [pc, #92]	; (8001628 <menu_task+0xe0>)
 80015ca:	6818      	ldr	r0, [r3, #0]
 80015cc:	2300      	movs	r3, #0
 80015ce:	9300      	str	r3, [sp, #0]
 80015d0:	2300      	movs	r3, #0
 80015d2:	2200      	movs	r2, #0
 80015d4:	2100      	movs	r1, #0
 80015d6:	f004 fe01 	bl	80061dc <xTaskGenericNotify>
					break;
 80015da:	e012      	b.n	8001602 <menu_task+0xba>
				case 2: /*implement exit */
					break;
				default:
					xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 80015dc:	4b0f      	ldr	r3, [pc, #60]	; (800161c <menu_task+0xd4>)
 80015de:	6818      	ldr	r0, [r3, #0]
 80015e0:	2300      	movs	r3, #0
 80015e2:	f04f 32ff 	mov.w	r2, #4294967295
 80015e6:	4911      	ldr	r1, [pc, #68]	; (800162c <menu_task+0xe4>)
 80015e8:	f003 fac4 	bl	8004b74 <xQueueGenericSend>
					continue;
 80015ec:	e012      	b.n	8001614 <menu_task+0xcc>
			}

		}else{
			//invalid entry
			xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 80015ee:	4b0b      	ldr	r3, [pc, #44]	; (800161c <menu_task+0xd4>)
 80015f0:	6818      	ldr	r0, [r3, #0]
 80015f2:	2300      	movs	r3, #0
 80015f4:	f04f 32ff 	mov.w	r2, #4294967295
 80015f8:	490c      	ldr	r1, [pc, #48]	; (800162c <menu_task+0xe4>)
 80015fa:	f003 fabb 	bl	8004b74 <xQueueGenericSend>
			continue;
 80015fe:	e009      	b.n	8001614 <menu_task+0xcc>
					break;
 8001600:	bf00      	nop
		}


		//wait to run again when some other task notifies
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001602:	f04f 33ff 	mov.w	r3, #4294967295
 8001606:	9300      	str	r3, [sp, #0]
 8001608:	2300      	movs	r3, #0
 800160a:	2200      	movs	r2, #0
 800160c:	2100      	movs	r1, #0
 800160e:	2000      	movs	r0, #0
 8001610:	f004 fd64 	bl	80060dc <xTaskGenericNotifyWait>
		xQueueSend(q_print,&msg_menu,portMAX_DELAY);
 8001614:	e79e      	b.n	8001554 <menu_task+0xc>
 8001616:	bf00      	nop
 8001618:	08008d3c 	.word	0x08008d3c
 800161c:	200196b0 	.word	0x200196b0
 8001620:	200000b0 	.word	0x200000b0
 8001624:	200196d8 	.word	0x200196d8
 8001628:	200196a0 	.word	0x200196a0
 800162c:	20000014 	.word	0x20000014

08001630 <led_task>:

	}//while super loop
}

void led_task(void *param)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b088      	sub	sp, #32
 8001634:	af02      	add	r7, sp, #8
 8001636:	6078      	str	r0, [r7, #4]
	uint32_t cmd_addr;
	command_t *cmd;
	const char* msg_led = "========================\n"
 8001638:	4b3e      	ldr	r3, [pc, #248]	; (8001734 <led_task+0x104>)
 800163a:	60fb      	str	r3, [r7, #12]
						  "(none,e1,e2,e3,e4)\n"
						  "Enter your choice here : ";

	while(1){
		/*Wait for notification (Notify wait) */
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 800163c:	f04f 33ff 	mov.w	r3, #4294967295
 8001640:	9300      	str	r3, [sp, #0]
 8001642:	2300      	movs	r3, #0
 8001644:	2200      	movs	r2, #0
 8001646:	2100      	movs	r1, #0
 8001648:	2000      	movs	r0, #0
 800164a:	f004 fd47 	bl	80060dc <xTaskGenericNotifyWait>

		/*Print LED menu */
		xQueueSend(q_print,&msg_led,portMAX_DELAY);
 800164e:	4b3a      	ldr	r3, [pc, #232]	; (8001738 <led_task+0x108>)
 8001650:	6818      	ldr	r0, [r3, #0]
 8001652:	f107 010c 	add.w	r1, r7, #12
 8001656:	2300      	movs	r3, #0
 8001658:	f04f 32ff 	mov.w	r2, #4294967295
 800165c:	f003 fa8a 	bl	8004b74 <xQueueGenericSend>

		/*wait for LED command (Notify wait) */
		xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);
 8001660:	f107 0310 	add.w	r3, r7, #16
 8001664:	f04f 32ff 	mov.w	r2, #4294967295
 8001668:	9200      	str	r2, [sp, #0]
 800166a:	2200      	movs	r2, #0
 800166c:	2100      	movs	r1, #0
 800166e:	2000      	movs	r0, #0
 8001670:	f004 fd34 	bl	80060dc <xTaskGenericNotifyWait>
		cmd = (command_t*)cmd_addr;
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	617b      	str	r3, [r7, #20]

		if(cmd->len <= 4)
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	2b04      	cmp	r3, #4
 800167e:	d843      	bhi.n	8001708 <led_task+0xd8>
		{
			if(! strcmp((char*)cmd->payload,"none"))
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	492e      	ldr	r1, [pc, #184]	; (800173c <led_task+0x10c>)
 8001684:	4618      	mov	r0, r3
 8001686:	f7fe fda3 	bl	80001d0 <strcmp>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d102      	bne.n	8001696 <led_task+0x66>
				led_effect_stop();
 8001690:	f7fe ff82 	bl	8000598 <led_effect_stop>
 8001694:	e040      	b.n	8001718 <led_task+0xe8>
			else if (! strcmp((char*)cmd->payload,"e1"))
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	4929      	ldr	r1, [pc, #164]	; (8001740 <led_task+0x110>)
 800169a:	4618      	mov	r0, r3
 800169c:	f7fe fd98 	bl	80001d0 <strcmp>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d103      	bne.n	80016ae <led_task+0x7e>
				led_effect(1);
 80016a6:	2001      	movs	r0, #1
 80016a8:	f7fe ff96 	bl	80005d8 <led_effect>
 80016ac:	e034      	b.n	8001718 <led_task+0xe8>
			else if (! strcmp((char*)cmd->payload,"e2"))
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	4924      	ldr	r1, [pc, #144]	; (8001744 <led_task+0x114>)
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7fe fd8c 	bl	80001d0 <strcmp>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d103      	bne.n	80016c6 <led_task+0x96>
				led_effect(2);
 80016be:	2002      	movs	r0, #2
 80016c0:	f7fe ff8a 	bl	80005d8 <led_effect>
 80016c4:	e028      	b.n	8001718 <led_task+0xe8>
			else if (! strcmp((char*)cmd->payload,"e3"))
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	491f      	ldr	r1, [pc, #124]	; (8001748 <led_task+0x118>)
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7fe fd80 	bl	80001d0 <strcmp>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d103      	bne.n	80016de <led_task+0xae>
				led_effect(3);
 80016d6:	2003      	movs	r0, #3
 80016d8:	f7fe ff7e 	bl	80005d8 <led_effect>
 80016dc:	e01c      	b.n	8001718 <led_task+0xe8>
			else if (! strcmp((char*)cmd->payload,"e4"))
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	491a      	ldr	r1, [pc, #104]	; (800174c <led_task+0x11c>)
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7fe fd74 	bl	80001d0 <strcmp>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d103      	bne.n	80016f6 <led_task+0xc6>
				led_effect(4);
 80016ee:	2004      	movs	r0, #4
 80016f0:	f7fe ff72 	bl	80005d8 <led_effect>
 80016f4:	e010      	b.n	8001718 <led_task+0xe8>
			else
				xQueueSend(q_print,&msg_inv,portMAX_DELAY); /*print invalid message */
 80016f6:	4b10      	ldr	r3, [pc, #64]	; (8001738 <led_task+0x108>)
 80016f8:	6818      	ldr	r0, [r3, #0]
 80016fa:	2300      	movs	r3, #0
 80016fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001700:	4913      	ldr	r1, [pc, #76]	; (8001750 <led_task+0x120>)
 8001702:	f003 fa37 	bl	8004b74 <xQueueGenericSend>
 8001706:	e007      	b.n	8001718 <led_task+0xe8>
		}else
			xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8001708:	4b0b      	ldr	r3, [pc, #44]	; (8001738 <led_task+0x108>)
 800170a:	6818      	ldr	r0, [r3, #0]
 800170c:	2300      	movs	r3, #0
 800170e:	f04f 32ff 	mov.w	r2, #4294967295
 8001712:	490f      	ldr	r1, [pc, #60]	; (8001750 <led_task+0x120>)
 8001714:	f003 fa2e 	bl	8004b74 <xQueueGenericSend>

		/* update state variable */
		curr_state = sMainMenu;
 8001718:	4b0e      	ldr	r3, [pc, #56]	; (8001754 <led_task+0x124>)
 800171a:	2200      	movs	r2, #0
 800171c:	701a      	strb	r2, [r3, #0]

		/*Notify menu task */
		xTaskNotify(handle_menu_task,0,eNoAction);
 800171e:	4b0e      	ldr	r3, [pc, #56]	; (8001758 <led_task+0x128>)
 8001720:	6818      	ldr	r0, [r3, #0]
 8001722:	2300      	movs	r3, #0
 8001724:	9300      	str	r3, [sp, #0]
 8001726:	2300      	movs	r3, #0
 8001728:	2200      	movs	r2, #0
 800172a:	2100      	movs	r1, #0
 800172c:	f004 fd56 	bl	80061dc <xTaskGenericNotify>
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001730:	e784      	b.n	800163c <led_task+0xc>
 8001732:	bf00      	nop
 8001734:	08008de4 	.word	0x08008de4
 8001738:	200196b0 	.word	0x200196b0
 800173c:	08008e5c 	.word	0x08008e5c
 8001740:	08008e64 	.word	0x08008e64
 8001744:	08008e68 	.word	0x08008e68
 8001748:	08008e6c 	.word	0x08008e6c
 800174c:	08008e70 	.word	0x08008e70
 8001750:	20000014 	.word	0x20000014
 8001754:	200000b0 	.word	0x200000b0
 8001758:	200196ac 	.word	0x200196ac

0800175c <getnumber>:

	}
}

uint8_t getnumber(uint8_t *p , int len)
{
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]

	int value ;

	if(len > 1)
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	2b01      	cmp	r3, #1
 800176a:	dd0f      	ble.n	800178c <getnumber+0x30>
	   value =  ( ((p[0]-48) * 10) + (p[1] - 48) );
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001774:	4613      	mov	r3, r2
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	4413      	add	r3, r2
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	461a      	mov	r2, r3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	3301      	adds	r3, #1
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	3b30      	subs	r3, #48	; 0x30
 8001786:	4413      	add	r3, r2
 8001788:	60fb      	str	r3, [r7, #12]
 800178a:	e003      	b.n	8001794 <getnumber+0x38>
	else
		value = p[0] - 48;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	3b30      	subs	r3, #48	; 0x30
 8001792:	60fb      	str	r3, [r7, #12]

	return value;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	b2db      	uxtb	r3, r3

}
 8001798:	4618      	mov	r0, r3
 800179a:	3714      	adds	r7, #20
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <rtc_task>:

void rtc_task(void *param)
{
 80017a4:	b590      	push	{r4, r7, lr}
 80017a6:	b09b      	sub	sp, #108	; 0x6c
 80017a8:	af02      	add	r7, sp, #8
 80017aa:	6078      	str	r0, [r7, #4]
	const char* msg_rtc1 = "========================\n"
 80017ac:	4bb2      	ldr	r3, [pc, #712]	; (8001a78 <rtc_task+0x2d4>)
 80017ae:	64fb      	str	r3, [r7, #76]	; 0x4c
							"|         RTC          |\n"
							"========================\n";

	const char* msg_rtc2 = "Configure Time            ----> 0\n"
 80017b0:	4bb2      	ldr	r3, [pc, #712]	; (8001a7c <rtc_task+0x2d8>)
 80017b2:	64bb      	str	r3, [r7, #72]	; 0x48
							"Enable reporting          ----> 2\n"
							"Exit                      ----> 3\n"
							"Enter your choice here : ";


	const char *msg_rtc_hh = "Enter hour(1-12):";
 80017b4:	4bb2      	ldr	r3, [pc, #712]	; (8001a80 <rtc_task+0x2dc>)
 80017b6:	647b      	str	r3, [r7, #68]	; 0x44
	const char *msg_rtc_mm = "Enter minutes(0-59):";
 80017b8:	4bb2      	ldr	r3, [pc, #712]	; (8001a84 <rtc_task+0x2e0>)
 80017ba:	643b      	str	r3, [r7, #64]	; 0x40
	const char *msg_rtc_ss = "Enter seconds(0-59):";
 80017bc:	4bb2      	ldr	r3, [pc, #712]	; (8001a88 <rtc_task+0x2e4>)
 80017be:	63fb      	str	r3, [r7, #60]	; 0x3c

	const char *msg_rtc_dd  = "Enter date(1-31):";
 80017c0:	4bb2      	ldr	r3, [pc, #712]	; (8001a8c <rtc_task+0x2e8>)
 80017c2:	63bb      	str	r3, [r7, #56]	; 0x38
	const char *msg_rtc_mo  ="Enter month(1-12):";
 80017c4:	4bb2      	ldr	r3, [pc, #712]	; (8001a90 <rtc_task+0x2ec>)
 80017c6:	637b      	str	r3, [r7, #52]	; 0x34
	const char *msg_rtc_dow  = "Enter day(1-7 sun:1):";
 80017c8:	4bb2      	ldr	r3, [pc, #712]	; (8001a94 <rtc_task+0x2f0>)
 80017ca:	633b      	str	r3, [r7, #48]	; 0x30
	const char *msg_rtc_yr  = "Enter year(0-99):";
 80017cc:	4bb2      	ldr	r3, [pc, #712]	; (8001a98 <rtc_task+0x2f4>)
 80017ce:	62fb      	str	r3, [r7, #44]	; 0x2c

	const char *msg_conf = "Configuration successful\n";
 80017d0:	4bb2      	ldr	r3, [pc, #712]	; (8001a9c <rtc_task+0x2f8>)
 80017d2:	62bb      	str	r3, [r7, #40]	; 0x28
	const char *msg_rtc_report = "Enable time&date reporting(y/n)?: ";
 80017d4:	4bb2      	ldr	r3, [pc, #712]	; (8001aa0 <rtc_task+0x2fc>)
 80017d6:	627b      	str	r3, [r7, #36]	; 0x24
#define DAY_CONFIG 		3


	while(1){
		/*Notify wait (wait till someone notifies) */
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 80017d8:	f04f 33ff 	mov.w	r3, #4294967295
 80017dc:	9300      	str	r3, [sp, #0]
 80017de:	2300      	movs	r3, #0
 80017e0:	2200      	movs	r2, #0
 80017e2:	2100      	movs	r1, #0
 80017e4:	2000      	movs	r0, #0
 80017e6:	f004 fc79 	bl	80060dc <xTaskGenericNotifyWait>

		/*Print the menu and show current date and time information */
		xQueueSend(q_print,&msg_rtc1,portMAX_DELAY);
 80017ea:	4bae      	ldr	r3, [pc, #696]	; (8001aa4 <rtc_task+0x300>)
 80017ec:	6818      	ldr	r0, [r3, #0]
 80017ee:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80017f2:	2300      	movs	r3, #0
 80017f4:	f04f 32ff 	mov.w	r2, #4294967295
 80017f8:	f003 f9bc 	bl	8004b74 <xQueueGenericSend>
		show_time_date();
 80017fc:	f7ff fc32 	bl	8001064 <show_time_date>
		xQueueSend(q_print,&msg_rtc2,portMAX_DELAY);
 8001800:	4ba8      	ldr	r3, [pc, #672]	; (8001aa4 <rtc_task+0x300>)
 8001802:	6818      	ldr	r0, [r3, #0]
 8001804:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001808:	2300      	movs	r3, #0
 800180a:	f04f 32ff 	mov.w	r2, #4294967295
 800180e:	f003 f9b1 	bl	8004b74 <xQueueGenericSend>


		while(curr_state != sMainMenu){
 8001812:	bf00      	nop
 8001814:	e1e1      	b.n	8001bda <rtc_task+0x436>

			/*Wait for command notification (Notify wait) */
			xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);
 8001816:	f107 0320 	add.w	r3, r7, #32
 800181a:	f04f 32ff 	mov.w	r2, #4294967295
 800181e:	9200      	str	r2, [sp, #0]
 8001820:	2200      	movs	r2, #0
 8001822:	2100      	movs	r1, #0
 8001824:	2000      	movs	r0, #0
 8001826:	f004 fc59 	bl	80060dc <xTaskGenericNotifyWait>
			cmd = (command_t*)cmd_addr;
 800182a:	6a3b      	ldr	r3, [r7, #32]
 800182c:	65fb      	str	r3, [r7, #92]	; 0x5c

			switch(curr_state)
 800182e:	4b9e      	ldr	r3, [pc, #632]	; (8001aa8 <rtc_task+0x304>)
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	3b02      	subs	r3, #2
 8001834:	2b03      	cmp	r3, #3
 8001836:	f200 81d0 	bhi.w	8001bda <rtc_task+0x436>
 800183a:	a201      	add	r2, pc, #4	; (adr r2, 8001840 <rtc_task+0x9c>)
 800183c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001840:	08001851 	.word	0x08001851
 8001844:	08001903 	.word	0x08001903
 8001848:	080019f1 	.word	0x080019f1
 800184c:	08001b57 	.word	0x08001b57
			{
				case sRtcMenu:{
					/*process RTC menu commands */
					if(cmd->len == 1)
 8001850:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	2b01      	cmp	r3, #1
 8001856:	d148      	bne.n	80018ea <rtc_task+0x146>
					{
						menu_code = cmd->payload[0] - 48;
 8001858:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	3b30      	subs	r3, #48	; 0x30
 800185e:	653b      	str	r3, [r7, #80]	; 0x50
 8001860:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001862:	2b03      	cmp	r3, #3
 8001864:	d835      	bhi.n	80018d2 <rtc_task+0x12e>
 8001866:	a201      	add	r2, pc, #4	; (adr r2, 800186c <rtc_task+0xc8>)
 8001868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800186c:	0800187d 	.word	0x0800187d
 8001870:	08001897 	.word	0x08001897
 8001874:	080018b1 	.word	0x080018b1
 8001878:	080018cb 	.word	0x080018cb
						switch(menu_code)
						{
						case 0:
							curr_state = sRtcTimeConfig;
 800187c:	4b8a      	ldr	r3, [pc, #552]	; (8001aa8 <rtc_task+0x304>)
 800187e:	2203      	movs	r2, #3
 8001880:	701a      	strb	r2, [r3, #0]
							xQueueSend(q_print,&msg_rtc_hh,portMAX_DELAY);
 8001882:	4b88      	ldr	r3, [pc, #544]	; (8001aa4 <rtc_task+0x300>)
 8001884:	6818      	ldr	r0, [r3, #0]
 8001886:	f107 0144 	add.w	r1, r7, #68	; 0x44
 800188a:	2300      	movs	r3, #0
 800188c:	f04f 32ff 	mov.w	r2, #4294967295
 8001890:	f003 f970 	bl	8004b74 <xQueueGenericSend>
							break;
 8001894:	e034      	b.n	8001900 <rtc_task+0x15c>
						case 1:
							curr_state = sRtcDateConfig;
 8001896:	4b84      	ldr	r3, [pc, #528]	; (8001aa8 <rtc_task+0x304>)
 8001898:	2204      	movs	r2, #4
 800189a:	701a      	strb	r2, [r3, #0]
							xQueueSend(q_print,&msg_rtc_dd,portMAX_DELAY);
 800189c:	4b81      	ldr	r3, [pc, #516]	; (8001aa4 <rtc_task+0x300>)
 800189e:	6818      	ldr	r0, [r3, #0]
 80018a0:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80018a4:	2300      	movs	r3, #0
 80018a6:	f04f 32ff 	mov.w	r2, #4294967295
 80018aa:	f003 f963 	bl	8004b74 <xQueueGenericSend>
							break;
 80018ae:	e027      	b.n	8001900 <rtc_task+0x15c>
						case 2 :
							curr_state = sRtcReport;
 80018b0:	4b7d      	ldr	r3, [pc, #500]	; (8001aa8 <rtc_task+0x304>)
 80018b2:	2205      	movs	r2, #5
 80018b4:	701a      	strb	r2, [r3, #0]
							xQueueSend(q_print,&msg_rtc_report,portMAX_DELAY);
 80018b6:	4b7b      	ldr	r3, [pc, #492]	; (8001aa4 <rtc_task+0x300>)
 80018b8:	6818      	ldr	r0, [r3, #0]
 80018ba:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80018be:	2300      	movs	r3, #0
 80018c0:	f04f 32ff 	mov.w	r2, #4294967295
 80018c4:	f003 f956 	bl	8004b74 <xQueueGenericSend>
							break;
 80018c8:	e01a      	b.n	8001900 <rtc_task+0x15c>
						case 3 :
							curr_state = sMainMenu;
 80018ca:	4b77      	ldr	r3, [pc, #476]	; (8001aa8 <rtc_task+0x304>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	701a      	strb	r2, [r3, #0]
							break;
 80018d0:	e016      	b.n	8001900 <rtc_task+0x15c>
						default:
							curr_state = sMainMenu;
 80018d2:	4b75      	ldr	r3, [pc, #468]	; (8001aa8 <rtc_task+0x304>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	701a      	strb	r2, [r3, #0]
							xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 80018d8:	4b72      	ldr	r3, [pc, #456]	; (8001aa4 <rtc_task+0x300>)
 80018da:	6818      	ldr	r0, [r3, #0]
 80018dc:	2300      	movs	r3, #0
 80018de:	f04f 32ff 	mov.w	r2, #4294967295
 80018e2:	4972      	ldr	r1, [pc, #456]	; (8001aac <rtc_task+0x308>)
 80018e4:	f003 f946 	bl	8004b74 <xQueueGenericSend>
 80018e8:	e177      	b.n	8001bda <rtc_task+0x436>
						}

					}else{
						curr_state = sMainMenu;
 80018ea:	4b6f      	ldr	r3, [pc, #444]	; (8001aa8 <rtc_task+0x304>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	701a      	strb	r2, [r3, #0]
						xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 80018f0:	4b6c      	ldr	r3, [pc, #432]	; (8001aa4 <rtc_task+0x300>)
 80018f2:	6818      	ldr	r0, [r3, #0]
 80018f4:	2300      	movs	r3, #0
 80018f6:	f04f 32ff 	mov.w	r2, #4294967295
 80018fa:	496c      	ldr	r1, [pc, #432]	; (8001aac <rtc_task+0x308>)
 80018fc:	f003 f93a 	bl	8004b74 <xQueueGenericSend>
					}
					break;}
 8001900:	e16b      	b.n	8001bda <rtc_task+0x436>

				case sRtcTimeConfig:{
					/*get hh, mm, ss infor and configure RTC */
					/*take care of invalid entries */
					switch(rtc_state)
 8001902:	4b6b      	ldr	r3, [pc, #428]	; (8001ab0 <rtc_task+0x30c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2b02      	cmp	r3, #2
 8001908:	d03b      	beq.n	8001982 <rtc_task+0x1de>
 800190a:	2b02      	cmp	r3, #2
 800190c:	f300 8165 	bgt.w	8001bda <rtc_task+0x436>
 8001910:	2b00      	cmp	r3, #0
 8001912:	d002      	beq.n	800191a <rtc_task+0x176>
 8001914:	2b01      	cmp	r3, #1
 8001916:	d01a      	beq.n	800194e <rtc_task+0x1aa>
 8001918:	e15f      	b.n	8001bda <rtc_task+0x436>
						{
							case HH_CONFIG:{
								uint8_t hour = getnumber(cmd->payload , cmd->len);
 800191a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800191c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	4619      	mov	r1, r3
 8001922:	4610      	mov	r0, r2
 8001924:	f7ff ff1a 	bl	800175c <getnumber>
 8001928:	4603      	mov	r3, r0
 800192a:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
								time.Hours = hour;
 800192e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001932:	733b      	strb	r3, [r7, #12]
								rtc_state = MM_CONFIG;
 8001934:	4b5e      	ldr	r3, [pc, #376]	; (8001ab0 <rtc_task+0x30c>)
 8001936:	2201      	movs	r2, #1
 8001938:	601a      	str	r2, [r3, #0]
								xQueueSend(q_print,&msg_rtc_mm,portMAX_DELAY);
 800193a:	4b5a      	ldr	r3, [pc, #360]	; (8001aa4 <rtc_task+0x300>)
 800193c:	6818      	ldr	r0, [r3, #0]
 800193e:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001942:	2300      	movs	r3, #0
 8001944:	f04f 32ff 	mov.w	r2, #4294967295
 8001948:	f003 f914 	bl	8004b74 <xQueueGenericSend>
								break;}
 800194c:	e04f      	b.n	80019ee <rtc_task+0x24a>
							case MM_CONFIG:{
								uint8_t min = getnumber(cmd->payload , cmd->len);
 800194e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001950:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	4619      	mov	r1, r3
 8001956:	4610      	mov	r0, r2
 8001958:	f7ff ff00 	bl	800175c <getnumber>
 800195c:	4603      	mov	r3, r0
 800195e:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
								time.Minutes = min;
 8001962:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001966:	737b      	strb	r3, [r7, #13]
								rtc_state = SS_CONFIG;
 8001968:	4b51      	ldr	r3, [pc, #324]	; (8001ab0 <rtc_task+0x30c>)
 800196a:	2202      	movs	r2, #2
 800196c:	601a      	str	r2, [r3, #0]
								xQueueSend(q_print,&msg_rtc_ss,portMAX_DELAY);
 800196e:	4b4d      	ldr	r3, [pc, #308]	; (8001aa4 <rtc_task+0x300>)
 8001970:	6818      	ldr	r0, [r3, #0]
 8001972:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8001976:	2300      	movs	r3, #0
 8001978:	f04f 32ff 	mov.w	r2, #4294967295
 800197c:	f003 f8fa 	bl	8004b74 <xQueueGenericSend>
								break;}
 8001980:	e035      	b.n	80019ee <rtc_task+0x24a>
							case SS_CONFIG:{
								uint8_t sec = getnumber(cmd->payload , cmd->len);
 8001982:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001984:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	4619      	mov	r1, r3
 800198a:	4610      	mov	r0, r2
 800198c:	f7ff fee6 	bl	800175c <getnumber>
 8001990:	4603      	mov	r3, r0
 8001992:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
								time.Seconds = sec;
 8001996:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800199a:	73bb      	strb	r3, [r7, #14]
								if(!validate_rtc_information(&time,NULL))
 800199c:	f107 030c 	add.w	r3, r7, #12
 80019a0:	2100      	movs	r1, #0
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7ff fbf2 	bl	800118c <validate_rtc_information>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d110      	bne.n	80019d0 <rtc_task+0x22c>
								{
									rtc_configure_time(&time);
 80019ae:	f107 030c 	add.w	r3, r7, #12
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7ff fbc2 	bl	800113c <rtc_configure_time>
									xQueueSend(q_print,&msg_conf,portMAX_DELAY);
 80019b8:	4b3a      	ldr	r3, [pc, #232]	; (8001aa4 <rtc_task+0x300>)
 80019ba:	6818      	ldr	r0, [r3, #0]
 80019bc:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80019c0:	2300      	movs	r3, #0
 80019c2:	f04f 32ff 	mov.w	r2, #4294967295
 80019c6:	f003 f8d5 	bl	8004b74 <xQueueGenericSend>
									show_time_date();
 80019ca:	f7ff fb4b 	bl	8001064 <show_time_date>
 80019ce:	e007      	b.n	80019e0 <rtc_task+0x23c>
								}else
									xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 80019d0:	4b34      	ldr	r3, [pc, #208]	; (8001aa4 <rtc_task+0x300>)
 80019d2:	6818      	ldr	r0, [r3, #0]
 80019d4:	2300      	movs	r3, #0
 80019d6:	f04f 32ff 	mov.w	r2, #4294967295
 80019da:	4934      	ldr	r1, [pc, #208]	; (8001aac <rtc_task+0x308>)
 80019dc:	f003 f8ca 	bl	8004b74 <xQueueGenericSend>

								curr_state = sMainMenu;
 80019e0:	4b31      	ldr	r3, [pc, #196]	; (8001aa8 <rtc_task+0x304>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	701a      	strb	r2, [r3, #0]
								rtc_state = 0;
 80019e6:	4b32      	ldr	r3, [pc, #200]	; (8001ab0 <rtc_task+0x30c>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
								break;}
 80019ec:	bf00      	nop
						}

					break;}
 80019ee:	e0f4      	b.n	8001bda <rtc_task+0x436>
				case sRtcDateConfig:{

					/*get date, month, day , year info and configure RTC */

					/*take care of invalid entries */
					switch(rtc_state)
 80019f0:	4b2f      	ldr	r3, [pc, #188]	; (8001ab0 <rtc_task+0x30c>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2b03      	cmp	r3, #3
 80019f6:	f200 80f0 	bhi.w	8001bda <rtc_task+0x436>
 80019fa:	a201      	add	r2, pc, #4	; (adr r2, 8001a00 <rtc_task+0x25c>)
 80019fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a00:	08001a11 	.word	0x08001a11
 8001a04:	08001a45 	.word	0x08001a45
 8001a08:	08001ae9 	.word	0x08001ae9
 8001a0c:	08001ab5 	.word	0x08001ab5
						{
							case DATE_CONFIG:{
								uint8_t d = getnumber(cmd->payload , cmd->len);
 8001a10:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001a12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	4619      	mov	r1, r3
 8001a18:	4610      	mov	r0, r2
 8001a1a:	f7ff fe9f 	bl	800175c <getnumber>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
								date.Date = d;
 8001a24:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8001a28:	72bb      	strb	r3, [r7, #10]
								rtc_state = MONTH_CONFIG;
 8001a2a:	4b21      	ldr	r3, [pc, #132]	; (8001ab0 <rtc_task+0x30c>)
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	601a      	str	r2, [r3, #0]
								xQueueSend(q_print,&msg_rtc_mo,portMAX_DELAY);
 8001a30:	4b1c      	ldr	r3, [pc, #112]	; (8001aa4 <rtc_task+0x300>)
 8001a32:	6818      	ldr	r0, [r3, #0]
 8001a34:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001a38:	2300      	movs	r3, #0
 8001a3a:	f04f 32ff 	mov.w	r2, #4294967295
 8001a3e:	f003 f899 	bl	8004b74 <xQueueGenericSend>
								break;}
 8001a42:	e087      	b.n	8001b54 <rtc_task+0x3b0>
							case MONTH_CONFIG:{
								uint8_t month = getnumber(cmd->payload , cmd->len);
 8001a44:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001a46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a48:	68db      	ldr	r3, [r3, #12]
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4610      	mov	r0, r2
 8001a4e:	f7ff fe85 	bl	800175c <getnumber>
 8001a52:	4603      	mov	r3, r0
 8001a54:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
								date.Month = month;
 8001a58:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8001a5c:	727b      	strb	r3, [r7, #9]
								rtc_state = DAY_CONFIG;
 8001a5e:	4b14      	ldr	r3, [pc, #80]	; (8001ab0 <rtc_task+0x30c>)
 8001a60:	2203      	movs	r2, #3
 8001a62:	601a      	str	r2, [r3, #0]
								xQueueSend(q_print,&msg_rtc_dow,portMAX_DELAY);
 8001a64:	4b0f      	ldr	r3, [pc, #60]	; (8001aa4 <rtc_task+0x300>)
 8001a66:	6818      	ldr	r0, [r3, #0]
 8001a68:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	f04f 32ff 	mov.w	r2, #4294967295
 8001a72:	f003 f87f 	bl	8004b74 <xQueueGenericSend>
								break;}
 8001a76:	e06d      	b.n	8001b54 <rtc_task+0x3b0>
 8001a78:	08008e74 	.word	0x08008e74
 8001a7c:	08008ec0 	.word	0x08008ec0
 8001a80:	08008f64 	.word	0x08008f64
 8001a84:	08008f78 	.word	0x08008f78
 8001a88:	08008f90 	.word	0x08008f90
 8001a8c:	08008fa8 	.word	0x08008fa8
 8001a90:	08008fbc 	.word	0x08008fbc
 8001a94:	08008fd0 	.word	0x08008fd0
 8001a98:	08008fe8 	.word	0x08008fe8
 8001a9c:	08008ffc 	.word	0x08008ffc
 8001aa0:	08009018 	.word	0x08009018
 8001aa4:	200196b0 	.word	0x200196b0
 8001aa8:	200000b0 	.word	0x200000b0
 8001aac:	20000014 	.word	0x20000014
 8001ab0:	20000108 	.word	0x20000108
							case DAY_CONFIG:{
								uint8_t day = getnumber(cmd->payload , cmd->len);
 8001ab4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001ab6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	4619      	mov	r1, r3
 8001abc:	4610      	mov	r0, r2
 8001abe:	f7ff fe4d 	bl	800175c <getnumber>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
								date.WeekDay = day;
 8001ac8:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001acc:	723b      	strb	r3, [r7, #8]
								rtc_state = YEAR_CONFIG;
 8001ace:	4b4a      	ldr	r3, [pc, #296]	; (8001bf8 <rtc_task+0x454>)
 8001ad0:	2202      	movs	r2, #2
 8001ad2:	601a      	str	r2, [r3, #0]
								xQueueSend(q_print,&msg_rtc_yr,portMAX_DELAY);
 8001ad4:	4b49      	ldr	r3, [pc, #292]	; (8001bfc <rtc_task+0x458>)
 8001ad6:	6818      	ldr	r0, [r3, #0]
 8001ad8:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001adc:	2300      	movs	r3, #0
 8001ade:	f04f 32ff 	mov.w	r2, #4294967295
 8001ae2:	f003 f847 	bl	8004b74 <xQueueGenericSend>
								break;}
 8001ae6:	e035      	b.n	8001b54 <rtc_task+0x3b0>
							case YEAR_CONFIG:{
								uint8_t year = getnumber(cmd->payload , cmd->len);
 8001ae8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001aea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	4619      	mov	r1, r3
 8001af0:	4610      	mov	r0, r2
 8001af2:	f7ff fe33 	bl	800175c <getnumber>
 8001af6:	4603      	mov	r3, r0
 8001af8:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
								date.Year = year;
 8001afc:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8001b00:	72fb      	strb	r3, [r7, #11]

								if(!validate_rtc_information(NULL,&date))
 8001b02:	f107 0308 	add.w	r3, r7, #8
 8001b06:	4619      	mov	r1, r3
 8001b08:	2000      	movs	r0, #0
 8001b0a:	f7ff fb3f 	bl	800118c <validate_rtc_information>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d110      	bne.n	8001b36 <rtc_task+0x392>
								{
									rtc_configure_date(&date);
 8001b14:	f107 0308 	add.w	r3, r7, #8
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7ff fb27 	bl	800116c <rtc_configure_date>
									xQueueSend(q_print,&msg_conf,portMAX_DELAY);
 8001b1e:	4b37      	ldr	r3, [pc, #220]	; (8001bfc <rtc_task+0x458>)
 8001b20:	6818      	ldr	r0, [r3, #0]
 8001b22:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001b26:	2300      	movs	r3, #0
 8001b28:	f04f 32ff 	mov.w	r2, #4294967295
 8001b2c:	f003 f822 	bl	8004b74 <xQueueGenericSend>
									show_time_date();
 8001b30:	f7ff fa98 	bl	8001064 <show_time_date>
 8001b34:	e007      	b.n	8001b46 <rtc_task+0x3a2>
								}else
									xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8001b36:	4b31      	ldr	r3, [pc, #196]	; (8001bfc <rtc_task+0x458>)
 8001b38:	6818      	ldr	r0, [r3, #0]
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b40:	492f      	ldr	r1, [pc, #188]	; (8001c00 <rtc_task+0x45c>)
 8001b42:	f003 f817 	bl	8004b74 <xQueueGenericSend>

								curr_state = sMainMenu;
 8001b46:	4b2f      	ldr	r3, [pc, #188]	; (8001c04 <rtc_task+0x460>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	701a      	strb	r2, [r3, #0]
								rtc_state = 0;
 8001b4c:	4b2a      	ldr	r3, [pc, #168]	; (8001bf8 <rtc_task+0x454>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	601a      	str	r2, [r3, #0]
								break;}
 8001b52:	bf00      	nop
						}


					break;}
 8001b54:	e041      	b.n	8001bda <rtc_task+0x436>

				case sRtcReport:{
					/*enable or disable RTC current time reporting over ITM printf */
					if(cmd->len == 1)
 8001b56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b58:	68db      	ldr	r3, [r3, #12]
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d131      	bne.n	8001bc2 <rtc_task+0x41e>
					{
						if(cmd->payload[0] == 'y'){
 8001b5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	2b79      	cmp	r3, #121	; 0x79
 8001b64:	d115      	bne.n	8001b92 <rtc_task+0x3ee>
							if(xTimerIsTimerActive(rtc_timer) == pdFALSE)
 8001b66:	4b28      	ldr	r3, [pc, #160]	; (8001c08 <rtc_task+0x464>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f005 f8ec 	bl	8006d48 <xTimerIsTimerActive>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d12d      	bne.n	8001bd2 <rtc_task+0x42e>
								xTimerStart(rtc_timer,portMAX_DELAY);
 8001b76:	4b24      	ldr	r3, [pc, #144]	; (8001c08 <rtc_task+0x464>)
 8001b78:	681c      	ldr	r4, [r3, #0]
 8001b7a:	f003 ff07 	bl	800598c <xTaskGetTickCount>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	f04f 33ff 	mov.w	r3, #4294967295
 8001b84:	9300      	str	r3, [sp, #0]
 8001b86:	2300      	movs	r3, #0
 8001b88:	2101      	movs	r1, #1
 8001b8a:	4620      	mov	r0, r4
 8001b8c:	f004 fdfc 	bl	8006788 <xTimerGenericCommand>
 8001b90:	e01f      	b.n	8001bd2 <rtc_task+0x42e>
						}else if (cmd->payload[0] == 'n'){
 8001b92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	2b6e      	cmp	r3, #110	; 0x6e
 8001b98:	d10a      	bne.n	8001bb0 <rtc_task+0x40c>
							xTimerStop(rtc_timer,portMAX_DELAY);
 8001b9a:	4b1b      	ldr	r3, [pc, #108]	; (8001c08 <rtc_task+0x464>)
 8001b9c:	6818      	ldr	r0, [r3, #0]
 8001b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001ba2:	9300      	str	r3, [sp, #0]
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	2103      	movs	r1, #3
 8001baa:	f004 fded 	bl	8006788 <xTimerGenericCommand>
 8001bae:	e010      	b.n	8001bd2 <rtc_task+0x42e>
						}else{
							xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8001bb0:	4b12      	ldr	r3, [pc, #72]	; (8001bfc <rtc_task+0x458>)
 8001bb2:	6818      	ldr	r0, [r3, #0]
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	f04f 32ff 	mov.w	r2, #4294967295
 8001bba:	4911      	ldr	r1, [pc, #68]	; (8001c00 <rtc_task+0x45c>)
 8001bbc:	f002 ffda 	bl	8004b74 <xQueueGenericSend>
 8001bc0:	e007      	b.n	8001bd2 <rtc_task+0x42e>
						}

					}else
					    xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8001bc2:	4b0e      	ldr	r3, [pc, #56]	; (8001bfc <rtc_task+0x458>)
 8001bc4:	6818      	ldr	r0, [r3, #0]
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	f04f 32ff 	mov.w	r2, #4294967295
 8001bcc:	490c      	ldr	r1, [pc, #48]	; (8001c00 <rtc_task+0x45c>)
 8001bce:	f002 ffd1 	bl	8004b74 <xQueueGenericSend>

					curr_state = sMainMenu;
 8001bd2:	4b0c      	ldr	r3, [pc, #48]	; (8001c04 <rtc_task+0x460>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	701a      	strb	r2, [r3, #0]
					break;}
 8001bd8:	bf00      	nop
		while(curr_state != sMainMenu){
 8001bda:	4b0a      	ldr	r3, [pc, #40]	; (8001c04 <rtc_task+0x460>)
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	f47f ae19 	bne.w	8001816 <rtc_task+0x72>

		} //while end


		/*Notify menu task */
		xTaskNotify(handle_menu_task,0,eNoAction);
 8001be4:	4b09      	ldr	r3, [pc, #36]	; (8001c0c <rtc_task+0x468>)
 8001be6:	6818      	ldr	r0, [r3, #0]
 8001be8:	2300      	movs	r3, #0
 8001bea:	9300      	str	r3, [sp, #0]
 8001bec:	2300      	movs	r3, #0
 8001bee:	2200      	movs	r2, #0
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	f004 faf3 	bl	80061dc <xTaskGenericNotify>
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001bf6:	e5ef      	b.n	80017d8 <rtc_task+0x34>
 8001bf8:	20000108 	.word	0x20000108
 8001bfc:	200196b0 	.word	0x200196b0
 8001c00:	20000014 	.word	0x20000014
 8001c04:	200000b0 	.word	0x200000b0
 8001c08:	2001969c 	.word	0x2001969c
 8001c0c:	200196ac 	.word	0x200196ac

08001c10 <print_task>:
}



void print_task(void *param)
{
 8001c10:	b590      	push	{r4, r7, lr}
 8001c12:	b085      	sub	sp, #20
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]

	uint32_t *msg;
	while(1){
		xQueueReceive(q_print, &msg, portMAX_DELAY);
 8001c18:	4b0b      	ldr	r3, [pc, #44]	; (8001c48 <print_task+0x38>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f107 010c 	add.w	r1, r7, #12
 8001c20:	f04f 32ff 	mov.w	r2, #4294967295
 8001c24:	4618      	mov	r0, r3
 8001c26:	f003 f94d 	bl	8004ec4 <xQueueReceive>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen((char*)msg),HAL_MAX_DELAY);
 8001c2a:	68fc      	ldr	r4, [r7, #12]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7fe fad8 	bl	80001e4 <strlen>
 8001c34:	4603      	mov	r3, r0
 8001c36:	b29a      	uxth	r2, r3
 8001c38:	f04f 33ff 	mov.w	r3, #4294967295
 8001c3c:	4621      	mov	r1, r4
 8001c3e:	4803      	ldr	r0, [pc, #12]	; (8001c4c <print_task+0x3c>)
 8001c40:	f001 ffdf 	bl	8003c02 <HAL_UART_Transmit>
		xQueueReceive(q_print, &msg, portMAX_DELAY);
 8001c44:	e7e8      	b.n	8001c18 <print_task+0x8>
 8001c46:	bf00      	nop
 8001c48:	200196b0 	.word	0x200196b0
 8001c4c:	200196e0 	.word	0x200196e0

08001c50 <cmd_handler_task>:
}



void cmd_handler_task(void *param)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b08a      	sub	sp, #40	; 0x28
 8001c54:	af02      	add	r7, sp, #8
 8001c56:	6078      	str	r0, [r7, #4]
	BaseType_t ret;
	command_t cmd;

	while(1){
		/*Implement notify wait */
		ret = xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001c58:	f04f 33ff 	mov.w	r3, #4294967295
 8001c5c:	9300      	str	r3, [sp, #0]
 8001c5e:	2300      	movs	r3, #0
 8001c60:	2200      	movs	r2, #0
 8001c62:	2100      	movs	r1, #0
 8001c64:	2000      	movs	r0, #0
 8001c66:	f004 fa39 	bl	80060dc <xTaskGenericNotifyWait>
 8001c6a:	61f8      	str	r0, [r7, #28]

		if(ret == pdTRUE){
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d1f2      	bne.n	8001c58 <cmd_handler_task+0x8>
			/*process the user data(command) stored in input data queue */
			process_command(&cmd);
 8001c72:	f107 030c 	add.w	r3, r7, #12
 8001c76:	4618      	mov	r0, r3
 8001c78:	f000 f802 	bl	8001c80 <process_command>
		ret = xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001c7c:	e7ec      	b.n	8001c58 <cmd_handler_task+0x8>
	...

08001c80 <process_command>:

}


void process_command(command_t *cmd)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af02      	add	r7, sp, #8
 8001c86:	6078      	str	r0, [r7, #4]
	extract_command(cmd);
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f000 f835 	bl	8001cf8 <extract_command>

	switch(curr_state)
 8001c8e:	4b16      	ldr	r3, [pc, #88]	; (8001ce8 <process_command+0x68>)
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	2b05      	cmp	r3, #5
 8001c94:	dc24      	bgt.n	8001ce0 <process_command+0x60>
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	da18      	bge.n	8001ccc <process_command+0x4c>
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d002      	beq.n	8001ca4 <process_command+0x24>
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d00a      	beq.n	8001cb8 <process_command+0x38>
			xTaskNotify(handle_rtc_task,(uint32_t)cmd , eSetValueWithOverwrite);
		break;

	}

}
 8001ca2:	e01d      	b.n	8001ce0 <process_command+0x60>
			xTaskNotify(handle_menu_task,(uint32_t)cmd , eSetValueWithOverwrite);
 8001ca4:	4b11      	ldr	r3, [pc, #68]	; (8001cec <process_command+0x6c>)
 8001ca6:	6818      	ldr	r0, [r3, #0]
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	2300      	movs	r3, #0
 8001cac:	9300      	str	r3, [sp, #0]
 8001cae:	2303      	movs	r3, #3
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	f004 fa93 	bl	80061dc <xTaskGenericNotify>
		break;
 8001cb6:	e013      	b.n	8001ce0 <process_command+0x60>
			xTaskNotify(handle_led_task,(uint32_t)cmd , eSetValueWithOverwrite);
 8001cb8:	4b0d      	ldr	r3, [pc, #52]	; (8001cf0 <process_command+0x70>)
 8001cba:	6818      	ldr	r0, [r3, #0]
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	9300      	str	r3, [sp, #0]
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	f004 fa89 	bl	80061dc <xTaskGenericNotify>
		break;
 8001cca:	e009      	b.n	8001ce0 <process_command+0x60>
			xTaskNotify(handle_rtc_task,(uint32_t)cmd , eSetValueWithOverwrite);
 8001ccc:	4b09      	ldr	r3, [pc, #36]	; (8001cf4 <process_command+0x74>)
 8001cce:	6818      	ldr	r0, [r3, #0]
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	9300      	str	r3, [sp, #0]
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	2100      	movs	r1, #0
 8001cda:	f004 fa7f 	bl	80061dc <xTaskGenericNotify>
		break;
 8001cde:	bf00      	nop
}
 8001ce0:	bf00      	nop
 8001ce2:	3708      	adds	r7, #8
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	200000b0 	.word	0x200000b0
 8001cec:	200196ac 	.word	0x200196ac
 8001cf0:	200196d8 	.word	0x200196d8
 8001cf4:	200196a0 	.word	0x200196a0

08001cf8 <extract_command>:


int extract_command(command_t *cmd)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
	uint8_t item;
	BaseType_t  status;

	status = uxQueueMessagesWaiting(q_data );
 8001d00:	4b19      	ldr	r3, [pc, #100]	; (8001d68 <extract_command+0x70>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f003 fa4c 	bl	80051a2 <uxQueueMessagesWaiting>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	613b      	str	r3, [r7, #16]
	if(!status) return -1;
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d102      	bne.n	8001d1a <extract_command+0x22>
 8001d14:	f04f 33ff 	mov.w	r3, #4294967295
 8001d18:	e022      	b.n	8001d60 <extract_command+0x68>
	uint8_t i =0;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	75fb      	strb	r3, [r7, #23]

	do
	{
		status = xQueueReceive(q_data,&item,0);
 8001d1e:	4b12      	ldr	r3, [pc, #72]	; (8001d68 <extract_command+0x70>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f107 010f 	add.w	r1, r7, #15
 8001d26:	2200      	movs	r2, #0
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f003 f8cb 	bl	8004ec4 <xQueueReceive>
 8001d2e:	6138      	str	r0, [r7, #16]
		if(status == pdTRUE) cmd->payload[i++] = item;
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d106      	bne.n	8001d44 <extract_command+0x4c>
 8001d36:	7dfb      	ldrb	r3, [r7, #23]
 8001d38:	1c5a      	adds	r2, r3, #1
 8001d3a:	75fa      	strb	r2, [r7, #23]
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	7bf9      	ldrb	r1, [r7, #15]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	5499      	strb	r1, [r3, r2]
	}while(item != '\n');
 8001d44:	7bfb      	ldrb	r3, [r7, #15]
 8001d46:	2b0a      	cmp	r3, #10
 8001d48:	d1e9      	bne.n	8001d1e <extract_command+0x26>

	cmd->payload[i-1] = '\0';
 8001d4a:	7dfb      	ldrb	r3, [r7, #23]
 8001d4c:	3b01      	subs	r3, #1
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	2100      	movs	r1, #0
 8001d52:	54d1      	strb	r1, [r2, r3]
	cmd->len = i-1; /*save  length of the command excluding null char */
 8001d54:	7dfb      	ldrb	r3, [r7, #23]
 8001d56:	3b01      	subs	r3, #1
 8001d58:	461a      	mov	r2, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	60da      	str	r2, [r3, #12]

	return 0;
 8001d5e:	2300      	movs	r3, #0
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3718      	adds	r7, #24
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	200196a8 	.word	0x200196a8

08001d6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001d6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001da4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d70:	480d      	ldr	r0, [pc, #52]	; (8001da8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d72:	490e      	ldr	r1, [pc, #56]	; (8001dac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d74:	4a0e      	ldr	r2, [pc, #56]	; (8001db0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d78:	e002      	b.n	8001d80 <LoopCopyDataInit>

08001d7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d7e:	3304      	adds	r3, #4

08001d80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d84:	d3f9      	bcc.n	8001d7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d86:	4a0b      	ldr	r2, [pc, #44]	; (8001db4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d88:	4c0b      	ldr	r4, [pc, #44]	; (8001db8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d8c:	e001      	b.n	8001d92 <LoopFillZerobss>

08001d8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d90:	3204      	adds	r2, #4

08001d92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d94:	d3fb      	bcc.n	8001d8e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001d96:	f7ff fbc5 	bl	8001524 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d9a:	f005 fe1b 	bl	80079d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d9e:	f7fe fd31 	bl	8000804 <main>
  bx  lr    
 8001da2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001da4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001da8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dac:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001db0:	0800912c 	.word	0x0800912c
  ldr r2, =_sbss
 8001db4:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8001db8:	20019868 	.word	0x20019868

08001dbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001dbc:	e7fe      	b.n	8001dbc <ADC_IRQHandler>
	...

08001dc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001dc4:	4b0e      	ldr	r3, [pc, #56]	; (8001e00 <HAL_Init+0x40>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a0d      	ldr	r2, [pc, #52]	; (8001e00 <HAL_Init+0x40>)
 8001dca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001dd0:	4b0b      	ldr	r3, [pc, #44]	; (8001e00 <HAL_Init+0x40>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a0a      	ldr	r2, [pc, #40]	; (8001e00 <HAL_Init+0x40>)
 8001dd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ddc:	4b08      	ldr	r3, [pc, #32]	; (8001e00 <HAL_Init+0x40>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a07      	ldr	r2, [pc, #28]	; (8001e00 <HAL_Init+0x40>)
 8001de2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001de6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001de8:	2003      	movs	r0, #3
 8001dea:	f000 f8d8 	bl	8001f9e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dee:	2000      	movs	r0, #0
 8001df0:	f7ff fa8c 	bl	800130c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001df4:	f7ff f9fc 	bl	80011f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	40023c00 	.word	0x40023c00

08001e04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e08:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <HAL_IncTick+0x20>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	4b06      	ldr	r3, [pc, #24]	; (8001e28 <HAL_IncTick+0x24>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4413      	add	r3, r2
 8001e14:	4a04      	ldr	r2, [pc, #16]	; (8001e28 <HAL_IncTick+0x24>)
 8001e16:	6013      	str	r3, [r2, #0]
}
 8001e18:	bf00      	nop
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	2000001c 	.word	0x2000001c
 8001e28:	2001976c 	.word	0x2001976c

08001e2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e30:	4b03      	ldr	r3, [pc, #12]	; (8001e40 <HAL_GetTick+0x14>)
 8001e32:	681b      	ldr	r3, [r3, #0]
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	2001976c 	.word	0x2001976c

08001e44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f003 0307 	and.w	r3, r3, #7
 8001e52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e54:	4b0c      	ldr	r3, [pc, #48]	; (8001e88 <__NVIC_SetPriorityGrouping+0x44>)
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e5a:	68ba      	ldr	r2, [r7, #8]
 8001e5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e60:	4013      	ands	r3, r2
 8001e62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e76:	4a04      	ldr	r2, [pc, #16]	; (8001e88 <__NVIC_SetPriorityGrouping+0x44>)
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	60d3      	str	r3, [r2, #12]
}
 8001e7c:	bf00      	nop
 8001e7e:	3714      	adds	r7, #20
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr
 8001e88:	e000ed00 	.word	0xe000ed00

08001e8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e90:	4b04      	ldr	r3, [pc, #16]	; (8001ea4 <__NVIC_GetPriorityGrouping+0x18>)
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	0a1b      	lsrs	r3, r3, #8
 8001e96:	f003 0307 	and.w	r3, r3, #7
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr
 8001ea4:	e000ed00 	.word	0xe000ed00

08001ea8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	4603      	mov	r3, r0
 8001eb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	db0b      	blt.n	8001ed2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eba:	79fb      	ldrb	r3, [r7, #7]
 8001ebc:	f003 021f 	and.w	r2, r3, #31
 8001ec0:	4907      	ldr	r1, [pc, #28]	; (8001ee0 <__NVIC_EnableIRQ+0x38>)
 8001ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec6:	095b      	lsrs	r3, r3, #5
 8001ec8:	2001      	movs	r0, #1
 8001eca:	fa00 f202 	lsl.w	r2, r0, r2
 8001ece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ed2:	bf00      	nop
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	e000e100 	.word	0xe000e100

08001ee4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	4603      	mov	r3, r0
 8001eec:	6039      	str	r1, [r7, #0]
 8001eee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	db0a      	blt.n	8001f0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	b2da      	uxtb	r2, r3
 8001efc:	490c      	ldr	r1, [pc, #48]	; (8001f30 <__NVIC_SetPriority+0x4c>)
 8001efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f02:	0112      	lsls	r2, r2, #4
 8001f04:	b2d2      	uxtb	r2, r2
 8001f06:	440b      	add	r3, r1
 8001f08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f0c:	e00a      	b.n	8001f24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	b2da      	uxtb	r2, r3
 8001f12:	4908      	ldr	r1, [pc, #32]	; (8001f34 <__NVIC_SetPriority+0x50>)
 8001f14:	79fb      	ldrb	r3, [r7, #7]
 8001f16:	f003 030f 	and.w	r3, r3, #15
 8001f1a:	3b04      	subs	r3, #4
 8001f1c:	0112      	lsls	r2, r2, #4
 8001f1e:	b2d2      	uxtb	r2, r2
 8001f20:	440b      	add	r3, r1
 8001f22:	761a      	strb	r2, [r3, #24]
}
 8001f24:	bf00      	nop
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr
 8001f30:	e000e100 	.word	0xe000e100
 8001f34:	e000ed00 	.word	0xe000ed00

08001f38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b089      	sub	sp, #36	; 0x24
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	60b9      	str	r1, [r7, #8]
 8001f42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f003 0307 	and.w	r3, r3, #7
 8001f4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	f1c3 0307 	rsb	r3, r3, #7
 8001f52:	2b04      	cmp	r3, #4
 8001f54:	bf28      	it	cs
 8001f56:	2304      	movcs	r3, #4
 8001f58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	3304      	adds	r3, #4
 8001f5e:	2b06      	cmp	r3, #6
 8001f60:	d902      	bls.n	8001f68 <NVIC_EncodePriority+0x30>
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	3b03      	subs	r3, #3
 8001f66:	e000      	b.n	8001f6a <NVIC_EncodePriority+0x32>
 8001f68:	2300      	movs	r3, #0
 8001f6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	fa02 f303 	lsl.w	r3, r2, r3
 8001f76:	43da      	mvns	r2, r3
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	401a      	ands	r2, r3
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f80:	f04f 31ff 	mov.w	r1, #4294967295
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	fa01 f303 	lsl.w	r3, r1, r3
 8001f8a:	43d9      	mvns	r1, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f90:	4313      	orrs	r3, r2
         );
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3724      	adds	r7, #36	; 0x24
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr

08001f9e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f9e:	b580      	push	{r7, lr}
 8001fa0:	b082      	sub	sp, #8
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f7ff ff4c 	bl	8001e44 <__NVIC_SetPriorityGrouping>
}
 8001fac:	bf00      	nop
 8001fae:	3708      	adds	r7, #8
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b086      	sub	sp, #24
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	4603      	mov	r3, r0
 8001fbc:	60b9      	str	r1, [r7, #8]
 8001fbe:	607a      	str	r2, [r7, #4]
 8001fc0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fc6:	f7ff ff61 	bl	8001e8c <__NVIC_GetPriorityGrouping>
 8001fca:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	68b9      	ldr	r1, [r7, #8]
 8001fd0:	6978      	ldr	r0, [r7, #20]
 8001fd2:	f7ff ffb1 	bl	8001f38 <NVIC_EncodePriority>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fdc:	4611      	mov	r1, r2
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7ff ff80 	bl	8001ee4 <__NVIC_SetPriority>
}
 8001fe4:	bf00      	nop
 8001fe6:	3718      	adds	r7, #24
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}

08001fec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7ff ff54 	bl	8001ea8 <__NVIC_EnableIRQ>
}
 8002000:	bf00      	nop
 8002002:	3708      	adds	r7, #8
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}

08002008 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002014:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002016:	f7ff ff09 	bl	8001e2c <HAL_GetTick>
 800201a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002022:	b2db      	uxtb	r3, r3
 8002024:	2b02      	cmp	r3, #2
 8002026:	d008      	beq.n	800203a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2280      	movs	r2, #128	; 0x80
 800202c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e052      	b.n	80020e0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f022 0216 	bic.w	r2, r2, #22
 8002048:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	695a      	ldr	r2, [r3, #20]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002058:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205e:	2b00      	cmp	r3, #0
 8002060:	d103      	bne.n	800206a <HAL_DMA_Abort+0x62>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002066:	2b00      	cmp	r3, #0
 8002068:	d007      	beq.n	800207a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f022 0208 	bic.w	r2, r2, #8
 8002078:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f022 0201 	bic.w	r2, r2, #1
 8002088:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800208a:	e013      	b.n	80020b4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800208c:	f7ff fece 	bl	8001e2c <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b05      	cmp	r3, #5
 8002098:	d90c      	bls.n	80020b4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2220      	movs	r2, #32
 800209e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2203      	movs	r2, #3
 80020ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80020b0:	2303      	movs	r3, #3
 80020b2:	e015      	b.n	80020e0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0301 	and.w	r3, r3, #1
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d1e4      	bne.n	800208c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020c6:	223f      	movs	r2, #63	; 0x3f
 80020c8:	409a      	lsls	r2, r3
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2201      	movs	r2, #1
 80020da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80020de:	2300      	movs	r3, #0
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3710      	adds	r7, #16
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d004      	beq.n	8002106 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2280      	movs	r2, #128	; 0x80
 8002100:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e00c      	b.n	8002120 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2205      	movs	r2, #5
 800210a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f022 0201 	bic.w	r2, r2, #1
 800211c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800211e:	2300      	movs	r3, #0
}
 8002120:	4618      	mov	r0, r3
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800212c:	b480      	push	{r7}
 800212e:	b089      	sub	sp, #36	; 0x24
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002136:	2300      	movs	r3, #0
 8002138:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800213a:	2300      	movs	r3, #0
 800213c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800213e:	2300      	movs	r3, #0
 8002140:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002142:	2300      	movs	r3, #0
 8002144:	61fb      	str	r3, [r7, #28]
 8002146:	e16b      	b.n	8002420 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002148:	2201      	movs	r2, #1
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	697a      	ldr	r2, [r7, #20]
 8002158:	4013      	ands	r3, r2
 800215a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800215c:	693a      	ldr	r2, [r7, #16]
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	429a      	cmp	r2, r3
 8002162:	f040 815a 	bne.w	800241a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f003 0303 	and.w	r3, r3, #3
 800216e:	2b01      	cmp	r3, #1
 8002170:	d005      	beq.n	800217e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800217a:	2b02      	cmp	r3, #2
 800217c:	d130      	bne.n	80021e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	2203      	movs	r2, #3
 800218a:	fa02 f303 	lsl.w	r3, r2, r3
 800218e:	43db      	mvns	r3, r3
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	4013      	ands	r3, r2
 8002194:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	68da      	ldr	r2, [r3, #12]
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	fa02 f303 	lsl.w	r3, r2, r3
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021b4:	2201      	movs	r2, #1
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	43db      	mvns	r3, r3
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	4013      	ands	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	091b      	lsrs	r3, r3, #4
 80021ca:	f003 0201 	and.w	r2, r3, #1
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	fa02 f303 	lsl.w	r3, r2, r3
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f003 0303 	and.w	r3, r3, #3
 80021e8:	2b03      	cmp	r3, #3
 80021ea:	d017      	beq.n	800221c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	2203      	movs	r2, #3
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	43db      	mvns	r3, r3
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	4013      	ands	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	689a      	ldr	r2, [r3, #8]
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	fa02 f303 	lsl.w	r3, r2, r3
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	4313      	orrs	r3, r2
 8002214:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f003 0303 	and.w	r3, r3, #3
 8002224:	2b02      	cmp	r3, #2
 8002226:	d123      	bne.n	8002270 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	08da      	lsrs	r2, r3, #3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	3208      	adds	r2, #8
 8002230:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002234:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	f003 0307 	and.w	r3, r3, #7
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	220f      	movs	r2, #15
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	43db      	mvns	r3, r3
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	4013      	ands	r3, r2
 800224a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	691a      	ldr	r2, [r3, #16]
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	f003 0307 	and.w	r3, r3, #7
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	4313      	orrs	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	08da      	lsrs	r2, r3, #3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	3208      	adds	r2, #8
 800226a:	69b9      	ldr	r1, [r7, #24]
 800226c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	2203      	movs	r2, #3
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	43db      	mvns	r3, r3
 8002282:	69ba      	ldr	r2, [r7, #24]
 8002284:	4013      	ands	r3, r2
 8002286:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f003 0203 	and.w	r2, r3, #3
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	fa02 f303 	lsl.w	r3, r2, r3
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	4313      	orrs	r3, r2
 800229c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	f000 80b4 	beq.w	800241a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022b2:	2300      	movs	r3, #0
 80022b4:	60fb      	str	r3, [r7, #12]
 80022b6:	4b60      	ldr	r3, [pc, #384]	; (8002438 <HAL_GPIO_Init+0x30c>)
 80022b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ba:	4a5f      	ldr	r2, [pc, #380]	; (8002438 <HAL_GPIO_Init+0x30c>)
 80022bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022c0:	6453      	str	r3, [r2, #68]	; 0x44
 80022c2:	4b5d      	ldr	r3, [pc, #372]	; (8002438 <HAL_GPIO_Init+0x30c>)
 80022c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022ca:	60fb      	str	r3, [r7, #12]
 80022cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022ce:	4a5b      	ldr	r2, [pc, #364]	; (800243c <HAL_GPIO_Init+0x310>)
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	089b      	lsrs	r3, r3, #2
 80022d4:	3302      	adds	r3, #2
 80022d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	f003 0303 	and.w	r3, r3, #3
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	220f      	movs	r2, #15
 80022e6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ea:	43db      	mvns	r3, r3
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	4013      	ands	r3, r2
 80022f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a52      	ldr	r2, [pc, #328]	; (8002440 <HAL_GPIO_Init+0x314>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d02b      	beq.n	8002352 <HAL_GPIO_Init+0x226>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a51      	ldr	r2, [pc, #324]	; (8002444 <HAL_GPIO_Init+0x318>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d025      	beq.n	800234e <HAL_GPIO_Init+0x222>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a50      	ldr	r2, [pc, #320]	; (8002448 <HAL_GPIO_Init+0x31c>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d01f      	beq.n	800234a <HAL_GPIO_Init+0x21e>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a4f      	ldr	r2, [pc, #316]	; (800244c <HAL_GPIO_Init+0x320>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d019      	beq.n	8002346 <HAL_GPIO_Init+0x21a>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a4e      	ldr	r2, [pc, #312]	; (8002450 <HAL_GPIO_Init+0x324>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d013      	beq.n	8002342 <HAL_GPIO_Init+0x216>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a4d      	ldr	r2, [pc, #308]	; (8002454 <HAL_GPIO_Init+0x328>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d00d      	beq.n	800233e <HAL_GPIO_Init+0x212>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a4c      	ldr	r2, [pc, #304]	; (8002458 <HAL_GPIO_Init+0x32c>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d007      	beq.n	800233a <HAL_GPIO_Init+0x20e>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a4b      	ldr	r2, [pc, #300]	; (800245c <HAL_GPIO_Init+0x330>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d101      	bne.n	8002336 <HAL_GPIO_Init+0x20a>
 8002332:	2307      	movs	r3, #7
 8002334:	e00e      	b.n	8002354 <HAL_GPIO_Init+0x228>
 8002336:	2308      	movs	r3, #8
 8002338:	e00c      	b.n	8002354 <HAL_GPIO_Init+0x228>
 800233a:	2306      	movs	r3, #6
 800233c:	e00a      	b.n	8002354 <HAL_GPIO_Init+0x228>
 800233e:	2305      	movs	r3, #5
 8002340:	e008      	b.n	8002354 <HAL_GPIO_Init+0x228>
 8002342:	2304      	movs	r3, #4
 8002344:	e006      	b.n	8002354 <HAL_GPIO_Init+0x228>
 8002346:	2303      	movs	r3, #3
 8002348:	e004      	b.n	8002354 <HAL_GPIO_Init+0x228>
 800234a:	2302      	movs	r3, #2
 800234c:	e002      	b.n	8002354 <HAL_GPIO_Init+0x228>
 800234e:	2301      	movs	r3, #1
 8002350:	e000      	b.n	8002354 <HAL_GPIO_Init+0x228>
 8002352:	2300      	movs	r3, #0
 8002354:	69fa      	ldr	r2, [r7, #28]
 8002356:	f002 0203 	and.w	r2, r2, #3
 800235a:	0092      	lsls	r2, r2, #2
 800235c:	4093      	lsls	r3, r2
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	4313      	orrs	r3, r2
 8002362:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002364:	4935      	ldr	r1, [pc, #212]	; (800243c <HAL_GPIO_Init+0x310>)
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	089b      	lsrs	r3, r3, #2
 800236a:	3302      	adds	r3, #2
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002372:	4b3b      	ldr	r3, [pc, #236]	; (8002460 <HAL_GPIO_Init+0x334>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	43db      	mvns	r3, r3
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	4013      	ands	r3, r2
 8002380:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d003      	beq.n	8002396 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	4313      	orrs	r3, r2
 8002394:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002396:	4a32      	ldr	r2, [pc, #200]	; (8002460 <HAL_GPIO_Init+0x334>)
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800239c:	4b30      	ldr	r3, [pc, #192]	; (8002460 <HAL_GPIO_Init+0x334>)
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	43db      	mvns	r3, r3
 80023a6:	69ba      	ldr	r2, [r7, #24]
 80023a8:	4013      	ands	r3, r2
 80023aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d003      	beq.n	80023c0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	4313      	orrs	r3, r2
 80023be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023c0:	4a27      	ldr	r2, [pc, #156]	; (8002460 <HAL_GPIO_Init+0x334>)
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023c6:	4b26      	ldr	r3, [pc, #152]	; (8002460 <HAL_GPIO_Init+0x334>)
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	43db      	mvns	r3, r3
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	4013      	ands	r3, r2
 80023d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d003      	beq.n	80023ea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023ea:	4a1d      	ldr	r2, [pc, #116]	; (8002460 <HAL_GPIO_Init+0x334>)
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023f0:	4b1b      	ldr	r3, [pc, #108]	; (8002460 <HAL_GPIO_Init+0x334>)
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	43db      	mvns	r3, r3
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	4013      	ands	r3, r2
 80023fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d003      	beq.n	8002414 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	4313      	orrs	r3, r2
 8002412:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002414:	4a12      	ldr	r2, [pc, #72]	; (8002460 <HAL_GPIO_Init+0x334>)
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	3301      	adds	r3, #1
 800241e:	61fb      	str	r3, [r7, #28]
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	2b0f      	cmp	r3, #15
 8002424:	f67f ae90 	bls.w	8002148 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002428:	bf00      	nop
 800242a:	bf00      	nop
 800242c:	3724      	adds	r7, #36	; 0x24
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	40023800 	.word	0x40023800
 800243c:	40013800 	.word	0x40013800
 8002440:	40020000 	.word	0x40020000
 8002444:	40020400 	.word	0x40020400
 8002448:	40020800 	.word	0x40020800
 800244c:	40020c00 	.word	0x40020c00
 8002450:	40021000 	.word	0x40021000
 8002454:	40021400 	.word	0x40021400
 8002458:	40021800 	.word	0x40021800
 800245c:	40021c00 	.word	0x40021c00
 8002460:	40013c00 	.word	0x40013c00

08002464 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	460b      	mov	r3, r1
 800246e:	807b      	strh	r3, [r7, #2]
 8002470:	4613      	mov	r3, r2
 8002472:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002474:	787b      	ldrb	r3, [r7, #1]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d003      	beq.n	8002482 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800247a:	887a      	ldrh	r2, [r7, #2]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002480:	e003      	b.n	800248a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002482:	887b      	ldrh	r3, [r7, #2]
 8002484:	041a      	lsls	r2, r3, #16
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	619a      	str	r2, [r3, #24]
}
 800248a:	bf00      	nop
 800248c:	370c      	adds	r7, #12
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
	...

08002498 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b086      	sub	sp, #24
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d101      	bne.n	80024aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e264      	b.n	8002974 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d075      	beq.n	80025a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024b6:	4ba3      	ldr	r3, [pc, #652]	; (8002744 <HAL_RCC_OscConfig+0x2ac>)
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f003 030c 	and.w	r3, r3, #12
 80024be:	2b04      	cmp	r3, #4
 80024c0:	d00c      	beq.n	80024dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024c2:	4ba0      	ldr	r3, [pc, #640]	; (8002744 <HAL_RCC_OscConfig+0x2ac>)
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024ca:	2b08      	cmp	r3, #8
 80024cc:	d112      	bne.n	80024f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024ce:	4b9d      	ldr	r3, [pc, #628]	; (8002744 <HAL_RCC_OscConfig+0x2ac>)
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024da:	d10b      	bne.n	80024f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024dc:	4b99      	ldr	r3, [pc, #612]	; (8002744 <HAL_RCC_OscConfig+0x2ac>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d05b      	beq.n	80025a0 <HAL_RCC_OscConfig+0x108>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d157      	bne.n	80025a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e23f      	b.n	8002974 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024fc:	d106      	bne.n	800250c <HAL_RCC_OscConfig+0x74>
 80024fe:	4b91      	ldr	r3, [pc, #580]	; (8002744 <HAL_RCC_OscConfig+0x2ac>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a90      	ldr	r2, [pc, #576]	; (8002744 <HAL_RCC_OscConfig+0x2ac>)
 8002504:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002508:	6013      	str	r3, [r2, #0]
 800250a:	e01d      	b.n	8002548 <HAL_RCC_OscConfig+0xb0>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002514:	d10c      	bne.n	8002530 <HAL_RCC_OscConfig+0x98>
 8002516:	4b8b      	ldr	r3, [pc, #556]	; (8002744 <HAL_RCC_OscConfig+0x2ac>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a8a      	ldr	r2, [pc, #552]	; (8002744 <HAL_RCC_OscConfig+0x2ac>)
 800251c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002520:	6013      	str	r3, [r2, #0]
 8002522:	4b88      	ldr	r3, [pc, #544]	; (8002744 <HAL_RCC_OscConfig+0x2ac>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a87      	ldr	r2, [pc, #540]	; (8002744 <HAL_RCC_OscConfig+0x2ac>)
 8002528:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800252c:	6013      	str	r3, [r2, #0]
 800252e:	e00b      	b.n	8002548 <HAL_RCC_OscConfig+0xb0>
 8002530:	4b84      	ldr	r3, [pc, #528]	; (8002744 <HAL_RCC_OscConfig+0x2ac>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a83      	ldr	r2, [pc, #524]	; (8002744 <HAL_RCC_OscConfig+0x2ac>)
 8002536:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800253a:	6013      	str	r3, [r2, #0]
 800253c:	4b81      	ldr	r3, [pc, #516]	; (8002744 <HAL_RCC_OscConfig+0x2ac>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a80      	ldr	r2, [pc, #512]	; (8002744 <HAL_RCC_OscConfig+0x2ac>)
 8002542:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002546:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d013      	beq.n	8002578 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002550:	f7ff fc6c 	bl	8001e2c <HAL_GetTick>
 8002554:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002556:	e008      	b.n	800256a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002558:	f7ff fc68 	bl	8001e2c <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b64      	cmp	r3, #100	; 0x64
 8002564:	d901      	bls.n	800256a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e204      	b.n	8002974 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800256a:	4b76      	ldr	r3, [pc, #472]	; (8002744 <HAL_RCC_OscConfig+0x2ac>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d0f0      	beq.n	8002558 <HAL_RCC_OscConfig+0xc0>
 8002576:	e014      	b.n	80025a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002578:	f7ff fc58 	bl	8001e2c <HAL_GetTick>
 800257c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800257e:	e008      	b.n	8002592 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002580:	f7ff fc54 	bl	8001e2c <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b64      	cmp	r3, #100	; 0x64
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e1f0      	b.n	8002974 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002592:	4b6c      	ldr	r3, [pc, #432]	; (8002744 <HAL_RCC_OscConfig+0x2ac>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d1f0      	bne.n	8002580 <HAL_RCC_OscConfig+0xe8>
 800259e:	e000      	b.n	80025a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0302 	and.w	r3, r3, #2
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d063      	beq.n	8002676 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025ae:	4b65      	ldr	r3, [pc, #404]	; (8002744 <HAL_RCC_OscConfig+0x2ac>)
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	f003 030c 	and.w	r3, r3, #12
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00b      	beq.n	80025d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025ba:	4b62      	ldr	r3, [pc, #392]	; (8002744 <HAL_RCC_OscConfig+0x2ac>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025c2:	2b08      	cmp	r3, #8
 80025c4:	d11c      	bne.n	8002600 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025c6:	4b5f      	ldr	r3, [pc, #380]	; (8002744 <HAL_RCC_OscConfig+0x2ac>)
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d116      	bne.n	8002600 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025d2:	4b5c      	ldr	r3, [pc, #368]	; (8002744 <HAL_RCC_OscConfig+0x2ac>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d005      	beq.n	80025ea <HAL_RCC_OscConfig+0x152>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d001      	beq.n	80025ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e1c4      	b.n	8002974 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025ea:	4b56      	ldr	r3, [pc, #344]	; (8002744 <HAL_RCC_OscConfig+0x2ac>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	00db      	lsls	r3, r3, #3
 80025f8:	4952      	ldr	r1, [pc, #328]	; (8002744 <HAL_RCC_OscConfig+0x2ac>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025fe:	e03a      	b.n	8002676 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d020      	beq.n	800264a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002608:	4b4f      	ldr	r3, [pc, #316]	; (8002748 <HAL_RCC_OscConfig+0x2b0>)
 800260a:	2201      	movs	r2, #1
 800260c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800260e:	f7ff fc0d 	bl	8001e2c <HAL_GetTick>
 8002612:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002614:	e008      	b.n	8002628 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002616:	f7ff fc09 	bl	8001e2c <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	2b02      	cmp	r3, #2
 8002622:	d901      	bls.n	8002628 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e1a5      	b.n	8002974 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002628:	4b46      	ldr	r3, [pc, #280]	; (8002744 <HAL_RCC_OscConfig+0x2ac>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0302 	and.w	r3, r3, #2
 8002630:	2b00      	cmp	r3, #0
 8002632:	d0f0      	beq.n	8002616 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002634:	4b43      	ldr	r3, [pc, #268]	; (8002744 <HAL_RCC_OscConfig+0x2ac>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	691b      	ldr	r3, [r3, #16]
 8002640:	00db      	lsls	r3, r3, #3
 8002642:	4940      	ldr	r1, [pc, #256]	; (8002744 <HAL_RCC_OscConfig+0x2ac>)
 8002644:	4313      	orrs	r3, r2
 8002646:	600b      	str	r3, [r1, #0]
 8002648:	e015      	b.n	8002676 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800264a:	4b3f      	ldr	r3, [pc, #252]	; (8002748 <HAL_RCC_OscConfig+0x2b0>)
 800264c:	2200      	movs	r2, #0
 800264e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002650:	f7ff fbec 	bl	8001e2c <HAL_GetTick>
 8002654:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002656:	e008      	b.n	800266a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002658:	f7ff fbe8 	bl	8001e2c <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	2b02      	cmp	r3, #2
 8002664:	d901      	bls.n	800266a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e184      	b.n	8002974 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800266a:	4b36      	ldr	r3, [pc, #216]	; (8002744 <HAL_RCC_OscConfig+0x2ac>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d1f0      	bne.n	8002658 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0308 	and.w	r3, r3, #8
 800267e:	2b00      	cmp	r3, #0
 8002680:	d030      	beq.n	80026e4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	695b      	ldr	r3, [r3, #20]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d016      	beq.n	80026b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800268a:	4b30      	ldr	r3, [pc, #192]	; (800274c <HAL_RCC_OscConfig+0x2b4>)
 800268c:	2201      	movs	r2, #1
 800268e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002690:	f7ff fbcc 	bl	8001e2c <HAL_GetTick>
 8002694:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002696:	e008      	b.n	80026aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002698:	f7ff fbc8 	bl	8001e2c <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e164      	b.n	8002974 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026aa:	4b26      	ldr	r3, [pc, #152]	; (8002744 <HAL_RCC_OscConfig+0x2ac>)
 80026ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026ae:	f003 0302 	and.w	r3, r3, #2
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d0f0      	beq.n	8002698 <HAL_RCC_OscConfig+0x200>
 80026b6:	e015      	b.n	80026e4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026b8:	4b24      	ldr	r3, [pc, #144]	; (800274c <HAL_RCC_OscConfig+0x2b4>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026be:	f7ff fbb5 	bl	8001e2c <HAL_GetTick>
 80026c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026c4:	e008      	b.n	80026d8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026c6:	f7ff fbb1 	bl	8001e2c <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d901      	bls.n	80026d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e14d      	b.n	8002974 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026d8:	4b1a      	ldr	r3, [pc, #104]	; (8002744 <HAL_RCC_OscConfig+0x2ac>)
 80026da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026dc:	f003 0302 	and.w	r3, r3, #2
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d1f0      	bne.n	80026c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0304 	and.w	r3, r3, #4
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	f000 80a0 	beq.w	8002832 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026f2:	2300      	movs	r3, #0
 80026f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026f6:	4b13      	ldr	r3, [pc, #76]	; (8002744 <HAL_RCC_OscConfig+0x2ac>)
 80026f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d10f      	bne.n	8002722 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002702:	2300      	movs	r3, #0
 8002704:	60bb      	str	r3, [r7, #8]
 8002706:	4b0f      	ldr	r3, [pc, #60]	; (8002744 <HAL_RCC_OscConfig+0x2ac>)
 8002708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270a:	4a0e      	ldr	r2, [pc, #56]	; (8002744 <HAL_RCC_OscConfig+0x2ac>)
 800270c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002710:	6413      	str	r3, [r2, #64]	; 0x40
 8002712:	4b0c      	ldr	r3, [pc, #48]	; (8002744 <HAL_RCC_OscConfig+0x2ac>)
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800271a:	60bb      	str	r3, [r7, #8]
 800271c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800271e:	2301      	movs	r3, #1
 8002720:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002722:	4b0b      	ldr	r3, [pc, #44]	; (8002750 <HAL_RCC_OscConfig+0x2b8>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800272a:	2b00      	cmp	r3, #0
 800272c:	d121      	bne.n	8002772 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800272e:	4b08      	ldr	r3, [pc, #32]	; (8002750 <HAL_RCC_OscConfig+0x2b8>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a07      	ldr	r2, [pc, #28]	; (8002750 <HAL_RCC_OscConfig+0x2b8>)
 8002734:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002738:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800273a:	f7ff fb77 	bl	8001e2c <HAL_GetTick>
 800273e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002740:	e011      	b.n	8002766 <HAL_RCC_OscConfig+0x2ce>
 8002742:	bf00      	nop
 8002744:	40023800 	.word	0x40023800
 8002748:	42470000 	.word	0x42470000
 800274c:	42470e80 	.word	0x42470e80
 8002750:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002754:	f7ff fb6a 	bl	8001e2c <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	2b02      	cmp	r3, #2
 8002760:	d901      	bls.n	8002766 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e106      	b.n	8002974 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002766:	4b85      	ldr	r3, [pc, #532]	; (800297c <HAL_RCC_OscConfig+0x4e4>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800276e:	2b00      	cmp	r3, #0
 8002770:	d0f0      	beq.n	8002754 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	2b01      	cmp	r3, #1
 8002778:	d106      	bne.n	8002788 <HAL_RCC_OscConfig+0x2f0>
 800277a:	4b81      	ldr	r3, [pc, #516]	; (8002980 <HAL_RCC_OscConfig+0x4e8>)
 800277c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800277e:	4a80      	ldr	r2, [pc, #512]	; (8002980 <HAL_RCC_OscConfig+0x4e8>)
 8002780:	f043 0301 	orr.w	r3, r3, #1
 8002784:	6713      	str	r3, [r2, #112]	; 0x70
 8002786:	e01c      	b.n	80027c2 <HAL_RCC_OscConfig+0x32a>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	2b05      	cmp	r3, #5
 800278e:	d10c      	bne.n	80027aa <HAL_RCC_OscConfig+0x312>
 8002790:	4b7b      	ldr	r3, [pc, #492]	; (8002980 <HAL_RCC_OscConfig+0x4e8>)
 8002792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002794:	4a7a      	ldr	r2, [pc, #488]	; (8002980 <HAL_RCC_OscConfig+0x4e8>)
 8002796:	f043 0304 	orr.w	r3, r3, #4
 800279a:	6713      	str	r3, [r2, #112]	; 0x70
 800279c:	4b78      	ldr	r3, [pc, #480]	; (8002980 <HAL_RCC_OscConfig+0x4e8>)
 800279e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a0:	4a77      	ldr	r2, [pc, #476]	; (8002980 <HAL_RCC_OscConfig+0x4e8>)
 80027a2:	f043 0301 	orr.w	r3, r3, #1
 80027a6:	6713      	str	r3, [r2, #112]	; 0x70
 80027a8:	e00b      	b.n	80027c2 <HAL_RCC_OscConfig+0x32a>
 80027aa:	4b75      	ldr	r3, [pc, #468]	; (8002980 <HAL_RCC_OscConfig+0x4e8>)
 80027ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ae:	4a74      	ldr	r2, [pc, #464]	; (8002980 <HAL_RCC_OscConfig+0x4e8>)
 80027b0:	f023 0301 	bic.w	r3, r3, #1
 80027b4:	6713      	str	r3, [r2, #112]	; 0x70
 80027b6:	4b72      	ldr	r3, [pc, #456]	; (8002980 <HAL_RCC_OscConfig+0x4e8>)
 80027b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ba:	4a71      	ldr	r2, [pc, #452]	; (8002980 <HAL_RCC_OscConfig+0x4e8>)
 80027bc:	f023 0304 	bic.w	r3, r3, #4
 80027c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d015      	beq.n	80027f6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027ca:	f7ff fb2f 	bl	8001e2c <HAL_GetTick>
 80027ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027d0:	e00a      	b.n	80027e8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027d2:	f7ff fb2b 	bl	8001e2c <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d901      	bls.n	80027e8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	e0c5      	b.n	8002974 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027e8:	4b65      	ldr	r3, [pc, #404]	; (8002980 <HAL_RCC_OscConfig+0x4e8>)
 80027ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ec:	f003 0302 	and.w	r3, r3, #2
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d0ee      	beq.n	80027d2 <HAL_RCC_OscConfig+0x33a>
 80027f4:	e014      	b.n	8002820 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027f6:	f7ff fb19 	bl	8001e2c <HAL_GetTick>
 80027fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027fc:	e00a      	b.n	8002814 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027fe:	f7ff fb15 	bl	8001e2c <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	f241 3288 	movw	r2, #5000	; 0x1388
 800280c:	4293      	cmp	r3, r2
 800280e:	d901      	bls.n	8002814 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e0af      	b.n	8002974 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002814:	4b5a      	ldr	r3, [pc, #360]	; (8002980 <HAL_RCC_OscConfig+0x4e8>)
 8002816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002818:	f003 0302 	and.w	r3, r3, #2
 800281c:	2b00      	cmp	r3, #0
 800281e:	d1ee      	bne.n	80027fe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002820:	7dfb      	ldrb	r3, [r7, #23]
 8002822:	2b01      	cmp	r3, #1
 8002824:	d105      	bne.n	8002832 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002826:	4b56      	ldr	r3, [pc, #344]	; (8002980 <HAL_RCC_OscConfig+0x4e8>)
 8002828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282a:	4a55      	ldr	r2, [pc, #340]	; (8002980 <HAL_RCC_OscConfig+0x4e8>)
 800282c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002830:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	699b      	ldr	r3, [r3, #24]
 8002836:	2b00      	cmp	r3, #0
 8002838:	f000 809b 	beq.w	8002972 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800283c:	4b50      	ldr	r3, [pc, #320]	; (8002980 <HAL_RCC_OscConfig+0x4e8>)
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	f003 030c 	and.w	r3, r3, #12
 8002844:	2b08      	cmp	r3, #8
 8002846:	d05c      	beq.n	8002902 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	699b      	ldr	r3, [r3, #24]
 800284c:	2b02      	cmp	r3, #2
 800284e:	d141      	bne.n	80028d4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002850:	4b4c      	ldr	r3, [pc, #304]	; (8002984 <HAL_RCC_OscConfig+0x4ec>)
 8002852:	2200      	movs	r2, #0
 8002854:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002856:	f7ff fae9 	bl	8001e2c <HAL_GetTick>
 800285a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800285c:	e008      	b.n	8002870 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800285e:	f7ff fae5 	bl	8001e2c <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	2b02      	cmp	r3, #2
 800286a:	d901      	bls.n	8002870 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	e081      	b.n	8002974 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002870:	4b43      	ldr	r3, [pc, #268]	; (8002980 <HAL_RCC_OscConfig+0x4e8>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d1f0      	bne.n	800285e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	69da      	ldr	r2, [r3, #28]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a1b      	ldr	r3, [r3, #32]
 8002884:	431a      	orrs	r2, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288a:	019b      	lsls	r3, r3, #6
 800288c:	431a      	orrs	r2, r3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002892:	085b      	lsrs	r3, r3, #1
 8002894:	3b01      	subs	r3, #1
 8002896:	041b      	lsls	r3, r3, #16
 8002898:	431a      	orrs	r2, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800289e:	061b      	lsls	r3, r3, #24
 80028a0:	4937      	ldr	r1, [pc, #220]	; (8002980 <HAL_RCC_OscConfig+0x4e8>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028a6:	4b37      	ldr	r3, [pc, #220]	; (8002984 <HAL_RCC_OscConfig+0x4ec>)
 80028a8:	2201      	movs	r2, #1
 80028aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ac:	f7ff fabe 	bl	8001e2c <HAL_GetTick>
 80028b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028b2:	e008      	b.n	80028c6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028b4:	f7ff faba 	bl	8001e2c <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d901      	bls.n	80028c6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e056      	b.n	8002974 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028c6:	4b2e      	ldr	r3, [pc, #184]	; (8002980 <HAL_RCC_OscConfig+0x4e8>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d0f0      	beq.n	80028b4 <HAL_RCC_OscConfig+0x41c>
 80028d2:	e04e      	b.n	8002972 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028d4:	4b2b      	ldr	r3, [pc, #172]	; (8002984 <HAL_RCC_OscConfig+0x4ec>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028da:	f7ff faa7 	bl	8001e2c <HAL_GetTick>
 80028de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028e0:	e008      	b.n	80028f4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028e2:	f7ff faa3 	bl	8001e2c <HAL_GetTick>
 80028e6:	4602      	mov	r2, r0
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d901      	bls.n	80028f4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80028f0:	2303      	movs	r3, #3
 80028f2:	e03f      	b.n	8002974 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028f4:	4b22      	ldr	r3, [pc, #136]	; (8002980 <HAL_RCC_OscConfig+0x4e8>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d1f0      	bne.n	80028e2 <HAL_RCC_OscConfig+0x44a>
 8002900:	e037      	b.n	8002972 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	699b      	ldr	r3, [r3, #24]
 8002906:	2b01      	cmp	r3, #1
 8002908:	d101      	bne.n	800290e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e032      	b.n	8002974 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800290e:	4b1c      	ldr	r3, [pc, #112]	; (8002980 <HAL_RCC_OscConfig+0x4e8>)
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	699b      	ldr	r3, [r3, #24]
 8002918:	2b01      	cmp	r3, #1
 800291a:	d028      	beq.n	800296e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002926:	429a      	cmp	r2, r3
 8002928:	d121      	bne.n	800296e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002934:	429a      	cmp	r2, r3
 8002936:	d11a      	bne.n	800296e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002938:	68fa      	ldr	r2, [r7, #12]
 800293a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800293e:	4013      	ands	r3, r2
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002944:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002946:	4293      	cmp	r3, r2
 8002948:	d111      	bne.n	800296e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002954:	085b      	lsrs	r3, r3, #1
 8002956:	3b01      	subs	r3, #1
 8002958:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800295a:	429a      	cmp	r2, r3
 800295c:	d107      	bne.n	800296e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002968:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800296a:	429a      	cmp	r2, r3
 800296c:	d001      	beq.n	8002972 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e000      	b.n	8002974 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002972:	2300      	movs	r3, #0
}
 8002974:	4618      	mov	r0, r3
 8002976:	3718      	adds	r7, #24
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	40007000 	.word	0x40007000
 8002980:	40023800 	.word	0x40023800
 8002984:	42470060 	.word	0x42470060

08002988 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d101      	bne.n	800299c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e0cc      	b.n	8002b36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800299c:	4b68      	ldr	r3, [pc, #416]	; (8002b40 <HAL_RCC_ClockConfig+0x1b8>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0307 	and.w	r3, r3, #7
 80029a4:	683a      	ldr	r2, [r7, #0]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d90c      	bls.n	80029c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029aa:	4b65      	ldr	r3, [pc, #404]	; (8002b40 <HAL_RCC_ClockConfig+0x1b8>)
 80029ac:	683a      	ldr	r2, [r7, #0]
 80029ae:	b2d2      	uxtb	r2, r2
 80029b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029b2:	4b63      	ldr	r3, [pc, #396]	; (8002b40 <HAL_RCC_ClockConfig+0x1b8>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0307 	and.w	r3, r3, #7
 80029ba:	683a      	ldr	r2, [r7, #0]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d001      	beq.n	80029c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e0b8      	b.n	8002b36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0302 	and.w	r3, r3, #2
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d020      	beq.n	8002a12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0304 	and.w	r3, r3, #4
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d005      	beq.n	80029e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029dc:	4b59      	ldr	r3, [pc, #356]	; (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	4a58      	ldr	r2, [pc, #352]	; (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 80029e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80029e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0308 	and.w	r3, r3, #8
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d005      	beq.n	8002a00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029f4:	4b53      	ldr	r3, [pc, #332]	; (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	4a52      	ldr	r2, [pc, #328]	; (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 80029fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80029fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a00:	4b50      	ldr	r3, [pc, #320]	; (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	494d      	ldr	r1, [pc, #308]	; (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0301 	and.w	r3, r3, #1
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d044      	beq.n	8002aa8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d107      	bne.n	8002a36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a26:	4b47      	ldr	r3, [pc, #284]	; (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d119      	bne.n	8002a66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e07f      	b.n	8002b36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d003      	beq.n	8002a46 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a42:	2b03      	cmp	r3, #3
 8002a44:	d107      	bne.n	8002a56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a46:	4b3f      	ldr	r3, [pc, #252]	; (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d109      	bne.n	8002a66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e06f      	b.n	8002b36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a56:	4b3b      	ldr	r3, [pc, #236]	; (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d101      	bne.n	8002a66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e067      	b.n	8002b36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a66:	4b37      	ldr	r3, [pc, #220]	; (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f023 0203 	bic.w	r2, r3, #3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	4934      	ldr	r1, [pc, #208]	; (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 8002a74:	4313      	orrs	r3, r2
 8002a76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a78:	f7ff f9d8 	bl	8001e2c <HAL_GetTick>
 8002a7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a7e:	e00a      	b.n	8002a96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a80:	f7ff f9d4 	bl	8001e2c <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d901      	bls.n	8002a96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e04f      	b.n	8002b36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a96:	4b2b      	ldr	r3, [pc, #172]	; (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f003 020c 	and.w	r2, r3, #12
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d1eb      	bne.n	8002a80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002aa8:	4b25      	ldr	r3, [pc, #148]	; (8002b40 <HAL_RCC_ClockConfig+0x1b8>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0307 	and.w	r3, r3, #7
 8002ab0:	683a      	ldr	r2, [r7, #0]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d20c      	bcs.n	8002ad0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ab6:	4b22      	ldr	r3, [pc, #136]	; (8002b40 <HAL_RCC_ClockConfig+0x1b8>)
 8002ab8:	683a      	ldr	r2, [r7, #0]
 8002aba:	b2d2      	uxtb	r2, r2
 8002abc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002abe:	4b20      	ldr	r3, [pc, #128]	; (8002b40 <HAL_RCC_ClockConfig+0x1b8>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0307 	and.w	r3, r3, #7
 8002ac6:	683a      	ldr	r2, [r7, #0]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d001      	beq.n	8002ad0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e032      	b.n	8002b36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0304 	and.w	r3, r3, #4
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d008      	beq.n	8002aee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002adc:	4b19      	ldr	r3, [pc, #100]	; (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	4916      	ldr	r1, [pc, #88]	; (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0308 	and.w	r3, r3, #8
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d009      	beq.n	8002b0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002afa:	4b12      	ldr	r3, [pc, #72]	; (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	00db      	lsls	r3, r3, #3
 8002b08:	490e      	ldr	r1, [pc, #56]	; (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b0e:	f000 f821 	bl	8002b54 <HAL_RCC_GetSysClockFreq>
 8002b12:	4602      	mov	r2, r0
 8002b14:	4b0b      	ldr	r3, [pc, #44]	; (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	091b      	lsrs	r3, r3, #4
 8002b1a:	f003 030f 	and.w	r3, r3, #15
 8002b1e:	490a      	ldr	r1, [pc, #40]	; (8002b48 <HAL_RCC_ClockConfig+0x1c0>)
 8002b20:	5ccb      	ldrb	r3, [r1, r3]
 8002b22:	fa22 f303 	lsr.w	r3, r2, r3
 8002b26:	4a09      	ldr	r2, [pc, #36]	; (8002b4c <HAL_RCC_ClockConfig+0x1c4>)
 8002b28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b2a:	4b09      	ldr	r3, [pc, #36]	; (8002b50 <HAL_RCC_ClockConfig+0x1c8>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7fe fbec 	bl	800130c <HAL_InitTick>

  return HAL_OK;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3710      	adds	r7, #16
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	40023c00 	.word	0x40023c00
 8002b44:	40023800 	.word	0x40023800
 8002b48:	0800906c 	.word	0x0800906c
 8002b4c:	20000010 	.word	0x20000010
 8002b50:	20000018 	.word	0x20000018

08002b54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b54:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002b58:	b084      	sub	sp, #16
 8002b5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	607b      	str	r3, [r7, #4]
 8002b60:	2300      	movs	r3, #0
 8002b62:	60fb      	str	r3, [r7, #12]
 8002b64:	2300      	movs	r3, #0
 8002b66:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b6c:	4b67      	ldr	r3, [pc, #412]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f003 030c 	and.w	r3, r3, #12
 8002b74:	2b08      	cmp	r3, #8
 8002b76:	d00d      	beq.n	8002b94 <HAL_RCC_GetSysClockFreq+0x40>
 8002b78:	2b08      	cmp	r3, #8
 8002b7a:	f200 80bd 	bhi.w	8002cf8 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d002      	beq.n	8002b88 <HAL_RCC_GetSysClockFreq+0x34>
 8002b82:	2b04      	cmp	r3, #4
 8002b84:	d003      	beq.n	8002b8e <HAL_RCC_GetSysClockFreq+0x3a>
 8002b86:	e0b7      	b.n	8002cf8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b88:	4b61      	ldr	r3, [pc, #388]	; (8002d10 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002b8a:	60bb      	str	r3, [r7, #8]
       break;
 8002b8c:	e0b7      	b.n	8002cfe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b8e:	4b61      	ldr	r3, [pc, #388]	; (8002d14 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002b90:	60bb      	str	r3, [r7, #8]
      break;
 8002b92:	e0b4      	b.n	8002cfe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b94:	4b5d      	ldr	r3, [pc, #372]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b9c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b9e:	4b5b      	ldr	r3, [pc, #364]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d04d      	beq.n	8002c46 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002baa:	4b58      	ldr	r3, [pc, #352]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	099b      	lsrs	r3, r3, #6
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	f04f 0300 	mov.w	r3, #0
 8002bb6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002bba:	f04f 0100 	mov.w	r1, #0
 8002bbe:	ea02 0800 	and.w	r8, r2, r0
 8002bc2:	ea03 0901 	and.w	r9, r3, r1
 8002bc6:	4640      	mov	r0, r8
 8002bc8:	4649      	mov	r1, r9
 8002bca:	f04f 0200 	mov.w	r2, #0
 8002bce:	f04f 0300 	mov.w	r3, #0
 8002bd2:	014b      	lsls	r3, r1, #5
 8002bd4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002bd8:	0142      	lsls	r2, r0, #5
 8002bda:	4610      	mov	r0, r2
 8002bdc:	4619      	mov	r1, r3
 8002bde:	ebb0 0008 	subs.w	r0, r0, r8
 8002be2:	eb61 0109 	sbc.w	r1, r1, r9
 8002be6:	f04f 0200 	mov.w	r2, #0
 8002bea:	f04f 0300 	mov.w	r3, #0
 8002bee:	018b      	lsls	r3, r1, #6
 8002bf0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002bf4:	0182      	lsls	r2, r0, #6
 8002bf6:	1a12      	subs	r2, r2, r0
 8002bf8:	eb63 0301 	sbc.w	r3, r3, r1
 8002bfc:	f04f 0000 	mov.w	r0, #0
 8002c00:	f04f 0100 	mov.w	r1, #0
 8002c04:	00d9      	lsls	r1, r3, #3
 8002c06:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c0a:	00d0      	lsls	r0, r2, #3
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	460b      	mov	r3, r1
 8002c10:	eb12 0208 	adds.w	r2, r2, r8
 8002c14:	eb43 0309 	adc.w	r3, r3, r9
 8002c18:	f04f 0000 	mov.w	r0, #0
 8002c1c:	f04f 0100 	mov.w	r1, #0
 8002c20:	0259      	lsls	r1, r3, #9
 8002c22:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002c26:	0250      	lsls	r0, r2, #9
 8002c28:	4602      	mov	r2, r0
 8002c2a:	460b      	mov	r3, r1
 8002c2c:	4610      	mov	r0, r2
 8002c2e:	4619      	mov	r1, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	461a      	mov	r2, r3
 8002c34:	f04f 0300 	mov.w	r3, #0
 8002c38:	f7fd fb32 	bl	80002a0 <__aeabi_uldivmod>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	460b      	mov	r3, r1
 8002c40:	4613      	mov	r3, r2
 8002c42:	60fb      	str	r3, [r7, #12]
 8002c44:	e04a      	b.n	8002cdc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c46:	4b31      	ldr	r3, [pc, #196]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	099b      	lsrs	r3, r3, #6
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	f04f 0300 	mov.w	r3, #0
 8002c52:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002c56:	f04f 0100 	mov.w	r1, #0
 8002c5a:	ea02 0400 	and.w	r4, r2, r0
 8002c5e:	ea03 0501 	and.w	r5, r3, r1
 8002c62:	4620      	mov	r0, r4
 8002c64:	4629      	mov	r1, r5
 8002c66:	f04f 0200 	mov.w	r2, #0
 8002c6a:	f04f 0300 	mov.w	r3, #0
 8002c6e:	014b      	lsls	r3, r1, #5
 8002c70:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002c74:	0142      	lsls	r2, r0, #5
 8002c76:	4610      	mov	r0, r2
 8002c78:	4619      	mov	r1, r3
 8002c7a:	1b00      	subs	r0, r0, r4
 8002c7c:	eb61 0105 	sbc.w	r1, r1, r5
 8002c80:	f04f 0200 	mov.w	r2, #0
 8002c84:	f04f 0300 	mov.w	r3, #0
 8002c88:	018b      	lsls	r3, r1, #6
 8002c8a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002c8e:	0182      	lsls	r2, r0, #6
 8002c90:	1a12      	subs	r2, r2, r0
 8002c92:	eb63 0301 	sbc.w	r3, r3, r1
 8002c96:	f04f 0000 	mov.w	r0, #0
 8002c9a:	f04f 0100 	mov.w	r1, #0
 8002c9e:	00d9      	lsls	r1, r3, #3
 8002ca0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ca4:	00d0      	lsls	r0, r2, #3
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	460b      	mov	r3, r1
 8002caa:	1912      	adds	r2, r2, r4
 8002cac:	eb45 0303 	adc.w	r3, r5, r3
 8002cb0:	f04f 0000 	mov.w	r0, #0
 8002cb4:	f04f 0100 	mov.w	r1, #0
 8002cb8:	0299      	lsls	r1, r3, #10
 8002cba:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002cbe:	0290      	lsls	r0, r2, #10
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	460b      	mov	r3, r1
 8002cc4:	4610      	mov	r0, r2
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	461a      	mov	r2, r3
 8002ccc:	f04f 0300 	mov.w	r3, #0
 8002cd0:	f7fd fae6 	bl	80002a0 <__aeabi_uldivmod>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	460b      	mov	r3, r1
 8002cd8:	4613      	mov	r3, r2
 8002cda:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002cdc:	4b0b      	ldr	r3, [pc, #44]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	0c1b      	lsrs	r3, r3, #16
 8002ce2:	f003 0303 	and.w	r3, r3, #3
 8002ce6:	3301      	adds	r3, #1
 8002ce8:	005b      	lsls	r3, r3, #1
 8002cea:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002cec:	68fa      	ldr	r2, [r7, #12]
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cf4:	60bb      	str	r3, [r7, #8]
      break;
 8002cf6:	e002      	b.n	8002cfe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cf8:	4b05      	ldr	r3, [pc, #20]	; (8002d10 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002cfa:	60bb      	str	r3, [r7, #8]
      break;
 8002cfc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cfe:	68bb      	ldr	r3, [r7, #8]
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3710      	adds	r7, #16
 8002d04:	46bd      	mov	sp, r7
 8002d06:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002d0a:	bf00      	nop
 8002d0c:	40023800 	.word	0x40023800
 8002d10:	00f42400 	.word	0x00f42400
 8002d14:	007a1200 	.word	0x007a1200

08002d18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d1c:	4b03      	ldr	r3, [pc, #12]	; (8002d2c <HAL_RCC_GetHCLKFreq+0x14>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	20000010 	.word	0x20000010

08002d30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d34:	f7ff fff0 	bl	8002d18 <HAL_RCC_GetHCLKFreq>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	4b05      	ldr	r3, [pc, #20]	; (8002d50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	0a9b      	lsrs	r3, r3, #10
 8002d40:	f003 0307 	and.w	r3, r3, #7
 8002d44:	4903      	ldr	r1, [pc, #12]	; (8002d54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d46:	5ccb      	ldrb	r3, [r1, r3]
 8002d48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	40023800 	.word	0x40023800
 8002d54:	0800907c 	.word	0x0800907c

08002d58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d5c:	f7ff ffdc 	bl	8002d18 <HAL_RCC_GetHCLKFreq>
 8002d60:	4602      	mov	r2, r0
 8002d62:	4b05      	ldr	r3, [pc, #20]	; (8002d78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	0b5b      	lsrs	r3, r3, #13
 8002d68:	f003 0307 	and.w	r3, r3, #7
 8002d6c:	4903      	ldr	r1, [pc, #12]	; (8002d7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d6e:	5ccb      	ldrb	r3, [r1, r3]
 8002d70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	40023800 	.word	0x40023800
 8002d7c:	0800907c 	.word	0x0800907c

08002d80 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	220f      	movs	r2, #15
 8002d8e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002d90:	4b12      	ldr	r3, [pc, #72]	; (8002ddc <HAL_RCC_GetClockConfig+0x5c>)
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f003 0203 	and.w	r2, r3, #3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002d9c:	4b0f      	ldr	r3, [pc, #60]	; (8002ddc <HAL_RCC_GetClockConfig+0x5c>)
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002da8:	4b0c      	ldr	r3, [pc, #48]	; (8002ddc <HAL_RCC_GetClockConfig+0x5c>)
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002db4:	4b09      	ldr	r3, [pc, #36]	; (8002ddc <HAL_RCC_GetClockConfig+0x5c>)
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	08db      	lsrs	r3, r3, #3
 8002dba:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002dc2:	4b07      	ldr	r3, [pc, #28]	; (8002de0 <HAL_RCC_GetClockConfig+0x60>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0207 	and.w	r2, r3, #7
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	601a      	str	r2, [r3, #0]
}
 8002dce:	bf00      	nop
 8002dd0:	370c      	adds	r7, #12
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop
 8002ddc:	40023800 	.word	0x40023800
 8002de0:	40023c00 	.word	0x40023c00

08002de4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b086      	sub	sp, #24
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002dec:	2300      	movs	r3, #0
 8002dee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002df0:	2300      	movs	r3, #0
 8002df2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0301 	and.w	r3, r3, #1
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d105      	bne.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d035      	beq.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002e0c:	4b62      	ldr	r3, [pc, #392]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002e12:	f7ff f80b 	bl	8001e2c <HAL_GetTick>
 8002e16:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e18:	e008      	b.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002e1a:	f7ff f807 	bl	8001e2c <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d901      	bls.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e0b0      	b.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e2c:	4b5b      	ldr	r3, [pc, #364]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d1f0      	bne.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	019a      	lsls	r2, r3, #6
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	071b      	lsls	r3, r3, #28
 8002e44:	4955      	ldr	r1, [pc, #340]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002e46:	4313      	orrs	r3, r2
 8002e48:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002e4c:	4b52      	ldr	r3, [pc, #328]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002e4e:	2201      	movs	r2, #1
 8002e50:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002e52:	f7fe ffeb 	bl	8001e2c <HAL_GetTick>
 8002e56:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e58:	e008      	b.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002e5a:	f7fe ffe7 	bl	8001e2c <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d901      	bls.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e090      	b.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e6c:	4b4b      	ldr	r3, [pc, #300]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d0f0      	beq.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0302 	and.w	r3, r3, #2
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	f000 8083 	beq.w	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e86:	2300      	movs	r3, #0
 8002e88:	60fb      	str	r3, [r7, #12]
 8002e8a:	4b44      	ldr	r3, [pc, #272]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8e:	4a43      	ldr	r2, [pc, #268]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002e90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e94:	6413      	str	r3, [r2, #64]	; 0x40
 8002e96:	4b41      	ldr	r3, [pc, #260]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e9e:	60fb      	str	r3, [r7, #12]
 8002ea0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002ea2:	4b3f      	ldr	r3, [pc, #252]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a3e      	ldr	r2, [pc, #248]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002ea8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eac:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002eae:	f7fe ffbd 	bl	8001e2c <HAL_GetTick>
 8002eb2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002eb4:	e008      	b.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002eb6:	f7fe ffb9 	bl	8001e2c <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d901      	bls.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	e062      	b.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002ec8:	4b35      	ldr	r3, [pc, #212]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d0f0      	beq.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ed4:	4b31      	ldr	r3, [pc, #196]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002edc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d02f      	beq.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eec:	693a      	ldr	r2, [r7, #16]
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d028      	beq.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ef2:	4b2a      	ldr	r3, [pc, #168]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002efa:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002efc:	4b29      	ldr	r3, [pc, #164]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002efe:	2201      	movs	r2, #1
 8002f00:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f02:	4b28      	ldr	r3, [pc, #160]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002f08:	4a24      	ldr	r2, [pc, #144]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002f0e:	4b23      	ldr	r3, [pc, #140]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d114      	bne.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002f1a:	f7fe ff87 	bl	8001e2c <HAL_GetTick>
 8002f1e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f20:	e00a      	b.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f22:	f7fe ff83 	bl	8001e2c <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d901      	bls.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e02a      	b.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f38:	4b18      	ldr	r3, [pc, #96]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f3c:	f003 0302 	and.w	r3, r3, #2
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d0ee      	beq.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f50:	d10d      	bne.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002f52:	4b12      	ldr	r3, [pc, #72]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002f62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f66:	490d      	ldr	r1, [pc, #52]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	608b      	str	r3, [r1, #8]
 8002f6c:	e005      	b.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002f6e:	4b0b      	ldr	r3, [pc, #44]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	4a0a      	ldr	r2, [pc, #40]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f74:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002f78:	6093      	str	r3, [r2, #8]
 8002f7a:	4b08      	ldr	r3, [pc, #32]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f7c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f86:	4905      	ldr	r1, [pc, #20]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3718      	adds	r7, #24
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	42470068 	.word	0x42470068
 8002f9c:	40023800 	.word	0x40023800
 8002fa0:	40007000 	.word	0x40007000
 8002fa4:	42470e40 	.word	0x42470e40

08002fa8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d101      	bne.n	8002fba <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e083      	b.n	80030c2 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	7f5b      	ldrb	r3, [r3, #29]
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d105      	bne.n	8002fd0 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f7fe f938 	bl	8001240 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2202      	movs	r2, #2
 8002fd4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	22ca      	movs	r2, #202	; 0xca
 8002fdc:	625a      	str	r2, [r3, #36]	; 0x24
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	2253      	movs	r2, #83	; 0x53
 8002fe4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f000 faa8 	bl	800353c <RTC_EnterInitMode>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d008      	beq.n	8003004 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	22ff      	movs	r2, #255	; 0xff
 8002ff8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2204      	movs	r2, #4
 8002ffe:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e05e      	b.n	80030c2 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	6812      	ldr	r2, [r2, #0]
 800300e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003012:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003016:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	6899      	ldr	r1, [r3, #8]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685a      	ldr	r2, [r3, #4]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	431a      	orrs	r2, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	695b      	ldr	r3, [r3, #20]
 800302c:	431a      	orrs	r2, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	430a      	orrs	r2, r1
 8003034:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	68d2      	ldr	r2, [r2, #12]
 800303e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	6919      	ldr	r1, [r3, #16]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	041a      	lsls	r2, r3, #16
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	430a      	orrs	r2, r1
 8003052:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	68da      	ldr	r2, [r3, #12]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003062:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f003 0320 	and.w	r3, r3, #32
 800306e:	2b00      	cmp	r3, #0
 8003070:	d10e      	bne.n	8003090 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 fa3a 	bl	80034ec <HAL_RTC_WaitForSynchro>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d008      	beq.n	8003090 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	22ff      	movs	r2, #255	; 0xff
 8003084:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2204      	movs	r2, #4
 800308a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e018      	b.n	80030c2 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800309e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	699a      	ldr	r2, [r3, #24]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	430a      	orrs	r2, r1
 80030b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	22ff      	movs	r2, #255	; 0xff
 80030b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2201      	movs	r2, #1
 80030be:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80030c0:	2300      	movs	r3, #0
  }
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3708      	adds	r7, #8
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}

080030ca <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80030ca:	b590      	push	{r4, r7, lr}
 80030cc:	b087      	sub	sp, #28
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	60f8      	str	r0, [r7, #12]
 80030d2:	60b9      	str	r1, [r7, #8]
 80030d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80030d6:	2300      	movs	r3, #0
 80030d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	7f1b      	ldrb	r3, [r3, #28]
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d101      	bne.n	80030e6 <HAL_RTC_SetTime+0x1c>
 80030e2:	2302      	movs	r3, #2
 80030e4:	e0aa      	b.n	800323c <HAL_RTC_SetTime+0x172>
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2201      	movs	r2, #1
 80030ea:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2202      	movs	r2, #2
 80030f0:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d126      	bne.n	8003146 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003102:	2b00      	cmp	r3, #0
 8003104:	d102      	bne.n	800310c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	2200      	movs	r2, #0
 800310a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	4618      	mov	r0, r3
 8003112:	f000 fa3f 	bl	8003594 <RTC_ByteToBcd2>
 8003116:	4603      	mov	r3, r0
 8003118:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	785b      	ldrb	r3, [r3, #1]
 800311e:	4618      	mov	r0, r3
 8003120:	f000 fa38 	bl	8003594 <RTC_ByteToBcd2>
 8003124:	4603      	mov	r3, r0
 8003126:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003128:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	789b      	ldrb	r3, [r3, #2]
 800312e:	4618      	mov	r0, r3
 8003130:	f000 fa30 	bl	8003594 <RTC_ByteToBcd2>
 8003134:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8003136:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	78db      	ldrb	r3, [r3, #3]
 800313e:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003140:	4313      	orrs	r3, r2
 8003142:	617b      	str	r3, [r7, #20]
 8003144:	e018      	b.n	8003178 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003150:	2b00      	cmp	r3, #0
 8003152:	d102      	bne.n	800315a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	2200      	movs	r2, #0
 8003158:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	785b      	ldrb	r3, [r3, #1]
 8003164:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003166:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8003168:	68ba      	ldr	r2, [r7, #8]
 800316a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800316c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	78db      	ldrb	r3, [r3, #3]
 8003172:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003174:	4313      	orrs	r3, r2
 8003176:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	22ca      	movs	r2, #202	; 0xca
 800317e:	625a      	str	r2, [r3, #36]	; 0x24
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2253      	movs	r2, #83	; 0x53
 8003186:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003188:	68f8      	ldr	r0, [r7, #12]
 800318a:	f000 f9d7 	bl	800353c <RTC_EnterInitMode>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d00b      	beq.n	80031ac <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	22ff      	movs	r2, #255	; 0xff
 800319a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2204      	movs	r2, #4
 80031a0:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2200      	movs	r2, #0
 80031a6:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e047      	b.n	800323c <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80031b6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80031ba:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	689a      	ldr	r2, [r3, #8]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80031ca:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	6899      	ldr	r1, [r3, #8]
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	68da      	ldr	r2, [r3, #12]
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	431a      	orrs	r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	430a      	orrs	r2, r1
 80031e2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	68da      	ldr	r2, [r3, #12]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031f2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f003 0320 	and.w	r3, r3, #32
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d111      	bne.n	8003226 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003202:	68f8      	ldr	r0, [r7, #12]
 8003204:	f000 f972 	bl	80034ec <HAL_RTC_WaitForSynchro>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d00b      	beq.n	8003226 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	22ff      	movs	r2, #255	; 0xff
 8003214:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2204      	movs	r2, #4
 800321a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2200      	movs	r2, #0
 8003220:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e00a      	b.n	800323c <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	22ff      	movs	r2, #255	; 0xff
 800322c:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2201      	movs	r2, #1
 8003232:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2200      	movs	r2, #0
 8003238:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800323a:	2300      	movs	r3, #0
  }
}
 800323c:	4618      	mov	r0, r3
 800323e:	371c      	adds	r7, #28
 8003240:	46bd      	mov	sp, r7
 8003242:	bd90      	pop	{r4, r7, pc}

08003244 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b086      	sub	sp, #24
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003250:	2300      	movs	r3, #0
 8003252:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	691b      	ldr	r3, [r3, #16]
 8003264:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003276:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800327a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	0c1b      	lsrs	r3, r3, #16
 8003280:	b2db      	uxtb	r3, r3
 8003282:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003286:	b2da      	uxtb	r2, r3
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	0a1b      	lsrs	r3, r3, #8
 8003290:	b2db      	uxtb	r3, r3
 8003292:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003296:	b2da      	uxtb	r2, r3
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032a4:	b2da      	uxtb	r2, r3
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	0c1b      	lsrs	r3, r3, #16
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032b4:	b2da      	uxtb	r2, r3
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d11a      	bne.n	80032f6 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f000 f983 	bl	80035d0 <RTC_Bcd2ToByte>
 80032ca:	4603      	mov	r3, r0
 80032cc:	461a      	mov	r2, r3
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	785b      	ldrb	r3, [r3, #1]
 80032d6:	4618      	mov	r0, r3
 80032d8:	f000 f97a 	bl	80035d0 <RTC_Bcd2ToByte>
 80032dc:	4603      	mov	r3, r0
 80032de:	461a      	mov	r2, r3
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	789b      	ldrb	r3, [r3, #2]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f000 f971 	bl	80035d0 <RTC_Bcd2ToByte>
 80032ee:	4603      	mov	r3, r0
 80032f0:	461a      	mov	r2, r3
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80032f6:	2300      	movs	r3, #0
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3718      	adds	r7, #24
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}

08003300 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003300:	b590      	push	{r4, r7, lr}
 8003302:	b087      	sub	sp, #28
 8003304:	af00      	add	r7, sp, #0
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	60b9      	str	r1, [r7, #8]
 800330a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800330c:	2300      	movs	r3, #0
 800330e:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	7f1b      	ldrb	r3, [r3, #28]
 8003314:	2b01      	cmp	r3, #1
 8003316:	d101      	bne.n	800331c <HAL_RTC_SetDate+0x1c>
 8003318:	2302      	movs	r3, #2
 800331a:	e094      	b.n	8003446 <HAL_RTC_SetDate+0x146>
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2201      	movs	r2, #1
 8003320:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2202      	movs	r2, #2
 8003326:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d10e      	bne.n	800334c <HAL_RTC_SetDate+0x4c>
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	785b      	ldrb	r3, [r3, #1]
 8003332:	f003 0310 	and.w	r3, r3, #16
 8003336:	2b00      	cmp	r3, #0
 8003338:	d008      	beq.n	800334c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	785b      	ldrb	r3, [r3, #1]
 800333e:	f023 0310 	bic.w	r3, r3, #16
 8003342:	b2db      	uxtb	r3, r3
 8003344:	330a      	adds	r3, #10
 8003346:	b2da      	uxtb	r2, r3
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d11c      	bne.n	800338c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	78db      	ldrb	r3, [r3, #3]
 8003356:	4618      	mov	r0, r3
 8003358:	f000 f91c 	bl	8003594 <RTC_ByteToBcd2>
 800335c:	4603      	mov	r3, r0
 800335e:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	785b      	ldrb	r3, [r3, #1]
 8003364:	4618      	mov	r0, r3
 8003366:	f000 f915 	bl	8003594 <RTC_ByteToBcd2>
 800336a:	4603      	mov	r3, r0
 800336c:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800336e:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	789b      	ldrb	r3, [r3, #2]
 8003374:	4618      	mov	r0, r3
 8003376:	f000 f90d 	bl	8003594 <RTC_ByteToBcd2>
 800337a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800337c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003386:	4313      	orrs	r3, r2
 8003388:	617b      	str	r3, [r7, #20]
 800338a:	e00e      	b.n	80033aa <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	78db      	ldrb	r3, [r3, #3]
 8003390:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	785b      	ldrb	r3, [r3, #1]
 8003396:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003398:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800339a:	68ba      	ldr	r2, [r7, #8]
 800339c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800339e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80033a6:	4313      	orrs	r3, r2
 80033a8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	22ca      	movs	r2, #202	; 0xca
 80033b0:	625a      	str	r2, [r3, #36]	; 0x24
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	2253      	movs	r2, #83	; 0x53
 80033b8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80033ba:	68f8      	ldr	r0, [r7, #12]
 80033bc:	f000 f8be 	bl	800353c <RTC_EnterInitMode>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d00b      	beq.n	80033de <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	22ff      	movs	r2, #255	; 0xff
 80033cc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2204      	movs	r2, #4
 80033d2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2200      	movs	r2, #0
 80033d8:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e033      	b.n	8003446 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80033e8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80033ec:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	68da      	ldr	r2, [r3, #12]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033fc:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	f003 0320 	and.w	r3, r3, #32
 8003408:	2b00      	cmp	r3, #0
 800340a:	d111      	bne.n	8003430 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800340c:	68f8      	ldr	r0, [r7, #12]
 800340e:	f000 f86d 	bl	80034ec <HAL_RTC_WaitForSynchro>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d00b      	beq.n	8003430 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	22ff      	movs	r2, #255	; 0xff
 800341e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2204      	movs	r2, #4
 8003424:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2200      	movs	r2, #0
 800342a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e00a      	b.n	8003446 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	22ff      	movs	r2, #255	; 0xff
 8003436:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2201      	movs	r2, #1
 800343c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2200      	movs	r2, #0
 8003442:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8003444:	2300      	movs	r3, #0
  }
}
 8003446:	4618      	mov	r0, r3
 8003448:	371c      	adds	r7, #28
 800344a:	46bd      	mov	sp, r7
 800344c:	bd90      	pop	{r4, r7, pc}

0800344e <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800344e:	b580      	push	{r7, lr}
 8003450:	b086      	sub	sp, #24
 8003452:	af00      	add	r7, sp, #0
 8003454:	60f8      	str	r0, [r7, #12]
 8003456:	60b9      	str	r1, [r7, #8]
 8003458:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800345a:	2300      	movs	r3, #0
 800345c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003468:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800346c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	0c1b      	lsrs	r3, r3, #16
 8003472:	b2da      	uxtb	r2, r3
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	0a1b      	lsrs	r3, r3, #8
 800347c:	b2db      	uxtb	r3, r3
 800347e:	f003 031f 	and.w	r3, r3, #31
 8003482:	b2da      	uxtb	r2, r3
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	b2db      	uxtb	r3, r3
 800348c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003490:	b2da      	uxtb	r2, r3
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	0b5b      	lsrs	r3, r3, #13
 800349a:	b2db      	uxtb	r3, r3
 800349c:	f003 0307 	and.w	r3, r3, #7
 80034a0:	b2da      	uxtb	r2, r3
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d11a      	bne.n	80034e2 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	78db      	ldrb	r3, [r3, #3]
 80034b0:	4618      	mov	r0, r3
 80034b2:	f000 f88d 	bl	80035d0 <RTC_Bcd2ToByte>
 80034b6:	4603      	mov	r3, r0
 80034b8:	461a      	mov	r2, r3
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	785b      	ldrb	r3, [r3, #1]
 80034c2:	4618      	mov	r0, r3
 80034c4:	f000 f884 	bl	80035d0 <RTC_Bcd2ToByte>
 80034c8:	4603      	mov	r3, r0
 80034ca:	461a      	mov	r2, r3
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	789b      	ldrb	r3, [r3, #2]
 80034d4:	4618      	mov	r0, r3
 80034d6:	f000 f87b 	bl	80035d0 <RTC_Bcd2ToByte>
 80034da:	4603      	mov	r3, r0
 80034dc:	461a      	mov	r2, r3
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80034e2:	2300      	movs	r3, #0
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3718      	adds	r7, #24
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80034f4:	2300      	movs	r3, #0
 80034f6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68da      	ldr	r2, [r3, #12]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003506:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003508:	f7fe fc90 	bl	8001e2c <HAL_GetTick>
 800350c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800350e:	e009      	b.n	8003524 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003510:	f7fe fc8c 	bl	8001e2c <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800351e:	d901      	bls.n	8003524 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e007      	b.n	8003534 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	f003 0320 	and.w	r3, r3, #32
 800352e:	2b00      	cmp	r3, #0
 8003530:	d0ee      	beq.n	8003510 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003532:	2300      	movs	r3, #0
}
 8003534:	4618      	mov	r0, r3
 8003536:	3710      	adds	r7, #16
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}

0800353c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003544:	2300      	movs	r3, #0
 8003546:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003552:	2b00      	cmp	r3, #0
 8003554:	d119      	bne.n	800358a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f04f 32ff 	mov.w	r2, #4294967295
 800355e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003560:	f7fe fc64 	bl	8001e2c <HAL_GetTick>
 8003564:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003566:	e009      	b.n	800357c <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003568:	f7fe fc60 	bl	8001e2c <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003576:	d901      	bls.n	800357c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e007      	b.n	800358c <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003586:	2b00      	cmp	r3, #0
 8003588:	d0ee      	beq.n	8003568 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800358a:	2300      	movs	r3, #0
}
 800358c:	4618      	mov	r0, r3
 800358e:	3710      	adds	r7, #16
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003594:	b480      	push	{r7}
 8003596:	b085      	sub	sp, #20
 8003598:	af00      	add	r7, sp, #0
 800359a:	4603      	mov	r3, r0
 800359c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800359e:	2300      	movs	r3, #0
 80035a0:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 80035a2:	e005      	b.n	80035b0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	3301      	adds	r3, #1
 80035a8:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80035aa:	79fb      	ldrb	r3, [r7, #7]
 80035ac:	3b0a      	subs	r3, #10
 80035ae:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 80035b0:	79fb      	ldrb	r3, [r7, #7]
 80035b2:	2b09      	cmp	r3, #9
 80035b4:	d8f6      	bhi.n	80035a4 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	011b      	lsls	r3, r3, #4
 80035bc:	b2da      	uxtb	r2, r3
 80035be:	79fb      	ldrb	r3, [r7, #7]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	b2db      	uxtb	r3, r3
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3714      	adds	r7, #20
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b085      	sub	sp, #20
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	4603      	mov	r3, r0
 80035d8:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80035da:	2300      	movs	r3, #0
 80035dc:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80035de:	79fb      	ldrb	r3, [r7, #7]
 80035e0:	091b      	lsrs	r3, r3, #4
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	461a      	mov	r2, r3
 80035e6:	4613      	mov	r3, r2
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	4413      	add	r3, r2
 80035ec:	005b      	lsls	r3, r3, #1
 80035ee:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80035f0:	79fb      	ldrb	r3, [r7, #7]
 80035f2:	f003 030f 	and.w	r3, r3, #15
 80035f6:	b2da      	uxtb	r2, r3
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	4413      	add	r3, r2
 80035fe:	b2db      	uxtb	r3, r3
}
 8003600:	4618      	mov	r0, r3
 8003602:	3714      	adds	r7, #20
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b082      	sub	sp, #8
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d101      	bne.n	800361e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e041      	b.n	80036a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003624:	b2db      	uxtb	r3, r3
 8003626:	2b00      	cmp	r3, #0
 8003628:	d106      	bne.n	8003638 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 f839 	bl	80036aa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2202      	movs	r2, #2
 800363c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	3304      	adds	r3, #4
 8003648:	4619      	mov	r1, r3
 800364a:	4610      	mov	r0, r2
 800364c:	f000 f9d8 	bl	8003a00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036a0:	2300      	movs	r3, #0
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3708      	adds	r7, #8
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}

080036aa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80036aa:	b480      	push	{r7}
 80036ac:	b083      	sub	sp, #12
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80036b2:	bf00      	nop
 80036b4:	370c      	adds	r7, #12
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
	...

080036c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b085      	sub	sp, #20
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d001      	beq.n	80036d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e04e      	b.n	8003776 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2202      	movs	r2, #2
 80036dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	68da      	ldr	r2, [r3, #12]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f042 0201 	orr.w	r2, r2, #1
 80036ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a23      	ldr	r2, [pc, #140]	; (8003784 <HAL_TIM_Base_Start_IT+0xc4>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d022      	beq.n	8003740 <HAL_TIM_Base_Start_IT+0x80>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003702:	d01d      	beq.n	8003740 <HAL_TIM_Base_Start_IT+0x80>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a1f      	ldr	r2, [pc, #124]	; (8003788 <HAL_TIM_Base_Start_IT+0xc8>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d018      	beq.n	8003740 <HAL_TIM_Base_Start_IT+0x80>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a1e      	ldr	r2, [pc, #120]	; (800378c <HAL_TIM_Base_Start_IT+0xcc>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d013      	beq.n	8003740 <HAL_TIM_Base_Start_IT+0x80>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a1c      	ldr	r2, [pc, #112]	; (8003790 <HAL_TIM_Base_Start_IT+0xd0>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d00e      	beq.n	8003740 <HAL_TIM_Base_Start_IT+0x80>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a1b      	ldr	r2, [pc, #108]	; (8003794 <HAL_TIM_Base_Start_IT+0xd4>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d009      	beq.n	8003740 <HAL_TIM_Base_Start_IT+0x80>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a19      	ldr	r2, [pc, #100]	; (8003798 <HAL_TIM_Base_Start_IT+0xd8>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d004      	beq.n	8003740 <HAL_TIM_Base_Start_IT+0x80>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a18      	ldr	r2, [pc, #96]	; (800379c <HAL_TIM_Base_Start_IT+0xdc>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d111      	bne.n	8003764 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f003 0307 	and.w	r3, r3, #7
 800374a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2b06      	cmp	r3, #6
 8003750:	d010      	beq.n	8003774 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f042 0201 	orr.w	r2, r2, #1
 8003760:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003762:	e007      	b.n	8003774 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f042 0201 	orr.w	r2, r2, #1
 8003772:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003774:	2300      	movs	r3, #0
}
 8003776:	4618      	mov	r0, r3
 8003778:	3714      	adds	r7, #20
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	40010000 	.word	0x40010000
 8003788:	40000400 	.word	0x40000400
 800378c:	40000800 	.word	0x40000800
 8003790:	40000c00 	.word	0x40000c00
 8003794:	40010400 	.word	0x40010400
 8003798:	40014000 	.word	0x40014000
 800379c:	40001800 	.word	0x40001800

080037a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	691b      	ldr	r3, [r3, #16]
 80037ae:	f003 0302 	and.w	r3, r3, #2
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d122      	bne.n	80037fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	f003 0302 	and.w	r3, r3, #2
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	d11b      	bne.n	80037fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f06f 0202 	mvn.w	r2, #2
 80037cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2201      	movs	r2, #1
 80037d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	699b      	ldr	r3, [r3, #24]
 80037da:	f003 0303 	and.w	r3, r3, #3
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d003      	beq.n	80037ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f000 f8ee 	bl	80039c4 <HAL_TIM_IC_CaptureCallback>
 80037e8:	e005      	b.n	80037f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f000 f8e0 	bl	80039b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f000 f8f1 	bl	80039d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	f003 0304 	and.w	r3, r3, #4
 8003806:	2b04      	cmp	r3, #4
 8003808:	d122      	bne.n	8003850 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	f003 0304 	and.w	r3, r3, #4
 8003814:	2b04      	cmp	r3, #4
 8003816:	d11b      	bne.n	8003850 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f06f 0204 	mvn.w	r2, #4
 8003820:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2202      	movs	r2, #2
 8003826:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	699b      	ldr	r3, [r3, #24]
 800382e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003832:	2b00      	cmp	r3, #0
 8003834:	d003      	beq.n	800383e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 f8c4 	bl	80039c4 <HAL_TIM_IC_CaptureCallback>
 800383c:	e005      	b.n	800384a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 f8b6 	bl	80039b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f000 f8c7 	bl	80039d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	691b      	ldr	r3, [r3, #16]
 8003856:	f003 0308 	and.w	r3, r3, #8
 800385a:	2b08      	cmp	r3, #8
 800385c:	d122      	bne.n	80038a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	f003 0308 	and.w	r3, r3, #8
 8003868:	2b08      	cmp	r3, #8
 800386a:	d11b      	bne.n	80038a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f06f 0208 	mvn.w	r2, #8
 8003874:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2204      	movs	r2, #4
 800387a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	69db      	ldr	r3, [r3, #28]
 8003882:	f003 0303 	and.w	r3, r3, #3
 8003886:	2b00      	cmp	r3, #0
 8003888:	d003      	beq.n	8003892 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 f89a 	bl	80039c4 <HAL_TIM_IC_CaptureCallback>
 8003890:	e005      	b.n	800389e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 f88c 	bl	80039b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f000 f89d 	bl	80039d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	f003 0310 	and.w	r3, r3, #16
 80038ae:	2b10      	cmp	r3, #16
 80038b0:	d122      	bne.n	80038f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	f003 0310 	and.w	r3, r3, #16
 80038bc:	2b10      	cmp	r3, #16
 80038be:	d11b      	bne.n	80038f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f06f 0210 	mvn.w	r2, #16
 80038c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2208      	movs	r2, #8
 80038ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	69db      	ldr	r3, [r3, #28]
 80038d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d003      	beq.n	80038e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 f870 	bl	80039c4 <HAL_TIM_IC_CaptureCallback>
 80038e4:	e005      	b.n	80038f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 f862 	bl	80039b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f000 f873 	bl	80039d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	691b      	ldr	r3, [r3, #16]
 80038fe:	f003 0301 	and.w	r3, r3, #1
 8003902:	2b01      	cmp	r3, #1
 8003904:	d10e      	bne.n	8003924 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	f003 0301 	and.w	r3, r3, #1
 8003910:	2b01      	cmp	r3, #1
 8003912:	d107      	bne.n	8003924 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f06f 0201 	mvn.w	r2, #1
 800391c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f7fd fb40 	bl	8000fa4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800392e:	2b80      	cmp	r3, #128	; 0x80
 8003930:	d10e      	bne.n	8003950 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800393c:	2b80      	cmp	r3, #128	; 0x80
 800393e:	d107      	bne.n	8003950 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003948:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f000 f902 	bl	8003b54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	691b      	ldr	r3, [r3, #16]
 8003956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800395a:	2b40      	cmp	r3, #64	; 0x40
 800395c:	d10e      	bne.n	800397c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003968:	2b40      	cmp	r3, #64	; 0x40
 800396a:	d107      	bne.n	800397c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003974:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f000 f838 	bl	80039ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	f003 0320 	and.w	r3, r3, #32
 8003986:	2b20      	cmp	r3, #32
 8003988:	d10e      	bne.n	80039a8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	f003 0320 	and.w	r3, r3, #32
 8003994:	2b20      	cmp	r3, #32
 8003996:	d107      	bne.n	80039a8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f06f 0220 	mvn.w	r2, #32
 80039a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f000 f8cc 	bl	8003b40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039a8:	bf00      	nop
 80039aa:	3708      	adds	r7, #8
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039b8:	bf00      	nop
 80039ba:	370c      	adds	r7, #12
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr

080039c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80039cc:	bf00      	nop
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr

080039d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80039e0:	bf00      	nop
 80039e2:	370c      	adds	r7, #12
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80039f4:	bf00      	nop
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b085      	sub	sp, #20
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4a40      	ldr	r2, [pc, #256]	; (8003b14 <TIM_Base_SetConfig+0x114>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d013      	beq.n	8003a40 <TIM_Base_SetConfig+0x40>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a1e:	d00f      	beq.n	8003a40 <TIM_Base_SetConfig+0x40>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4a3d      	ldr	r2, [pc, #244]	; (8003b18 <TIM_Base_SetConfig+0x118>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d00b      	beq.n	8003a40 <TIM_Base_SetConfig+0x40>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4a3c      	ldr	r2, [pc, #240]	; (8003b1c <TIM_Base_SetConfig+0x11c>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d007      	beq.n	8003a40 <TIM_Base_SetConfig+0x40>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	4a3b      	ldr	r2, [pc, #236]	; (8003b20 <TIM_Base_SetConfig+0x120>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d003      	beq.n	8003a40 <TIM_Base_SetConfig+0x40>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4a3a      	ldr	r2, [pc, #232]	; (8003b24 <TIM_Base_SetConfig+0x124>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d108      	bne.n	8003a52 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	68fa      	ldr	r2, [r7, #12]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a2f      	ldr	r2, [pc, #188]	; (8003b14 <TIM_Base_SetConfig+0x114>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d02b      	beq.n	8003ab2 <TIM_Base_SetConfig+0xb2>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a60:	d027      	beq.n	8003ab2 <TIM_Base_SetConfig+0xb2>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a2c      	ldr	r2, [pc, #176]	; (8003b18 <TIM_Base_SetConfig+0x118>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d023      	beq.n	8003ab2 <TIM_Base_SetConfig+0xb2>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a2b      	ldr	r2, [pc, #172]	; (8003b1c <TIM_Base_SetConfig+0x11c>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d01f      	beq.n	8003ab2 <TIM_Base_SetConfig+0xb2>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a2a      	ldr	r2, [pc, #168]	; (8003b20 <TIM_Base_SetConfig+0x120>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d01b      	beq.n	8003ab2 <TIM_Base_SetConfig+0xb2>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a29      	ldr	r2, [pc, #164]	; (8003b24 <TIM_Base_SetConfig+0x124>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d017      	beq.n	8003ab2 <TIM_Base_SetConfig+0xb2>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a28      	ldr	r2, [pc, #160]	; (8003b28 <TIM_Base_SetConfig+0x128>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d013      	beq.n	8003ab2 <TIM_Base_SetConfig+0xb2>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a27      	ldr	r2, [pc, #156]	; (8003b2c <TIM_Base_SetConfig+0x12c>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d00f      	beq.n	8003ab2 <TIM_Base_SetConfig+0xb2>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a26      	ldr	r2, [pc, #152]	; (8003b30 <TIM_Base_SetConfig+0x130>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d00b      	beq.n	8003ab2 <TIM_Base_SetConfig+0xb2>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a25      	ldr	r2, [pc, #148]	; (8003b34 <TIM_Base_SetConfig+0x134>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d007      	beq.n	8003ab2 <TIM_Base_SetConfig+0xb2>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a24      	ldr	r2, [pc, #144]	; (8003b38 <TIM_Base_SetConfig+0x138>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d003      	beq.n	8003ab2 <TIM_Base_SetConfig+0xb2>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a23      	ldr	r2, [pc, #140]	; (8003b3c <TIM_Base_SetConfig+0x13c>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d108      	bne.n	8003ac4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ab8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	68fa      	ldr	r2, [r7, #12]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	695b      	ldr	r3, [r3, #20]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	68fa      	ldr	r2, [r7, #12]
 8003ad6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	689a      	ldr	r2, [r3, #8]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	4a0a      	ldr	r2, [pc, #40]	; (8003b14 <TIM_Base_SetConfig+0x114>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d003      	beq.n	8003af8 <TIM_Base_SetConfig+0xf8>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	4a0c      	ldr	r2, [pc, #48]	; (8003b24 <TIM_Base_SetConfig+0x124>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d103      	bne.n	8003b00 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	691a      	ldr	r2, [r3, #16]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	615a      	str	r2, [r3, #20]
}
 8003b06:	bf00      	nop
 8003b08:	3714      	adds	r7, #20
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop
 8003b14:	40010000 	.word	0x40010000
 8003b18:	40000400 	.word	0x40000400
 8003b1c:	40000800 	.word	0x40000800
 8003b20:	40000c00 	.word	0x40000c00
 8003b24:	40010400 	.word	0x40010400
 8003b28:	40014000 	.word	0x40014000
 8003b2c:	40014400 	.word	0x40014400
 8003b30:	40014800 	.word	0x40014800
 8003b34:	40001800 	.word	0x40001800
 8003b38:	40001c00 	.word	0x40001c00
 8003b3c:	40002000 	.word	0x40002000

08003b40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b48:	bf00      	nop
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr

08003b54 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b5c:	bf00      	nop
 8003b5e:	370c      	adds	r7, #12
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b082      	sub	sp, #8
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d101      	bne.n	8003b7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e03f      	b.n	8003bfa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d106      	bne.n	8003b94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f7fd fb6c 	bl	800126c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2224      	movs	r2, #36	; 0x24
 8003b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68da      	ldr	r2, [r3, #12]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003baa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f000 fc7b 	bl	80044a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	691a      	ldr	r2, [r3, #16]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003bc0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	695a      	ldr	r2, [r3, #20]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003bd0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	68da      	ldr	r2, [r3, #12]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003be0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2220      	movs	r2, #32
 8003bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2220      	movs	r2, #32
 8003bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3708      	adds	r7, #8
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c02:	b580      	push	{r7, lr}
 8003c04:	b08a      	sub	sp, #40	; 0x28
 8003c06:	af02      	add	r7, sp, #8
 8003c08:	60f8      	str	r0, [r7, #12]
 8003c0a:	60b9      	str	r1, [r7, #8]
 8003c0c:	603b      	str	r3, [r7, #0]
 8003c0e:	4613      	mov	r3, r2
 8003c10:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c12:	2300      	movs	r3, #0
 8003c14:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	2b20      	cmp	r3, #32
 8003c20:	d17c      	bne.n	8003d1c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d002      	beq.n	8003c2e <HAL_UART_Transmit+0x2c>
 8003c28:	88fb      	ldrh	r3, [r7, #6]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d101      	bne.n	8003c32 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e075      	b.n	8003d1e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d101      	bne.n	8003c40 <HAL_UART_Transmit+0x3e>
 8003c3c:	2302      	movs	r3, #2
 8003c3e:	e06e      	b.n	8003d1e <HAL_UART_Transmit+0x11c>
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2221      	movs	r2, #33	; 0x21
 8003c52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c56:	f7fe f8e9 	bl	8001e2c <HAL_GetTick>
 8003c5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	88fa      	ldrh	r2, [r7, #6]
 8003c60:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	88fa      	ldrh	r2, [r7, #6]
 8003c66:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c70:	d108      	bne.n	8003c84 <HAL_UART_Transmit+0x82>
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d104      	bne.n	8003c84 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	61bb      	str	r3, [r7, #24]
 8003c82:	e003      	b.n	8003c8c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003c94:	e02a      	b.n	8003cec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	9300      	str	r3, [sp, #0]
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	2180      	movs	r1, #128	; 0x80
 8003ca0:	68f8      	ldr	r0, [r7, #12]
 8003ca2:	f000 fa3d 	bl	8004120 <UART_WaitOnFlagUntilTimeout>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d001      	beq.n	8003cb0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	e036      	b.n	8003d1e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d10b      	bne.n	8003cce <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	881b      	ldrh	r3, [r3, #0]
 8003cba:	461a      	mov	r2, r3
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cc4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003cc6:	69bb      	ldr	r3, [r7, #24]
 8003cc8:	3302      	adds	r3, #2
 8003cca:	61bb      	str	r3, [r7, #24]
 8003ccc:	e007      	b.n	8003cde <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	781a      	ldrb	r2, [r3, #0]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003cd8:	69fb      	ldr	r3, [r7, #28]
 8003cda:	3301      	adds	r3, #1
 8003cdc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	3b01      	subs	r3, #1
 8003ce6:	b29a      	uxth	r2, r3
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d1cf      	bne.n	8003c96 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	9300      	str	r3, [sp, #0]
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	2140      	movs	r1, #64	; 0x40
 8003d00:	68f8      	ldr	r0, [r7, #12]
 8003d02:	f000 fa0d 	bl	8004120 <UART_WaitOnFlagUntilTimeout>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d001      	beq.n	8003d10 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	e006      	b.n	8003d1e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2220      	movs	r2, #32
 8003d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	e000      	b.n	8003d1e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003d1c:	2302      	movs	r3, #2
  }
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3720      	adds	r7, #32
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d26:	b580      	push	{r7, lr}
 8003d28:	b084      	sub	sp, #16
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	60f8      	str	r0, [r7, #12]
 8003d2e:	60b9      	str	r1, [r7, #8]
 8003d30:	4613      	mov	r3, r2
 8003d32:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	2b20      	cmp	r3, #32
 8003d3e:	d11d      	bne.n	8003d7c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d002      	beq.n	8003d4c <HAL_UART_Receive_IT+0x26>
 8003d46:	88fb      	ldrh	r3, [r7, #6]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d101      	bne.n	8003d50 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e016      	b.n	8003d7e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d101      	bne.n	8003d5e <HAL_UART_Receive_IT+0x38>
 8003d5a:	2302      	movs	r3, #2
 8003d5c:	e00f      	b.n	8003d7e <HAL_UART_Receive_IT+0x58>
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2201      	movs	r2, #1
 8003d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003d6c:	88fb      	ldrh	r3, [r7, #6]
 8003d6e:	461a      	mov	r2, r3
 8003d70:	68b9      	ldr	r1, [r7, #8]
 8003d72:	68f8      	ldr	r0, [r7, #12]
 8003d74:	f000 fa1e 	bl	80041b4 <UART_Start_Receive_IT>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	e000      	b.n	8003d7e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003d7c:	2302      	movs	r3, #2
  }
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3710      	adds	r7, #16
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
	...

08003d88 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b08a      	sub	sp, #40	; 0x28
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	695b      	ldr	r3, [r3, #20]
 8003da6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003da8:	2300      	movs	r3, #0
 8003daa:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003dac:	2300      	movs	r3, #0
 8003dae:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db2:	f003 030f 	and.w	r3, r3, #15
 8003db6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003db8:	69bb      	ldr	r3, [r7, #24]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d10d      	bne.n	8003dda <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc0:	f003 0320 	and.w	r3, r3, #32
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d008      	beq.n	8003dda <HAL_UART_IRQHandler+0x52>
 8003dc8:	6a3b      	ldr	r3, [r7, #32]
 8003dca:	f003 0320 	and.w	r3, r3, #32
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d003      	beq.n	8003dda <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 fad1 	bl	800437a <UART_Receive_IT>
      return;
 8003dd8:	e17c      	b.n	80040d4 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003dda:	69bb      	ldr	r3, [r7, #24]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	f000 80b1 	beq.w	8003f44 <HAL_UART_IRQHandler+0x1bc>
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	f003 0301 	and.w	r3, r3, #1
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d105      	bne.n	8003df8 <HAL_UART_IRQHandler+0x70>
 8003dec:	6a3b      	ldr	r3, [r7, #32]
 8003dee:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	f000 80a6 	beq.w	8003f44 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfa:	f003 0301 	and.w	r3, r3, #1
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d00a      	beq.n	8003e18 <HAL_UART_IRQHandler+0x90>
 8003e02:	6a3b      	ldr	r3, [r7, #32]
 8003e04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d005      	beq.n	8003e18 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e10:	f043 0201 	orr.w	r2, r3, #1
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1a:	f003 0304 	and.w	r3, r3, #4
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d00a      	beq.n	8003e38 <HAL_UART_IRQHandler+0xb0>
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	f003 0301 	and.w	r3, r3, #1
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d005      	beq.n	8003e38 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e30:	f043 0202 	orr.w	r2, r3, #2
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3a:	f003 0302 	and.w	r3, r3, #2
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d00a      	beq.n	8003e58 <HAL_UART_IRQHandler+0xd0>
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	f003 0301 	and.w	r3, r3, #1
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d005      	beq.n	8003e58 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e50:	f043 0204 	orr.w	r2, r3, #4
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5a:	f003 0308 	and.w	r3, r3, #8
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00f      	beq.n	8003e82 <HAL_UART_IRQHandler+0xfa>
 8003e62:	6a3b      	ldr	r3, [r7, #32]
 8003e64:	f003 0320 	and.w	r3, r3, #32
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d104      	bne.n	8003e76 <HAL_UART_IRQHandler+0xee>
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	f003 0301 	and.w	r3, r3, #1
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d005      	beq.n	8003e82 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7a:	f043 0208 	orr.w	r2, r3, #8
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	f000 811f 	beq.w	80040ca <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8e:	f003 0320 	and.w	r3, r3, #32
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d007      	beq.n	8003ea6 <HAL_UART_IRQHandler+0x11e>
 8003e96:	6a3b      	ldr	r3, [r7, #32]
 8003e98:	f003 0320 	and.w	r3, r3, #32
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d002      	beq.n	8003ea6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f000 fa6a 	bl	800437a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	695b      	ldr	r3, [r3, #20]
 8003eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eb0:	2b40      	cmp	r3, #64	; 0x40
 8003eb2:	bf0c      	ite	eq
 8003eb4:	2301      	moveq	r3, #1
 8003eb6:	2300      	movne	r3, #0
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec0:	f003 0308 	and.w	r3, r3, #8
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d102      	bne.n	8003ece <HAL_UART_IRQHandler+0x146>
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d031      	beq.n	8003f32 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 f9aa 	bl	8004228 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	695b      	ldr	r3, [r3, #20]
 8003eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ede:	2b40      	cmp	r3, #64	; 0x40
 8003ee0:	d123      	bne.n	8003f2a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	695a      	ldr	r2, [r3, #20]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ef0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d013      	beq.n	8003f22 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003efe:	4a77      	ldr	r2, [pc, #476]	; (80040dc <HAL_UART_IRQHandler+0x354>)
 8003f00:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f06:	4618      	mov	r0, r3
 8003f08:	f7fe f8ee 	bl	80020e8 <HAL_DMA_Abort_IT>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d016      	beq.n	8003f40 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f1c:	4610      	mov	r0, r2
 8003f1e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f20:	e00e      	b.n	8003f40 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f000 f8e6 	bl	80040f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f28:	e00a      	b.n	8003f40 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f000 f8e2 	bl	80040f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f30:	e006      	b.n	8003f40 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f000 f8de 	bl	80040f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003f3e:	e0c4      	b.n	80040ca <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f40:	bf00      	nop
    return;
 8003f42:	e0c2      	b.n	80040ca <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	f040 80a2 	bne.w	8004092 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f50:	f003 0310 	and.w	r3, r3, #16
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	f000 809c 	beq.w	8004092 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003f5a:	6a3b      	ldr	r3, [r7, #32]
 8003f5c:	f003 0310 	and.w	r3, r3, #16
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	f000 8096 	beq.w	8004092 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f66:	2300      	movs	r3, #0
 8003f68:	60fb      	str	r3, [r7, #12]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	60fb      	str	r3, [r7, #12]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	60fb      	str	r3, [r7, #12]
 8003f7a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	695b      	ldr	r3, [r3, #20]
 8003f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f86:	2b40      	cmp	r3, #64	; 0x40
 8003f88:	d14f      	bne.n	800402a <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003f94:	8a3b      	ldrh	r3, [r7, #16]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	f000 8099 	beq.w	80040ce <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003fa0:	8a3a      	ldrh	r2, [r7, #16]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	f080 8093 	bcs.w	80040ce <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	8a3a      	ldrh	r2, [r7, #16]
 8003fac:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb2:	69db      	ldr	r3, [r3, #28]
 8003fb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fb8:	d02b      	beq.n	8004012 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	68da      	ldr	r2, [r3, #12]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003fc8:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	695a      	ldr	r2, [r3, #20]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f022 0201 	bic.w	r2, r2, #1
 8003fd8:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	695a      	ldr	r2, [r3, #20]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fe8:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2220      	movs	r2, #32
 8003fee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	68da      	ldr	r2, [r3, #12]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f022 0210 	bic.w	r2, r2, #16
 8004006:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800400c:	4618      	mov	r0, r3
 800400e:	f7fd fffb 	bl	8002008 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800401a:	b29b      	uxth	r3, r3
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	b29b      	uxth	r3, r3
 8004020:	4619      	mov	r1, r3
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 f870 	bl	8004108 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004028:	e051      	b.n	80040ce <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004032:	b29b      	uxth	r3, r3
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800403c:	b29b      	uxth	r3, r3
 800403e:	2b00      	cmp	r3, #0
 8004040:	d047      	beq.n	80040d2 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8004042:	8a7b      	ldrh	r3, [r7, #18]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d044      	beq.n	80040d2 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68da      	ldr	r2, [r3, #12]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004056:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	695a      	ldr	r2, [r3, #20]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f022 0201 	bic.w	r2, r2, #1
 8004066:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2220      	movs	r2, #32
 800406c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	68da      	ldr	r2, [r3, #12]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f022 0210 	bic.w	r2, r2, #16
 8004084:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004086:	8a7b      	ldrh	r3, [r7, #18]
 8004088:	4619      	mov	r1, r3
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f000 f83c 	bl	8004108 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004090:	e01f      	b.n	80040d2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004094:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004098:	2b00      	cmp	r3, #0
 800409a:	d008      	beq.n	80040ae <HAL_UART_IRQHandler+0x326>
 800409c:	6a3b      	ldr	r3, [r7, #32]
 800409e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d003      	beq.n	80040ae <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f000 f8ff 	bl	80042aa <UART_Transmit_IT>
    return;
 80040ac:	e012      	b.n	80040d4 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80040ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d00d      	beq.n	80040d4 <HAL_UART_IRQHandler+0x34c>
 80040b8:	6a3b      	ldr	r3, [r7, #32]
 80040ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d008      	beq.n	80040d4 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 f941 	bl	800434a <UART_EndTransmit_IT>
    return;
 80040c8:	e004      	b.n	80040d4 <HAL_UART_IRQHandler+0x34c>
    return;
 80040ca:	bf00      	nop
 80040cc:	e002      	b.n	80040d4 <HAL_UART_IRQHandler+0x34c>
      return;
 80040ce:	bf00      	nop
 80040d0:	e000      	b.n	80040d4 <HAL_UART_IRQHandler+0x34c>
      return;
 80040d2:	bf00      	nop
  }
}
 80040d4:	3728      	adds	r7, #40	; 0x28
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	08004283 	.word	0x08004283

080040e0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b083      	sub	sp, #12
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80040e8:	bf00      	nop
 80040ea:	370c      	adds	r7, #12
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80040fc:	bf00      	nop
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	460b      	mov	r3, r1
 8004112:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004114:	bf00      	nop
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	60b9      	str	r1, [r7, #8]
 800412a:	603b      	str	r3, [r7, #0]
 800412c:	4613      	mov	r3, r2
 800412e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004130:	e02c      	b.n	800418c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004132:	69bb      	ldr	r3, [r7, #24]
 8004134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004138:	d028      	beq.n	800418c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800413a:	69bb      	ldr	r3, [r7, #24]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d007      	beq.n	8004150 <UART_WaitOnFlagUntilTimeout+0x30>
 8004140:	f7fd fe74 	bl	8001e2c <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	69ba      	ldr	r2, [r7, #24]
 800414c:	429a      	cmp	r2, r3
 800414e:	d21d      	bcs.n	800418c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	68da      	ldr	r2, [r3, #12]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800415e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	695a      	ldr	r2, [r3, #20]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f022 0201 	bic.w	r2, r2, #1
 800416e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2220      	movs	r2, #32
 8004174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2220      	movs	r2, #32
 800417c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2200      	movs	r2, #0
 8004184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	e00f      	b.n	80041ac <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	4013      	ands	r3, r2
 8004196:	68ba      	ldr	r2, [r7, #8]
 8004198:	429a      	cmp	r2, r3
 800419a:	bf0c      	ite	eq
 800419c:	2301      	moveq	r3, #1
 800419e:	2300      	movne	r3, #0
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	461a      	mov	r2, r3
 80041a4:	79fb      	ldrb	r3, [r7, #7]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d0c3      	beq.n	8004132 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80041aa:	2300      	movs	r3, #0
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3710      	adds	r7, #16
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b085      	sub	sp, #20
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	4613      	mov	r3, r2
 80041c0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	68ba      	ldr	r2, [r7, #8]
 80041c6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	88fa      	ldrh	r2, [r7, #6]
 80041cc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	88fa      	ldrh	r2, [r7, #6]
 80041d2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2200      	movs	r2, #0
 80041d8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2222      	movs	r2, #34	; 0x22
 80041de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	68da      	ldr	r2, [r3, #12]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041f8:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	695a      	ldr	r2, [r3, #20]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f042 0201 	orr.w	r2, r2, #1
 8004208:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	68da      	ldr	r2, [r3, #12]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f042 0220 	orr.w	r2, r2, #32
 8004218:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800421a:	2300      	movs	r3, #0
}
 800421c:	4618      	mov	r0, r3
 800421e:	3714      	adds	r7, #20
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	68da      	ldr	r2, [r3, #12]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800423e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	695a      	ldr	r2, [r3, #20]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f022 0201 	bic.w	r2, r2, #1
 800424e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004254:	2b01      	cmp	r3, #1
 8004256:	d107      	bne.n	8004268 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68da      	ldr	r2, [r3, #12]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f022 0210 	bic.w	r2, r2, #16
 8004266:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2220      	movs	r2, #32
 800426c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004276:	bf00      	nop
 8004278:	370c      	adds	r7, #12
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr

08004282 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004282:	b580      	push	{r7, lr}
 8004284:	b084      	sub	sp, #16
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800428e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2200      	movs	r2, #0
 8004294:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2200      	movs	r2, #0
 800429a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800429c:	68f8      	ldr	r0, [r7, #12]
 800429e:	f7ff ff29 	bl	80040f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042a2:	bf00      	nop
 80042a4:	3710      	adds	r7, #16
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}

080042aa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80042aa:	b480      	push	{r7}
 80042ac:	b085      	sub	sp, #20
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	2b21      	cmp	r3, #33	; 0x21
 80042bc:	d13e      	bne.n	800433c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042c6:	d114      	bne.n	80042f2 <UART_Transmit_IT+0x48>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	691b      	ldr	r3, [r3, #16]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d110      	bne.n	80042f2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a1b      	ldr	r3, [r3, #32]
 80042d4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	881b      	ldrh	r3, [r3, #0]
 80042da:	461a      	mov	r2, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042e4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a1b      	ldr	r3, [r3, #32]
 80042ea:	1c9a      	adds	r2, r3, #2
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	621a      	str	r2, [r3, #32]
 80042f0:	e008      	b.n	8004304 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a1b      	ldr	r3, [r3, #32]
 80042f6:	1c59      	adds	r1, r3, #1
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	6211      	str	r1, [r2, #32]
 80042fc:	781a      	ldrb	r2, [r3, #0]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004308:	b29b      	uxth	r3, r3
 800430a:	3b01      	subs	r3, #1
 800430c:	b29b      	uxth	r3, r3
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	4619      	mov	r1, r3
 8004312:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004314:	2b00      	cmp	r3, #0
 8004316:	d10f      	bne.n	8004338 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	68da      	ldr	r2, [r3, #12]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004326:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	68da      	ldr	r2, [r3, #12]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004336:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004338:	2300      	movs	r3, #0
 800433a:	e000      	b.n	800433e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800433c:	2302      	movs	r3, #2
  }
}
 800433e:	4618      	mov	r0, r3
 8004340:	3714      	adds	r7, #20
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr

0800434a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800434a:	b580      	push	{r7, lr}
 800434c:	b082      	sub	sp, #8
 800434e:	af00      	add	r7, sp, #0
 8004350:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	68da      	ldr	r2, [r3, #12]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004360:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2220      	movs	r2, #32
 8004366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f7ff feb8 	bl	80040e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	3708      	adds	r7, #8
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}

0800437a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800437a:	b580      	push	{r7, lr}
 800437c:	b084      	sub	sp, #16
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004388:	b2db      	uxtb	r3, r3
 800438a:	2b22      	cmp	r3, #34	; 0x22
 800438c:	f040 8087 	bne.w	800449e <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004398:	d117      	bne.n	80043ca <UART_Receive_IT+0x50>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	691b      	ldr	r3, [r3, #16]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d113      	bne.n	80043ca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80043a2:	2300      	movs	r3, #0
 80043a4:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043aa:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043b8:	b29a      	uxth	r2, r3
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043c2:	1c9a      	adds	r2, r3, #2
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	629a      	str	r2, [r3, #40]	; 0x28
 80043c8:	e026      	b.n	8004418 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ce:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80043d0:	2300      	movs	r3, #0
 80043d2:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043dc:	d007      	beq.n	80043ee <UART_Receive_IT+0x74>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d10a      	bne.n	80043fc <UART_Receive_IT+0x82>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	691b      	ldr	r3, [r3, #16]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d106      	bne.n	80043fc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	b2da      	uxtb	r2, r3
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	701a      	strb	r2, [r3, #0]
 80043fa:	e008      	b.n	800440e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	b2db      	uxtb	r3, r3
 8004404:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004408:	b2da      	uxtb	r2, r3
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004412:	1c5a      	adds	r2, r3, #1
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800441c:	b29b      	uxth	r3, r3
 800441e:	3b01      	subs	r3, #1
 8004420:	b29b      	uxth	r3, r3
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	4619      	mov	r1, r3
 8004426:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004428:	2b00      	cmp	r3, #0
 800442a:	d136      	bne.n	800449a <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	68da      	ldr	r2, [r3, #12]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f022 0220 	bic.w	r2, r2, #32
 800443a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	68da      	ldr	r2, [r3, #12]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800444a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	695a      	ldr	r2, [r3, #20]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f022 0201 	bic.w	r2, r2, #1
 800445a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2220      	movs	r2, #32
 8004460:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004468:	2b01      	cmp	r3, #1
 800446a:	d10e      	bne.n	800448a <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	68da      	ldr	r2, [r3, #12]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f022 0210 	bic.w	r2, r2, #16
 800447a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004480:	4619      	mov	r1, r3
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f7ff fe40 	bl	8004108 <HAL_UARTEx_RxEventCallback>
 8004488:	e002      	b.n	8004490 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f7fc fd36 	bl	8000efc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8004496:	2300      	movs	r3, #0
 8004498:	e002      	b.n	80044a0 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 800449a:	2300      	movs	r3, #0
 800449c:	e000      	b.n	80044a0 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 800449e:	2302      	movs	r3, #2
  }
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3710      	adds	r7, #16
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044ac:	b09f      	sub	sp, #124	; 0x7c
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	691b      	ldr	r3, [r3, #16]
 80044b8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80044bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044be:	68d9      	ldr	r1, [r3, #12]
 80044c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	ea40 0301 	orr.w	r3, r0, r1
 80044c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80044ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044cc:	689a      	ldr	r2, [r3, #8]
 80044ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044d0:	691b      	ldr	r3, [r3, #16]
 80044d2:	431a      	orrs	r2, r3
 80044d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044d6:	695b      	ldr	r3, [r3, #20]
 80044d8:	431a      	orrs	r2, r3
 80044da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044dc:	69db      	ldr	r3, [r3, #28]
 80044de:	4313      	orrs	r3, r2
 80044e0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80044e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80044ec:	f021 010c 	bic.w	r1, r1, #12
 80044f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80044f6:	430b      	orrs	r3, r1
 80044f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80044fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	695b      	ldr	r3, [r3, #20]
 8004500:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004504:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004506:	6999      	ldr	r1, [r3, #24]
 8004508:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	ea40 0301 	orr.w	r3, r0, r1
 8004510:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004512:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	4bc5      	ldr	r3, [pc, #788]	; (800482c <UART_SetConfig+0x384>)
 8004518:	429a      	cmp	r2, r3
 800451a:	d004      	beq.n	8004526 <UART_SetConfig+0x7e>
 800451c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	4bc3      	ldr	r3, [pc, #780]	; (8004830 <UART_SetConfig+0x388>)
 8004522:	429a      	cmp	r2, r3
 8004524:	d103      	bne.n	800452e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004526:	f7fe fc17 	bl	8002d58 <HAL_RCC_GetPCLK2Freq>
 800452a:	6778      	str	r0, [r7, #116]	; 0x74
 800452c:	e002      	b.n	8004534 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800452e:	f7fe fbff 	bl	8002d30 <HAL_RCC_GetPCLK1Freq>
 8004532:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004534:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004536:	69db      	ldr	r3, [r3, #28]
 8004538:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800453c:	f040 80b6 	bne.w	80046ac <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004540:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004542:	461c      	mov	r4, r3
 8004544:	f04f 0500 	mov.w	r5, #0
 8004548:	4622      	mov	r2, r4
 800454a:	462b      	mov	r3, r5
 800454c:	1891      	adds	r1, r2, r2
 800454e:	6439      	str	r1, [r7, #64]	; 0x40
 8004550:	415b      	adcs	r3, r3
 8004552:	647b      	str	r3, [r7, #68]	; 0x44
 8004554:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004558:	1912      	adds	r2, r2, r4
 800455a:	eb45 0303 	adc.w	r3, r5, r3
 800455e:	f04f 0000 	mov.w	r0, #0
 8004562:	f04f 0100 	mov.w	r1, #0
 8004566:	00d9      	lsls	r1, r3, #3
 8004568:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800456c:	00d0      	lsls	r0, r2, #3
 800456e:	4602      	mov	r2, r0
 8004570:	460b      	mov	r3, r1
 8004572:	1911      	adds	r1, r2, r4
 8004574:	6639      	str	r1, [r7, #96]	; 0x60
 8004576:	416b      	adcs	r3, r5
 8004578:	667b      	str	r3, [r7, #100]	; 0x64
 800457a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	461a      	mov	r2, r3
 8004580:	f04f 0300 	mov.w	r3, #0
 8004584:	1891      	adds	r1, r2, r2
 8004586:	63b9      	str	r1, [r7, #56]	; 0x38
 8004588:	415b      	adcs	r3, r3
 800458a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800458c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004590:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004594:	f7fb fe84 	bl	80002a0 <__aeabi_uldivmod>
 8004598:	4602      	mov	r2, r0
 800459a:	460b      	mov	r3, r1
 800459c:	4ba5      	ldr	r3, [pc, #660]	; (8004834 <UART_SetConfig+0x38c>)
 800459e:	fba3 2302 	umull	r2, r3, r3, r2
 80045a2:	095b      	lsrs	r3, r3, #5
 80045a4:	011e      	lsls	r6, r3, #4
 80045a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045a8:	461c      	mov	r4, r3
 80045aa:	f04f 0500 	mov.w	r5, #0
 80045ae:	4622      	mov	r2, r4
 80045b0:	462b      	mov	r3, r5
 80045b2:	1891      	adds	r1, r2, r2
 80045b4:	6339      	str	r1, [r7, #48]	; 0x30
 80045b6:	415b      	adcs	r3, r3
 80045b8:	637b      	str	r3, [r7, #52]	; 0x34
 80045ba:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80045be:	1912      	adds	r2, r2, r4
 80045c0:	eb45 0303 	adc.w	r3, r5, r3
 80045c4:	f04f 0000 	mov.w	r0, #0
 80045c8:	f04f 0100 	mov.w	r1, #0
 80045cc:	00d9      	lsls	r1, r3, #3
 80045ce:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80045d2:	00d0      	lsls	r0, r2, #3
 80045d4:	4602      	mov	r2, r0
 80045d6:	460b      	mov	r3, r1
 80045d8:	1911      	adds	r1, r2, r4
 80045da:	65b9      	str	r1, [r7, #88]	; 0x58
 80045dc:	416b      	adcs	r3, r5
 80045de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80045e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	461a      	mov	r2, r3
 80045e6:	f04f 0300 	mov.w	r3, #0
 80045ea:	1891      	adds	r1, r2, r2
 80045ec:	62b9      	str	r1, [r7, #40]	; 0x28
 80045ee:	415b      	adcs	r3, r3
 80045f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80045f6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80045fa:	f7fb fe51 	bl	80002a0 <__aeabi_uldivmod>
 80045fe:	4602      	mov	r2, r0
 8004600:	460b      	mov	r3, r1
 8004602:	4b8c      	ldr	r3, [pc, #560]	; (8004834 <UART_SetConfig+0x38c>)
 8004604:	fba3 1302 	umull	r1, r3, r3, r2
 8004608:	095b      	lsrs	r3, r3, #5
 800460a:	2164      	movs	r1, #100	; 0x64
 800460c:	fb01 f303 	mul.w	r3, r1, r3
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	00db      	lsls	r3, r3, #3
 8004614:	3332      	adds	r3, #50	; 0x32
 8004616:	4a87      	ldr	r2, [pc, #540]	; (8004834 <UART_SetConfig+0x38c>)
 8004618:	fba2 2303 	umull	r2, r3, r2, r3
 800461c:	095b      	lsrs	r3, r3, #5
 800461e:	005b      	lsls	r3, r3, #1
 8004620:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004624:	441e      	add	r6, r3
 8004626:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004628:	4618      	mov	r0, r3
 800462a:	f04f 0100 	mov.w	r1, #0
 800462e:	4602      	mov	r2, r0
 8004630:	460b      	mov	r3, r1
 8004632:	1894      	adds	r4, r2, r2
 8004634:	623c      	str	r4, [r7, #32]
 8004636:	415b      	adcs	r3, r3
 8004638:	627b      	str	r3, [r7, #36]	; 0x24
 800463a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800463e:	1812      	adds	r2, r2, r0
 8004640:	eb41 0303 	adc.w	r3, r1, r3
 8004644:	f04f 0400 	mov.w	r4, #0
 8004648:	f04f 0500 	mov.w	r5, #0
 800464c:	00dd      	lsls	r5, r3, #3
 800464e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004652:	00d4      	lsls	r4, r2, #3
 8004654:	4622      	mov	r2, r4
 8004656:	462b      	mov	r3, r5
 8004658:	1814      	adds	r4, r2, r0
 800465a:	653c      	str	r4, [r7, #80]	; 0x50
 800465c:	414b      	adcs	r3, r1
 800465e:	657b      	str	r3, [r7, #84]	; 0x54
 8004660:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	461a      	mov	r2, r3
 8004666:	f04f 0300 	mov.w	r3, #0
 800466a:	1891      	adds	r1, r2, r2
 800466c:	61b9      	str	r1, [r7, #24]
 800466e:	415b      	adcs	r3, r3
 8004670:	61fb      	str	r3, [r7, #28]
 8004672:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004676:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800467a:	f7fb fe11 	bl	80002a0 <__aeabi_uldivmod>
 800467e:	4602      	mov	r2, r0
 8004680:	460b      	mov	r3, r1
 8004682:	4b6c      	ldr	r3, [pc, #432]	; (8004834 <UART_SetConfig+0x38c>)
 8004684:	fba3 1302 	umull	r1, r3, r3, r2
 8004688:	095b      	lsrs	r3, r3, #5
 800468a:	2164      	movs	r1, #100	; 0x64
 800468c:	fb01 f303 	mul.w	r3, r1, r3
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	00db      	lsls	r3, r3, #3
 8004694:	3332      	adds	r3, #50	; 0x32
 8004696:	4a67      	ldr	r2, [pc, #412]	; (8004834 <UART_SetConfig+0x38c>)
 8004698:	fba2 2303 	umull	r2, r3, r2, r3
 800469c:	095b      	lsrs	r3, r3, #5
 800469e:	f003 0207 	and.w	r2, r3, #7
 80046a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4432      	add	r2, r6
 80046a8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80046aa:	e0b9      	b.n	8004820 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80046ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046ae:	461c      	mov	r4, r3
 80046b0:	f04f 0500 	mov.w	r5, #0
 80046b4:	4622      	mov	r2, r4
 80046b6:	462b      	mov	r3, r5
 80046b8:	1891      	adds	r1, r2, r2
 80046ba:	6139      	str	r1, [r7, #16]
 80046bc:	415b      	adcs	r3, r3
 80046be:	617b      	str	r3, [r7, #20]
 80046c0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80046c4:	1912      	adds	r2, r2, r4
 80046c6:	eb45 0303 	adc.w	r3, r5, r3
 80046ca:	f04f 0000 	mov.w	r0, #0
 80046ce:	f04f 0100 	mov.w	r1, #0
 80046d2:	00d9      	lsls	r1, r3, #3
 80046d4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80046d8:	00d0      	lsls	r0, r2, #3
 80046da:	4602      	mov	r2, r0
 80046dc:	460b      	mov	r3, r1
 80046de:	eb12 0804 	adds.w	r8, r2, r4
 80046e2:	eb43 0905 	adc.w	r9, r3, r5
 80046e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	4618      	mov	r0, r3
 80046ec:	f04f 0100 	mov.w	r1, #0
 80046f0:	f04f 0200 	mov.w	r2, #0
 80046f4:	f04f 0300 	mov.w	r3, #0
 80046f8:	008b      	lsls	r3, r1, #2
 80046fa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80046fe:	0082      	lsls	r2, r0, #2
 8004700:	4640      	mov	r0, r8
 8004702:	4649      	mov	r1, r9
 8004704:	f7fb fdcc 	bl	80002a0 <__aeabi_uldivmod>
 8004708:	4602      	mov	r2, r0
 800470a:	460b      	mov	r3, r1
 800470c:	4b49      	ldr	r3, [pc, #292]	; (8004834 <UART_SetConfig+0x38c>)
 800470e:	fba3 2302 	umull	r2, r3, r3, r2
 8004712:	095b      	lsrs	r3, r3, #5
 8004714:	011e      	lsls	r6, r3, #4
 8004716:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004718:	4618      	mov	r0, r3
 800471a:	f04f 0100 	mov.w	r1, #0
 800471e:	4602      	mov	r2, r0
 8004720:	460b      	mov	r3, r1
 8004722:	1894      	adds	r4, r2, r2
 8004724:	60bc      	str	r4, [r7, #8]
 8004726:	415b      	adcs	r3, r3
 8004728:	60fb      	str	r3, [r7, #12]
 800472a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800472e:	1812      	adds	r2, r2, r0
 8004730:	eb41 0303 	adc.w	r3, r1, r3
 8004734:	f04f 0400 	mov.w	r4, #0
 8004738:	f04f 0500 	mov.w	r5, #0
 800473c:	00dd      	lsls	r5, r3, #3
 800473e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004742:	00d4      	lsls	r4, r2, #3
 8004744:	4622      	mov	r2, r4
 8004746:	462b      	mov	r3, r5
 8004748:	1814      	adds	r4, r2, r0
 800474a:	64bc      	str	r4, [r7, #72]	; 0x48
 800474c:	414b      	adcs	r3, r1
 800474e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004750:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	4618      	mov	r0, r3
 8004756:	f04f 0100 	mov.w	r1, #0
 800475a:	f04f 0200 	mov.w	r2, #0
 800475e:	f04f 0300 	mov.w	r3, #0
 8004762:	008b      	lsls	r3, r1, #2
 8004764:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004768:	0082      	lsls	r2, r0, #2
 800476a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800476e:	f7fb fd97 	bl	80002a0 <__aeabi_uldivmod>
 8004772:	4602      	mov	r2, r0
 8004774:	460b      	mov	r3, r1
 8004776:	4b2f      	ldr	r3, [pc, #188]	; (8004834 <UART_SetConfig+0x38c>)
 8004778:	fba3 1302 	umull	r1, r3, r3, r2
 800477c:	095b      	lsrs	r3, r3, #5
 800477e:	2164      	movs	r1, #100	; 0x64
 8004780:	fb01 f303 	mul.w	r3, r1, r3
 8004784:	1ad3      	subs	r3, r2, r3
 8004786:	011b      	lsls	r3, r3, #4
 8004788:	3332      	adds	r3, #50	; 0x32
 800478a:	4a2a      	ldr	r2, [pc, #168]	; (8004834 <UART_SetConfig+0x38c>)
 800478c:	fba2 2303 	umull	r2, r3, r2, r3
 8004790:	095b      	lsrs	r3, r3, #5
 8004792:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004796:	441e      	add	r6, r3
 8004798:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800479a:	4618      	mov	r0, r3
 800479c:	f04f 0100 	mov.w	r1, #0
 80047a0:	4602      	mov	r2, r0
 80047a2:	460b      	mov	r3, r1
 80047a4:	1894      	adds	r4, r2, r2
 80047a6:	603c      	str	r4, [r7, #0]
 80047a8:	415b      	adcs	r3, r3
 80047aa:	607b      	str	r3, [r7, #4]
 80047ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047b0:	1812      	adds	r2, r2, r0
 80047b2:	eb41 0303 	adc.w	r3, r1, r3
 80047b6:	f04f 0400 	mov.w	r4, #0
 80047ba:	f04f 0500 	mov.w	r5, #0
 80047be:	00dd      	lsls	r5, r3, #3
 80047c0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80047c4:	00d4      	lsls	r4, r2, #3
 80047c6:	4622      	mov	r2, r4
 80047c8:	462b      	mov	r3, r5
 80047ca:	eb12 0a00 	adds.w	sl, r2, r0
 80047ce:	eb43 0b01 	adc.w	fp, r3, r1
 80047d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	4618      	mov	r0, r3
 80047d8:	f04f 0100 	mov.w	r1, #0
 80047dc:	f04f 0200 	mov.w	r2, #0
 80047e0:	f04f 0300 	mov.w	r3, #0
 80047e4:	008b      	lsls	r3, r1, #2
 80047e6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80047ea:	0082      	lsls	r2, r0, #2
 80047ec:	4650      	mov	r0, sl
 80047ee:	4659      	mov	r1, fp
 80047f0:	f7fb fd56 	bl	80002a0 <__aeabi_uldivmod>
 80047f4:	4602      	mov	r2, r0
 80047f6:	460b      	mov	r3, r1
 80047f8:	4b0e      	ldr	r3, [pc, #56]	; (8004834 <UART_SetConfig+0x38c>)
 80047fa:	fba3 1302 	umull	r1, r3, r3, r2
 80047fe:	095b      	lsrs	r3, r3, #5
 8004800:	2164      	movs	r1, #100	; 0x64
 8004802:	fb01 f303 	mul.w	r3, r1, r3
 8004806:	1ad3      	subs	r3, r2, r3
 8004808:	011b      	lsls	r3, r3, #4
 800480a:	3332      	adds	r3, #50	; 0x32
 800480c:	4a09      	ldr	r2, [pc, #36]	; (8004834 <UART_SetConfig+0x38c>)
 800480e:	fba2 2303 	umull	r2, r3, r2, r3
 8004812:	095b      	lsrs	r3, r3, #5
 8004814:	f003 020f 	and.w	r2, r3, #15
 8004818:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4432      	add	r2, r6
 800481e:	609a      	str	r2, [r3, #8]
}
 8004820:	bf00      	nop
 8004822:	377c      	adds	r7, #124	; 0x7c
 8004824:	46bd      	mov	sp, r7
 8004826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800482a:	bf00      	nop
 800482c:	40011000 	.word	0x40011000
 8004830:	40011400 	.word	0x40011400
 8004834:	51eb851f 	.word	0x51eb851f

08004838 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f103 0208 	add.w	r2, r3, #8
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f04f 32ff 	mov.w	r2, #4294967295
 8004850:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f103 0208 	add.w	r2, r3, #8
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f103 0208 	add.w	r2, r3, #8
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800486c:	bf00      	nop
 800486e:	370c      	adds	r7, #12
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr

08004878 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004878:	b480      	push	{r7}
 800487a:	b083      	sub	sp, #12
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004886:	bf00      	nop
 8004888:	370c      	adds	r7, #12
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr

08004892 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8004892:	b480      	push	{r7}
 8004894:	b085      	sub	sp, #20
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
 800489a:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	68fa      	ldr	r2, [r7, #12]
 80048a6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	689a      	ldr	r2, [r3, #8]
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	683a      	ldr	r2, [r7, #0]
 80048b6:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	683a      	ldr	r2, [r7, #0]
 80048bc:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	1c5a      	adds	r2, r3, #1
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	601a      	str	r2, [r3, #0]
}
 80048ce:	bf00      	nop
 80048d0:	3714      	adds	r7, #20
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr

080048da <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80048da:	b480      	push	{r7}
 80048dc:	b085      	sub	sp, #20
 80048de:	af00      	add	r7, sp, #0
 80048e0:	6078      	str	r0, [r7, #4]
 80048e2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048f0:	d103      	bne.n	80048fa <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	691b      	ldr	r3, [r3, #16]
 80048f6:	60fb      	str	r3, [r7, #12]
 80048f8:	e00c      	b.n	8004914 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	3308      	adds	r3, #8
 80048fe:	60fb      	str	r3, [r7, #12]
 8004900:	e002      	b.n	8004908 <vListInsert+0x2e>
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	60fb      	str	r3, [r7, #12]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	68ba      	ldr	r2, [r7, #8]
 8004910:	429a      	cmp	r2, r3
 8004912:	d2f6      	bcs.n	8004902 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	685a      	ldr	r2, [r3, #4]
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	683a      	ldr	r2, [r7, #0]
 8004922:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	68fa      	ldr	r2, [r7, #12]
 8004928:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	683a      	ldr	r2, [r7, #0]
 800492e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	1c5a      	adds	r2, r3, #1
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	601a      	str	r2, [r3, #0]
}
 8004940:	bf00      	nop
 8004942:	3714      	adds	r7, #20
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr

0800494c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800494c:	b480      	push	{r7}
 800494e:	b085      	sub	sp, #20
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	691b      	ldr	r3, [r3, #16]
 8004958:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	6892      	ldr	r2, [r2, #8]
 8004962:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	6852      	ldr	r2, [r2, #4]
 800496c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	429a      	cmp	r2, r3
 8004976:	d103      	bne.n	8004980 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	689a      	ldr	r2, [r3, #8]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	1e5a      	subs	r2, r3, #1
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
}
 8004994:	4618      	mov	r0, r3
 8004996:	3714      	adds	r7, #20
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr

080049a0 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b084      	sub	sp, #16
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d10a      	bne.n	80049ca <xQueueGenericReset+0x2a>
        __asm volatile
 80049b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b8:	f383 8811 	msr	BASEPRI, r3
 80049bc:	f3bf 8f6f 	isb	sy
 80049c0:	f3bf 8f4f 	dsb	sy
 80049c4:	60bb      	str	r3, [r7, #8]
    }
 80049c6:	bf00      	nop
 80049c8:	e7fe      	b.n	80049c8 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 80049ca:	f002 fb35 	bl	8007038 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049d6:	68f9      	ldr	r1, [r7, #12]
 80049d8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80049da:	fb01 f303 	mul.w	r3, r1, r3
 80049de:	441a      	add	r2, r3
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2200      	movs	r2, #0
 80049e8:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049fa:	3b01      	subs	r3, #1
 80049fc:	68f9      	ldr	r1, [r7, #12]
 80049fe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004a00:	fb01 f303 	mul.w	r3, r1, r3
 8004a04:	441a      	add	r2, r3
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	22ff      	movs	r2, #255	; 0xff
 8004a0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	22ff      	movs	r2, #255	; 0xff
 8004a16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d114      	bne.n	8004a4a <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	691b      	ldr	r3, [r3, #16]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d01a      	beq.n	8004a5e <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	3310      	adds	r3, #16
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f001 f921 	bl	8005c74 <xTaskRemoveFromEventList>
 8004a32:	4603      	mov	r3, r0
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d012      	beq.n	8004a5e <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8004a38:	4b0c      	ldr	r3, [pc, #48]	; (8004a6c <xQueueGenericReset+0xcc>)
 8004a3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a3e:	601a      	str	r2, [r3, #0]
 8004a40:	f3bf 8f4f 	dsb	sy
 8004a44:	f3bf 8f6f 	isb	sy
 8004a48:	e009      	b.n	8004a5e <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	3310      	adds	r3, #16
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f7ff fef2 	bl	8004838 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	3324      	adds	r3, #36	; 0x24
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f7ff feed 	bl	8004838 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8004a5e:	f002 fb1b 	bl	8007098 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8004a62:	2301      	movs	r3, #1
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3710      	adds	r7, #16
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}
 8004a6c:	e000ed04 	.word	0xe000ed04

08004a70 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b08c      	sub	sp, #48	; 0x30
 8004a74:	af02      	add	r7, sp, #8
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	60b9      	str	r1, [r7, #8]
 8004a7a:	4613      	mov	r3, r2
 8004a7c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d10a      	bne.n	8004a9a <xQueueGenericCreate+0x2a>
        __asm volatile
 8004a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a88:	f383 8811 	msr	BASEPRI, r3
 8004a8c:	f3bf 8f6f 	isb	sy
 8004a90:	f3bf 8f4f 	dsb	sy
 8004a94:	61bb      	str	r3, [r7, #24]
    }
 8004a96:	bf00      	nop
 8004a98:	e7fe      	b.n	8004a98 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	68ba      	ldr	r2, [r7, #8]
 8004a9e:	fb02 f303 	mul.w	r3, r2, r3
 8004aa2:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d006      	beq.n	8004ab8 <xQueueGenericCreate+0x48>
 8004aaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d101      	bne.n	8004abc <xQueueGenericCreate+0x4c>
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e000      	b.n	8004abe <xQueueGenericCreate+0x4e>
 8004abc:	2300      	movs	r3, #0
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d10a      	bne.n	8004ad8 <xQueueGenericCreate+0x68>
        __asm volatile
 8004ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac6:	f383 8811 	msr	BASEPRI, r3
 8004aca:	f3bf 8f6f 	isb	sy
 8004ace:	f3bf 8f4f 	dsb	sy
 8004ad2:	617b      	str	r3, [r7, #20]
    }
 8004ad4:	bf00      	nop
 8004ad6:	e7fe      	b.n	8004ad6 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8004ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ada:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8004ade:	d90a      	bls.n	8004af6 <xQueueGenericCreate+0x86>
        __asm volatile
 8004ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae4:	f383 8811 	msr	BASEPRI, r3
 8004ae8:	f3bf 8f6f 	isb	sy
 8004aec:	f3bf 8f4f 	dsb	sy
 8004af0:	613b      	str	r3, [r7, #16]
    }
 8004af2:	bf00      	nop
 8004af4:	e7fe      	b.n	8004af4 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af8:	3350      	adds	r3, #80	; 0x50
 8004afa:	4618      	mov	r0, r3
 8004afc:	f002 fbbe 	bl	800727c <pvPortMalloc>
 8004b00:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8004b02:	6a3b      	ldr	r3, [r7, #32]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d00d      	beq.n	8004b24 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004b08:	6a3b      	ldr	r3, [r7, #32]
 8004b0a:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004b0c:	69fb      	ldr	r3, [r7, #28]
 8004b0e:	3350      	adds	r3, #80	; 0x50
 8004b10:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004b12:	79fa      	ldrb	r2, [r7, #7]
 8004b14:	6a3b      	ldr	r3, [r7, #32]
 8004b16:	9300      	str	r3, [sp, #0]
 8004b18:	4613      	mov	r3, r2
 8004b1a:	69fa      	ldr	r2, [r7, #28]
 8004b1c:	68b9      	ldr	r1, [r7, #8]
 8004b1e:	68f8      	ldr	r0, [r7, #12]
 8004b20:	f000 f805 	bl	8004b2e <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8004b24:	6a3b      	ldr	r3, [r7, #32]
    }
 8004b26:	4618      	mov	r0, r3
 8004b28:	3728      	adds	r7, #40	; 0x28
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}

08004b2e <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8004b2e:	b580      	push	{r7, lr}
 8004b30:	b084      	sub	sp, #16
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	60f8      	str	r0, [r7, #12]
 8004b36:	60b9      	str	r1, [r7, #8]
 8004b38:	607a      	str	r2, [r7, #4]
 8004b3a:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d103      	bne.n	8004b4a <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004b42:	69bb      	ldr	r3, [r7, #24]
 8004b44:	69ba      	ldr	r2, [r7, #24]
 8004b46:	601a      	str	r2, [r3, #0]
 8004b48:	e002      	b.n	8004b50 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004b4a:	69bb      	ldr	r3, [r7, #24]
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8004b50:	69bb      	ldr	r3, [r7, #24]
 8004b52:	68fa      	ldr	r2, [r7, #12]
 8004b54:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8004b56:	69bb      	ldr	r3, [r7, #24]
 8004b58:	68ba      	ldr	r2, [r7, #8]
 8004b5a:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004b5c:	2101      	movs	r1, #1
 8004b5e:	69b8      	ldr	r0, [r7, #24]
 8004b60:	f7ff ff1e 	bl	80049a0 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8004b64:	69bb      	ldr	r3, [r7, #24]
 8004b66:	78fa      	ldrb	r2, [r7, #3]
 8004b68:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8004b6c:	bf00      	nop
 8004b6e:	3710      	adds	r7, #16
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}

08004b74 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b08e      	sub	sp, #56	; 0x38
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	60b9      	str	r1, [r7, #8]
 8004b7e:	607a      	str	r2, [r7, #4]
 8004b80:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004b82:	2300      	movs	r3, #0
 8004b84:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8004b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d10a      	bne.n	8004ba6 <xQueueGenericSend+0x32>
        __asm volatile
 8004b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b94:	f383 8811 	msr	BASEPRI, r3
 8004b98:	f3bf 8f6f 	isb	sy
 8004b9c:	f3bf 8f4f 	dsb	sy
 8004ba0:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8004ba2:	bf00      	nop
 8004ba4:	e7fe      	b.n	8004ba4 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d103      	bne.n	8004bb4 <xQueueGenericSend+0x40>
 8004bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d101      	bne.n	8004bb8 <xQueueGenericSend+0x44>
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e000      	b.n	8004bba <xQueueGenericSend+0x46>
 8004bb8:	2300      	movs	r3, #0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d10a      	bne.n	8004bd4 <xQueueGenericSend+0x60>
        __asm volatile
 8004bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc2:	f383 8811 	msr	BASEPRI, r3
 8004bc6:	f3bf 8f6f 	isb	sy
 8004bca:	f3bf 8f4f 	dsb	sy
 8004bce:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8004bd0:	bf00      	nop
 8004bd2:	e7fe      	b.n	8004bd2 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	2b02      	cmp	r3, #2
 8004bd8:	d103      	bne.n	8004be2 <xQueueGenericSend+0x6e>
 8004bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d101      	bne.n	8004be6 <xQueueGenericSend+0x72>
 8004be2:	2301      	movs	r3, #1
 8004be4:	e000      	b.n	8004be8 <xQueueGenericSend+0x74>
 8004be6:	2300      	movs	r3, #0
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d10a      	bne.n	8004c02 <xQueueGenericSend+0x8e>
        __asm volatile
 8004bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf0:	f383 8811 	msr	BASEPRI, r3
 8004bf4:	f3bf 8f6f 	isb	sy
 8004bf8:	f3bf 8f4f 	dsb	sy
 8004bfc:	623b      	str	r3, [r7, #32]
    }
 8004bfe:	bf00      	nop
 8004c00:	e7fe      	b.n	8004c00 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c02:	f001 f9d3 	bl	8005fac <xTaskGetSchedulerState>
 8004c06:	4603      	mov	r3, r0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d102      	bne.n	8004c12 <xQueueGenericSend+0x9e>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d101      	bne.n	8004c16 <xQueueGenericSend+0xa2>
 8004c12:	2301      	movs	r3, #1
 8004c14:	e000      	b.n	8004c18 <xQueueGenericSend+0xa4>
 8004c16:	2300      	movs	r3, #0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d10a      	bne.n	8004c32 <xQueueGenericSend+0xbe>
        __asm volatile
 8004c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c20:	f383 8811 	msr	BASEPRI, r3
 8004c24:	f3bf 8f6f 	isb	sy
 8004c28:	f3bf 8f4f 	dsb	sy
 8004c2c:	61fb      	str	r3, [r7, #28]
    }
 8004c2e:	bf00      	nop
 8004c30:	e7fe      	b.n	8004c30 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004c32:	f002 fa01 	bl	8007038 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d302      	bcc.n	8004c48 <xQueueGenericSend+0xd4>
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	2b02      	cmp	r3, #2
 8004c46:	d129      	bne.n	8004c9c <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004c48:	683a      	ldr	r2, [r7, #0]
 8004c4a:	68b9      	ldr	r1, [r7, #8]
 8004c4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c4e:	f000 fac6 	bl	80051de <prvCopyDataToQueue>
 8004c52:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d010      	beq.n	8004c7e <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c5e:	3324      	adds	r3, #36	; 0x24
 8004c60:	4618      	mov	r0, r3
 8004c62:	f001 f807 	bl	8005c74 <xTaskRemoveFromEventList>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d013      	beq.n	8004c94 <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8004c6c:	4b3f      	ldr	r3, [pc, #252]	; (8004d6c <xQueueGenericSend+0x1f8>)
 8004c6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c72:	601a      	str	r2, [r3, #0]
 8004c74:	f3bf 8f4f 	dsb	sy
 8004c78:	f3bf 8f6f 	isb	sy
 8004c7c:	e00a      	b.n	8004c94 <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8004c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d007      	beq.n	8004c94 <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8004c84:	4b39      	ldr	r3, [pc, #228]	; (8004d6c <xQueueGenericSend+0x1f8>)
 8004c86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c8a:	601a      	str	r2, [r3, #0]
 8004c8c:	f3bf 8f4f 	dsb	sy
 8004c90:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8004c94:	f002 fa00 	bl	8007098 <vPortExitCritical>
                return pdPASS;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e063      	b.n	8004d64 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d103      	bne.n	8004caa <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8004ca2:	f002 f9f9 	bl	8007098 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	e05c      	b.n	8004d64 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004caa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d106      	bne.n	8004cbe <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004cb0:	f107 0314 	add.w	r3, r7, #20
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f001 f83f 	bl	8005d38 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004cbe:	f002 f9eb 	bl	8007098 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8004cc2:	f000 fdb9 	bl	8005838 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004cc6:	f002 f9b7 	bl	8007038 <vPortEnterCritical>
 8004cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ccc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004cd0:	b25b      	sxtb	r3, r3
 8004cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cd6:	d103      	bne.n	8004ce0 <xQueueGenericSend+0x16c>
 8004cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ce6:	b25b      	sxtb	r3, r3
 8004ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cec:	d103      	bne.n	8004cf6 <xQueueGenericSend+0x182>
 8004cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004cf6:	f002 f9cf 	bl	8007098 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004cfa:	1d3a      	adds	r2, r7, #4
 8004cfc:	f107 0314 	add.w	r3, r7, #20
 8004d00:	4611      	mov	r1, r2
 8004d02:	4618      	mov	r0, r3
 8004d04:	f001 f82e 	bl	8005d64 <xTaskCheckForTimeOut>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d124      	bne.n	8004d58 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004d0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d10:	f000 fb5d 	bl	80053ce <prvIsQueueFull>
 8004d14:	4603      	mov	r3, r0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d018      	beq.n	8004d4c <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d1c:	3310      	adds	r3, #16
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	4611      	mov	r1, r2
 8004d22:	4618      	mov	r0, r3
 8004d24:	f000 ff56 	bl	8005bd4 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8004d28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d2a:	f000 fae8 	bl	80052fe <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8004d2e:	f000 fd91 	bl	8005854 <xTaskResumeAll>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	f47f af7c 	bne.w	8004c32 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8004d3a:	4b0c      	ldr	r3, [pc, #48]	; (8004d6c <xQueueGenericSend+0x1f8>)
 8004d3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d40:	601a      	str	r2, [r3, #0]
 8004d42:	f3bf 8f4f 	dsb	sy
 8004d46:	f3bf 8f6f 	isb	sy
 8004d4a:	e772      	b.n	8004c32 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8004d4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d4e:	f000 fad6 	bl	80052fe <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8004d52:	f000 fd7f 	bl	8005854 <xTaskResumeAll>
 8004d56:	e76c      	b.n	8004c32 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8004d58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d5a:	f000 fad0 	bl	80052fe <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004d5e:	f000 fd79 	bl	8005854 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8004d62:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3738      	adds	r7, #56	; 0x38
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}
 8004d6c:	e000ed04 	.word	0xe000ed04

08004d70 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b090      	sub	sp, #64	; 0x40
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	60f8      	str	r0, [r7, #12]
 8004d78:	60b9      	str	r1, [r7, #8]
 8004d7a:	607a      	str	r2, [r7, #4]
 8004d7c:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8004d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d10a      	bne.n	8004d9e <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8004d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d8c:	f383 8811 	msr	BASEPRI, r3
 8004d90:	f3bf 8f6f 	isb	sy
 8004d94:	f3bf 8f4f 	dsb	sy
 8004d98:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8004d9a:	bf00      	nop
 8004d9c:	e7fe      	b.n	8004d9c <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d103      	bne.n	8004dac <xQueueGenericSendFromISR+0x3c>
 8004da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d101      	bne.n	8004db0 <xQueueGenericSendFromISR+0x40>
 8004dac:	2301      	movs	r3, #1
 8004dae:	e000      	b.n	8004db2 <xQueueGenericSendFromISR+0x42>
 8004db0:	2300      	movs	r3, #0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d10a      	bne.n	8004dcc <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8004db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dba:	f383 8811 	msr	BASEPRI, r3
 8004dbe:	f3bf 8f6f 	isb	sy
 8004dc2:	f3bf 8f4f 	dsb	sy
 8004dc6:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8004dc8:	bf00      	nop
 8004dca:	e7fe      	b.n	8004dca <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	2b02      	cmp	r3, #2
 8004dd0:	d103      	bne.n	8004dda <xQueueGenericSendFromISR+0x6a>
 8004dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d101      	bne.n	8004dde <xQueueGenericSendFromISR+0x6e>
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e000      	b.n	8004de0 <xQueueGenericSendFromISR+0x70>
 8004dde:	2300      	movs	r3, #0
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d10a      	bne.n	8004dfa <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8004de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de8:	f383 8811 	msr	BASEPRI, r3
 8004dec:	f3bf 8f6f 	isb	sy
 8004df0:	f3bf 8f4f 	dsb	sy
 8004df4:	623b      	str	r3, [r7, #32]
    }
 8004df6:	bf00      	nop
 8004df8:	e7fe      	b.n	8004df8 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004dfa:	f002 f9ff 	bl	80071fc <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8004dfe:	f3ef 8211 	mrs	r2, BASEPRI
 8004e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e06:	f383 8811 	msr	BASEPRI, r3
 8004e0a:	f3bf 8f6f 	isb	sy
 8004e0e:	f3bf 8f4f 	dsb	sy
 8004e12:	61fa      	str	r2, [r7, #28]
 8004e14:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8004e16:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004e18:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d302      	bcc.n	8004e2c <xQueueGenericSendFromISR+0xbc>
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	2b02      	cmp	r3, #2
 8004e2a:	d13e      	bne.n	8004eaa <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8004e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004e3c:	683a      	ldr	r2, [r7, #0]
 8004e3e:	68b9      	ldr	r1, [r7, #8]
 8004e40:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004e42:	f000 f9cc 	bl	80051de <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8004e46:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e4e:	d112      	bne.n	8004e76 <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d025      	beq.n	8004ea4 <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e5a:	3324      	adds	r3, #36	; 0x24
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f000 ff09 	bl	8005c74 <xTaskRemoveFromEventList>
 8004e62:	4603      	mov	r3, r0
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d01d      	beq.n	8004ea4 <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d01a      	beq.n	8004ea4 <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2201      	movs	r2, #1
 8004e72:	601a      	str	r2, [r3, #0]
 8004e74:	e016      	b.n	8004ea4 <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8004e76:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004e7a:	2b7f      	cmp	r3, #127	; 0x7f
 8004e7c:	d10a      	bne.n	8004e94 <xQueueGenericSendFromISR+0x124>
        __asm volatile
 8004e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e82:	f383 8811 	msr	BASEPRI, r3
 8004e86:	f3bf 8f6f 	isb	sy
 8004e8a:	f3bf 8f4f 	dsb	sy
 8004e8e:	617b      	str	r3, [r7, #20]
    }
 8004e90:	bf00      	nop
 8004e92:	e7fe      	b.n	8004e92 <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004e94:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004e98:	3301      	adds	r3, #1
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	b25a      	sxtb	r2, r3
 8004e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ea0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8004ea8:	e001      	b.n	8004eae <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eb0:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004eb8:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8004eba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3740      	adds	r7, #64	; 0x40
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}

08004ec4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b08c      	sub	sp, #48	; 0x30
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	60f8      	str	r0, [r7, #12]
 8004ecc:	60b9      	str	r1, [r7, #8]
 8004ece:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8004ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d10a      	bne.n	8004ef4 <xQueueReceive+0x30>
        __asm volatile
 8004ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee2:	f383 8811 	msr	BASEPRI, r3
 8004ee6:	f3bf 8f6f 	isb	sy
 8004eea:	f3bf 8f4f 	dsb	sy
 8004eee:	623b      	str	r3, [r7, #32]
    }
 8004ef0:	bf00      	nop
 8004ef2:	e7fe      	b.n	8004ef2 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d103      	bne.n	8004f02 <xQueueReceive+0x3e>
 8004efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d101      	bne.n	8004f06 <xQueueReceive+0x42>
 8004f02:	2301      	movs	r3, #1
 8004f04:	e000      	b.n	8004f08 <xQueueReceive+0x44>
 8004f06:	2300      	movs	r3, #0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d10a      	bne.n	8004f22 <xQueueReceive+0x5e>
        __asm volatile
 8004f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f10:	f383 8811 	msr	BASEPRI, r3
 8004f14:	f3bf 8f6f 	isb	sy
 8004f18:	f3bf 8f4f 	dsb	sy
 8004f1c:	61fb      	str	r3, [r7, #28]
    }
 8004f1e:	bf00      	nop
 8004f20:	e7fe      	b.n	8004f20 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f22:	f001 f843 	bl	8005fac <xTaskGetSchedulerState>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d102      	bne.n	8004f32 <xQueueReceive+0x6e>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d101      	bne.n	8004f36 <xQueueReceive+0x72>
 8004f32:	2301      	movs	r3, #1
 8004f34:	e000      	b.n	8004f38 <xQueueReceive+0x74>
 8004f36:	2300      	movs	r3, #0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d10a      	bne.n	8004f52 <xQueueReceive+0x8e>
        __asm volatile
 8004f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f40:	f383 8811 	msr	BASEPRI, r3
 8004f44:	f3bf 8f6f 	isb	sy
 8004f48:	f3bf 8f4f 	dsb	sy
 8004f4c:	61bb      	str	r3, [r7, #24]
    }
 8004f4e:	bf00      	nop
 8004f50:	e7fe      	b.n	8004f50 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004f52:	f002 f871 	bl	8007038 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f5a:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d01f      	beq.n	8004fa2 <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004f62:	68b9      	ldr	r1, [r7, #8]
 8004f64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f66:	f000 f9a4 	bl	80052b2 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6c:	1e5a      	subs	r2, r3, #1
 8004f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f70:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00f      	beq.n	8004f9a <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f7c:	3310      	adds	r3, #16
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f000 fe78 	bl	8005c74 <xTaskRemoveFromEventList>
 8004f84:	4603      	mov	r3, r0
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d007      	beq.n	8004f9a <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8004f8a:	4b3d      	ldr	r3, [pc, #244]	; (8005080 <xQueueReceive+0x1bc>)
 8004f8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f90:	601a      	str	r2, [r3, #0]
 8004f92:	f3bf 8f4f 	dsb	sy
 8004f96:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8004f9a:	f002 f87d 	bl	8007098 <vPortExitCritical>
                return pdPASS;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e069      	b.n	8005076 <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d103      	bne.n	8004fb0 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8004fa8:	f002 f876 	bl	8007098 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8004fac:	2300      	movs	r3, #0
 8004fae:	e062      	b.n	8005076 <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d106      	bne.n	8004fc4 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004fb6:	f107 0310 	add.w	r3, r7, #16
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f000 febc 	bl	8005d38 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004fc4:	f002 f868 	bl	8007098 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8004fc8:	f000 fc36 	bl	8005838 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004fcc:	f002 f834 	bl	8007038 <vPortEnterCritical>
 8004fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004fd6:	b25b      	sxtb	r3, r3
 8004fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fdc:	d103      	bne.n	8004fe6 <xQueueReceive+0x122>
 8004fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004fec:	b25b      	sxtb	r3, r3
 8004fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ff2:	d103      	bne.n	8004ffc <xQueueReceive+0x138>
 8004ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ffc:	f002 f84c 	bl	8007098 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005000:	1d3a      	adds	r2, r7, #4
 8005002:	f107 0310 	add.w	r3, r7, #16
 8005006:	4611      	mov	r1, r2
 8005008:	4618      	mov	r0, r3
 800500a:	f000 feab 	bl	8005d64 <xTaskCheckForTimeOut>
 800500e:	4603      	mov	r3, r0
 8005010:	2b00      	cmp	r3, #0
 8005012:	d123      	bne.n	800505c <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005014:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005016:	f000 f9c4 	bl	80053a2 <prvIsQueueEmpty>
 800501a:	4603      	mov	r3, r0
 800501c:	2b00      	cmp	r3, #0
 800501e:	d017      	beq.n	8005050 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005022:	3324      	adds	r3, #36	; 0x24
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	4611      	mov	r1, r2
 8005028:	4618      	mov	r0, r3
 800502a:	f000 fdd3 	bl	8005bd4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800502e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005030:	f000 f965 	bl	80052fe <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8005034:	f000 fc0e 	bl	8005854 <xTaskResumeAll>
 8005038:	4603      	mov	r3, r0
 800503a:	2b00      	cmp	r3, #0
 800503c:	d189      	bne.n	8004f52 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 800503e:	4b10      	ldr	r3, [pc, #64]	; (8005080 <xQueueReceive+0x1bc>)
 8005040:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005044:	601a      	str	r2, [r3, #0]
 8005046:	f3bf 8f4f 	dsb	sy
 800504a:	f3bf 8f6f 	isb	sy
 800504e:	e780      	b.n	8004f52 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8005050:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005052:	f000 f954 	bl	80052fe <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8005056:	f000 fbfd 	bl	8005854 <xTaskResumeAll>
 800505a:	e77a      	b.n	8004f52 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800505c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800505e:	f000 f94e 	bl	80052fe <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8005062:	f000 fbf7 	bl	8005854 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005066:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005068:	f000 f99b 	bl	80053a2 <prvIsQueueEmpty>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	f43f af6f 	beq.w	8004f52 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8005074:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8005076:	4618      	mov	r0, r3
 8005078:	3730      	adds	r7, #48	; 0x30
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
 800507e:	bf00      	nop
 8005080:	e000ed04 	.word	0xe000ed04

08005084 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b090      	sub	sp, #64	; 0x40
 8005088:	af00      	add	r7, sp, #0
 800508a:	60f8      	str	r0, [r7, #12]
 800508c:	60b9      	str	r1, [r7, #8]
 800508e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8005094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005096:	2b00      	cmp	r3, #0
 8005098:	d10a      	bne.n	80050b0 <xQueueReceiveFromISR+0x2c>
        __asm volatile
 800509a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800509e:	f383 8811 	msr	BASEPRI, r3
 80050a2:	f3bf 8f6f 	isb	sy
 80050a6:	f3bf 8f4f 	dsb	sy
 80050aa:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80050ac:	bf00      	nop
 80050ae:	e7fe      	b.n	80050ae <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d103      	bne.n	80050be <xQueueReceiveFromISR+0x3a>
 80050b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d101      	bne.n	80050c2 <xQueueReceiveFromISR+0x3e>
 80050be:	2301      	movs	r3, #1
 80050c0:	e000      	b.n	80050c4 <xQueueReceiveFromISR+0x40>
 80050c2:	2300      	movs	r3, #0
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d10a      	bne.n	80050de <xQueueReceiveFromISR+0x5a>
        __asm volatile
 80050c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050cc:	f383 8811 	msr	BASEPRI, r3
 80050d0:	f3bf 8f6f 	isb	sy
 80050d4:	f3bf 8f4f 	dsb	sy
 80050d8:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80050da:	bf00      	nop
 80050dc:	e7fe      	b.n	80050dc <xQueueReceiveFromISR+0x58>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80050de:	f002 f88d 	bl	80071fc <vPortValidateInterruptPriority>
        __asm volatile
 80050e2:	f3ef 8211 	mrs	r2, BASEPRI
 80050e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ea:	f383 8811 	msr	BASEPRI, r3
 80050ee:	f3bf 8f6f 	isb	sy
 80050f2:	f3bf 8f4f 	dsb	sy
 80050f6:	623a      	str	r2, [r7, #32]
 80050f8:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 80050fa:	6a3b      	ldr	r3, [r7, #32]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80050fc:	637b      	str	r3, [r7, #52]	; 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80050fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005102:	633b      	str	r3, [r7, #48]	; 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005106:	2b00      	cmp	r3, #0
 8005108:	d03e      	beq.n	8005188 <xQueueReceiveFromISR+0x104>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 800510a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800510c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005110:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005114:	68b9      	ldr	r1, [r7, #8]
 8005116:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005118:	f000 f8cb 	bl	80052b2 <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800511c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800511e:	1e5a      	subs	r2, r3, #1
 8005120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005122:	639a      	str	r2, [r3, #56]	; 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 8005124:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800512c:	d112      	bne.n	8005154 <xQueueReceiveFromISR+0xd0>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800512e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005130:	691b      	ldr	r3, [r3, #16]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d025      	beq.n	8005182 <xQueueReceiveFromISR+0xfe>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005138:	3310      	adds	r3, #16
 800513a:	4618      	mov	r0, r3
 800513c:	f000 fd9a 	bl	8005c74 <xTaskRemoveFromEventList>
 8005140:	4603      	mov	r3, r0
 8005142:	2b00      	cmp	r3, #0
 8005144:	d01d      	beq.n	8005182 <xQueueReceiveFromISR+0xfe>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d01a      	beq.n	8005182 <xQueueReceiveFromISR+0xfe>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	601a      	str	r2, [r3, #0]
 8005152:	e016      	b.n	8005182 <xQueueReceiveFromISR+0xfe>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                configASSERT( cRxLock != queueINT8_MAX );
 8005154:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005158:	2b7f      	cmp	r3, #127	; 0x7f
 800515a:	d10a      	bne.n	8005172 <xQueueReceiveFromISR+0xee>
        __asm volatile
 800515c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005160:	f383 8811 	msr	BASEPRI, r3
 8005164:	f3bf 8f6f 	isb	sy
 8005168:	f3bf 8f4f 	dsb	sy
 800516c:	61bb      	str	r3, [r7, #24]
    }
 800516e:	bf00      	nop
 8005170:	e7fe      	b.n	8005170 <xQueueReceiveFromISR+0xec>

                pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005172:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005176:	3301      	adds	r3, #1
 8005178:	b2db      	uxtb	r3, r3
 800517a:	b25a      	sxtb	r2, r3
 800517c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800517e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            }

            xReturn = pdPASS;
 8005182:	2301      	movs	r3, #1
 8005184:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005186:	e001      	b.n	800518c <xQueueReceiveFromISR+0x108>
        }
        else
        {
            xReturn = pdFAIL;
 8005188:	2300      	movs	r3, #0
 800518a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800518c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800518e:	617b      	str	r3, [r7, #20]
        __asm volatile
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	f383 8811 	msr	BASEPRI, r3
    }
 8005196:	bf00      	nop
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8005198:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800519a:	4618      	mov	r0, r3
 800519c:	3740      	adds	r7, #64	; 0x40
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}

080051a2 <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80051a2:	b580      	push	{r7, lr}
 80051a4:	b084      	sub	sp, #16
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d10a      	bne.n	80051c6 <uxQueueMessagesWaiting+0x24>
        __asm volatile
 80051b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b4:	f383 8811 	msr	BASEPRI, r3
 80051b8:	f3bf 8f6f 	isb	sy
 80051bc:	f3bf 8f4f 	dsb	sy
 80051c0:	60bb      	str	r3, [r7, #8]
    }
 80051c2:	bf00      	nop
 80051c4:	e7fe      	b.n	80051c4 <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 80051c6:	f001 ff37 	bl	8007038 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ce:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 80051d0:	f001 ff62 	bl	8007098 <vPortExitCritical>

    return uxReturn;
 80051d4:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80051d6:	4618      	mov	r0, r3
 80051d8:	3710      	adds	r7, #16
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}

080051de <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80051de:	b580      	push	{r7, lr}
 80051e0:	b086      	sub	sp, #24
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	60f8      	str	r0, [r7, #12]
 80051e6:	60b9      	str	r1, [r7, #8]
 80051e8:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80051ea:	2300      	movs	r3, #0
 80051ec:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051f2:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d10d      	bne.n	8005218 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d14d      	bne.n	80052a0 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	4618      	mov	r0, r3
 800520a:	f000 feed 	bl	8005fe8 <xTaskPriorityDisinherit>
 800520e:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2200      	movs	r2, #0
 8005214:	609a      	str	r2, [r3, #8]
 8005216:	e043      	b.n	80052a0 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d119      	bne.n	8005252 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	6858      	ldr	r0, [r3, #4]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005226:	461a      	mov	r2, r3
 8005228:	68b9      	ldr	r1, [r7, #8]
 800522a:	f002 fbf7 	bl	8007a1c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	685a      	ldr	r2, [r3, #4]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005236:	441a      	add	r2, r3
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	685a      	ldr	r2, [r3, #4]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	429a      	cmp	r2, r3
 8005246:	d32b      	bcc.n	80052a0 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	605a      	str	r2, [r3, #4]
 8005250:	e026      	b.n	80052a0 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	68d8      	ldr	r0, [r3, #12]
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800525a:	461a      	mov	r2, r3
 800525c:	68b9      	ldr	r1, [r7, #8]
 800525e:	f002 fbdd 	bl	8007a1c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	68da      	ldr	r2, [r3, #12]
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526a:	425b      	negs	r3, r3
 800526c:	441a      	add	r2, r3
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	68da      	ldr	r2, [r3, #12]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	429a      	cmp	r2, r3
 800527c:	d207      	bcs.n	800528e <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	689a      	ldr	r2, [r3, #8]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005286:	425b      	negs	r3, r3
 8005288:	441a      	add	r2, r3
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2b02      	cmp	r3, #2
 8005292:	d105      	bne.n	80052a0 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d002      	beq.n	80052a0 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	3b01      	subs	r3, #1
 800529e:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	1c5a      	adds	r2, r3, #1
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 80052a8:	697b      	ldr	r3, [r7, #20]
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3718      	adds	r7, #24
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}

080052b2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80052b2:	b580      	push	{r7, lr}
 80052b4:	b082      	sub	sp, #8
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	6078      	str	r0, [r7, #4]
 80052ba:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d018      	beq.n	80052f6 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	68da      	ldr	r2, [r3, #12]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052cc:	441a      	add	r2, r3
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	68da      	ldr	r2, [r3, #12]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	429a      	cmp	r2, r3
 80052dc:	d303      	bcc.n	80052e6 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	68d9      	ldr	r1, [r3, #12]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ee:	461a      	mov	r2, r3
 80052f0:	6838      	ldr	r0, [r7, #0]
 80052f2:	f002 fb93 	bl	8007a1c <memcpy>
    }
}
 80052f6:	bf00      	nop
 80052f8:	3708      	adds	r7, #8
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}

080052fe <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80052fe:	b580      	push	{r7, lr}
 8005300:	b084      	sub	sp, #16
 8005302:	af00      	add	r7, sp, #0
 8005304:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8005306:	f001 fe97 	bl	8007038 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005310:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8005312:	e011      	b.n	8005338 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005318:	2b00      	cmp	r3, #0
 800531a:	d012      	beq.n	8005342 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	3324      	adds	r3, #36	; 0x24
 8005320:	4618      	mov	r0, r3
 8005322:	f000 fca7 	bl	8005c74 <xTaskRemoveFromEventList>
 8005326:	4603      	mov	r3, r0
 8005328:	2b00      	cmp	r3, #0
 800532a:	d001      	beq.n	8005330 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 800532c:	f000 fd80 	bl	8005e30 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8005330:	7bfb      	ldrb	r3, [r7, #15]
 8005332:	3b01      	subs	r3, #1
 8005334:	b2db      	uxtb	r3, r3
 8005336:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8005338:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800533c:	2b00      	cmp	r3, #0
 800533e:	dce9      	bgt.n	8005314 <prvUnlockQueue+0x16>
 8005340:	e000      	b.n	8005344 <prvUnlockQueue+0x46>
                        break;
 8005342:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	22ff      	movs	r2, #255	; 0xff
 8005348:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800534c:	f001 fea4 	bl	8007098 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8005350:	f001 fe72 	bl	8007038 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800535a:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800535c:	e011      	b.n	8005382 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	691b      	ldr	r3, [r3, #16]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d012      	beq.n	800538c <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	3310      	adds	r3, #16
 800536a:	4618      	mov	r0, r3
 800536c:	f000 fc82 	bl	8005c74 <xTaskRemoveFromEventList>
 8005370:	4603      	mov	r3, r0
 8005372:	2b00      	cmp	r3, #0
 8005374:	d001      	beq.n	800537a <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8005376:	f000 fd5b 	bl	8005e30 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800537a:	7bbb      	ldrb	r3, [r7, #14]
 800537c:	3b01      	subs	r3, #1
 800537e:	b2db      	uxtb	r3, r3
 8005380:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8005382:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005386:	2b00      	cmp	r3, #0
 8005388:	dce9      	bgt.n	800535e <prvUnlockQueue+0x60>
 800538a:	e000      	b.n	800538e <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800538c:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	22ff      	movs	r2, #255	; 0xff
 8005392:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8005396:	f001 fe7f 	bl	8007098 <vPortExitCritical>
}
 800539a:	bf00      	nop
 800539c:	3710      	adds	r7, #16
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}

080053a2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80053a2:	b580      	push	{r7, lr}
 80053a4:	b084      	sub	sp, #16
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80053aa:	f001 fe45 	bl	8007038 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d102      	bne.n	80053bc <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80053b6:	2301      	movs	r3, #1
 80053b8:	60fb      	str	r3, [r7, #12]
 80053ba:	e001      	b.n	80053c0 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80053bc:	2300      	movs	r3, #0
 80053be:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80053c0:	f001 fe6a 	bl	8007098 <vPortExitCritical>

    return xReturn;
 80053c4:	68fb      	ldr	r3, [r7, #12]
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3710      	adds	r7, #16
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}

080053ce <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80053ce:	b580      	push	{r7, lr}
 80053d0:	b084      	sub	sp, #16
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80053d6:	f001 fe2f 	bl	8007038 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d102      	bne.n	80053ec <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80053e6:	2301      	movs	r3, #1
 80053e8:	60fb      	str	r3, [r7, #12]
 80053ea:	e001      	b.n	80053f0 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80053ec:	2300      	movs	r3, #0
 80053ee:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80053f0:	f001 fe52 	bl	8007098 <vPortExitCritical>

    return xReturn;
 80053f4:	68fb      	ldr	r3, [r7, #12]
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3710      	adds	r7, #16
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}

080053fe <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 80053fe:	b480      	push	{r7}
 8005400:	b087      	sub	sp, #28
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d10a      	bne.n	8005426 <xQueueIsQueueFullFromISR+0x28>
        __asm volatile
 8005410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005414:	f383 8811 	msr	BASEPRI, r3
 8005418:	f3bf 8f6f 	isb	sy
 800541c:	f3bf 8f4f 	dsb	sy
 8005420:	60fb      	str	r3, [r7, #12]
    }
 8005422:	bf00      	nop
 8005424:	e7fe      	b.n	8005424 <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800542e:	429a      	cmp	r2, r3
 8005430:	d102      	bne.n	8005438 <xQueueIsQueueFullFromISR+0x3a>
    {
        xReturn = pdTRUE;
 8005432:	2301      	movs	r3, #1
 8005434:	617b      	str	r3, [r7, #20]
 8005436:	e001      	b.n	800543c <xQueueIsQueueFullFromISR+0x3e>
    }
    else
    {
        xReturn = pdFALSE;
 8005438:	2300      	movs	r3, #0
 800543a:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800543c:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800543e:	4618      	mov	r0, r3
 8005440:	371c      	adds	r7, #28
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr
	...

0800544c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800544c:	b480      	push	{r7}
 800544e:	b085      	sub	sp, #20
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005456:	2300      	movs	r3, #0
 8005458:	60fb      	str	r3, [r7, #12]
 800545a:	e014      	b.n	8005486 <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800545c:	4a0f      	ldr	r2, [pc, #60]	; (800549c <vQueueAddToRegistry+0x50>)
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d10b      	bne.n	8005480 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005468:	490c      	ldr	r1, [pc, #48]	; (800549c <vQueueAddToRegistry+0x50>)
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	683a      	ldr	r2, [r7, #0]
 800546e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8005472:	4a0a      	ldr	r2, [pc, #40]	; (800549c <vQueueAddToRegistry+0x50>)
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	00db      	lsls	r3, r3, #3
 8005478:	4413      	add	r3, r2
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 800547e:	e006      	b.n	800548e <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	3301      	adds	r3, #1
 8005484:	60fb      	str	r3, [r7, #12]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2b07      	cmp	r3, #7
 800548a:	d9e7      	bls.n	800545c <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 800548c:	bf00      	nop
 800548e:	bf00      	nop
 8005490:	3714      	adds	r7, #20
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr
 800549a:	bf00      	nop
 800549c:	20019770 	.word	0x20019770

080054a0 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b086      	sub	sp, #24
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	60b9      	str	r1, [r7, #8]
 80054aa:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80054b0:	f001 fdc2 	bl	8007038 <vPortEnterCritical>
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80054ba:	b25b      	sxtb	r3, r3
 80054bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054c0:	d103      	bne.n	80054ca <vQueueWaitForMessageRestricted+0x2a>
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	2200      	movs	r2, #0
 80054c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054d0:	b25b      	sxtb	r3, r3
 80054d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054d6:	d103      	bne.n	80054e0 <vQueueWaitForMessageRestricted+0x40>
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	2200      	movs	r2, #0
 80054dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054e0:	f001 fdda 	bl	8007098 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d106      	bne.n	80054fa <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	3324      	adds	r3, #36	; 0x24
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	68b9      	ldr	r1, [r7, #8]
 80054f4:	4618      	mov	r0, r3
 80054f6:	f000 fb91 	bl	8005c1c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80054fa:	6978      	ldr	r0, [r7, #20]
 80054fc:	f7ff feff 	bl	80052fe <prvUnlockQueue>
    }
 8005500:	bf00      	nop
 8005502:	3718      	adds	r7, #24
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}

08005508 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8005508:	b580      	push	{r7, lr}
 800550a:	b08c      	sub	sp, #48	; 0x30
 800550c:	af04      	add	r7, sp, #16
 800550e:	60f8      	str	r0, [r7, #12]
 8005510:	60b9      	str	r1, [r7, #8]
 8005512:	603b      	str	r3, [r7, #0]
 8005514:	4613      	mov	r3, r2
 8005516:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005518:	88fb      	ldrh	r3, [r7, #6]
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	4618      	mov	r0, r3
 800551e:	f001 fead 	bl	800727c <pvPortMalloc>
 8005522:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d00e      	beq.n	8005548 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800552a:	2058      	movs	r0, #88	; 0x58
 800552c:	f001 fea6 	bl	800727c <pvPortMalloc>
 8005530:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8005532:	69fb      	ldr	r3, [r7, #28]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d003      	beq.n	8005540 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	697a      	ldr	r2, [r7, #20]
 800553c:	631a      	str	r2, [r3, #48]	; 0x30
 800553e:	e005      	b.n	800554c <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8005540:	6978      	ldr	r0, [r7, #20]
 8005542:	f001 ff7b 	bl	800743c <vPortFree>
 8005546:	e001      	b.n	800554c <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8005548:	2300      	movs	r3, #0
 800554a:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800554c:	69fb      	ldr	r3, [r7, #28]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d013      	beq.n	800557a <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005552:	88fa      	ldrh	r2, [r7, #6]
 8005554:	2300      	movs	r3, #0
 8005556:	9303      	str	r3, [sp, #12]
 8005558:	69fb      	ldr	r3, [r7, #28]
 800555a:	9302      	str	r3, [sp, #8]
 800555c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800555e:	9301      	str	r3, [sp, #4]
 8005560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005562:	9300      	str	r3, [sp, #0]
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	68b9      	ldr	r1, [r7, #8]
 8005568:	68f8      	ldr	r0, [r7, #12]
 800556a:	f000 f80e 	bl	800558a <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800556e:	69f8      	ldr	r0, [r7, #28]
 8005570:	f000 f8a2 	bl	80056b8 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8005574:	2301      	movs	r3, #1
 8005576:	61bb      	str	r3, [r7, #24]
 8005578:	e002      	b.n	8005580 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800557a:	f04f 33ff 	mov.w	r3, #4294967295
 800557e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8005580:	69bb      	ldr	r3, [r7, #24]
    }
 8005582:	4618      	mov	r0, r3
 8005584:	3720      	adds	r7, #32
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}

0800558a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800558a:	b580      	push	{r7, lr}
 800558c:	b088      	sub	sp, #32
 800558e:	af00      	add	r7, sp, #0
 8005590:	60f8      	str	r0, [r7, #12]
 8005592:	60b9      	str	r1, [r7, #8]
 8005594:	607a      	str	r2, [r7, #4]
 8005596:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800559a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	461a      	mov	r2, r3
 80055a2:	21a5      	movs	r1, #165	; 0xa5
 80055a4:	f002 fa48 	bl	8007a38 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80055a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80055b2:	3b01      	subs	r3, #1
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	4413      	add	r3, r2
 80055b8:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80055ba:	69bb      	ldr	r3, [r7, #24]
 80055bc:	f023 0307 	bic.w	r3, r3, #7
 80055c0:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80055c2:	69bb      	ldr	r3, [r7, #24]
 80055c4:	f003 0307 	and.w	r3, r3, #7
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d00a      	beq.n	80055e2 <prvInitialiseNewTask+0x58>
        __asm volatile
 80055cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d0:	f383 8811 	msr	BASEPRI, r3
 80055d4:	f3bf 8f6f 	isb	sy
 80055d8:	f3bf 8f4f 	dsb	sy
 80055dc:	617b      	str	r3, [r7, #20]
    }
 80055de:	bf00      	nop
 80055e0:	e7fe      	b.n	80055e0 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d01f      	beq.n	8005628 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80055e8:	2300      	movs	r3, #0
 80055ea:	61fb      	str	r3, [r7, #28]
 80055ec:	e012      	b.n	8005614 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80055ee:	68ba      	ldr	r2, [r7, #8]
 80055f0:	69fb      	ldr	r3, [r7, #28]
 80055f2:	4413      	add	r3, r2
 80055f4:	7819      	ldrb	r1, [r3, #0]
 80055f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055f8:	69fb      	ldr	r3, [r7, #28]
 80055fa:	4413      	add	r3, r2
 80055fc:	3334      	adds	r3, #52	; 0x34
 80055fe:	460a      	mov	r2, r1
 8005600:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8005602:	68ba      	ldr	r2, [r7, #8]
 8005604:	69fb      	ldr	r3, [r7, #28]
 8005606:	4413      	add	r3, r2
 8005608:	781b      	ldrb	r3, [r3, #0]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d006      	beq.n	800561c <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800560e:	69fb      	ldr	r3, [r7, #28]
 8005610:	3301      	adds	r3, #1
 8005612:	61fb      	str	r3, [r7, #28]
 8005614:	69fb      	ldr	r3, [r7, #28]
 8005616:	2b09      	cmp	r3, #9
 8005618:	d9e9      	bls.n	80055ee <prvInitialiseNewTask+0x64>
 800561a:	e000      	b.n	800561e <prvInitialiseNewTask+0x94>
            {
                break;
 800561c:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800561e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005620:	2200      	movs	r2, #0
 8005622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005626:	e003      	b.n	8005630 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800562a:	2200      	movs	r2, #0
 800562c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005632:	2b04      	cmp	r3, #4
 8005634:	d901      	bls.n	800563a <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005636:	2304      	movs	r3, #4
 8005638:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800563a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800563c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800563e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8005640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005642:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005644:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8005646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005648:	2200      	movs	r2, #0
 800564a:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800564c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800564e:	3304      	adds	r3, #4
 8005650:	4618      	mov	r0, r3
 8005652:	f7ff f911 	bl	8004878 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005658:	3318      	adds	r3, #24
 800565a:	4618      	mov	r0, r3
 800565c:	f7ff f90c 	bl	8004878 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005662:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005664:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005668:	f1c3 0205 	rsb	r2, r3, #5
 800566c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800566e:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005672:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005674:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8005676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005678:	3350      	adds	r3, #80	; 0x50
 800567a:	2204      	movs	r2, #4
 800567c:	2100      	movs	r1, #0
 800567e:	4618      	mov	r0, r3
 8005680:	f002 f9da 	bl	8007a38 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8005684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005686:	3354      	adds	r3, #84	; 0x54
 8005688:	2201      	movs	r2, #1
 800568a:	2100      	movs	r1, #0
 800568c:	4618      	mov	r0, r3
 800568e:	f002 f9d3 	bl	8007a38 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005692:	683a      	ldr	r2, [r7, #0]
 8005694:	68f9      	ldr	r1, [r7, #12]
 8005696:	69b8      	ldr	r0, [r7, #24]
 8005698:	f001 fba0 	bl	8006ddc <pxPortInitialiseStack>
 800569c:	4602      	mov	r2, r0
 800569e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a0:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80056a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d002      	beq.n	80056ae <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80056a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056ac:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80056ae:	bf00      	nop
 80056b0:	3720      	adds	r7, #32
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
	...

080056b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b082      	sub	sp, #8
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80056c0:	f001 fcba 	bl	8007038 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80056c4:	4b2c      	ldr	r3, [pc, #176]	; (8005778 <prvAddNewTaskToReadyList+0xc0>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	3301      	adds	r3, #1
 80056ca:	4a2b      	ldr	r2, [pc, #172]	; (8005778 <prvAddNewTaskToReadyList+0xc0>)
 80056cc:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80056ce:	4b2b      	ldr	r3, [pc, #172]	; (800577c <prvAddNewTaskToReadyList+0xc4>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d109      	bne.n	80056ea <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80056d6:	4a29      	ldr	r2, [pc, #164]	; (800577c <prvAddNewTaskToReadyList+0xc4>)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80056dc:	4b26      	ldr	r3, [pc, #152]	; (8005778 <prvAddNewTaskToReadyList+0xc0>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d110      	bne.n	8005706 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80056e4:	f000 fbc8 	bl	8005e78 <prvInitialiseTaskLists>
 80056e8:	e00d      	b.n	8005706 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80056ea:	4b25      	ldr	r3, [pc, #148]	; (8005780 <prvAddNewTaskToReadyList+0xc8>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d109      	bne.n	8005706 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80056f2:	4b22      	ldr	r3, [pc, #136]	; (800577c <prvAddNewTaskToReadyList+0xc4>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d802      	bhi.n	8005706 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8005700:	4a1e      	ldr	r2, [pc, #120]	; (800577c <prvAddNewTaskToReadyList+0xc4>)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8005706:	4b1f      	ldr	r3, [pc, #124]	; (8005784 <prvAddNewTaskToReadyList+0xcc>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	3301      	adds	r3, #1
 800570c:	4a1d      	ldr	r2, [pc, #116]	; (8005784 <prvAddNewTaskToReadyList+0xcc>)
 800570e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005710:	4b1c      	ldr	r3, [pc, #112]	; (8005784 <prvAddNewTaskToReadyList+0xcc>)
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800571c:	2201      	movs	r2, #1
 800571e:	409a      	lsls	r2, r3
 8005720:	4b19      	ldr	r3, [pc, #100]	; (8005788 <prvAddNewTaskToReadyList+0xd0>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4313      	orrs	r3, r2
 8005726:	4a18      	ldr	r2, [pc, #96]	; (8005788 <prvAddNewTaskToReadyList+0xd0>)
 8005728:	6013      	str	r3, [r2, #0]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800572e:	4613      	mov	r3, r2
 8005730:	009b      	lsls	r3, r3, #2
 8005732:	4413      	add	r3, r2
 8005734:	009b      	lsls	r3, r3, #2
 8005736:	4a15      	ldr	r2, [pc, #84]	; (800578c <prvAddNewTaskToReadyList+0xd4>)
 8005738:	441a      	add	r2, r3
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	3304      	adds	r3, #4
 800573e:	4619      	mov	r1, r3
 8005740:	4610      	mov	r0, r2
 8005742:	f7ff f8a6 	bl	8004892 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8005746:	f001 fca7 	bl	8007098 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800574a:	4b0d      	ldr	r3, [pc, #52]	; (8005780 <prvAddNewTaskToReadyList+0xc8>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d00e      	beq.n	8005770 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005752:	4b0a      	ldr	r3, [pc, #40]	; (800577c <prvAddNewTaskToReadyList+0xc4>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800575c:	429a      	cmp	r2, r3
 800575e:	d207      	bcs.n	8005770 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8005760:	4b0b      	ldr	r3, [pc, #44]	; (8005790 <prvAddNewTaskToReadyList+0xd8>)
 8005762:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005766:	601a      	str	r2, [r3, #0]
 8005768:	f3bf 8f4f 	dsb	sy
 800576c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005770:	bf00      	nop
 8005772:	3708      	adds	r7, #8
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}
 8005778:	200001e4 	.word	0x200001e4
 800577c:	2000010c 	.word	0x2000010c
 8005780:	200001f0 	.word	0x200001f0
 8005784:	20000200 	.word	0x20000200
 8005788:	200001ec 	.word	0x200001ec
 800578c:	20000110 	.word	0x20000110
 8005790:	e000ed04 	.word	0xe000ed04

08005794 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b086      	sub	sp, #24
 8005798:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800579a:	4b20      	ldr	r3, [pc, #128]	; (800581c <vTaskStartScheduler+0x88>)
 800579c:	9301      	str	r3, [sp, #4]
 800579e:	2300      	movs	r3, #0
 80057a0:	9300      	str	r3, [sp, #0]
 80057a2:	2300      	movs	r3, #0
 80057a4:	2282      	movs	r2, #130	; 0x82
 80057a6:	491e      	ldr	r1, [pc, #120]	; (8005820 <vTaskStartScheduler+0x8c>)
 80057a8:	481e      	ldr	r0, [pc, #120]	; (8005824 <vTaskStartScheduler+0x90>)
 80057aa:	f7ff fead 	bl	8005508 <xTaskCreate>
 80057ae:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d102      	bne.n	80057bc <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80057b6:	f000 ff59 	bl	800666c <xTimerCreateTimerTask>
 80057ba:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d116      	bne.n	80057f0 <vTaskStartScheduler+0x5c>
        __asm volatile
 80057c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c6:	f383 8811 	msr	BASEPRI, r3
 80057ca:	f3bf 8f6f 	isb	sy
 80057ce:	f3bf 8f4f 	dsb	sy
 80057d2:	60bb      	str	r3, [r7, #8]
    }
 80057d4:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80057d6:	4b14      	ldr	r3, [pc, #80]	; (8005828 <vTaskStartScheduler+0x94>)
 80057d8:	f04f 32ff 	mov.w	r2, #4294967295
 80057dc:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80057de:	4b13      	ldr	r3, [pc, #76]	; (800582c <vTaskStartScheduler+0x98>)
 80057e0:	2201      	movs	r2, #1
 80057e2:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80057e4:	4b12      	ldr	r3, [pc, #72]	; (8005830 <vTaskStartScheduler+0x9c>)
 80057e6:	2200      	movs	r2, #0
 80057e8:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80057ea:	f001 fb83 	bl	8006ef4 <xPortStartScheduler>
 80057ee:	e00e      	b.n	800580e <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057f6:	d10a      	bne.n	800580e <vTaskStartScheduler+0x7a>
        __asm volatile
 80057f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057fc:	f383 8811 	msr	BASEPRI, r3
 8005800:	f3bf 8f6f 	isb	sy
 8005804:	f3bf 8f4f 	dsb	sy
 8005808:	607b      	str	r3, [r7, #4]
    }
 800580a:	bf00      	nop
 800580c:	e7fe      	b.n	800580c <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800580e:	4b09      	ldr	r3, [pc, #36]	; (8005834 <vTaskStartScheduler+0xa0>)
 8005810:	681b      	ldr	r3, [r3, #0]
}
 8005812:	bf00      	nop
 8005814:	3710      	adds	r7, #16
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
 800581a:	bf00      	nop
 800581c:	20000208 	.word	0x20000208
 8005820:	0800903c 	.word	0x0800903c
 8005824:	08005e49 	.word	0x08005e49
 8005828:	20000204 	.word	0x20000204
 800582c:	200001f0 	.word	0x200001f0
 8005830:	200001e8 	.word	0x200001e8
 8005834:	20000020 	.word	0x20000020

08005838 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005838:	b480      	push	{r7}
 800583a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800583c:	4b04      	ldr	r3, [pc, #16]	; (8005850 <vTaskSuspendAll+0x18>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	3301      	adds	r3, #1
 8005842:	4a03      	ldr	r2, [pc, #12]	; (8005850 <vTaskSuspendAll+0x18>)
 8005844:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8005846:	bf00      	nop
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr
 8005850:	2000020c 	.word	0x2000020c

08005854 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800585a:	2300      	movs	r3, #0
 800585c:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800585e:	2300      	movs	r3, #0
 8005860:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8005862:	4b41      	ldr	r3, [pc, #260]	; (8005968 <xTaskResumeAll+0x114>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d10a      	bne.n	8005880 <xTaskResumeAll+0x2c>
        __asm volatile
 800586a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800586e:	f383 8811 	msr	BASEPRI, r3
 8005872:	f3bf 8f6f 	isb	sy
 8005876:	f3bf 8f4f 	dsb	sy
 800587a:	603b      	str	r3, [r7, #0]
    }
 800587c:	bf00      	nop
 800587e:	e7fe      	b.n	800587e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8005880:	f001 fbda 	bl	8007038 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8005884:	4b38      	ldr	r3, [pc, #224]	; (8005968 <xTaskResumeAll+0x114>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	3b01      	subs	r3, #1
 800588a:	4a37      	ldr	r2, [pc, #220]	; (8005968 <xTaskResumeAll+0x114>)
 800588c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800588e:	4b36      	ldr	r3, [pc, #216]	; (8005968 <xTaskResumeAll+0x114>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d161      	bne.n	800595a <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005896:	4b35      	ldr	r3, [pc, #212]	; (800596c <xTaskResumeAll+0x118>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d05d      	beq.n	800595a <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800589e:	e02e      	b.n	80058fe <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058a0:	4b33      	ldr	r3, [pc, #204]	; (8005970 <xTaskResumeAll+0x11c>)
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	68db      	ldr	r3, [r3, #12]
 80058a6:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	3318      	adds	r3, #24
 80058ac:	4618      	mov	r0, r3
 80058ae:	f7ff f84d 	bl	800494c <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	3304      	adds	r3, #4
 80058b6:	4618      	mov	r0, r3
 80058b8:	f7ff f848 	bl	800494c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c0:	2201      	movs	r2, #1
 80058c2:	409a      	lsls	r2, r3
 80058c4:	4b2b      	ldr	r3, [pc, #172]	; (8005974 <xTaskResumeAll+0x120>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4313      	orrs	r3, r2
 80058ca:	4a2a      	ldr	r2, [pc, #168]	; (8005974 <xTaskResumeAll+0x120>)
 80058cc:	6013      	str	r3, [r2, #0]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058d2:	4613      	mov	r3, r2
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	4413      	add	r3, r2
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	4a27      	ldr	r2, [pc, #156]	; (8005978 <xTaskResumeAll+0x124>)
 80058dc:	441a      	add	r2, r3
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	3304      	adds	r3, #4
 80058e2:	4619      	mov	r1, r3
 80058e4:	4610      	mov	r0, r2
 80058e6:	f7fe ffd4 	bl	8004892 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058ee:	4b23      	ldr	r3, [pc, #140]	; (800597c <xTaskResumeAll+0x128>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d302      	bcc.n	80058fe <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 80058f8:	4b21      	ldr	r3, [pc, #132]	; (8005980 <xTaskResumeAll+0x12c>)
 80058fa:	2201      	movs	r2, #1
 80058fc:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80058fe:	4b1c      	ldr	r3, [pc, #112]	; (8005970 <xTaskResumeAll+0x11c>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d1cc      	bne.n	80058a0 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d001      	beq.n	8005910 <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800590c:	f000 fb32 	bl	8005f74 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005910:	4b1c      	ldr	r3, [pc, #112]	; (8005984 <xTaskResumeAll+0x130>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d010      	beq.n	800593e <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800591c:	f000 f846 	bl	80059ac <xTaskIncrementTick>
 8005920:	4603      	mov	r3, r0
 8005922:	2b00      	cmp	r3, #0
 8005924:	d002      	beq.n	800592c <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 8005926:	4b16      	ldr	r3, [pc, #88]	; (8005980 <xTaskResumeAll+0x12c>)
 8005928:	2201      	movs	r2, #1
 800592a:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	3b01      	subs	r3, #1
 8005930:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d1f1      	bne.n	800591c <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 8005938:	4b12      	ldr	r3, [pc, #72]	; (8005984 <xTaskResumeAll+0x130>)
 800593a:	2200      	movs	r2, #0
 800593c:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800593e:	4b10      	ldr	r3, [pc, #64]	; (8005980 <xTaskResumeAll+0x12c>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d009      	beq.n	800595a <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8005946:	2301      	movs	r3, #1
 8005948:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800594a:	4b0f      	ldr	r3, [pc, #60]	; (8005988 <xTaskResumeAll+0x134>)
 800594c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005950:	601a      	str	r2, [r3, #0]
 8005952:	f3bf 8f4f 	dsb	sy
 8005956:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800595a:	f001 fb9d 	bl	8007098 <vPortExitCritical>

    return xAlreadyYielded;
 800595e:	68bb      	ldr	r3, [r7, #8]
}
 8005960:	4618      	mov	r0, r3
 8005962:	3710      	adds	r7, #16
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}
 8005968:	2000020c 	.word	0x2000020c
 800596c:	200001e4 	.word	0x200001e4
 8005970:	200001a4 	.word	0x200001a4
 8005974:	200001ec 	.word	0x200001ec
 8005978:	20000110 	.word	0x20000110
 800597c:	2000010c 	.word	0x2000010c
 8005980:	200001f8 	.word	0x200001f8
 8005984:	200001f4 	.word	0x200001f4
 8005988:	e000ed04 	.word	0xe000ed04

0800598c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800598c:	b480      	push	{r7}
 800598e:	b083      	sub	sp, #12
 8005990:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8005992:	4b05      	ldr	r3, [pc, #20]	; (80059a8 <xTaskGetTickCount+0x1c>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8005998:	687b      	ldr	r3, [r7, #4]
}
 800599a:	4618      	mov	r0, r3
 800599c:	370c      	adds	r7, #12
 800599e:	46bd      	mov	sp, r7
 80059a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a4:	4770      	bx	lr
 80059a6:	bf00      	nop
 80059a8:	200001e8 	.word	0x200001e8

080059ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b086      	sub	sp, #24
 80059b0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80059b2:	2300      	movs	r3, #0
 80059b4:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059b6:	4b4e      	ldr	r3, [pc, #312]	; (8005af0 <xTaskIncrementTick+0x144>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	f040 808e 	bne.w	8005adc <xTaskIncrementTick+0x130>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80059c0:	4b4c      	ldr	r3, [pc, #304]	; (8005af4 <xTaskIncrementTick+0x148>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	3301      	adds	r3, #1
 80059c6:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80059c8:	4a4a      	ldr	r2, [pc, #296]	; (8005af4 <xTaskIncrementTick+0x148>)
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d120      	bne.n	8005a16 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80059d4:	4b48      	ldr	r3, [pc, #288]	; (8005af8 <xTaskIncrementTick+0x14c>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d00a      	beq.n	80059f4 <xTaskIncrementTick+0x48>
        __asm volatile
 80059de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e2:	f383 8811 	msr	BASEPRI, r3
 80059e6:	f3bf 8f6f 	isb	sy
 80059ea:	f3bf 8f4f 	dsb	sy
 80059ee:	603b      	str	r3, [r7, #0]
    }
 80059f0:	bf00      	nop
 80059f2:	e7fe      	b.n	80059f2 <xTaskIncrementTick+0x46>
 80059f4:	4b40      	ldr	r3, [pc, #256]	; (8005af8 <xTaskIncrementTick+0x14c>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	60fb      	str	r3, [r7, #12]
 80059fa:	4b40      	ldr	r3, [pc, #256]	; (8005afc <xTaskIncrementTick+0x150>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a3e      	ldr	r2, [pc, #248]	; (8005af8 <xTaskIncrementTick+0x14c>)
 8005a00:	6013      	str	r3, [r2, #0]
 8005a02:	4a3e      	ldr	r2, [pc, #248]	; (8005afc <xTaskIncrementTick+0x150>)
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	6013      	str	r3, [r2, #0]
 8005a08:	4b3d      	ldr	r3, [pc, #244]	; (8005b00 <xTaskIncrementTick+0x154>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	4a3c      	ldr	r2, [pc, #240]	; (8005b00 <xTaskIncrementTick+0x154>)
 8005a10:	6013      	str	r3, [r2, #0]
 8005a12:	f000 faaf 	bl	8005f74 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8005a16:	4b3b      	ldr	r3, [pc, #236]	; (8005b04 <xTaskIncrementTick+0x158>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	693a      	ldr	r2, [r7, #16]
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d348      	bcc.n	8005ab2 <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a20:	4b35      	ldr	r3, [pc, #212]	; (8005af8 <xTaskIncrementTick+0x14c>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d104      	bne.n	8005a34 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a2a:	4b36      	ldr	r3, [pc, #216]	; (8005b04 <xTaskIncrementTick+0x158>)
 8005a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8005a30:	601a      	str	r2, [r3, #0]
                    break;
 8005a32:	e03e      	b.n	8005ab2 <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a34:	4b30      	ldr	r3, [pc, #192]	; (8005af8 <xTaskIncrementTick+0x14c>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	68db      	ldr	r3, [r3, #12]
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8005a44:	693a      	ldr	r2, [r7, #16]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d203      	bcs.n	8005a54 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8005a4c:	4a2d      	ldr	r2, [pc, #180]	; (8005b04 <xTaskIncrementTick+0x158>)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005a52:	e02e      	b.n	8005ab2 <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	3304      	adds	r3, #4
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f7fe ff77 	bl	800494c <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d004      	beq.n	8005a70 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	3318      	adds	r3, #24
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f7fe ff6e 	bl	800494c <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a74:	2201      	movs	r2, #1
 8005a76:	409a      	lsls	r2, r3
 8005a78:	4b23      	ldr	r3, [pc, #140]	; (8005b08 <xTaskIncrementTick+0x15c>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	4a22      	ldr	r2, [pc, #136]	; (8005b08 <xTaskIncrementTick+0x15c>)
 8005a80:	6013      	str	r3, [r2, #0]
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a86:	4613      	mov	r3, r2
 8005a88:	009b      	lsls	r3, r3, #2
 8005a8a:	4413      	add	r3, r2
 8005a8c:	009b      	lsls	r3, r3, #2
 8005a8e:	4a1f      	ldr	r2, [pc, #124]	; (8005b0c <xTaskIncrementTick+0x160>)
 8005a90:	441a      	add	r2, r3
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	3304      	adds	r3, #4
 8005a96:	4619      	mov	r1, r3
 8005a98:	4610      	mov	r0, r2
 8005a9a:	f7fe fefa 	bl	8004892 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aa2:	4b1b      	ldr	r3, [pc, #108]	; (8005b10 <xTaskIncrementTick+0x164>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d3b9      	bcc.n	8005a20 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8005aac:	2301      	movs	r3, #1
 8005aae:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ab0:	e7b6      	b.n	8005a20 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005ab2:	4b17      	ldr	r3, [pc, #92]	; (8005b10 <xTaskIncrementTick+0x164>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ab8:	4914      	ldr	r1, [pc, #80]	; (8005b0c <xTaskIncrementTick+0x160>)
 8005aba:	4613      	mov	r3, r2
 8005abc:	009b      	lsls	r3, r3, #2
 8005abe:	4413      	add	r3, r2
 8005ac0:	009b      	lsls	r3, r3, #2
 8005ac2:	440b      	add	r3, r1
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d901      	bls.n	8005ace <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 8005aca:	2301      	movs	r3, #1
 8005acc:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8005ace:	4b11      	ldr	r3, [pc, #68]	; (8005b14 <xTaskIncrementTick+0x168>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d007      	beq.n	8005ae6 <xTaskIncrementTick+0x13a>
                {
                    xSwitchRequired = pdTRUE;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	617b      	str	r3, [r7, #20]
 8005ada:	e004      	b.n	8005ae6 <xTaskIncrementTick+0x13a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8005adc:	4b0e      	ldr	r3, [pc, #56]	; (8005b18 <xTaskIncrementTick+0x16c>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	3301      	adds	r3, #1
 8005ae2:	4a0d      	ldr	r2, [pc, #52]	; (8005b18 <xTaskIncrementTick+0x16c>)
 8005ae4:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8005ae6:	697b      	ldr	r3, [r7, #20]
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3718      	adds	r7, #24
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}
 8005af0:	2000020c 	.word	0x2000020c
 8005af4:	200001e8 	.word	0x200001e8
 8005af8:	2000019c 	.word	0x2000019c
 8005afc:	200001a0 	.word	0x200001a0
 8005b00:	200001fc 	.word	0x200001fc
 8005b04:	20000204 	.word	0x20000204
 8005b08:	200001ec 	.word	0x200001ec
 8005b0c:	20000110 	.word	0x20000110
 8005b10:	2000010c 	.word	0x2000010c
 8005b14:	200001f8 	.word	0x200001f8
 8005b18:	200001f4 	.word	0x200001f4

08005b1c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b087      	sub	sp, #28
 8005b20:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005b22:	4b27      	ldr	r3, [pc, #156]	; (8005bc0 <vTaskSwitchContext+0xa4>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d003      	beq.n	8005b32 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8005b2a:	4b26      	ldr	r3, [pc, #152]	; (8005bc4 <vTaskSwitchContext+0xa8>)
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8005b30:	e03f      	b.n	8005bb2 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8005b32:	4b24      	ldr	r3, [pc, #144]	; (8005bc4 <vTaskSwitchContext+0xa8>)
 8005b34:	2200      	movs	r2, #0
 8005b36:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b38:	4b23      	ldr	r3, [pc, #140]	; (8005bc8 <vTaskSwitchContext+0xac>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	fab3 f383 	clz	r3, r3
 8005b44:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8005b46:	7afb      	ldrb	r3, [r7, #11]
 8005b48:	f1c3 031f 	rsb	r3, r3, #31
 8005b4c:	617b      	str	r3, [r7, #20]
 8005b4e:	491f      	ldr	r1, [pc, #124]	; (8005bcc <vTaskSwitchContext+0xb0>)
 8005b50:	697a      	ldr	r2, [r7, #20]
 8005b52:	4613      	mov	r3, r2
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	4413      	add	r3, r2
 8005b58:	009b      	lsls	r3, r3, #2
 8005b5a:	440b      	add	r3, r1
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d10a      	bne.n	8005b78 <vTaskSwitchContext+0x5c>
        __asm volatile
 8005b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b66:	f383 8811 	msr	BASEPRI, r3
 8005b6a:	f3bf 8f6f 	isb	sy
 8005b6e:	f3bf 8f4f 	dsb	sy
 8005b72:	607b      	str	r3, [r7, #4]
    }
 8005b74:	bf00      	nop
 8005b76:	e7fe      	b.n	8005b76 <vTaskSwitchContext+0x5a>
 8005b78:	697a      	ldr	r2, [r7, #20]
 8005b7a:	4613      	mov	r3, r2
 8005b7c:	009b      	lsls	r3, r3, #2
 8005b7e:	4413      	add	r3, r2
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	4a12      	ldr	r2, [pc, #72]	; (8005bcc <vTaskSwitchContext+0xb0>)
 8005b84:	4413      	add	r3, r2
 8005b86:	613b      	str	r3, [r7, #16]
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	685a      	ldr	r2, [r3, #4]
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	605a      	str	r2, [r3, #4]
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	685a      	ldr	r2, [r3, #4]
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	3308      	adds	r3, #8
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d104      	bne.n	8005ba8 <vTaskSwitchContext+0x8c>
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	685a      	ldr	r2, [r3, #4]
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	605a      	str	r2, [r3, #4]
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	68db      	ldr	r3, [r3, #12]
 8005bae:	4a08      	ldr	r2, [pc, #32]	; (8005bd0 <vTaskSwitchContext+0xb4>)
 8005bb0:	6013      	str	r3, [r2, #0]
}
 8005bb2:	bf00      	nop
 8005bb4:	371c      	adds	r7, #28
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr
 8005bbe:	bf00      	nop
 8005bc0:	2000020c 	.word	0x2000020c
 8005bc4:	200001f8 	.word	0x200001f8
 8005bc8:	200001ec 	.word	0x200001ec
 8005bcc:	20000110 	.word	0x20000110
 8005bd0:	2000010c 	.word	0x2000010c

08005bd4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b084      	sub	sp, #16
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d10a      	bne.n	8005bfa <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8005be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be8:	f383 8811 	msr	BASEPRI, r3
 8005bec:	f3bf 8f6f 	isb	sy
 8005bf0:	f3bf 8f4f 	dsb	sy
 8005bf4:	60fb      	str	r3, [r7, #12]
    }
 8005bf6:	bf00      	nop
 8005bf8:	e7fe      	b.n	8005bf8 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005bfa:	4b07      	ldr	r3, [pc, #28]	; (8005c18 <vTaskPlaceOnEventList+0x44>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	3318      	adds	r3, #24
 8005c00:	4619      	mov	r1, r3
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f7fe fe69 	bl	80048da <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005c08:	2101      	movs	r1, #1
 8005c0a:	6838      	ldr	r0, [r7, #0]
 8005c0c:	f000 fcc8 	bl	80065a0 <prvAddCurrentTaskToDelayedList>
}
 8005c10:	bf00      	nop
 8005c12:	3710      	adds	r7, #16
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}
 8005c18:	2000010c 	.word	0x2000010c

08005c1c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b086      	sub	sp, #24
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	60f8      	str	r0, [r7, #12]
 8005c24:	60b9      	str	r1, [r7, #8]
 8005c26:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d10a      	bne.n	8005c44 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8005c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c32:	f383 8811 	msr	BASEPRI, r3
 8005c36:	f3bf 8f6f 	isb	sy
 8005c3a:	f3bf 8f4f 	dsb	sy
 8005c3e:	617b      	str	r3, [r7, #20]
    }
 8005c40:	bf00      	nop
 8005c42:	e7fe      	b.n	8005c42 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005c44:	4b0a      	ldr	r3, [pc, #40]	; (8005c70 <vTaskPlaceOnEventListRestricted+0x54>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	3318      	adds	r3, #24
 8005c4a:	4619      	mov	r1, r3
 8005c4c:	68f8      	ldr	r0, [r7, #12]
 8005c4e:	f7fe fe20 	bl	8004892 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d002      	beq.n	8005c5e <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8005c58:	f04f 33ff 	mov.w	r3, #4294967295
 8005c5c:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005c5e:	6879      	ldr	r1, [r7, #4]
 8005c60:	68b8      	ldr	r0, [r7, #8]
 8005c62:	f000 fc9d 	bl	80065a0 <prvAddCurrentTaskToDelayedList>
    }
 8005c66:	bf00      	nop
 8005c68:	3718      	adds	r7, #24
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}
 8005c6e:	bf00      	nop
 8005c70:	2000010c 	.word	0x2000010c

08005c74 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b086      	sub	sp, #24
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	68db      	ldr	r3, [r3, #12]
 8005c82:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d10a      	bne.n	8005ca0 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8005c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c8e:	f383 8811 	msr	BASEPRI, r3
 8005c92:	f3bf 8f6f 	isb	sy
 8005c96:	f3bf 8f4f 	dsb	sy
 8005c9a:	60fb      	str	r3, [r7, #12]
    }
 8005c9c:	bf00      	nop
 8005c9e:	e7fe      	b.n	8005c9e <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	3318      	adds	r3, #24
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f7fe fe51 	bl	800494c <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005caa:	4b1d      	ldr	r3, [pc, #116]	; (8005d20 <xTaskRemoveFromEventList+0xac>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d11c      	bne.n	8005cec <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	3304      	adds	r3, #4
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f7fe fe48 	bl	800494c <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	409a      	lsls	r2, r3
 8005cc4:	4b17      	ldr	r3, [pc, #92]	; (8005d24 <xTaskRemoveFromEventList+0xb0>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	4a16      	ldr	r2, [pc, #88]	; (8005d24 <xTaskRemoveFromEventList+0xb0>)
 8005ccc:	6013      	str	r3, [r2, #0]
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cd2:	4613      	mov	r3, r2
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	4413      	add	r3, r2
 8005cd8:	009b      	lsls	r3, r3, #2
 8005cda:	4a13      	ldr	r2, [pc, #76]	; (8005d28 <xTaskRemoveFromEventList+0xb4>)
 8005cdc:	441a      	add	r2, r3
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	3304      	adds	r3, #4
 8005ce2:	4619      	mov	r1, r3
 8005ce4:	4610      	mov	r0, r2
 8005ce6:	f7fe fdd4 	bl	8004892 <vListInsertEnd>
 8005cea:	e005      	b.n	8005cf8 <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	3318      	adds	r3, #24
 8005cf0:	4619      	mov	r1, r3
 8005cf2:	480e      	ldr	r0, [pc, #56]	; (8005d2c <xTaskRemoveFromEventList+0xb8>)
 8005cf4:	f7fe fdcd 	bl	8004892 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cfc:	4b0c      	ldr	r3, [pc, #48]	; (8005d30 <xTaskRemoveFromEventList+0xbc>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d905      	bls.n	8005d12 <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8005d06:	2301      	movs	r3, #1
 8005d08:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8005d0a:	4b0a      	ldr	r3, [pc, #40]	; (8005d34 <xTaskRemoveFromEventList+0xc0>)
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	601a      	str	r2, [r3, #0]
 8005d10:	e001      	b.n	8005d16 <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 8005d12:	2300      	movs	r3, #0
 8005d14:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8005d16:	697b      	ldr	r3, [r7, #20]
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3718      	adds	r7, #24
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}
 8005d20:	2000020c 	.word	0x2000020c
 8005d24:	200001ec 	.word	0x200001ec
 8005d28:	20000110 	.word	0x20000110
 8005d2c:	200001a4 	.word	0x200001a4
 8005d30:	2000010c 	.word	0x2000010c
 8005d34:	200001f8 	.word	0x200001f8

08005d38 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b083      	sub	sp, #12
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005d40:	4b06      	ldr	r3, [pc, #24]	; (8005d5c <vTaskInternalSetTimeOutState+0x24>)
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8005d48:	4b05      	ldr	r3, [pc, #20]	; (8005d60 <vTaskInternalSetTimeOutState+0x28>)
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	605a      	str	r2, [r3, #4]
}
 8005d50:	bf00      	nop
 8005d52:	370c      	adds	r7, #12
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr
 8005d5c:	200001fc 	.word	0x200001fc
 8005d60:	200001e8 	.word	0x200001e8

08005d64 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b088      	sub	sp, #32
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d10a      	bne.n	8005d8a <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8005d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d78:	f383 8811 	msr	BASEPRI, r3
 8005d7c:	f3bf 8f6f 	isb	sy
 8005d80:	f3bf 8f4f 	dsb	sy
 8005d84:	613b      	str	r3, [r7, #16]
    }
 8005d86:	bf00      	nop
 8005d88:	e7fe      	b.n	8005d88 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d10a      	bne.n	8005da6 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8005d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d94:	f383 8811 	msr	BASEPRI, r3
 8005d98:	f3bf 8f6f 	isb	sy
 8005d9c:	f3bf 8f4f 	dsb	sy
 8005da0:	60fb      	str	r3, [r7, #12]
    }
 8005da2:	bf00      	nop
 8005da4:	e7fe      	b.n	8005da4 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8005da6:	f001 f947 	bl	8007038 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8005daa:	4b1f      	ldr	r3, [pc, #124]	; (8005e28 <xTaskCheckForTimeOut+0xc4>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	69ba      	ldr	r2, [r7, #24]
 8005db6:	1ad3      	subs	r3, r2, r3
 8005db8:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dc2:	d102      	bne.n	8005dca <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	61fb      	str	r3, [r7, #28]
 8005dc8:	e026      	b.n	8005e18 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	4b17      	ldr	r3, [pc, #92]	; (8005e2c <xTaskCheckForTimeOut+0xc8>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d00a      	beq.n	8005dec <xTaskCheckForTimeOut+0x88>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	69ba      	ldr	r2, [r7, #24]
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d305      	bcc.n	8005dec <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8005de0:	2301      	movs	r3, #1
 8005de2:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	2200      	movs	r2, #0
 8005de8:	601a      	str	r2, [r3, #0]
 8005dea:	e015      	b.n	8005e18 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	697a      	ldr	r2, [r7, #20]
 8005df2:	429a      	cmp	r2, r3
 8005df4:	d20b      	bcs.n	8005e0e <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	1ad2      	subs	r2, r2, r3
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f7ff ff98 	bl	8005d38 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	61fb      	str	r3, [r7, #28]
 8005e0c:	e004      	b.n	8005e18 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	2200      	movs	r2, #0
 8005e12:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8005e14:	2301      	movs	r3, #1
 8005e16:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8005e18:	f001 f93e 	bl	8007098 <vPortExitCritical>

    return xReturn;
 8005e1c:	69fb      	ldr	r3, [r7, #28]
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3720      	adds	r7, #32
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}
 8005e26:	bf00      	nop
 8005e28:	200001e8 	.word	0x200001e8
 8005e2c:	200001fc 	.word	0x200001fc

08005e30 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005e30:	b480      	push	{r7}
 8005e32:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8005e34:	4b03      	ldr	r3, [pc, #12]	; (8005e44 <vTaskMissedYield+0x14>)
 8005e36:	2201      	movs	r2, #1
 8005e38:	601a      	str	r2, [r3, #0]
}
 8005e3a:	bf00      	nop
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr
 8005e44:	200001f8 	.word	0x200001f8

08005e48 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b082      	sub	sp, #8
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8005e50:	f000 f852 	bl	8005ef8 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005e54:	4b06      	ldr	r3, [pc, #24]	; (8005e70 <prvIdleTask+0x28>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d9f9      	bls.n	8005e50 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8005e5c:	4b05      	ldr	r3, [pc, #20]	; (8005e74 <prvIdleTask+0x2c>)
 8005e5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e62:	601a      	str	r2, [r3, #0]
 8005e64:	f3bf 8f4f 	dsb	sy
 8005e68:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8005e6c:	e7f0      	b.n	8005e50 <prvIdleTask+0x8>
 8005e6e:	bf00      	nop
 8005e70:	20000110 	.word	0x20000110
 8005e74:	e000ed04 	.word	0xe000ed04

08005e78 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b082      	sub	sp, #8
 8005e7c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e7e:	2300      	movs	r3, #0
 8005e80:	607b      	str	r3, [r7, #4]
 8005e82:	e00c      	b.n	8005e9e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005e84:	687a      	ldr	r2, [r7, #4]
 8005e86:	4613      	mov	r3, r2
 8005e88:	009b      	lsls	r3, r3, #2
 8005e8a:	4413      	add	r3, r2
 8005e8c:	009b      	lsls	r3, r3, #2
 8005e8e:	4a12      	ldr	r2, [pc, #72]	; (8005ed8 <prvInitialiseTaskLists+0x60>)
 8005e90:	4413      	add	r3, r2
 8005e92:	4618      	mov	r0, r3
 8005e94:	f7fe fcd0 	bl	8004838 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	3301      	adds	r3, #1
 8005e9c:	607b      	str	r3, [r7, #4]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2b04      	cmp	r3, #4
 8005ea2:	d9ef      	bls.n	8005e84 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8005ea4:	480d      	ldr	r0, [pc, #52]	; (8005edc <prvInitialiseTaskLists+0x64>)
 8005ea6:	f7fe fcc7 	bl	8004838 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8005eaa:	480d      	ldr	r0, [pc, #52]	; (8005ee0 <prvInitialiseTaskLists+0x68>)
 8005eac:	f7fe fcc4 	bl	8004838 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8005eb0:	480c      	ldr	r0, [pc, #48]	; (8005ee4 <prvInitialiseTaskLists+0x6c>)
 8005eb2:	f7fe fcc1 	bl	8004838 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8005eb6:	480c      	ldr	r0, [pc, #48]	; (8005ee8 <prvInitialiseTaskLists+0x70>)
 8005eb8:	f7fe fcbe 	bl	8004838 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8005ebc:	480b      	ldr	r0, [pc, #44]	; (8005eec <prvInitialiseTaskLists+0x74>)
 8005ebe:	f7fe fcbb 	bl	8004838 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8005ec2:	4b0b      	ldr	r3, [pc, #44]	; (8005ef0 <prvInitialiseTaskLists+0x78>)
 8005ec4:	4a05      	ldr	r2, [pc, #20]	; (8005edc <prvInitialiseTaskLists+0x64>)
 8005ec6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005ec8:	4b0a      	ldr	r3, [pc, #40]	; (8005ef4 <prvInitialiseTaskLists+0x7c>)
 8005eca:	4a05      	ldr	r2, [pc, #20]	; (8005ee0 <prvInitialiseTaskLists+0x68>)
 8005ecc:	601a      	str	r2, [r3, #0]
}
 8005ece:	bf00      	nop
 8005ed0:	3708      	adds	r7, #8
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}
 8005ed6:	bf00      	nop
 8005ed8:	20000110 	.word	0x20000110
 8005edc:	20000174 	.word	0x20000174
 8005ee0:	20000188 	.word	0x20000188
 8005ee4:	200001a4 	.word	0x200001a4
 8005ee8:	200001b8 	.word	0x200001b8
 8005eec:	200001d0 	.word	0x200001d0
 8005ef0:	2000019c 	.word	0x2000019c
 8005ef4:	200001a0 	.word	0x200001a0

08005ef8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b082      	sub	sp, #8
 8005efc:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005efe:	e019      	b.n	8005f34 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8005f00:	f001 f89a 	bl	8007038 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f04:	4b10      	ldr	r3, [pc, #64]	; (8005f48 <prvCheckTasksWaitingTermination+0x50>)
 8005f06:	68db      	ldr	r3, [r3, #12]
 8005f08:	68db      	ldr	r3, [r3, #12]
 8005f0a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	3304      	adds	r3, #4
 8005f10:	4618      	mov	r0, r3
 8005f12:	f7fe fd1b 	bl	800494c <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8005f16:	4b0d      	ldr	r3, [pc, #52]	; (8005f4c <prvCheckTasksWaitingTermination+0x54>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	3b01      	subs	r3, #1
 8005f1c:	4a0b      	ldr	r2, [pc, #44]	; (8005f4c <prvCheckTasksWaitingTermination+0x54>)
 8005f1e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8005f20:	4b0b      	ldr	r3, [pc, #44]	; (8005f50 <prvCheckTasksWaitingTermination+0x58>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	3b01      	subs	r3, #1
 8005f26:	4a0a      	ldr	r2, [pc, #40]	; (8005f50 <prvCheckTasksWaitingTermination+0x58>)
 8005f28:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8005f2a:	f001 f8b5 	bl	8007098 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f000 f810 	bl	8005f54 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f34:	4b06      	ldr	r3, [pc, #24]	; (8005f50 <prvCheckTasksWaitingTermination+0x58>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d1e1      	bne.n	8005f00 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8005f3c:	bf00      	nop
 8005f3e:	bf00      	nop
 8005f40:	3708      	adds	r7, #8
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}
 8005f46:	bf00      	nop
 8005f48:	200001b8 	.word	0x200001b8
 8005f4c:	200001e4 	.word	0x200001e4
 8005f50:	200001cc 	.word	0x200001cc

08005f54 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b082      	sub	sp, #8
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f60:	4618      	mov	r0, r3
 8005f62:	f001 fa6b 	bl	800743c <vPortFree>
                vPortFree( pxTCB );
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f001 fa68 	bl	800743c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8005f6c:	bf00      	nop
 8005f6e:	3708      	adds	r7, #8
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}

08005f74 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005f74:	b480      	push	{r7}
 8005f76:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f78:	4b0a      	ldr	r3, [pc, #40]	; (8005fa4 <prvResetNextTaskUnblockTime+0x30>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d104      	bne.n	8005f8c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8005f82:	4b09      	ldr	r3, [pc, #36]	; (8005fa8 <prvResetNextTaskUnblockTime+0x34>)
 8005f84:	f04f 32ff 	mov.w	r2, #4294967295
 8005f88:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8005f8a:	e005      	b.n	8005f98 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005f8c:	4b05      	ldr	r3, [pc, #20]	; (8005fa4 <prvResetNextTaskUnblockTime+0x30>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	68db      	ldr	r3, [r3, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a04      	ldr	r2, [pc, #16]	; (8005fa8 <prvResetNextTaskUnblockTime+0x34>)
 8005f96:	6013      	str	r3, [r2, #0]
}
 8005f98:	bf00      	nop
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr
 8005fa2:	bf00      	nop
 8005fa4:	2000019c 	.word	0x2000019c
 8005fa8:	20000204 	.word	0x20000204

08005fac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8005fac:	b480      	push	{r7}
 8005fae:	b083      	sub	sp, #12
 8005fb0:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8005fb2:	4b0b      	ldr	r3, [pc, #44]	; (8005fe0 <xTaskGetSchedulerState+0x34>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d102      	bne.n	8005fc0 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	607b      	str	r3, [r7, #4]
 8005fbe:	e008      	b.n	8005fd2 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fc0:	4b08      	ldr	r3, [pc, #32]	; (8005fe4 <xTaskGetSchedulerState+0x38>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d102      	bne.n	8005fce <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8005fc8:	2302      	movs	r3, #2
 8005fca:	607b      	str	r3, [r7, #4]
 8005fcc:	e001      	b.n	8005fd2 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8005fd2:	687b      	ldr	r3, [r7, #4]
    }
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	370c      	adds	r7, #12
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr
 8005fe0:	200001f0 	.word	0x200001f0
 8005fe4:	2000020c 	.word	0x2000020c

08005fe8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b086      	sub	sp, #24
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d063      	beq.n	80060c6 <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8005ffe:	4b34      	ldr	r3, [pc, #208]	; (80060d0 <xTaskPriorityDisinherit+0xe8>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	693a      	ldr	r2, [r7, #16]
 8006004:	429a      	cmp	r2, r3
 8006006:	d00a      	beq.n	800601e <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8006008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800600c:	f383 8811 	msr	BASEPRI, r3
 8006010:	f3bf 8f6f 	isb	sy
 8006014:	f3bf 8f4f 	dsb	sy
 8006018:	60fb      	str	r3, [r7, #12]
    }
 800601a:	bf00      	nop
 800601c:	e7fe      	b.n	800601c <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006022:	2b00      	cmp	r3, #0
 8006024:	d10a      	bne.n	800603c <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8006026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800602a:	f383 8811 	msr	BASEPRI, r3
 800602e:	f3bf 8f6f 	isb	sy
 8006032:	f3bf 8f4f 	dsb	sy
 8006036:	60bb      	str	r3, [r7, #8]
    }
 8006038:	bf00      	nop
 800603a:	e7fe      	b.n	800603a <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006040:	1e5a      	subs	r2, r3, #1
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800604e:	429a      	cmp	r2, r3
 8006050:	d039      	beq.n	80060c6 <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006056:	2b00      	cmp	r3, #0
 8006058:	d135      	bne.n	80060c6 <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	3304      	adds	r3, #4
 800605e:	4618      	mov	r0, r3
 8006060:	f7fe fc74 	bl	800494c <uxListRemove>
 8006064:	4603      	mov	r3, r0
 8006066:	2b00      	cmp	r3, #0
 8006068:	d10a      	bne.n	8006080 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800606e:	2201      	movs	r2, #1
 8006070:	fa02 f303 	lsl.w	r3, r2, r3
 8006074:	43da      	mvns	r2, r3
 8006076:	4b17      	ldr	r3, [pc, #92]	; (80060d4 <xTaskPriorityDisinherit+0xec>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4013      	ands	r3, r2
 800607c:	4a15      	ldr	r2, [pc, #84]	; (80060d4 <xTaskPriorityDisinherit+0xec>)
 800607e:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800608c:	f1c3 0205 	rsb	r2, r3, #5
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006098:	2201      	movs	r2, #1
 800609a:	409a      	lsls	r2, r3
 800609c:	4b0d      	ldr	r3, [pc, #52]	; (80060d4 <xTaskPriorityDisinherit+0xec>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4313      	orrs	r3, r2
 80060a2:	4a0c      	ldr	r2, [pc, #48]	; (80060d4 <xTaskPriorityDisinherit+0xec>)
 80060a4:	6013      	str	r3, [r2, #0]
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060aa:	4613      	mov	r3, r2
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	4413      	add	r3, r2
 80060b0:	009b      	lsls	r3, r3, #2
 80060b2:	4a09      	ldr	r2, [pc, #36]	; (80060d8 <xTaskPriorityDisinherit+0xf0>)
 80060b4:	441a      	add	r2, r3
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	3304      	adds	r3, #4
 80060ba:	4619      	mov	r1, r3
 80060bc:	4610      	mov	r0, r2
 80060be:	f7fe fbe8 	bl	8004892 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80060c2:	2301      	movs	r3, #1
 80060c4:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80060c6:	697b      	ldr	r3, [r7, #20]
    }
 80060c8:	4618      	mov	r0, r3
 80060ca:	3718      	adds	r7, #24
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}
 80060d0:	2000010c 	.word	0x2000010c
 80060d4:	200001ec 	.word	0x200001ec
 80060d8:	20000110 	.word	0x20000110

080060dc <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 80060dc:	b580      	push	{r7, lr}
 80060de:	b086      	sub	sp, #24
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	60f8      	str	r0, [r7, #12]
 80060e4:	60b9      	str	r1, [r7, #8]
 80060e6:	607a      	str	r2, [r7, #4]
 80060e8:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d00a      	beq.n	8006106 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 80060f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f4:	f383 8811 	msr	BASEPRI, r3
 80060f8:	f3bf 8f6f 	isb	sy
 80060fc:	f3bf 8f4f 	dsb	sy
 8006100:	613b      	str	r3, [r7, #16]
    }
 8006102:	bf00      	nop
 8006104:	e7fe      	b.n	8006104 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8006106:	f000 ff97 	bl	8007038 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 800610a:	4b32      	ldr	r3, [pc, #200]	; (80061d4 <xTaskGenericNotifyWait+0xf8>)
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	4413      	add	r3, r2
 8006112:	3354      	adds	r3, #84	; 0x54
 8006114:	781b      	ldrb	r3, [r3, #0]
 8006116:	b2db      	uxtb	r3, r3
 8006118:	2b02      	cmp	r3, #2
 800611a:	d022      	beq.n	8006162 <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 800611c:	4b2d      	ldr	r3, [pc, #180]	; (80061d4 <xTaskGenericNotifyWait+0xf8>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	68fa      	ldr	r2, [r7, #12]
 8006122:	3214      	adds	r2, #20
 8006124:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006128:	68ba      	ldr	r2, [r7, #8]
 800612a:	43d2      	mvns	r2, r2
 800612c:	4011      	ands	r1, r2
 800612e:	68fa      	ldr	r2, [r7, #12]
 8006130:	3214      	adds	r2, #20
 8006132:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8006136:	4b27      	ldr	r3, [pc, #156]	; (80061d4 <xTaskGenericNotifyWait+0xf8>)
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	4413      	add	r3, r2
 800613e:	3354      	adds	r3, #84	; 0x54
 8006140:	2201      	movs	r2, #1
 8006142:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8006144:	6a3b      	ldr	r3, [r7, #32]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d00b      	beq.n	8006162 <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800614a:	2101      	movs	r1, #1
 800614c:	6a38      	ldr	r0, [r7, #32]
 800614e:	f000 fa27 	bl	80065a0 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8006152:	4b21      	ldr	r3, [pc, #132]	; (80061d8 <xTaskGenericNotifyWait+0xfc>)
 8006154:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006158:	601a      	str	r2, [r3, #0]
 800615a:	f3bf 8f4f 	dsb	sy
 800615e:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8006162:	f000 ff99 	bl	8007098 <vPortExitCritical>

        taskENTER_CRITICAL();
 8006166:	f000 ff67 	bl	8007038 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );

            if( pulNotificationValue != NULL )
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d007      	beq.n	8006180 <xTaskGenericNotifyWait+0xa4>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8006170:	4b18      	ldr	r3, [pc, #96]	; (80061d4 <xTaskGenericNotifyWait+0xf8>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	68fa      	ldr	r2, [r7, #12]
 8006176:	3214      	adds	r2, #20
 8006178:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8006180:	4b14      	ldr	r3, [pc, #80]	; (80061d4 <xTaskGenericNotifyWait+0xf8>)
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	4413      	add	r3, r2
 8006188:	3354      	adds	r3, #84	; 0x54
 800618a:	781b      	ldrb	r3, [r3, #0]
 800618c:	b2db      	uxtb	r3, r3
 800618e:	2b02      	cmp	r3, #2
 8006190:	d002      	beq.n	8006198 <xTaskGenericNotifyWait+0xbc>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8006192:	2300      	movs	r3, #0
 8006194:	617b      	str	r3, [r7, #20]
 8006196:	e00e      	b.n	80061b6 <xTaskGenericNotifyWait+0xda>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8006198:	4b0e      	ldr	r3, [pc, #56]	; (80061d4 <xTaskGenericNotifyWait+0xf8>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	68fa      	ldr	r2, [r7, #12]
 800619e:	3214      	adds	r2, #20
 80061a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	43d2      	mvns	r2, r2
 80061a8:	4011      	ands	r1, r2
 80061aa:	68fa      	ldr	r2, [r7, #12]
 80061ac:	3214      	adds	r2, #20
 80061ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 80061b2:	2301      	movs	r3, #1
 80061b4:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 80061b6:	4b07      	ldr	r3, [pc, #28]	; (80061d4 <xTaskGenericNotifyWait+0xf8>)
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	4413      	add	r3, r2
 80061be:	3354      	adds	r3, #84	; 0x54
 80061c0:	2200      	movs	r2, #0
 80061c2:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 80061c4:	f000 ff68 	bl	8007098 <vPortExitCritical>

        return xReturn;
 80061c8:	697b      	ldr	r3, [r7, #20]
    }
 80061ca:	4618      	mov	r0, r3
 80061cc:	3718      	adds	r7, #24
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
 80061d2:	bf00      	nop
 80061d4:	2000010c 	.word	0x2000010c
 80061d8:	e000ed04 	.word	0xe000ed04

080061dc <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 80061dc:	b580      	push	{r7, lr}
 80061de:	b08c      	sub	sp, #48	; 0x30
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	60f8      	str	r0, [r7, #12]
 80061e4:	60b9      	str	r1, [r7, #8]
 80061e6:	607a      	str	r2, [r7, #4]
 80061e8:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 80061ea:	2301      	movs	r3, #1
 80061ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d00a      	beq.n	800620a <xTaskGenericNotify+0x2e>
        __asm volatile
 80061f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f8:	f383 8811 	msr	BASEPRI, r3
 80061fc:	f3bf 8f6f 	isb	sy
 8006200:	f3bf 8f4f 	dsb	sy
 8006204:	623b      	str	r3, [r7, #32]
    }
 8006206:	bf00      	nop
 8006208:	e7fe      	b.n	8006208 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d10a      	bne.n	8006226 <xTaskGenericNotify+0x4a>
        __asm volatile
 8006210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006214:	f383 8811 	msr	BASEPRI, r3
 8006218:	f3bf 8f6f 	isb	sy
 800621c:	f3bf 8f4f 	dsb	sy
 8006220:	61fb      	str	r3, [r7, #28]
    }
 8006222:	bf00      	nop
 8006224:	e7fe      	b.n	8006224 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 800622a:	f000 ff05 	bl	8007038 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 800622e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006230:	2b00      	cmp	r3, #0
 8006232:	d006      	beq.n	8006242 <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8006234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006236:	68ba      	ldr	r2, [r7, #8]
 8006238:	3214      	adds	r2, #20
 800623a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800623e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006240:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8006242:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	4413      	add	r3, r2
 8006248:	3354      	adds	r3, #84	; 0x54
 800624a:	781b      	ldrb	r3, [r3, #0]
 800624c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8006250:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	4413      	add	r3, r2
 8006256:	3354      	adds	r3, #84	; 0x54
 8006258:	2202      	movs	r2, #2
 800625a:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 800625c:	78fb      	ldrb	r3, [r7, #3]
 800625e:	2b04      	cmp	r3, #4
 8006260:	d83b      	bhi.n	80062da <xTaskGenericNotify+0xfe>
 8006262:	a201      	add	r2, pc, #4	; (adr r2, 8006268 <xTaskGenericNotify+0x8c>)
 8006264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006268:	080062f9 	.word	0x080062f9
 800626c:	0800627d 	.word	0x0800627d
 8006270:	08006299 	.word	0x08006299
 8006274:	080062b1 	.word	0x080062b1
 8006278:	080062bf 	.word	0x080062bf
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 800627c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800627e:	68ba      	ldr	r2, [r7, #8]
 8006280:	3214      	adds	r2, #20
 8006282:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	ea42 0103 	orr.w	r1, r2, r3
 800628c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800628e:	68ba      	ldr	r2, [r7, #8]
 8006290:	3214      	adds	r2, #20
 8006292:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006296:	e032      	b.n	80062fe <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8006298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800629a:	68ba      	ldr	r2, [r7, #8]
 800629c:	3214      	adds	r2, #20
 800629e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062a2:	1c59      	adds	r1, r3, #1
 80062a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a6:	68ba      	ldr	r2, [r7, #8]
 80062a8:	3214      	adds	r2, #20
 80062aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80062ae:	e026      	b.n	80062fe <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80062b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b2:	68ba      	ldr	r2, [r7, #8]
 80062b4:	3214      	adds	r2, #20
 80062b6:	6879      	ldr	r1, [r7, #4]
 80062b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80062bc:	e01f      	b.n	80062fe <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80062be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80062c2:	2b02      	cmp	r3, #2
 80062c4:	d006      	beq.n	80062d4 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80062c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c8:	68ba      	ldr	r2, [r7, #8]
 80062ca:	3214      	adds	r2, #20
 80062cc:	6879      	ldr	r1, [r7, #4]
 80062ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80062d2:	e014      	b.n	80062fe <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 80062d4:	2300      	movs	r3, #0
 80062d6:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 80062d8:	e011      	b.n	80062fe <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80062da:	4b2b      	ldr	r3, [pc, #172]	; (8006388 <xTaskGenericNotify+0x1ac>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d00c      	beq.n	80062fc <xTaskGenericNotify+0x120>
        __asm volatile
 80062e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e6:	f383 8811 	msr	BASEPRI, r3
 80062ea:	f3bf 8f6f 	isb	sy
 80062ee:	f3bf 8f4f 	dsb	sy
 80062f2:	61bb      	str	r3, [r7, #24]
    }
 80062f4:	bf00      	nop
 80062f6:	e7fe      	b.n	80062f6 <xTaskGenericNotify+0x11a>
                    break;
 80062f8:	bf00      	nop
 80062fa:	e000      	b.n	80062fe <xTaskGenericNotify+0x122>

                    break;
 80062fc:	bf00      	nop

            traceTASK_NOTIFY(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80062fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006302:	2b01      	cmp	r3, #1
 8006304:	d139      	bne.n	800637a <xTaskGenericNotify+0x19e>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006308:	3304      	adds	r3, #4
 800630a:	4618      	mov	r0, r3
 800630c:	f7fe fb1e 	bl	800494c <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 8006310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006314:	2201      	movs	r2, #1
 8006316:	409a      	lsls	r2, r3
 8006318:	4b1c      	ldr	r3, [pc, #112]	; (800638c <xTaskGenericNotify+0x1b0>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4313      	orrs	r3, r2
 800631e:	4a1b      	ldr	r2, [pc, #108]	; (800638c <xTaskGenericNotify+0x1b0>)
 8006320:	6013      	str	r3, [r2, #0]
 8006322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006324:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006326:	4613      	mov	r3, r2
 8006328:	009b      	lsls	r3, r3, #2
 800632a:	4413      	add	r3, r2
 800632c:	009b      	lsls	r3, r3, #2
 800632e:	4a18      	ldr	r2, [pc, #96]	; (8006390 <xTaskGenericNotify+0x1b4>)
 8006330:	441a      	add	r2, r3
 8006332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006334:	3304      	adds	r3, #4
 8006336:	4619      	mov	r1, r3
 8006338:	4610      	mov	r0, r2
 800633a:	f7fe faaa 	bl	8004892 <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800633e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006342:	2b00      	cmp	r3, #0
 8006344:	d00a      	beq.n	800635c <xTaskGenericNotify+0x180>
        __asm volatile
 8006346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800634a:	f383 8811 	msr	BASEPRI, r3
 800634e:	f3bf 8f6f 	isb	sy
 8006352:	f3bf 8f4f 	dsb	sy
 8006356:	617b      	str	r3, [r7, #20]
    }
 8006358:	bf00      	nop
 800635a:	e7fe      	b.n	800635a <xTaskGenericNotify+0x17e>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800635c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800635e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006360:	4b0c      	ldr	r3, [pc, #48]	; (8006394 <xTaskGenericNotify+0x1b8>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006366:	429a      	cmp	r2, r3
 8006368:	d907      	bls.n	800637a <xTaskGenericNotify+0x19e>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 800636a:	4b0b      	ldr	r3, [pc, #44]	; (8006398 <xTaskGenericNotify+0x1bc>)
 800636c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006370:	601a      	str	r2, [r3, #0]
 8006372:	f3bf 8f4f 	dsb	sy
 8006376:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800637a:	f000 fe8d 	bl	8007098 <vPortExitCritical>

        return xReturn;
 800637e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8006380:	4618      	mov	r0, r3
 8006382:	3730      	adds	r7, #48	; 0x30
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}
 8006388:	200001e8 	.word	0x200001e8
 800638c:	200001ec 	.word	0x200001ec
 8006390:	20000110 	.word	0x20000110
 8006394:	2000010c 	.word	0x2000010c
 8006398:	e000ed04 	.word	0xe000ed04

0800639c <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 800639c:	b580      	push	{r7, lr}
 800639e:	b090      	sub	sp, #64	; 0x40
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	60f8      	str	r0, [r7, #12]
 80063a4:	60b9      	str	r1, [r7, #8]
 80063a6:	607a      	str	r2, [r7, #4]
 80063a8:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 80063aa:	2301      	movs	r3, #1
 80063ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d10a      	bne.n	80063ca <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 80063b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b8:	f383 8811 	msr	BASEPRI, r3
 80063bc:	f3bf 8f6f 	isb	sy
 80063c0:	f3bf 8f4f 	dsb	sy
 80063c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 80063c6:	bf00      	nop
 80063c8:	e7fe      	b.n	80063c8 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d00a      	beq.n	80063e6 <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 80063d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d4:	f383 8811 	msr	BASEPRI, r3
 80063d8:	f3bf 8f6f 	isb	sy
 80063dc:	f3bf 8f4f 	dsb	sy
 80063e0:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80063e2:	bf00      	nop
 80063e4:	e7fe      	b.n	80063e4 <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80063e6:	f000 ff09 	bl	80071fc <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	63bb      	str	r3, [r7, #56]	; 0x38
        __asm volatile
 80063ee:	f3ef 8211 	mrs	r2, BASEPRI
 80063f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f6:	f383 8811 	msr	BASEPRI, r3
 80063fa:	f3bf 8f6f 	isb	sy
 80063fe:	f3bf 8f4f 	dsb	sy
 8006402:	627a      	str	r2, [r7, #36]	; 0x24
 8006404:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 8006406:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006408:	637b      	str	r3, [r7, #52]	; 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 800640a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800640c:	2b00      	cmp	r3, #0
 800640e:	d006      	beq.n	800641e <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8006410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006412:	68ba      	ldr	r2, [r7, #8]
 8006414:	3214      	adds	r2, #20
 8006416:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800641a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800641c:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800641e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	4413      	add	r3, r2
 8006424:	3354      	adds	r3, #84	; 0x54
 8006426:	781b      	ldrb	r3, [r3, #0]
 8006428:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 800642c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	4413      	add	r3, r2
 8006432:	3354      	adds	r3, #84	; 0x54
 8006434:	2202      	movs	r2, #2
 8006436:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8006438:	78fb      	ldrb	r3, [r7, #3]
 800643a:	2b04      	cmp	r3, #4
 800643c:	d83b      	bhi.n	80064b6 <xTaskGenericNotifyFromISR+0x11a>
 800643e:	a201      	add	r2, pc, #4	; (adr r2, 8006444 <xTaskGenericNotifyFromISR+0xa8>)
 8006440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006444:	080064d5 	.word	0x080064d5
 8006448:	08006459 	.word	0x08006459
 800644c:	08006475 	.word	0x08006475
 8006450:	0800648d 	.word	0x0800648d
 8006454:	0800649b 	.word	0x0800649b
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8006458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800645a:	68ba      	ldr	r2, [r7, #8]
 800645c:	3214      	adds	r2, #20
 800645e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	ea42 0103 	orr.w	r1, r2, r3
 8006468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800646a:	68ba      	ldr	r2, [r7, #8]
 800646c:	3214      	adds	r2, #20
 800646e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006472:	e032      	b.n	80064da <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8006474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006476:	68ba      	ldr	r2, [r7, #8]
 8006478:	3214      	adds	r2, #20
 800647a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800647e:	1c59      	adds	r1, r3, #1
 8006480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006482:	68ba      	ldr	r2, [r7, #8]
 8006484:	3214      	adds	r2, #20
 8006486:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800648a:	e026      	b.n	80064da <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800648c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800648e:	68ba      	ldr	r2, [r7, #8]
 8006490:	3214      	adds	r2, #20
 8006492:	6879      	ldr	r1, [r7, #4]
 8006494:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006498:	e01f      	b.n	80064da <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800649a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800649e:	2b02      	cmp	r3, #2
 80064a0:	d006      	beq.n	80064b0 <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80064a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064a4:	68ba      	ldr	r2, [r7, #8]
 80064a6:	3214      	adds	r2, #20
 80064a8:	6879      	ldr	r1, [r7, #4]
 80064aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80064ae:	e014      	b.n	80064da <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 80064b0:	2300      	movs	r3, #0
 80064b2:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 80064b4:	e011      	b.n	80064da <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80064b6:	4b33      	ldr	r3, [pc, #204]	; (8006584 <xTaskGenericNotifyFromISR+0x1e8>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d00c      	beq.n	80064d8 <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 80064be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c2:	f383 8811 	msr	BASEPRI, r3
 80064c6:	f3bf 8f6f 	isb	sy
 80064ca:	f3bf 8f4f 	dsb	sy
 80064ce:	61fb      	str	r3, [r7, #28]
    }
 80064d0:	bf00      	nop
 80064d2:	e7fe      	b.n	80064d2 <xTaskGenericNotifyFromISR+0x136>
                    break;
 80064d4:	bf00      	nop
 80064d6:	e000      	b.n	80064da <xTaskGenericNotifyFromISR+0x13e>
                    break;
 80064d8:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80064da:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80064de:	2b01      	cmp	r3, #1
 80064e0:	d145      	bne.n	800656e <xTaskGenericNotifyFromISR+0x1d2>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80064e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d00a      	beq.n	8006500 <xTaskGenericNotifyFromISR+0x164>
        __asm volatile
 80064ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ee:	f383 8811 	msr	BASEPRI, r3
 80064f2:	f3bf 8f6f 	isb	sy
 80064f6:	f3bf 8f4f 	dsb	sy
 80064fa:	61bb      	str	r3, [r7, #24]
    }
 80064fc:	bf00      	nop
 80064fe:	e7fe      	b.n	80064fe <xTaskGenericNotifyFromISR+0x162>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006500:	4b21      	ldr	r3, [pc, #132]	; (8006588 <xTaskGenericNotifyFromISR+0x1ec>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d11c      	bne.n	8006542 <xTaskGenericNotifyFromISR+0x1a6>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800650a:	3304      	adds	r3, #4
 800650c:	4618      	mov	r0, r3
 800650e:	f7fe fa1d 	bl	800494c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8006512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006516:	2201      	movs	r2, #1
 8006518:	409a      	lsls	r2, r3
 800651a:	4b1c      	ldr	r3, [pc, #112]	; (800658c <xTaskGenericNotifyFromISR+0x1f0>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4313      	orrs	r3, r2
 8006520:	4a1a      	ldr	r2, [pc, #104]	; (800658c <xTaskGenericNotifyFromISR+0x1f0>)
 8006522:	6013      	str	r3, [r2, #0]
 8006524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006528:	4613      	mov	r3, r2
 800652a:	009b      	lsls	r3, r3, #2
 800652c:	4413      	add	r3, r2
 800652e:	009b      	lsls	r3, r3, #2
 8006530:	4a17      	ldr	r2, [pc, #92]	; (8006590 <xTaskGenericNotifyFromISR+0x1f4>)
 8006532:	441a      	add	r2, r3
 8006534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006536:	3304      	adds	r3, #4
 8006538:	4619      	mov	r1, r3
 800653a:	4610      	mov	r0, r2
 800653c:	f7fe f9a9 	bl	8004892 <vListInsertEnd>
 8006540:	e005      	b.n	800654e <xTaskGenericNotifyFromISR+0x1b2>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006544:	3318      	adds	r3, #24
 8006546:	4619      	mov	r1, r3
 8006548:	4812      	ldr	r0, [pc, #72]	; (8006594 <xTaskGenericNotifyFromISR+0x1f8>)
 800654a:	f7fe f9a2 	bl	8004892 <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800654e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006550:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006552:	4b11      	ldr	r3, [pc, #68]	; (8006598 <xTaskGenericNotifyFromISR+0x1fc>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006558:	429a      	cmp	r2, r3
 800655a:	d908      	bls.n	800656e <xTaskGenericNotifyFromISR+0x1d2>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 800655c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800655e:	2b00      	cmp	r3, #0
 8006560:	d002      	beq.n	8006568 <xTaskGenericNotifyFromISR+0x1cc>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8006562:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006564:	2201      	movs	r2, #1
 8006566:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8006568:	4b0c      	ldr	r3, [pc, #48]	; (800659c <xTaskGenericNotifyFromISR+0x200>)
 800656a:	2201      	movs	r2, #1
 800656c:	601a      	str	r2, [r3, #0]
 800656e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006570:	617b      	str	r3, [r7, #20]
        __asm volatile
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	f383 8811 	msr	BASEPRI, r3
    }
 8006578:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 800657a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }
 800657c:	4618      	mov	r0, r3
 800657e:	3740      	adds	r7, #64	; 0x40
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}
 8006584:	200001e8 	.word	0x200001e8
 8006588:	2000020c 	.word	0x2000020c
 800658c:	200001ec 	.word	0x200001ec
 8006590:	20000110 	.word	0x20000110
 8006594:	200001a4 	.word	0x200001a4
 8006598:	2000010c 	.word	0x2000010c
 800659c:	200001f8 	.word	0x200001f8

080065a0 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b084      	sub	sp, #16
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80065aa:	4b29      	ldr	r3, [pc, #164]	; (8006650 <prvAddCurrentTaskToDelayedList+0xb0>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80065b0:	4b28      	ldr	r3, [pc, #160]	; (8006654 <prvAddCurrentTaskToDelayedList+0xb4>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	3304      	adds	r3, #4
 80065b6:	4618      	mov	r0, r3
 80065b8:	f7fe f9c8 	bl	800494c <uxListRemove>
 80065bc:	4603      	mov	r3, r0
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d10b      	bne.n	80065da <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80065c2:	4b24      	ldr	r3, [pc, #144]	; (8006654 <prvAddCurrentTaskToDelayedList+0xb4>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065c8:	2201      	movs	r2, #1
 80065ca:	fa02 f303 	lsl.w	r3, r2, r3
 80065ce:	43da      	mvns	r2, r3
 80065d0:	4b21      	ldr	r3, [pc, #132]	; (8006658 <prvAddCurrentTaskToDelayedList+0xb8>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4013      	ands	r3, r2
 80065d6:	4a20      	ldr	r2, [pc, #128]	; (8006658 <prvAddCurrentTaskToDelayedList+0xb8>)
 80065d8:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065e0:	d10a      	bne.n	80065f8 <prvAddCurrentTaskToDelayedList+0x58>
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d007      	beq.n	80065f8 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80065e8:	4b1a      	ldr	r3, [pc, #104]	; (8006654 <prvAddCurrentTaskToDelayedList+0xb4>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	3304      	adds	r3, #4
 80065ee:	4619      	mov	r1, r3
 80065f0:	481a      	ldr	r0, [pc, #104]	; (800665c <prvAddCurrentTaskToDelayedList+0xbc>)
 80065f2:	f7fe f94e 	bl	8004892 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80065f6:	e026      	b.n	8006646 <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80065f8:	68fa      	ldr	r2, [r7, #12]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	4413      	add	r3, r2
 80065fe:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006600:	4b14      	ldr	r3, [pc, #80]	; (8006654 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	68ba      	ldr	r2, [r7, #8]
 8006606:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8006608:	68ba      	ldr	r2, [r7, #8]
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	429a      	cmp	r2, r3
 800660e:	d209      	bcs.n	8006624 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006610:	4b13      	ldr	r3, [pc, #76]	; (8006660 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006612:	681a      	ldr	r2, [r3, #0]
 8006614:	4b0f      	ldr	r3, [pc, #60]	; (8006654 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	3304      	adds	r3, #4
 800661a:	4619      	mov	r1, r3
 800661c:	4610      	mov	r0, r2
 800661e:	f7fe f95c 	bl	80048da <vListInsert>
}
 8006622:	e010      	b.n	8006646 <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006624:	4b0f      	ldr	r3, [pc, #60]	; (8006664 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006626:	681a      	ldr	r2, [r3, #0]
 8006628:	4b0a      	ldr	r3, [pc, #40]	; (8006654 <prvAddCurrentTaskToDelayedList+0xb4>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	3304      	adds	r3, #4
 800662e:	4619      	mov	r1, r3
 8006630:	4610      	mov	r0, r2
 8006632:	f7fe f952 	bl	80048da <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8006636:	4b0c      	ldr	r3, [pc, #48]	; (8006668 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	68ba      	ldr	r2, [r7, #8]
 800663c:	429a      	cmp	r2, r3
 800663e:	d202      	bcs.n	8006646 <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8006640:	4a09      	ldr	r2, [pc, #36]	; (8006668 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	6013      	str	r3, [r2, #0]
}
 8006646:	bf00      	nop
 8006648:	3710      	adds	r7, #16
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}
 800664e:	bf00      	nop
 8006650:	200001e8 	.word	0x200001e8
 8006654:	2000010c 	.word	0x2000010c
 8006658:	200001ec 	.word	0x200001ec
 800665c:	200001d0 	.word	0x200001d0
 8006660:	200001a0 	.word	0x200001a0
 8006664:	2000019c 	.word	0x2000019c
 8006668:	20000204 	.word	0x20000204

0800666c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800666c:	b580      	push	{r7, lr}
 800666e:	b084      	sub	sp, #16
 8006670:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8006672:	2300      	movs	r3, #0
 8006674:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8006676:	f000 fb31 	bl	8006cdc <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800667a:	4b11      	ldr	r3, [pc, #68]	; (80066c0 <xTimerCreateTimerTask+0x54>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d00b      	beq.n	800669a <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8006682:	4b10      	ldr	r3, [pc, #64]	; (80066c4 <xTimerCreateTimerTask+0x58>)
 8006684:	9301      	str	r3, [sp, #4]
 8006686:	2302      	movs	r3, #2
 8006688:	9300      	str	r3, [sp, #0]
 800668a:	2300      	movs	r3, #0
 800668c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006690:	490d      	ldr	r1, [pc, #52]	; (80066c8 <xTimerCreateTimerTask+0x5c>)
 8006692:	480e      	ldr	r0, [pc, #56]	; (80066cc <xTimerCreateTimerTask+0x60>)
 8006694:	f7fe ff38 	bl	8005508 <xTaskCreate>
 8006698:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d10a      	bne.n	80066b6 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 80066a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a4:	f383 8811 	msr	BASEPRI, r3
 80066a8:	f3bf 8f6f 	isb	sy
 80066ac:	f3bf 8f4f 	dsb	sy
 80066b0:	603b      	str	r3, [r7, #0]
    }
 80066b2:	bf00      	nop
 80066b4:	e7fe      	b.n	80066b4 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80066b6:	687b      	ldr	r3, [r7, #4]
    }
 80066b8:	4618      	mov	r0, r3
 80066ba:	3708      	adds	r7, #8
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}
 80066c0:	20000240 	.word	0x20000240
 80066c4:	20000244 	.word	0x20000244
 80066c8:	08009044 	.word	0x08009044
 80066cc:	080068bd 	.word	0x080068bd

080066d0 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b088      	sub	sp, #32
 80066d4:	af02      	add	r7, sp, #8
 80066d6:	60f8      	str	r0, [r7, #12]
 80066d8:	60b9      	str	r1, [r7, #8]
 80066da:	607a      	str	r2, [r7, #4]
 80066dc:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80066de:	202c      	movs	r0, #44	; 0x2c
 80066e0:	f000 fdcc 	bl	800727c <pvPortMalloc>
 80066e4:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d00d      	beq.n	8006708 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	2200      	movs	r2, #0
 80066f0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	9301      	str	r3, [sp, #4]
 80066f8:	6a3b      	ldr	r3, [r7, #32]
 80066fa:	9300      	str	r3, [sp, #0]
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	68b9      	ldr	r1, [r7, #8]
 8006702:	68f8      	ldr	r0, [r7, #12]
 8006704:	f000 f805 	bl	8006712 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 8006708:	697b      	ldr	r3, [r7, #20]
        }
 800670a:	4618      	mov	r0, r3
 800670c:	3718      	adds	r7, #24
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}

08006712 <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 8006712:	b580      	push	{r7, lr}
 8006714:	b086      	sub	sp, #24
 8006716:	af00      	add	r7, sp, #0
 8006718:	60f8      	str	r0, [r7, #12]
 800671a:	60b9      	str	r1, [r7, #8]
 800671c:	607a      	str	r2, [r7, #4]
 800671e:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d10a      	bne.n	800673c <prvInitialiseNewTimer+0x2a>
        __asm volatile
 8006726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800672a:	f383 8811 	msr	BASEPRI, r3
 800672e:	f3bf 8f6f 	isb	sy
 8006732:	f3bf 8f4f 	dsb	sy
 8006736:	617b      	str	r3, [r7, #20]
    }
 8006738:	bf00      	nop
 800673a:	e7fe      	b.n	800673a <prvInitialiseNewTimer+0x28>

        if( pxNewTimer != NULL )
 800673c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673e:	2b00      	cmp	r3, #0
 8006740:	d01e      	beq.n	8006780 <prvInitialiseNewTimer+0x6e>
        {
            /* Ensure the infrastructure used by the timer service task has been
             * created/initialised. */
            prvCheckForValidListAndQueue();
 8006742:	f000 facb 	bl	8006cdc <prvCheckForValidListAndQueue>

            /* Initialise the timer structure members using the function
             * parameters. */
            pxNewTimer->pcTimerName = pcTimerName;
 8006746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006748:	68fa      	ldr	r2, [r7, #12]
 800674a:	601a      	str	r2, [r3, #0]
            pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800674c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800674e:	68ba      	ldr	r2, [r7, #8]
 8006750:	619a      	str	r2, [r3, #24]
            pxNewTimer->pvTimerID = pvTimerID;
 8006752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006754:	683a      	ldr	r2, [r7, #0]
 8006756:	61da      	str	r2, [r3, #28]
            pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8006758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675a:	6a3a      	ldr	r2, [r7, #32]
 800675c:	621a      	str	r2, [r3, #32]
            vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800675e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006760:	3304      	adds	r3, #4
 8006762:	4618      	mov	r0, r3
 8006764:	f7fe f888 	bl	8004878 <vListInitialiseItem>

            if( uxAutoReload != pdFALSE )
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d008      	beq.n	8006780 <prvInitialiseNewTimer+0x6e>
            {
                pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800676e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006770:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006774:	f043 0304 	orr.w	r3, r3, #4
 8006778:	b2da      	uxtb	r2, r3
 800677a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            }

            traceTIMER_CREATE( pxNewTimer );
        }
    }
 8006780:	bf00      	nop
 8006782:	3718      	adds	r7, #24
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}

08006788 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8006788:	b580      	push	{r7, lr}
 800678a:	b08a      	sub	sp, #40	; 0x28
 800678c:	af00      	add	r7, sp, #0
 800678e:	60f8      	str	r0, [r7, #12]
 8006790:	60b9      	str	r1, [r7, #8]
 8006792:	607a      	str	r2, [r7, #4]
 8006794:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8006796:	2300      	movs	r3, #0
 8006798:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d10a      	bne.n	80067b6 <xTimerGenericCommand+0x2e>
        __asm volatile
 80067a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a4:	f383 8811 	msr	BASEPRI, r3
 80067a8:	f3bf 8f6f 	isb	sy
 80067ac:	f3bf 8f4f 	dsb	sy
 80067b0:	623b      	str	r3, [r7, #32]
    }
 80067b2:	bf00      	nop
 80067b4:	e7fe      	b.n	80067b4 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 80067b6:	4b1a      	ldr	r3, [pc, #104]	; (8006820 <xTimerGenericCommand+0x98>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d02a      	beq.n	8006814 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	2b05      	cmp	r3, #5
 80067ce:	dc18      	bgt.n	8006802 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80067d0:	f7ff fbec 	bl	8005fac <xTaskGetSchedulerState>
 80067d4:	4603      	mov	r3, r0
 80067d6:	2b02      	cmp	r3, #2
 80067d8:	d109      	bne.n	80067ee <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80067da:	4b11      	ldr	r3, [pc, #68]	; (8006820 <xTimerGenericCommand+0x98>)
 80067dc:	6818      	ldr	r0, [r3, #0]
 80067de:	f107 0114 	add.w	r1, r7, #20
 80067e2:	2300      	movs	r3, #0
 80067e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067e6:	f7fe f9c5 	bl	8004b74 <xQueueGenericSend>
 80067ea:	6278      	str	r0, [r7, #36]	; 0x24
 80067ec:	e012      	b.n	8006814 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80067ee:	4b0c      	ldr	r3, [pc, #48]	; (8006820 <xTimerGenericCommand+0x98>)
 80067f0:	6818      	ldr	r0, [r3, #0]
 80067f2:	f107 0114 	add.w	r1, r7, #20
 80067f6:	2300      	movs	r3, #0
 80067f8:	2200      	movs	r2, #0
 80067fa:	f7fe f9bb 	bl	8004b74 <xQueueGenericSend>
 80067fe:	6278      	str	r0, [r7, #36]	; 0x24
 8006800:	e008      	b.n	8006814 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006802:	4b07      	ldr	r3, [pc, #28]	; (8006820 <xTimerGenericCommand+0x98>)
 8006804:	6818      	ldr	r0, [r3, #0]
 8006806:	f107 0114 	add.w	r1, r7, #20
 800680a:	2300      	movs	r3, #0
 800680c:	683a      	ldr	r2, [r7, #0]
 800680e:	f7fe faaf 	bl	8004d70 <xQueueGenericSendFromISR>
 8006812:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8006814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8006816:	4618      	mov	r0, r3
 8006818:	3728      	adds	r7, #40	; 0x28
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}
 800681e:	bf00      	nop
 8006820:	20000240 	.word	0x20000240

08006824 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8006824:	b580      	push	{r7, lr}
 8006826:	b088      	sub	sp, #32
 8006828:	af02      	add	r7, sp, #8
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800682e:	4b22      	ldr	r3, [pc, #136]	; (80068b8 <prvProcessExpiredTimer+0x94>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	68db      	ldr	r3, [r3, #12]
 8006834:	68db      	ldr	r3, [r3, #12]
 8006836:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	3304      	adds	r3, #4
 800683c:	4618      	mov	r0, r3
 800683e:	f7fe f885 	bl	800494c <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006848:	f003 0304 	and.w	r3, r3, #4
 800684c:	2b00      	cmp	r3, #0
 800684e:	d022      	beq.n	8006896 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	699a      	ldr	r2, [r3, #24]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	18d1      	adds	r1, r2, r3
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	683a      	ldr	r2, [r7, #0]
 800685c:	6978      	ldr	r0, [r7, #20]
 800685e:	f000 f8d1 	bl	8006a04 <prvInsertTimerInActiveList>
 8006862:	4603      	mov	r3, r0
 8006864:	2b00      	cmp	r3, #0
 8006866:	d01f      	beq.n	80068a8 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006868:	2300      	movs	r3, #0
 800686a:	9300      	str	r3, [sp, #0]
 800686c:	2300      	movs	r3, #0
 800686e:	687a      	ldr	r2, [r7, #4]
 8006870:	2100      	movs	r1, #0
 8006872:	6978      	ldr	r0, [r7, #20]
 8006874:	f7ff ff88 	bl	8006788 <xTimerGenericCommand>
 8006878:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d113      	bne.n	80068a8 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8006880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006884:	f383 8811 	msr	BASEPRI, r3
 8006888:	f3bf 8f6f 	isb	sy
 800688c:	f3bf 8f4f 	dsb	sy
 8006890:	60fb      	str	r3, [r7, #12]
    }
 8006892:	bf00      	nop
 8006894:	e7fe      	b.n	8006894 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800689c:	f023 0301 	bic.w	r3, r3, #1
 80068a0:	b2da      	uxtb	r2, r3
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	6a1b      	ldr	r3, [r3, #32]
 80068ac:	6978      	ldr	r0, [r7, #20]
 80068ae:	4798      	blx	r3
    }
 80068b0:	bf00      	nop
 80068b2:	3718      	adds	r7, #24
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}
 80068b8:	20000238 	.word	0x20000238

080068bc <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80068bc:	b580      	push	{r7, lr}
 80068be:	b084      	sub	sp, #16
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80068c4:	f107 0308 	add.w	r3, r7, #8
 80068c8:	4618      	mov	r0, r3
 80068ca:	f000 f857 	bl	800697c <prvGetNextExpireTime>
 80068ce:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	4619      	mov	r1, r3
 80068d4:	68f8      	ldr	r0, [r7, #12]
 80068d6:	f000 f803 	bl	80068e0 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80068da:	f000 f8d5 	bl	8006a88 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80068de:	e7f1      	b.n	80068c4 <prvTimerTask+0x8>

080068e0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b084      	sub	sp, #16
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
 80068e8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80068ea:	f7fe ffa5 	bl	8005838 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80068ee:	f107 0308 	add.w	r3, r7, #8
 80068f2:	4618      	mov	r0, r3
 80068f4:	f000 f866 	bl	80069c4 <prvSampleTimeNow>
 80068f8:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d130      	bne.n	8006962 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d10a      	bne.n	800691c <prvProcessTimerOrBlockTask+0x3c>
 8006906:	687a      	ldr	r2, [r7, #4]
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	429a      	cmp	r2, r3
 800690c:	d806      	bhi.n	800691c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800690e:	f7fe ffa1 	bl	8005854 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006912:	68f9      	ldr	r1, [r7, #12]
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f7ff ff85 	bl	8006824 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800691a:	e024      	b.n	8006966 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d008      	beq.n	8006934 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006922:	4b13      	ldr	r3, [pc, #76]	; (8006970 <prvProcessTimerOrBlockTask+0x90>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d101      	bne.n	8006930 <prvProcessTimerOrBlockTask+0x50>
 800692c:	2301      	movs	r3, #1
 800692e:	e000      	b.n	8006932 <prvProcessTimerOrBlockTask+0x52>
 8006930:	2300      	movs	r3, #0
 8006932:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006934:	4b0f      	ldr	r3, [pc, #60]	; (8006974 <prvProcessTimerOrBlockTask+0x94>)
 8006936:	6818      	ldr	r0, [r3, #0]
 8006938:	687a      	ldr	r2, [r7, #4]
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	1ad3      	subs	r3, r2, r3
 800693e:	683a      	ldr	r2, [r7, #0]
 8006940:	4619      	mov	r1, r3
 8006942:	f7fe fdad 	bl	80054a0 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8006946:	f7fe ff85 	bl	8005854 <xTaskResumeAll>
 800694a:	4603      	mov	r3, r0
 800694c:	2b00      	cmp	r3, #0
 800694e:	d10a      	bne.n	8006966 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8006950:	4b09      	ldr	r3, [pc, #36]	; (8006978 <prvProcessTimerOrBlockTask+0x98>)
 8006952:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006956:	601a      	str	r2, [r3, #0]
 8006958:	f3bf 8f4f 	dsb	sy
 800695c:	f3bf 8f6f 	isb	sy
    }
 8006960:	e001      	b.n	8006966 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8006962:	f7fe ff77 	bl	8005854 <xTaskResumeAll>
    }
 8006966:	bf00      	nop
 8006968:	3710      	adds	r7, #16
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}
 800696e:	bf00      	nop
 8006970:	2000023c 	.word	0x2000023c
 8006974:	20000240 	.word	0x20000240
 8006978:	e000ed04 	.word	0xe000ed04

0800697c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800697c:	b480      	push	{r7}
 800697e:	b085      	sub	sp, #20
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006984:	4b0e      	ldr	r3, [pc, #56]	; (80069c0 <prvGetNextExpireTime+0x44>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d101      	bne.n	8006992 <prvGetNextExpireTime+0x16>
 800698e:	2201      	movs	r2, #1
 8006990:	e000      	b.n	8006994 <prvGetNextExpireTime+0x18>
 8006992:	2200      	movs	r2, #0
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d105      	bne.n	80069ac <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80069a0:	4b07      	ldr	r3, [pc, #28]	; (80069c0 <prvGetNextExpireTime+0x44>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	68db      	ldr	r3, [r3, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	60fb      	str	r3, [r7, #12]
 80069aa:	e001      	b.n	80069b0 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80069ac:	2300      	movs	r3, #0
 80069ae:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80069b0:	68fb      	ldr	r3, [r7, #12]
    }
 80069b2:	4618      	mov	r0, r3
 80069b4:	3714      	adds	r7, #20
 80069b6:	46bd      	mov	sp, r7
 80069b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069bc:	4770      	bx	lr
 80069be:	bf00      	nop
 80069c0:	20000238 	.word	0x20000238

080069c4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b084      	sub	sp, #16
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80069cc:	f7fe ffde 	bl	800598c <xTaskGetTickCount>
 80069d0:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80069d2:	4b0b      	ldr	r3, [pc, #44]	; (8006a00 <prvSampleTimeNow+0x3c>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	68fa      	ldr	r2, [r7, #12]
 80069d8:	429a      	cmp	r2, r3
 80069da:	d205      	bcs.n	80069e8 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80069dc:	f000 f91a 	bl	8006c14 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2201      	movs	r2, #1
 80069e4:	601a      	str	r2, [r3, #0]
 80069e6:	e002      	b.n	80069ee <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2200      	movs	r2, #0
 80069ec:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80069ee:	4a04      	ldr	r2, [pc, #16]	; (8006a00 <prvSampleTimeNow+0x3c>)
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80069f4:	68fb      	ldr	r3, [r7, #12]
    }
 80069f6:	4618      	mov	r0, r3
 80069f8:	3710      	adds	r7, #16
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}
 80069fe:	bf00      	nop
 8006a00:	20000248 	.word	0x20000248

08006a04 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b086      	sub	sp, #24
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	60f8      	str	r0, [r7, #12]
 8006a0c:	60b9      	str	r1, [r7, #8]
 8006a0e:	607a      	str	r2, [r7, #4]
 8006a10:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8006a12:	2300      	movs	r3, #0
 8006a14:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	68ba      	ldr	r2, [r7, #8]
 8006a1a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	68fa      	ldr	r2, [r7, #12]
 8006a20:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8006a22:	68ba      	ldr	r2, [r7, #8]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	429a      	cmp	r2, r3
 8006a28:	d812      	bhi.n	8006a50 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a2a:	687a      	ldr	r2, [r7, #4]
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	1ad2      	subs	r2, r2, r3
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	699b      	ldr	r3, [r3, #24]
 8006a34:	429a      	cmp	r2, r3
 8006a36:	d302      	bcc.n	8006a3e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8006a38:	2301      	movs	r3, #1
 8006a3a:	617b      	str	r3, [r7, #20]
 8006a3c:	e01b      	b.n	8006a76 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006a3e:	4b10      	ldr	r3, [pc, #64]	; (8006a80 <prvInsertTimerInActiveList+0x7c>)
 8006a40:	681a      	ldr	r2, [r3, #0]
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	3304      	adds	r3, #4
 8006a46:	4619      	mov	r1, r3
 8006a48:	4610      	mov	r0, r2
 8006a4a:	f7fd ff46 	bl	80048da <vListInsert>
 8006a4e:	e012      	b.n	8006a76 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006a50:	687a      	ldr	r2, [r7, #4]
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d206      	bcs.n	8006a66 <prvInsertTimerInActiveList+0x62>
 8006a58:	68ba      	ldr	r2, [r7, #8]
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d302      	bcc.n	8006a66 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8006a60:	2301      	movs	r3, #1
 8006a62:	617b      	str	r3, [r7, #20]
 8006a64:	e007      	b.n	8006a76 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006a66:	4b07      	ldr	r3, [pc, #28]	; (8006a84 <prvInsertTimerInActiveList+0x80>)
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	3304      	adds	r3, #4
 8006a6e:	4619      	mov	r1, r3
 8006a70:	4610      	mov	r0, r2
 8006a72:	f7fd ff32 	bl	80048da <vListInsert>
            }
        }

        return xProcessTimerNow;
 8006a76:	697b      	ldr	r3, [r7, #20]
    }
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3718      	adds	r7, #24
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}
 8006a80:	2000023c 	.word	0x2000023c
 8006a84:	20000238 	.word	0x20000238

08006a88 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b08c      	sub	sp, #48	; 0x30
 8006a8c:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006a8e:	e0ae      	b.n	8006bee <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	f2c0 80aa 	blt.w	8006bec <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a9e:	695b      	ldr	r3, [r3, #20]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d004      	beq.n	8006aae <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa6:	3304      	adds	r3, #4
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f7fd ff4f 	bl	800494c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006aae:	1d3b      	adds	r3, r7, #4
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f7ff ff87 	bl	80069c4 <prvSampleTimeNow>
 8006ab6:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	2b09      	cmp	r3, #9
 8006abc:	f200 8097 	bhi.w	8006bee <prvProcessReceivedCommands+0x166>
 8006ac0:	a201      	add	r2, pc, #4	; (adr r2, 8006ac8 <prvProcessReceivedCommands+0x40>)
 8006ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ac6:	bf00      	nop
 8006ac8:	08006af1 	.word	0x08006af1
 8006acc:	08006af1 	.word	0x08006af1
 8006ad0:	08006af1 	.word	0x08006af1
 8006ad4:	08006b65 	.word	0x08006b65
 8006ad8:	08006b79 	.word	0x08006b79
 8006adc:	08006bc3 	.word	0x08006bc3
 8006ae0:	08006af1 	.word	0x08006af1
 8006ae4:	08006af1 	.word	0x08006af1
 8006ae8:	08006b65 	.word	0x08006b65
 8006aec:	08006b79 	.word	0x08006b79
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006af6:	f043 0301 	orr.w	r3, r3, #1
 8006afa:	b2da      	uxtb	r2, r3
 8006afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006b02:	68fa      	ldr	r2, [r7, #12]
 8006b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b06:	699b      	ldr	r3, [r3, #24]
 8006b08:	18d1      	adds	r1, r2, r3
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	6a3a      	ldr	r2, [r7, #32]
 8006b0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006b10:	f7ff ff78 	bl	8006a04 <prvInsertTimerInActiveList>
 8006b14:	4603      	mov	r3, r0
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d069      	beq.n	8006bee <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b1c:	6a1b      	ldr	r3, [r3, #32]
 8006b1e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006b20:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b28:	f003 0304 	and.w	r3, r3, #4
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d05e      	beq.n	8006bee <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006b30:	68fa      	ldr	r2, [r7, #12]
 8006b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b34:	699b      	ldr	r3, [r3, #24]
 8006b36:	441a      	add	r2, r3
 8006b38:	2300      	movs	r3, #0
 8006b3a:	9300      	str	r3, [sp, #0]
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	2100      	movs	r1, #0
 8006b40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006b42:	f7ff fe21 	bl	8006788 <xTimerGenericCommand>
 8006b46:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8006b48:	69fb      	ldr	r3, [r7, #28]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d14f      	bne.n	8006bee <prvProcessReceivedCommands+0x166>
        __asm volatile
 8006b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b52:	f383 8811 	msr	BASEPRI, r3
 8006b56:	f3bf 8f6f 	isb	sy
 8006b5a:	f3bf 8f4f 	dsb	sy
 8006b5e:	61bb      	str	r3, [r7, #24]
    }
 8006b60:	bf00      	nop
 8006b62:	e7fe      	b.n	8006b62 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b6a:	f023 0301 	bic.w	r3, r3, #1
 8006b6e:	b2da      	uxtb	r2, r3
 8006b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8006b76:	e03a      	b.n	8006bee <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b7e:	f043 0301 	orr.w	r3, r3, #1
 8006b82:	b2da      	uxtb	r2, r3
 8006b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006b8a:	68fa      	ldr	r2, [r7, #12]
 8006b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b8e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b92:	699b      	ldr	r3, [r3, #24]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d10a      	bne.n	8006bae <prvProcessReceivedCommands+0x126>
        __asm volatile
 8006b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b9c:	f383 8811 	msr	BASEPRI, r3
 8006ba0:	f3bf 8f6f 	isb	sy
 8006ba4:	f3bf 8f4f 	dsb	sy
 8006ba8:	617b      	str	r3, [r7, #20]
    }
 8006baa:	bf00      	nop
 8006bac:	e7fe      	b.n	8006bac <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb0:	699a      	ldr	r2, [r3, #24]
 8006bb2:	6a3b      	ldr	r3, [r7, #32]
 8006bb4:	18d1      	adds	r1, r2, r3
 8006bb6:	6a3b      	ldr	r3, [r7, #32]
 8006bb8:	6a3a      	ldr	r2, [r7, #32]
 8006bba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006bbc:	f7ff ff22 	bl	8006a04 <prvInsertTimerInActiveList>
                        break;
 8006bc0:	e015      	b.n	8006bee <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006bc8:	f003 0302 	and.w	r3, r3, #2
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d103      	bne.n	8006bd8 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8006bd0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006bd2:	f000 fc33 	bl	800743c <vPortFree>
 8006bd6:	e00a      	b.n	8006bee <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bda:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006bde:	f023 0301 	bic.w	r3, r3, #1
 8006be2:	b2da      	uxtb	r2, r3
 8006be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8006bea:	e000      	b.n	8006bee <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8006bec:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006bee:	4b08      	ldr	r3, [pc, #32]	; (8006c10 <prvProcessReceivedCommands+0x188>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f107 0108 	add.w	r1, r7, #8
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f7fe f963 	bl	8004ec4 <xQueueReceive>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	f47f af45 	bne.w	8006a90 <prvProcessReceivedCommands+0x8>
        }
    }
 8006c06:	bf00      	nop
 8006c08:	bf00      	nop
 8006c0a:	3728      	adds	r7, #40	; 0x28
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}
 8006c10:	20000240 	.word	0x20000240

08006c14 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b088      	sub	sp, #32
 8006c18:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006c1a:	e048      	b.n	8006cae <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006c1c:	4b2d      	ldr	r3, [pc, #180]	; (8006cd4 <prvSwitchTimerLists+0xc0>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	68db      	ldr	r3, [r3, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c26:	4b2b      	ldr	r3, [pc, #172]	; (8006cd4 <prvSwitchTimerLists+0xc0>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	68db      	ldr	r3, [r3, #12]
 8006c2c:	68db      	ldr	r3, [r3, #12]
 8006c2e:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	3304      	adds	r3, #4
 8006c34:	4618      	mov	r0, r3
 8006c36:	f7fd fe89 	bl	800494c <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	6a1b      	ldr	r3, [r3, #32]
 8006c3e:	68f8      	ldr	r0, [r7, #12]
 8006c40:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c48:	f003 0304 	and.w	r3, r3, #4
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d02e      	beq.n	8006cae <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	699b      	ldr	r3, [r3, #24]
 8006c54:	693a      	ldr	r2, [r7, #16]
 8006c56:	4413      	add	r3, r2
 8006c58:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8006c5a:	68ba      	ldr	r2, [r7, #8]
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	d90e      	bls.n	8006c80 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	68ba      	ldr	r2, [r7, #8]
 8006c66:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	68fa      	ldr	r2, [r7, #12]
 8006c6c:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006c6e:	4b19      	ldr	r3, [pc, #100]	; (8006cd4 <prvSwitchTimerLists+0xc0>)
 8006c70:	681a      	ldr	r2, [r3, #0]
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	3304      	adds	r3, #4
 8006c76:	4619      	mov	r1, r3
 8006c78:	4610      	mov	r0, r2
 8006c7a:	f7fd fe2e 	bl	80048da <vListInsert>
 8006c7e:	e016      	b.n	8006cae <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006c80:	2300      	movs	r3, #0
 8006c82:	9300      	str	r3, [sp, #0]
 8006c84:	2300      	movs	r3, #0
 8006c86:	693a      	ldr	r2, [r7, #16]
 8006c88:	2100      	movs	r1, #0
 8006c8a:	68f8      	ldr	r0, [r7, #12]
 8006c8c:	f7ff fd7c 	bl	8006788 <xTimerGenericCommand>
 8006c90:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d10a      	bne.n	8006cae <prvSwitchTimerLists+0x9a>
        __asm volatile
 8006c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c9c:	f383 8811 	msr	BASEPRI, r3
 8006ca0:	f3bf 8f6f 	isb	sy
 8006ca4:	f3bf 8f4f 	dsb	sy
 8006ca8:	603b      	str	r3, [r7, #0]
    }
 8006caa:	bf00      	nop
 8006cac:	e7fe      	b.n	8006cac <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006cae:	4b09      	ldr	r3, [pc, #36]	; (8006cd4 <prvSwitchTimerLists+0xc0>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d1b1      	bne.n	8006c1c <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8006cb8:	4b06      	ldr	r3, [pc, #24]	; (8006cd4 <prvSwitchTimerLists+0xc0>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8006cbe:	4b06      	ldr	r3, [pc, #24]	; (8006cd8 <prvSwitchTimerLists+0xc4>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a04      	ldr	r2, [pc, #16]	; (8006cd4 <prvSwitchTimerLists+0xc0>)
 8006cc4:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8006cc6:	4a04      	ldr	r2, [pc, #16]	; (8006cd8 <prvSwitchTimerLists+0xc4>)
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	6013      	str	r3, [r2, #0]
    }
 8006ccc:	bf00      	nop
 8006cce:	3718      	adds	r7, #24
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}
 8006cd4:	20000238 	.word	0x20000238
 8006cd8:	2000023c 	.word	0x2000023c

08006cdc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8006ce0:	f000 f9aa 	bl	8007038 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8006ce4:	4b12      	ldr	r3, [pc, #72]	; (8006d30 <prvCheckForValidListAndQueue+0x54>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d11d      	bne.n	8006d28 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8006cec:	4811      	ldr	r0, [pc, #68]	; (8006d34 <prvCheckForValidListAndQueue+0x58>)
 8006cee:	f7fd fda3 	bl	8004838 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8006cf2:	4811      	ldr	r0, [pc, #68]	; (8006d38 <prvCheckForValidListAndQueue+0x5c>)
 8006cf4:	f7fd fda0 	bl	8004838 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8006cf8:	4b10      	ldr	r3, [pc, #64]	; (8006d3c <prvCheckForValidListAndQueue+0x60>)
 8006cfa:	4a0e      	ldr	r2, [pc, #56]	; (8006d34 <prvCheckForValidListAndQueue+0x58>)
 8006cfc:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8006cfe:	4b10      	ldr	r3, [pc, #64]	; (8006d40 <prvCheckForValidListAndQueue+0x64>)
 8006d00:	4a0d      	ldr	r2, [pc, #52]	; (8006d38 <prvCheckForValidListAndQueue+0x5c>)
 8006d02:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8006d04:	2200      	movs	r2, #0
 8006d06:	210c      	movs	r1, #12
 8006d08:	200a      	movs	r0, #10
 8006d0a:	f7fd feb1 	bl	8004a70 <xQueueGenericCreate>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	4a07      	ldr	r2, [pc, #28]	; (8006d30 <prvCheckForValidListAndQueue+0x54>)
 8006d12:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8006d14:	4b06      	ldr	r3, [pc, #24]	; (8006d30 <prvCheckForValidListAndQueue+0x54>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d005      	beq.n	8006d28 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006d1c:	4b04      	ldr	r3, [pc, #16]	; (8006d30 <prvCheckForValidListAndQueue+0x54>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4908      	ldr	r1, [pc, #32]	; (8006d44 <prvCheckForValidListAndQueue+0x68>)
 8006d22:	4618      	mov	r0, r3
 8006d24:	f7fe fb92 	bl	800544c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8006d28:	f000 f9b6 	bl	8007098 <vPortExitCritical>
    }
 8006d2c:	bf00      	nop
 8006d2e:	bd80      	pop	{r7, pc}
 8006d30:	20000240 	.word	0x20000240
 8006d34:	20000210 	.word	0x20000210
 8006d38:	20000224 	.word	0x20000224
 8006d3c:	20000238 	.word	0x20000238
 8006d40:	2000023c 	.word	0x2000023c
 8006d44:	0800904c 	.word	0x0800904c

08006d48 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

    BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
    {
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b086      	sub	sp, #24
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn;
        Timer_t * pxTimer = xTimer;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	613b      	str	r3, [r7, #16]

        configASSERT( xTimer );
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d10a      	bne.n	8006d70 <xTimerIsTimerActive+0x28>
        __asm volatile
 8006d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d5e:	f383 8811 	msr	BASEPRI, r3
 8006d62:	f3bf 8f6f 	isb	sy
 8006d66:	f3bf 8f4f 	dsb	sy
 8006d6a:	60fb      	str	r3, [r7, #12]
    }
 8006d6c:	bf00      	nop
 8006d6e:	e7fe      	b.n	8006d6e <xTimerIsTimerActive+0x26>

        /* Is the timer in the list of active timers? */
        taskENTER_CRITICAL();
 8006d70:	f000 f962 	bl	8007038 <vPortEnterCritical>
        {
            if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d7a:	f003 0301 	and.w	r3, r3, #1
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d102      	bne.n	8006d88 <xTimerIsTimerActive+0x40>
            {
                xReturn = pdFALSE;
 8006d82:	2300      	movs	r3, #0
 8006d84:	617b      	str	r3, [r7, #20]
 8006d86:	e001      	b.n	8006d8c <xTimerIsTimerActive+0x44>
            }
            else
            {
                xReturn = pdTRUE;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	617b      	str	r3, [r7, #20]
            }
        }
        taskEXIT_CRITICAL();
 8006d8c:	f000 f984 	bl	8007098 <vPortExitCritical>

        return xReturn;
 8006d90:	697b      	ldr	r3, [r7, #20]
    } /*lint !e818 Can't be pointer to const due to the typedef. */
 8006d92:	4618      	mov	r0, r3
 8006d94:	3718      	adds	r7, #24
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}

08006d9a <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

    void * pvTimerGetTimerID( const TimerHandle_t xTimer )
    {
 8006d9a:	b580      	push	{r7, lr}
 8006d9c:	b086      	sub	sp, #24
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	6078      	str	r0, [r7, #4]
        Timer_t * const pxTimer = xTimer;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	617b      	str	r3, [r7, #20]
        void * pvReturn;

        configASSERT( xTimer );
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d10a      	bne.n	8006dc2 <pvTimerGetTimerID+0x28>
        __asm volatile
 8006dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db0:	f383 8811 	msr	BASEPRI, r3
 8006db4:	f3bf 8f6f 	isb	sy
 8006db8:	f3bf 8f4f 	dsb	sy
 8006dbc:	60fb      	str	r3, [r7, #12]
    }
 8006dbe:	bf00      	nop
 8006dc0:	e7fe      	b.n	8006dc0 <pvTimerGetTimerID+0x26>

        taskENTER_CRITICAL();
 8006dc2:	f000 f939 	bl	8007038 <vPortEnterCritical>
        {
            pvReturn = pxTimer->pvTimerID;
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	69db      	ldr	r3, [r3, #28]
 8006dca:	613b      	str	r3, [r7, #16]
        }
        taskEXIT_CRITICAL();
 8006dcc:	f000 f964 	bl	8007098 <vPortExitCritical>

        return pvReturn;
 8006dd0:	693b      	ldr	r3, [r7, #16]
    }
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3718      	adds	r7, #24
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}
	...

08006ddc <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b085      	sub	sp, #20
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	60f8      	str	r0, [r7, #12]
 8006de4:	60b9      	str	r1, [r7, #8]
 8006de6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	3b04      	subs	r3, #4
 8006dec:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006df4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	3b04      	subs	r3, #4
 8006dfa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	f023 0201 	bic.w	r2, r3, #1
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	3b04      	subs	r3, #4
 8006e0a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8006e0c:	4a0c      	ldr	r2, [pc, #48]	; (8006e40 <pxPortInitialiseStack+0x64>)
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	3b14      	subs	r3, #20
 8006e16:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8006e18:	687a      	ldr	r2, [r7, #4]
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	3b04      	subs	r3, #4
 8006e22:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f06f 0202 	mvn.w	r2, #2
 8006e2a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	3b20      	subs	r3, #32
 8006e30:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8006e32:	68fb      	ldr	r3, [r7, #12]
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	3714      	adds	r7, #20
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3e:	4770      	bx	lr
 8006e40:	08006e45 	.word	0x08006e45

08006e44 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006e44:	b480      	push	{r7}
 8006e46:	b085      	sub	sp, #20
 8006e48:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8006e4e:	4b12      	ldr	r3, [pc, #72]	; (8006e98 <prvTaskExitError+0x54>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e56:	d00a      	beq.n	8006e6e <prvTaskExitError+0x2a>
        __asm volatile
 8006e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e5c:	f383 8811 	msr	BASEPRI, r3
 8006e60:	f3bf 8f6f 	isb	sy
 8006e64:	f3bf 8f4f 	dsb	sy
 8006e68:	60fb      	str	r3, [r7, #12]
    }
 8006e6a:	bf00      	nop
 8006e6c:	e7fe      	b.n	8006e6c <prvTaskExitError+0x28>
        __asm volatile
 8006e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e72:	f383 8811 	msr	BASEPRI, r3
 8006e76:	f3bf 8f6f 	isb	sy
 8006e7a:	f3bf 8f4f 	dsb	sy
 8006e7e:	60bb      	str	r3, [r7, #8]
    }
 8006e80:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8006e82:	bf00      	nop
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d0fc      	beq.n	8006e84 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8006e8a:	bf00      	nop
 8006e8c:	bf00      	nop
 8006e8e:	3714      	adds	r7, #20
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr
 8006e98:	20000024 	.word	0x20000024
 8006e9c:	00000000 	.word	0x00000000

08006ea0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8006ea0:	4b07      	ldr	r3, [pc, #28]	; (8006ec0 <pxCurrentTCBConst2>)
 8006ea2:	6819      	ldr	r1, [r3, #0]
 8006ea4:	6808      	ldr	r0, [r1, #0]
 8006ea6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eaa:	f380 8809 	msr	PSP, r0
 8006eae:	f3bf 8f6f 	isb	sy
 8006eb2:	f04f 0000 	mov.w	r0, #0
 8006eb6:	f380 8811 	msr	BASEPRI, r0
 8006eba:	4770      	bx	lr
 8006ebc:	f3af 8000 	nop.w

08006ec0 <pxCurrentTCBConst2>:
 8006ec0:	2000010c 	.word	0x2000010c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8006ec4:	bf00      	nop
 8006ec6:	bf00      	nop

08006ec8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8006ec8:	4808      	ldr	r0, [pc, #32]	; (8006eec <prvPortStartFirstTask+0x24>)
 8006eca:	6800      	ldr	r0, [r0, #0]
 8006ecc:	6800      	ldr	r0, [r0, #0]
 8006ece:	f380 8808 	msr	MSP, r0
 8006ed2:	f04f 0000 	mov.w	r0, #0
 8006ed6:	f380 8814 	msr	CONTROL, r0
 8006eda:	b662      	cpsie	i
 8006edc:	b661      	cpsie	f
 8006ede:	f3bf 8f4f 	dsb	sy
 8006ee2:	f3bf 8f6f 	isb	sy
 8006ee6:	df00      	svc	0
 8006ee8:	bf00      	nop
 8006eea:	0000      	.short	0x0000
 8006eec:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8006ef0:	bf00      	nop
 8006ef2:	bf00      	nop

08006ef4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b086      	sub	sp, #24
 8006ef8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006efa:	4b46      	ldr	r3, [pc, #280]	; (8007014 <xPortStartScheduler+0x120>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a46      	ldr	r2, [pc, #280]	; (8007018 <xPortStartScheduler+0x124>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d10a      	bne.n	8006f1a <xPortStartScheduler+0x26>
        __asm volatile
 8006f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f08:	f383 8811 	msr	BASEPRI, r3
 8006f0c:	f3bf 8f6f 	isb	sy
 8006f10:	f3bf 8f4f 	dsb	sy
 8006f14:	613b      	str	r3, [r7, #16]
    }
 8006f16:	bf00      	nop
 8006f18:	e7fe      	b.n	8006f18 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006f1a:	4b3e      	ldr	r3, [pc, #248]	; (8007014 <xPortStartScheduler+0x120>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a3f      	ldr	r2, [pc, #252]	; (800701c <xPortStartScheduler+0x128>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d10a      	bne.n	8006f3a <xPortStartScheduler+0x46>
        __asm volatile
 8006f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f28:	f383 8811 	msr	BASEPRI, r3
 8006f2c:	f3bf 8f6f 	isb	sy
 8006f30:	f3bf 8f4f 	dsb	sy
 8006f34:	60fb      	str	r3, [r7, #12]
    }
 8006f36:	bf00      	nop
 8006f38:	e7fe      	b.n	8006f38 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006f3a:	4b39      	ldr	r3, [pc, #228]	; (8007020 <xPortStartScheduler+0x12c>)
 8006f3c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	781b      	ldrb	r3, [r3, #0]
 8006f42:	b2db      	uxtb	r3, r3
 8006f44:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	22ff      	movs	r2, #255	; 0xff
 8006f4a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	781b      	ldrb	r3, [r3, #0]
 8006f50:	b2db      	uxtb	r3, r3
 8006f52:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006f54:	78fb      	ldrb	r3, [r7, #3]
 8006f56:	b2db      	uxtb	r3, r3
 8006f58:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006f5c:	b2da      	uxtb	r2, r3
 8006f5e:	4b31      	ldr	r3, [pc, #196]	; (8007024 <xPortStartScheduler+0x130>)
 8006f60:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006f62:	4b31      	ldr	r3, [pc, #196]	; (8007028 <xPortStartScheduler+0x134>)
 8006f64:	2207      	movs	r2, #7
 8006f66:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006f68:	e009      	b.n	8006f7e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8006f6a:	4b2f      	ldr	r3, [pc, #188]	; (8007028 <xPortStartScheduler+0x134>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	3b01      	subs	r3, #1
 8006f70:	4a2d      	ldr	r2, [pc, #180]	; (8007028 <xPortStartScheduler+0x134>)
 8006f72:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006f74:	78fb      	ldrb	r3, [r7, #3]
 8006f76:	b2db      	uxtb	r3, r3
 8006f78:	005b      	lsls	r3, r3, #1
 8006f7a:	b2db      	uxtb	r3, r3
 8006f7c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006f7e:	78fb      	ldrb	r3, [r7, #3]
 8006f80:	b2db      	uxtb	r3, r3
 8006f82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f86:	2b80      	cmp	r3, #128	; 0x80
 8006f88:	d0ef      	beq.n	8006f6a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006f8a:	4b27      	ldr	r3, [pc, #156]	; (8007028 <xPortStartScheduler+0x134>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f1c3 0307 	rsb	r3, r3, #7
 8006f92:	2b04      	cmp	r3, #4
 8006f94:	d00a      	beq.n	8006fac <xPortStartScheduler+0xb8>
        __asm volatile
 8006f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f9a:	f383 8811 	msr	BASEPRI, r3
 8006f9e:	f3bf 8f6f 	isb	sy
 8006fa2:	f3bf 8f4f 	dsb	sy
 8006fa6:	60bb      	str	r3, [r7, #8]
    }
 8006fa8:	bf00      	nop
 8006faa:	e7fe      	b.n	8006faa <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006fac:	4b1e      	ldr	r3, [pc, #120]	; (8007028 <xPortStartScheduler+0x134>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	021b      	lsls	r3, r3, #8
 8006fb2:	4a1d      	ldr	r2, [pc, #116]	; (8007028 <xPortStartScheduler+0x134>)
 8006fb4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006fb6:	4b1c      	ldr	r3, [pc, #112]	; (8007028 <xPortStartScheduler+0x134>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006fbe:	4a1a      	ldr	r2, [pc, #104]	; (8007028 <xPortStartScheduler+0x134>)
 8006fc0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	b2da      	uxtb	r2, r3
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8006fca:	4b18      	ldr	r3, [pc, #96]	; (800702c <xPortStartScheduler+0x138>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a17      	ldr	r2, [pc, #92]	; (800702c <xPortStartScheduler+0x138>)
 8006fd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006fd4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8006fd6:	4b15      	ldr	r3, [pc, #84]	; (800702c <xPortStartScheduler+0x138>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a14      	ldr	r2, [pc, #80]	; (800702c <xPortStartScheduler+0x138>)
 8006fdc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006fe0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8006fe2:	f000 f8db 	bl	800719c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8006fe6:	4b12      	ldr	r3, [pc, #72]	; (8007030 <xPortStartScheduler+0x13c>)
 8006fe8:	2200      	movs	r2, #0
 8006fea:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8006fec:	f000 f8fa 	bl	80071e4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006ff0:	4b10      	ldr	r3, [pc, #64]	; (8007034 <xPortStartScheduler+0x140>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a0f      	ldr	r2, [pc, #60]	; (8007034 <xPortStartScheduler+0x140>)
 8006ff6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006ffa:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8006ffc:	f7ff ff64 	bl	8006ec8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8007000:	f7fe fd8c 	bl	8005b1c <vTaskSwitchContext>
    prvTaskExitError();
 8007004:	f7ff ff1e 	bl	8006e44 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8007008:	2300      	movs	r3, #0
}
 800700a:	4618      	mov	r0, r3
 800700c:	3718      	adds	r7, #24
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}
 8007012:	bf00      	nop
 8007014:	e000ed00 	.word	0xe000ed00
 8007018:	410fc271 	.word	0x410fc271
 800701c:	410fc270 	.word	0x410fc270
 8007020:	e000e400 	.word	0xe000e400
 8007024:	2000024c 	.word	0x2000024c
 8007028:	20000250 	.word	0x20000250
 800702c:	e000ed20 	.word	0xe000ed20
 8007030:	20000024 	.word	0x20000024
 8007034:	e000ef34 	.word	0xe000ef34

08007038 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007038:	b480      	push	{r7}
 800703a:	b083      	sub	sp, #12
 800703c:	af00      	add	r7, sp, #0
        __asm volatile
 800703e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007042:	f383 8811 	msr	BASEPRI, r3
 8007046:	f3bf 8f6f 	isb	sy
 800704a:	f3bf 8f4f 	dsb	sy
 800704e:	607b      	str	r3, [r7, #4]
    }
 8007050:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8007052:	4b0f      	ldr	r3, [pc, #60]	; (8007090 <vPortEnterCritical+0x58>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	3301      	adds	r3, #1
 8007058:	4a0d      	ldr	r2, [pc, #52]	; (8007090 <vPortEnterCritical+0x58>)
 800705a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800705c:	4b0c      	ldr	r3, [pc, #48]	; (8007090 <vPortEnterCritical+0x58>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	2b01      	cmp	r3, #1
 8007062:	d10f      	bne.n	8007084 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007064:	4b0b      	ldr	r3, [pc, #44]	; (8007094 <vPortEnterCritical+0x5c>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	b2db      	uxtb	r3, r3
 800706a:	2b00      	cmp	r3, #0
 800706c:	d00a      	beq.n	8007084 <vPortEnterCritical+0x4c>
        __asm volatile
 800706e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007072:	f383 8811 	msr	BASEPRI, r3
 8007076:	f3bf 8f6f 	isb	sy
 800707a:	f3bf 8f4f 	dsb	sy
 800707e:	603b      	str	r3, [r7, #0]
    }
 8007080:	bf00      	nop
 8007082:	e7fe      	b.n	8007082 <vPortEnterCritical+0x4a>
    }
}
 8007084:	bf00      	nop
 8007086:	370c      	adds	r7, #12
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr
 8007090:	20000024 	.word	0x20000024
 8007094:	e000ed04 	.word	0xe000ed04

08007098 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007098:	b480      	push	{r7}
 800709a:	b083      	sub	sp, #12
 800709c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800709e:	4b12      	ldr	r3, [pc, #72]	; (80070e8 <vPortExitCritical+0x50>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d10a      	bne.n	80070bc <vPortExitCritical+0x24>
        __asm volatile
 80070a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070aa:	f383 8811 	msr	BASEPRI, r3
 80070ae:	f3bf 8f6f 	isb	sy
 80070b2:	f3bf 8f4f 	dsb	sy
 80070b6:	607b      	str	r3, [r7, #4]
    }
 80070b8:	bf00      	nop
 80070ba:	e7fe      	b.n	80070ba <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80070bc:	4b0a      	ldr	r3, [pc, #40]	; (80070e8 <vPortExitCritical+0x50>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	3b01      	subs	r3, #1
 80070c2:	4a09      	ldr	r2, [pc, #36]	; (80070e8 <vPortExitCritical+0x50>)
 80070c4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80070c6:	4b08      	ldr	r3, [pc, #32]	; (80070e8 <vPortExitCritical+0x50>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d105      	bne.n	80070da <vPortExitCritical+0x42>
 80070ce:	2300      	movs	r3, #0
 80070d0:	603b      	str	r3, [r7, #0]
        __asm volatile
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	f383 8811 	msr	BASEPRI, r3
    }
 80070d8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80070da:	bf00      	nop
 80070dc:	370c      	adds	r7, #12
 80070de:	46bd      	mov	sp, r7
 80070e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e4:	4770      	bx	lr
 80070e6:	bf00      	nop
 80070e8:	20000024 	.word	0x20000024
 80070ec:	00000000 	.word	0x00000000

080070f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80070f0:	f3ef 8009 	mrs	r0, PSP
 80070f4:	f3bf 8f6f 	isb	sy
 80070f8:	4b15      	ldr	r3, [pc, #84]	; (8007150 <pxCurrentTCBConst>)
 80070fa:	681a      	ldr	r2, [r3, #0]
 80070fc:	f01e 0f10 	tst.w	lr, #16
 8007100:	bf08      	it	eq
 8007102:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007106:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800710a:	6010      	str	r0, [r2, #0]
 800710c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007110:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007114:	f380 8811 	msr	BASEPRI, r0
 8007118:	f3bf 8f4f 	dsb	sy
 800711c:	f3bf 8f6f 	isb	sy
 8007120:	f7fe fcfc 	bl	8005b1c <vTaskSwitchContext>
 8007124:	f04f 0000 	mov.w	r0, #0
 8007128:	f380 8811 	msr	BASEPRI, r0
 800712c:	bc09      	pop	{r0, r3}
 800712e:	6819      	ldr	r1, [r3, #0]
 8007130:	6808      	ldr	r0, [r1, #0]
 8007132:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007136:	f01e 0f10 	tst.w	lr, #16
 800713a:	bf08      	it	eq
 800713c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007140:	f380 8809 	msr	PSP, r0
 8007144:	f3bf 8f6f 	isb	sy
 8007148:	4770      	bx	lr
 800714a:	bf00      	nop
 800714c:	f3af 8000 	nop.w

08007150 <pxCurrentTCBConst>:
 8007150:	2000010c 	.word	0x2000010c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8007154:	bf00      	nop
 8007156:	bf00      	nop

08007158 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b082      	sub	sp, #8
 800715c:	af00      	add	r7, sp, #0
        __asm volatile
 800715e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007162:	f383 8811 	msr	BASEPRI, r3
 8007166:	f3bf 8f6f 	isb	sy
 800716a:	f3bf 8f4f 	dsb	sy
 800716e:	607b      	str	r3, [r7, #4]
    }
 8007170:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8007172:	f7fe fc1b 	bl	80059ac <xTaskIncrementTick>
 8007176:	4603      	mov	r3, r0
 8007178:	2b00      	cmp	r3, #0
 800717a:	d003      	beq.n	8007184 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800717c:	4b06      	ldr	r3, [pc, #24]	; (8007198 <SysTick_Handler+0x40>)
 800717e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007182:	601a      	str	r2, [r3, #0]
 8007184:	2300      	movs	r3, #0
 8007186:	603b      	str	r3, [r7, #0]
        __asm volatile
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	f383 8811 	msr	BASEPRI, r3
    }
 800718e:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8007190:	bf00      	nop
 8007192:	3708      	adds	r7, #8
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}
 8007198:	e000ed04 	.word	0xe000ed04

0800719c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800719c:	b480      	push	{r7}
 800719e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80071a0:	4b0b      	ldr	r3, [pc, #44]	; (80071d0 <vPortSetupTimerInterrupt+0x34>)
 80071a2:	2200      	movs	r2, #0
 80071a4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80071a6:	4b0b      	ldr	r3, [pc, #44]	; (80071d4 <vPortSetupTimerInterrupt+0x38>)
 80071a8:	2200      	movs	r2, #0
 80071aa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80071ac:	4b0a      	ldr	r3, [pc, #40]	; (80071d8 <vPortSetupTimerInterrupt+0x3c>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a0a      	ldr	r2, [pc, #40]	; (80071dc <vPortSetupTimerInterrupt+0x40>)
 80071b2:	fba2 2303 	umull	r2, r3, r2, r3
 80071b6:	099b      	lsrs	r3, r3, #6
 80071b8:	4a09      	ldr	r2, [pc, #36]	; (80071e0 <vPortSetupTimerInterrupt+0x44>)
 80071ba:	3b01      	subs	r3, #1
 80071bc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80071be:	4b04      	ldr	r3, [pc, #16]	; (80071d0 <vPortSetupTimerInterrupt+0x34>)
 80071c0:	2207      	movs	r2, #7
 80071c2:	601a      	str	r2, [r3, #0]
}
 80071c4:	bf00      	nop
 80071c6:	46bd      	mov	sp, r7
 80071c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071cc:	4770      	bx	lr
 80071ce:	bf00      	nop
 80071d0:	e000e010 	.word	0xe000e010
 80071d4:	e000e018 	.word	0xe000e018
 80071d8:	20000010 	.word	0x20000010
 80071dc:	10624dd3 	.word	0x10624dd3
 80071e0:	e000e014 	.word	0xe000e014

080071e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80071e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80071f4 <vPortEnableVFP+0x10>
 80071e8:	6801      	ldr	r1, [r0, #0]
 80071ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80071ee:	6001      	str	r1, [r0, #0]
 80071f0:	4770      	bx	lr
 80071f2:	0000      	.short	0x0000
 80071f4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80071f8:	bf00      	nop
 80071fa:	bf00      	nop

080071fc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80071fc:	b480      	push	{r7}
 80071fe:	b085      	sub	sp, #20
 8007200:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8007202:	f3ef 8305 	mrs	r3, IPSR
 8007206:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2b0f      	cmp	r3, #15
 800720c:	d914      	bls.n	8007238 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800720e:	4a17      	ldr	r2, [pc, #92]	; (800726c <vPortValidateInterruptPriority+0x70>)
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	4413      	add	r3, r2
 8007214:	781b      	ldrb	r3, [r3, #0]
 8007216:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007218:	4b15      	ldr	r3, [pc, #84]	; (8007270 <vPortValidateInterruptPriority+0x74>)
 800721a:	781b      	ldrb	r3, [r3, #0]
 800721c:	7afa      	ldrb	r2, [r7, #11]
 800721e:	429a      	cmp	r2, r3
 8007220:	d20a      	bcs.n	8007238 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8007222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007226:	f383 8811 	msr	BASEPRI, r3
 800722a:	f3bf 8f6f 	isb	sy
 800722e:	f3bf 8f4f 	dsb	sy
 8007232:	607b      	str	r3, [r7, #4]
    }
 8007234:	bf00      	nop
 8007236:	e7fe      	b.n	8007236 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007238:	4b0e      	ldr	r3, [pc, #56]	; (8007274 <vPortValidateInterruptPriority+0x78>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007240:	4b0d      	ldr	r3, [pc, #52]	; (8007278 <vPortValidateInterruptPriority+0x7c>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	429a      	cmp	r2, r3
 8007246:	d90a      	bls.n	800725e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8007248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800724c:	f383 8811 	msr	BASEPRI, r3
 8007250:	f3bf 8f6f 	isb	sy
 8007254:	f3bf 8f4f 	dsb	sy
 8007258:	603b      	str	r3, [r7, #0]
    }
 800725a:	bf00      	nop
 800725c:	e7fe      	b.n	800725c <vPortValidateInterruptPriority+0x60>
    }
 800725e:	bf00      	nop
 8007260:	3714      	adds	r7, #20
 8007262:	46bd      	mov	sp, r7
 8007264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007268:	4770      	bx	lr
 800726a:	bf00      	nop
 800726c:	e000e3f0 	.word	0xe000e3f0
 8007270:	2000024c 	.word	0x2000024c
 8007274:	e000ed0c 	.word	0xe000ed0c
 8007278:	20000250 	.word	0x20000250

0800727c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b08a      	sub	sp, #40	; 0x28
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8007284:	2300      	movs	r3, #0
 8007286:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8007288:	f7fe fad6 	bl	8005838 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800728c:	4b65      	ldr	r3, [pc, #404]	; (8007424 <pvPortMalloc+0x1a8>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d101      	bne.n	8007298 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8007294:	f000 f934 	bl	8007500 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007298:	4b63      	ldr	r3, [pc, #396]	; (8007428 <pvPortMalloc+0x1ac>)
 800729a:	681a      	ldr	r2, [r3, #0]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	4013      	ands	r3, r2
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	f040 80a7 	bne.w	80073f4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d02d      	beq.n	8007308 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80072ac:	2208      	movs	r2, #8
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80072b2:	687a      	ldr	r2, [r7, #4]
 80072b4:	429a      	cmp	r2, r3
 80072b6:	d227      	bcs.n	8007308 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 80072b8:	2208      	movs	r2, #8
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	4413      	add	r3, r2
 80072be:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f003 0307 	and.w	r3, r3, #7
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d021      	beq.n	800730e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f023 0307 	bic.w	r3, r3, #7
 80072d0:	3308      	adds	r3, #8
 80072d2:	687a      	ldr	r2, [r7, #4]
 80072d4:	429a      	cmp	r2, r3
 80072d6:	d214      	bcs.n	8007302 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f023 0307 	bic.w	r3, r3, #7
 80072de:	3308      	adds	r3, #8
 80072e0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f003 0307 	and.w	r3, r3, #7
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d010      	beq.n	800730e <pvPortMalloc+0x92>
        __asm volatile
 80072ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072f0:	f383 8811 	msr	BASEPRI, r3
 80072f4:	f3bf 8f6f 	isb	sy
 80072f8:	f3bf 8f4f 	dsb	sy
 80072fc:	617b      	str	r3, [r7, #20]
    }
 80072fe:	bf00      	nop
 8007300:	e7fe      	b.n	8007300 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8007302:	2300      	movs	r3, #0
 8007304:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007306:	e002      	b.n	800730e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8007308:	2300      	movs	r3, #0
 800730a:	607b      	str	r3, [r7, #4]
 800730c:	e000      	b.n	8007310 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800730e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d06e      	beq.n	80073f4 <pvPortMalloc+0x178>
 8007316:	4b45      	ldr	r3, [pc, #276]	; (800742c <pvPortMalloc+0x1b0>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	687a      	ldr	r2, [r7, #4]
 800731c:	429a      	cmp	r2, r3
 800731e:	d869      	bhi.n	80073f4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8007320:	4b43      	ldr	r3, [pc, #268]	; (8007430 <pvPortMalloc+0x1b4>)
 8007322:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8007324:	4b42      	ldr	r3, [pc, #264]	; (8007430 <pvPortMalloc+0x1b4>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800732a:	e004      	b.n	8007336 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800732c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800732e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8007330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	687a      	ldr	r2, [r7, #4]
 800733c:	429a      	cmp	r2, r3
 800733e:	d903      	bls.n	8007348 <pvPortMalloc+0xcc>
 8007340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d1f1      	bne.n	800732c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8007348:	4b36      	ldr	r3, [pc, #216]	; (8007424 <pvPortMalloc+0x1a8>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800734e:	429a      	cmp	r2, r3
 8007350:	d050      	beq.n	80073f4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007352:	6a3b      	ldr	r3, [r7, #32]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	2208      	movs	r2, #8
 8007358:	4413      	add	r3, r2
 800735a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800735c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800735e:	681a      	ldr	r2, [r3, #0]
 8007360:	6a3b      	ldr	r3, [r7, #32]
 8007362:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007366:	685a      	ldr	r2, [r3, #4]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	1ad2      	subs	r2, r2, r3
 800736c:	2308      	movs	r3, #8
 800736e:	005b      	lsls	r3, r3, #1
 8007370:	429a      	cmp	r2, r3
 8007372:	d91f      	bls.n	80073b4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007374:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	4413      	add	r3, r2
 800737a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800737c:	69bb      	ldr	r3, [r7, #24]
 800737e:	f003 0307 	and.w	r3, r3, #7
 8007382:	2b00      	cmp	r3, #0
 8007384:	d00a      	beq.n	800739c <pvPortMalloc+0x120>
        __asm volatile
 8007386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800738a:	f383 8811 	msr	BASEPRI, r3
 800738e:	f3bf 8f6f 	isb	sy
 8007392:	f3bf 8f4f 	dsb	sy
 8007396:	613b      	str	r3, [r7, #16]
    }
 8007398:	bf00      	nop
 800739a:	e7fe      	b.n	800739a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800739c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800739e:	685a      	ldr	r2, [r3, #4]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	1ad2      	subs	r2, r2, r3
 80073a4:	69bb      	ldr	r3, [r7, #24]
 80073a6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80073a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073aa:	687a      	ldr	r2, [r7, #4]
 80073ac:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80073ae:	69b8      	ldr	r0, [r7, #24]
 80073b0:	f000 f908 	bl	80075c4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80073b4:	4b1d      	ldr	r3, [pc, #116]	; (800742c <pvPortMalloc+0x1b0>)
 80073b6:	681a      	ldr	r2, [r3, #0]
 80073b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ba:	685b      	ldr	r3, [r3, #4]
 80073bc:	1ad3      	subs	r3, r2, r3
 80073be:	4a1b      	ldr	r2, [pc, #108]	; (800742c <pvPortMalloc+0x1b0>)
 80073c0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80073c2:	4b1a      	ldr	r3, [pc, #104]	; (800742c <pvPortMalloc+0x1b0>)
 80073c4:	681a      	ldr	r2, [r3, #0]
 80073c6:	4b1b      	ldr	r3, [pc, #108]	; (8007434 <pvPortMalloc+0x1b8>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	429a      	cmp	r2, r3
 80073cc:	d203      	bcs.n	80073d6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80073ce:	4b17      	ldr	r3, [pc, #92]	; (800742c <pvPortMalloc+0x1b0>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4a18      	ldr	r2, [pc, #96]	; (8007434 <pvPortMalloc+0x1b8>)
 80073d4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80073d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d8:	685a      	ldr	r2, [r3, #4]
 80073da:	4b13      	ldr	r3, [pc, #76]	; (8007428 <pvPortMalloc+0x1ac>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	431a      	orrs	r2, r3
 80073e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80073e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e6:	2200      	movs	r2, #0
 80073e8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80073ea:	4b13      	ldr	r3, [pc, #76]	; (8007438 <pvPortMalloc+0x1bc>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	3301      	adds	r3, #1
 80073f0:	4a11      	ldr	r2, [pc, #68]	; (8007438 <pvPortMalloc+0x1bc>)
 80073f2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80073f4:	f7fe fa2e 	bl	8005854 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80073f8:	69fb      	ldr	r3, [r7, #28]
 80073fa:	f003 0307 	and.w	r3, r3, #7
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d00a      	beq.n	8007418 <pvPortMalloc+0x19c>
        __asm volatile
 8007402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007406:	f383 8811 	msr	BASEPRI, r3
 800740a:	f3bf 8f6f 	isb	sy
 800740e:	f3bf 8f4f 	dsb	sy
 8007412:	60fb      	str	r3, [r7, #12]
    }
 8007414:	bf00      	nop
 8007416:	e7fe      	b.n	8007416 <pvPortMalloc+0x19a>
    return pvReturn;
 8007418:	69fb      	ldr	r3, [r7, #28]
}
 800741a:	4618      	mov	r0, r3
 800741c:	3728      	adds	r7, #40	; 0x28
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}
 8007422:	bf00      	nop
 8007424:	2001925c 	.word	0x2001925c
 8007428:	20019270 	.word	0x20019270
 800742c:	20019260 	.word	0x20019260
 8007430:	20019254 	.word	0x20019254
 8007434:	20019264 	.word	0x20019264
 8007438:	20019268 	.word	0x20019268

0800743c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b086      	sub	sp, #24
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d04d      	beq.n	80074ea <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800744e:	2308      	movs	r3, #8
 8007450:	425b      	negs	r3, r3
 8007452:	697a      	ldr	r2, [r7, #20]
 8007454:	4413      	add	r3, r2
 8007456:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	685a      	ldr	r2, [r3, #4]
 8007460:	4b24      	ldr	r3, [pc, #144]	; (80074f4 <vPortFree+0xb8>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4013      	ands	r3, r2
 8007466:	2b00      	cmp	r3, #0
 8007468:	d10a      	bne.n	8007480 <vPortFree+0x44>
        __asm volatile
 800746a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800746e:	f383 8811 	msr	BASEPRI, r3
 8007472:	f3bf 8f6f 	isb	sy
 8007476:	f3bf 8f4f 	dsb	sy
 800747a:	60fb      	str	r3, [r7, #12]
    }
 800747c:	bf00      	nop
 800747e:	e7fe      	b.n	800747e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007480:	693b      	ldr	r3, [r7, #16]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d00a      	beq.n	800749e <vPortFree+0x62>
        __asm volatile
 8007488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800748c:	f383 8811 	msr	BASEPRI, r3
 8007490:	f3bf 8f6f 	isb	sy
 8007494:	f3bf 8f4f 	dsb	sy
 8007498:	60bb      	str	r3, [r7, #8]
    }
 800749a:	bf00      	nop
 800749c:	e7fe      	b.n	800749c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	685a      	ldr	r2, [r3, #4]
 80074a2:	4b14      	ldr	r3, [pc, #80]	; (80074f4 <vPortFree+0xb8>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4013      	ands	r3, r2
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d01e      	beq.n	80074ea <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d11a      	bne.n	80074ea <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	685a      	ldr	r2, [r3, #4]
 80074b8:	4b0e      	ldr	r3, [pc, #56]	; (80074f4 <vPortFree+0xb8>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	43db      	mvns	r3, r3
 80074be:	401a      	ands	r2, r3
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80074c4:	f7fe f9b8 	bl	8005838 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	685a      	ldr	r2, [r3, #4]
 80074cc:	4b0a      	ldr	r3, [pc, #40]	; (80074f8 <vPortFree+0xbc>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4413      	add	r3, r2
 80074d2:	4a09      	ldr	r2, [pc, #36]	; (80074f8 <vPortFree+0xbc>)
 80074d4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80074d6:	6938      	ldr	r0, [r7, #16]
 80074d8:	f000 f874 	bl	80075c4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80074dc:	4b07      	ldr	r3, [pc, #28]	; (80074fc <vPortFree+0xc0>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	3301      	adds	r3, #1
 80074e2:	4a06      	ldr	r2, [pc, #24]	; (80074fc <vPortFree+0xc0>)
 80074e4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80074e6:	f7fe f9b5 	bl	8005854 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80074ea:	bf00      	nop
 80074ec:	3718      	adds	r7, #24
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}
 80074f2:	bf00      	nop
 80074f4:	20019270 	.word	0x20019270
 80074f8:	20019260 	.word	0x20019260
 80074fc:	2001926c 	.word	0x2001926c

08007500 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8007500:	b480      	push	{r7}
 8007502:	b085      	sub	sp, #20
 8007504:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007506:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 800750a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800750c:	4b27      	ldr	r3, [pc, #156]	; (80075ac <prvHeapInit+0xac>)
 800750e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f003 0307 	and.w	r3, r3, #7
 8007516:	2b00      	cmp	r3, #0
 8007518:	d00c      	beq.n	8007534 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	3307      	adds	r3, #7
 800751e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	f023 0307 	bic.w	r3, r3, #7
 8007526:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007528:	68ba      	ldr	r2, [r7, #8]
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	1ad3      	subs	r3, r2, r3
 800752e:	4a1f      	ldr	r2, [pc, #124]	; (80075ac <prvHeapInit+0xac>)
 8007530:	4413      	add	r3, r2
 8007532:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007538:	4a1d      	ldr	r2, [pc, #116]	; (80075b0 <prvHeapInit+0xb0>)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800753e:	4b1c      	ldr	r3, [pc, #112]	; (80075b0 <prvHeapInit+0xb0>)
 8007540:	2200      	movs	r2, #0
 8007542:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	68ba      	ldr	r2, [r7, #8]
 8007548:	4413      	add	r3, r2
 800754a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800754c:	2208      	movs	r2, #8
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	1a9b      	subs	r3, r3, r2
 8007552:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	f023 0307 	bic.w	r3, r3, #7
 800755a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	4a15      	ldr	r2, [pc, #84]	; (80075b4 <prvHeapInit+0xb4>)
 8007560:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8007562:	4b14      	ldr	r3, [pc, #80]	; (80075b4 <prvHeapInit+0xb4>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	2200      	movs	r2, #0
 8007568:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800756a:	4b12      	ldr	r3, [pc, #72]	; (80075b4 <prvHeapInit+0xb4>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	2200      	movs	r2, #0
 8007570:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	68fa      	ldr	r2, [r7, #12]
 800757a:	1ad2      	subs	r2, r2, r3
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007580:	4b0c      	ldr	r3, [pc, #48]	; (80075b4 <prvHeapInit+0xb4>)
 8007582:	681a      	ldr	r2, [r3, #0]
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	685b      	ldr	r3, [r3, #4]
 800758c:	4a0a      	ldr	r2, [pc, #40]	; (80075b8 <prvHeapInit+0xb8>)
 800758e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	4a09      	ldr	r2, [pc, #36]	; (80075bc <prvHeapInit+0xbc>)
 8007596:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007598:	4b09      	ldr	r3, [pc, #36]	; (80075c0 <prvHeapInit+0xc0>)
 800759a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800759e:	601a      	str	r2, [r3, #0]
}
 80075a0:	bf00      	nop
 80075a2:	3714      	adds	r7, #20
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr
 80075ac:	20000254 	.word	0x20000254
 80075b0:	20019254 	.word	0x20019254
 80075b4:	2001925c 	.word	0x2001925c
 80075b8:	20019264 	.word	0x20019264
 80075bc:	20019260 	.word	0x20019260
 80075c0:	20019270 	.word	0x20019270

080075c4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80075c4:	b480      	push	{r7}
 80075c6:	b085      	sub	sp, #20
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80075cc:	4b28      	ldr	r3, [pc, #160]	; (8007670 <prvInsertBlockIntoFreeList+0xac>)
 80075ce:	60fb      	str	r3, [r7, #12]
 80075d0:	e002      	b.n	80075d8 <prvInsertBlockIntoFreeList+0x14>
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	60fb      	str	r3, [r7, #12]
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	687a      	ldr	r2, [r7, #4]
 80075de:	429a      	cmp	r2, r3
 80075e0:	d8f7      	bhi.n	80075d2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	68ba      	ldr	r2, [r7, #8]
 80075ec:	4413      	add	r3, r2
 80075ee:	687a      	ldr	r2, [r7, #4]
 80075f0:	429a      	cmp	r2, r3
 80075f2:	d108      	bne.n	8007606 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	685a      	ldr	r2, [r3, #4]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	685b      	ldr	r3, [r3, #4]
 80075fc:	441a      	add	r2, r3
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	68ba      	ldr	r2, [r7, #8]
 8007610:	441a      	add	r2, r3
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	429a      	cmp	r2, r3
 8007618:	d118      	bne.n	800764c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681a      	ldr	r2, [r3, #0]
 800761e:	4b15      	ldr	r3, [pc, #84]	; (8007674 <prvInsertBlockIntoFreeList+0xb0>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	429a      	cmp	r2, r3
 8007624:	d00d      	beq.n	8007642 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	685a      	ldr	r2, [r3, #4]
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	441a      	add	r2, r3
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	681a      	ldr	r2, [r3, #0]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	601a      	str	r2, [r3, #0]
 8007640:	e008      	b.n	8007654 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007642:	4b0c      	ldr	r3, [pc, #48]	; (8007674 <prvInsertBlockIntoFreeList+0xb0>)
 8007644:	681a      	ldr	r2, [r3, #0]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	601a      	str	r2, [r3, #0]
 800764a:	e003      	b.n	8007654 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681a      	ldr	r2, [r3, #0]
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8007654:	68fa      	ldr	r2, [r7, #12]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	429a      	cmp	r2, r3
 800765a:	d002      	beq.n	8007662 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	687a      	ldr	r2, [r7, #4]
 8007660:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8007662:	bf00      	nop
 8007664:	3714      	adds	r7, #20
 8007666:	46bd      	mov	sp, r7
 8007668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766c:	4770      	bx	lr
 800766e:	bf00      	nop
 8007670:	20019254 	.word	0x20019254
 8007674:	2001925c 	.word	0x2001925c

08007678 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8007678:	b480      	push	{r7}
 800767a:	b083      	sub	sp, #12
 800767c:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800767e:	4b24      	ldr	r3, [pc, #144]	; (8007710 <_DoInit+0x98>)
 8007680:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2203      	movs	r2, #3
 8007686:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2203      	movs	r2, #3
 800768c:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	4a20      	ldr	r2, [pc, #128]	; (8007714 <_DoInit+0x9c>)
 8007692:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	4a20      	ldr	r2, [pc, #128]	; (8007718 <_DoInit+0xa0>)
 8007698:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80076a0:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2200      	movs	r2, #0
 80076a6:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2200      	movs	r2, #0
 80076ac:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2200      	movs	r2, #0
 80076b2:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	4a17      	ldr	r2, [pc, #92]	; (8007714 <_DoInit+0x9c>)
 80076b8:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	4a17      	ldr	r2, [pc, #92]	; (800771c <_DoInit+0xa4>)
 80076be:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2210      	movs	r2, #16
 80076c4:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2200      	movs	r2, #0
 80076ca:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2200      	movs	r2, #0
 80076d0:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2200      	movs	r2, #0
 80076d6:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	3307      	adds	r3, #7
 80076dc:	4a10      	ldr	r2, [pc, #64]	; (8007720 <_DoInit+0xa8>)
 80076de:	6810      	ldr	r0, [r2, #0]
 80076e0:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80076e2:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	4a0e      	ldr	r2, [pc, #56]	; (8007724 <_DoInit+0xac>)
 80076ea:	6810      	ldr	r0, [r2, #0]
 80076ec:	6018      	str	r0, [r3, #0]
 80076ee:	8891      	ldrh	r1, [r2, #4]
 80076f0:	7992      	ldrb	r2, [r2, #6]
 80076f2:	8099      	strh	r1, [r3, #4]
 80076f4:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80076f6:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2220      	movs	r2, #32
 80076fe:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8007700:	f3bf 8f5f 	dmb	sy
}
 8007704:	bf00      	nop
 8007706:	370c      	adds	r7, #12
 8007708:	46bd      	mov	sp, r7
 800770a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770e:	4770      	bx	lr
 8007710:	200197b0 	.word	0x200197b0
 8007714:	08009054 	.word	0x08009054
 8007718:	20019274 	.word	0x20019274
 800771c:	20019674 	.word	0x20019674
 8007720:	08009060 	.word	0x08009060
 8007724:	08009064 	.word	0x08009064

08007728 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8007728:	b580      	push	{r7, lr}
 800772a:	b08a      	sub	sp, #40	; 0x28
 800772c:	af00      	add	r7, sp, #0
 800772e:	60f8      	str	r0, [r7, #12]
 8007730:	60b9      	str	r1, [r7, #8]
 8007732:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8007734:	2300      	movs	r3, #0
 8007736:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	68db      	ldr	r3, [r3, #12]
 800773c:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	691b      	ldr	r3, [r3, #16]
 8007742:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8007744:	69ba      	ldr	r2, [r7, #24]
 8007746:	69fb      	ldr	r3, [r7, #28]
 8007748:	429a      	cmp	r2, r3
 800774a:	d905      	bls.n	8007758 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 800774c:	69ba      	ldr	r2, [r7, #24]
 800774e:	69fb      	ldr	r3, [r7, #28]
 8007750:	1ad3      	subs	r3, r2, r3
 8007752:	3b01      	subs	r3, #1
 8007754:	627b      	str	r3, [r7, #36]	; 0x24
 8007756:	e007      	b.n	8007768 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	689a      	ldr	r2, [r3, #8]
 800775c:	69b9      	ldr	r1, [r7, #24]
 800775e:	69fb      	ldr	r3, [r7, #28]
 8007760:	1acb      	subs	r3, r1, r3
 8007762:	4413      	add	r3, r2
 8007764:	3b01      	subs	r3, #1
 8007766:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	689a      	ldr	r2, [r3, #8]
 800776c:	69fb      	ldr	r3, [r7, #28]
 800776e:	1ad3      	subs	r3, r2, r3
 8007770:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007772:	4293      	cmp	r3, r2
 8007774:	bf28      	it	cs
 8007776:	4613      	movcs	r3, r2
 8007778:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800777a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	4293      	cmp	r3, r2
 8007780:	bf28      	it	cs
 8007782:	4613      	movcs	r3, r2
 8007784:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	685a      	ldr	r2, [r3, #4]
 800778a:	69fb      	ldr	r3, [r7, #28]
 800778c:	4413      	add	r3, r2
 800778e:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8007790:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007792:	68b9      	ldr	r1, [r7, #8]
 8007794:	6978      	ldr	r0, [r7, #20]
 8007796:	f000 f941 	bl	8007a1c <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800779a:	6a3a      	ldr	r2, [r7, #32]
 800779c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800779e:	4413      	add	r3, r2
 80077a0:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 80077a2:	68ba      	ldr	r2, [r7, #8]
 80077a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a6:	4413      	add	r3, r2
 80077a8:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 80077aa:	687a      	ldr	r2, [r7, #4]
 80077ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ae:	1ad3      	subs	r3, r2, r3
 80077b0:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 80077b2:	69fa      	ldr	r2, [r7, #28]
 80077b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b6:	4413      	add	r3, r2
 80077b8:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	689b      	ldr	r3, [r3, #8]
 80077be:	69fa      	ldr	r2, [r7, #28]
 80077c0:	429a      	cmp	r2, r3
 80077c2:	d101      	bne.n	80077c8 <_WriteBlocking+0xa0>
      WrOff = 0u;
 80077c4:	2300      	movs	r3, #0
 80077c6:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80077c8:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	69fa      	ldr	r2, [r7, #28]
 80077d0:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d1b2      	bne.n	800773e <_WriteBlocking+0x16>
  return NumBytesWritten;
 80077d8:	6a3b      	ldr	r3, [r7, #32]
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3728      	adds	r7, #40	; 0x28
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}

080077e2 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80077e2:	b580      	push	{r7, lr}
 80077e4:	b088      	sub	sp, #32
 80077e6:	af00      	add	r7, sp, #0
 80077e8:	60f8      	str	r0, [r7, #12]
 80077ea:	60b9      	str	r1, [r7, #8]
 80077ec:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	68db      	ldr	r3, [r3, #12]
 80077f2:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	689a      	ldr	r2, [r3, #8]
 80077f8:	69fb      	ldr	r3, [r7, #28]
 80077fa:	1ad3      	subs	r3, r2, r3
 80077fc:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 80077fe:	69ba      	ldr	r2, [r7, #24]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	429a      	cmp	r2, r3
 8007804:	d911      	bls.n	800782a <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	685a      	ldr	r2, [r3, #4]
 800780a:	69fb      	ldr	r3, [r7, #28]
 800780c:	4413      	add	r3, r2
 800780e:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8007810:	687a      	ldr	r2, [r7, #4]
 8007812:	68b9      	ldr	r1, [r7, #8]
 8007814:	6938      	ldr	r0, [r7, #16]
 8007816:	f000 f901 	bl	8007a1c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800781a:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 800781e:	69fa      	ldr	r2, [r7, #28]
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	441a      	add	r2, r3
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8007828:	e01f      	b.n	800786a <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 800782a:	69bb      	ldr	r3, [r7, #24]
 800782c:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	685a      	ldr	r2, [r3, #4]
 8007832:	69fb      	ldr	r3, [r7, #28]
 8007834:	4413      	add	r3, r2
 8007836:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8007838:	697a      	ldr	r2, [r7, #20]
 800783a:	68b9      	ldr	r1, [r7, #8]
 800783c:	6938      	ldr	r0, [r7, #16]
 800783e:	f000 f8ed 	bl	8007a1c <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8007842:	687a      	ldr	r2, [r7, #4]
 8007844:	69bb      	ldr	r3, [r7, #24]
 8007846:	1ad3      	subs	r3, r2, r3
 8007848:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	685b      	ldr	r3, [r3, #4]
 800784e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8007850:	68ba      	ldr	r2, [r7, #8]
 8007852:	69bb      	ldr	r3, [r7, #24]
 8007854:	4413      	add	r3, r2
 8007856:	697a      	ldr	r2, [r7, #20]
 8007858:	4619      	mov	r1, r3
 800785a:	6938      	ldr	r0, [r7, #16]
 800785c:	f000 f8de 	bl	8007a1c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8007860:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	697a      	ldr	r2, [r7, #20]
 8007868:	60da      	str	r2, [r3, #12]
}
 800786a:	bf00      	nop
 800786c:	3720      	adds	r7, #32
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}

08007872 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8007872:	b480      	push	{r7}
 8007874:	b087      	sub	sp, #28
 8007876:	af00      	add	r7, sp, #0
 8007878:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	691b      	ldr	r3, [r3, #16]
 800787e:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	68db      	ldr	r3, [r3, #12]
 8007884:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8007886:	693a      	ldr	r2, [r7, #16]
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	429a      	cmp	r2, r3
 800788c:	d808      	bhi.n	80078a0 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	689a      	ldr	r2, [r3, #8]
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	1ad2      	subs	r2, r2, r3
 8007896:	693b      	ldr	r3, [r7, #16]
 8007898:	4413      	add	r3, r2
 800789a:	3b01      	subs	r3, #1
 800789c:	617b      	str	r3, [r7, #20]
 800789e:	e004      	b.n	80078aa <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 80078a0:	693a      	ldr	r2, [r7, #16]
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	1ad3      	subs	r3, r2, r3
 80078a6:	3b01      	subs	r3, #1
 80078a8:	617b      	str	r3, [r7, #20]
  }
  return r;
 80078aa:	697b      	ldr	r3, [r7, #20]
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	371c      	adds	r7, #28
 80078b0:	46bd      	mov	sp, r7
 80078b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b6:	4770      	bx	lr

080078b8 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b088      	sub	sp, #32
 80078bc:	af00      	add	r7, sp, #0
 80078be:	60f8      	str	r0, [r7, #12]
 80078c0:	60b9      	str	r1, [r7, #8]
 80078c2:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	1c5a      	adds	r2, r3, #1
 80078cc:	4613      	mov	r3, r2
 80078ce:	005b      	lsls	r3, r3, #1
 80078d0:	4413      	add	r3, r2
 80078d2:	00db      	lsls	r3, r3, #3
 80078d4:	4a1f      	ldr	r2, [pc, #124]	; (8007954 <SEGGER_RTT_WriteNoLock+0x9c>)
 80078d6:	4413      	add	r3, r2
 80078d8:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	695b      	ldr	r3, [r3, #20]
 80078de:	2b02      	cmp	r3, #2
 80078e0:	d029      	beq.n	8007936 <SEGGER_RTT_WriteNoLock+0x7e>
 80078e2:	2b02      	cmp	r3, #2
 80078e4:	d82e      	bhi.n	8007944 <SEGGER_RTT_WriteNoLock+0x8c>
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d002      	beq.n	80078f0 <SEGGER_RTT_WriteNoLock+0x38>
 80078ea:	2b01      	cmp	r3, #1
 80078ec:	d013      	beq.n	8007916 <SEGGER_RTT_WriteNoLock+0x5e>
 80078ee:	e029      	b.n	8007944 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80078f0:	6978      	ldr	r0, [r7, #20]
 80078f2:	f7ff ffbe 	bl	8007872 <_GetAvailWriteSpace>
 80078f6:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80078f8:	693a      	ldr	r2, [r7, #16]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	429a      	cmp	r2, r3
 80078fe:	d202      	bcs.n	8007906 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8007900:	2300      	movs	r3, #0
 8007902:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8007904:	e021      	b.n	800794a <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800790a:	687a      	ldr	r2, [r7, #4]
 800790c:	69b9      	ldr	r1, [r7, #24]
 800790e:	6978      	ldr	r0, [r7, #20]
 8007910:	f7ff ff67 	bl	80077e2 <_WriteNoCheck>
    break;
 8007914:	e019      	b.n	800794a <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8007916:	6978      	ldr	r0, [r7, #20]
 8007918:	f7ff ffab 	bl	8007872 <_GetAvailWriteSpace>
 800791c:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800791e:	687a      	ldr	r2, [r7, #4]
 8007920:	693b      	ldr	r3, [r7, #16]
 8007922:	4293      	cmp	r3, r2
 8007924:	bf28      	it	cs
 8007926:	4613      	movcs	r3, r2
 8007928:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800792a:	69fa      	ldr	r2, [r7, #28]
 800792c:	69b9      	ldr	r1, [r7, #24]
 800792e:	6978      	ldr	r0, [r7, #20]
 8007930:	f7ff ff57 	bl	80077e2 <_WriteNoCheck>
    break;
 8007934:	e009      	b.n	800794a <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8007936:	687a      	ldr	r2, [r7, #4]
 8007938:	69b9      	ldr	r1, [r7, #24]
 800793a:	6978      	ldr	r0, [r7, #20]
 800793c:	f7ff fef4 	bl	8007728 <_WriteBlocking>
 8007940:	61f8      	str	r0, [r7, #28]
    break;
 8007942:	e002      	b.n	800794a <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8007944:	2300      	movs	r3, #0
 8007946:	61fb      	str	r3, [r7, #28]
    break;
 8007948:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800794a:	69fb      	ldr	r3, [r7, #28]
}
 800794c:	4618      	mov	r0, r3
 800794e:	3720      	adds	r7, #32
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}
 8007954:	200197b0 	.word	0x200197b0

08007958 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8007958:	b580      	push	{r7, lr}
 800795a:	b088      	sub	sp, #32
 800795c:	af00      	add	r7, sp, #0
 800795e:	60f8      	str	r0, [r7, #12]
 8007960:	60b9      	str	r1, [r7, #8]
 8007962:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8007964:	4b0e      	ldr	r3, [pc, #56]	; (80079a0 <SEGGER_RTT_Write+0x48>)
 8007966:	61fb      	str	r3, [r7, #28]
 8007968:	69fb      	ldr	r3, [r7, #28]
 800796a:	781b      	ldrb	r3, [r3, #0]
 800796c:	b2db      	uxtb	r3, r3
 800796e:	2b00      	cmp	r3, #0
 8007970:	d101      	bne.n	8007976 <SEGGER_RTT_Write+0x1e>
 8007972:	f7ff fe81 	bl	8007678 <_DoInit>
  SEGGER_RTT_LOCK();
 8007976:	f3ef 8311 	mrs	r3, BASEPRI
 800797a:	f04f 0120 	mov.w	r1, #32
 800797e:	f381 8811 	msr	BASEPRI, r1
 8007982:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8007984:	687a      	ldr	r2, [r7, #4]
 8007986:	68b9      	ldr	r1, [r7, #8]
 8007988:	68f8      	ldr	r0, [r7, #12]
 800798a:	f7ff ff95 	bl	80078b8 <SEGGER_RTT_WriteNoLock>
 800798e:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8007990:	69bb      	ldr	r3, [r7, #24]
 8007992:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8007996:	697b      	ldr	r3, [r7, #20]
}
 8007998:	4618      	mov	r0, r3
 800799a:	3720      	adds	r7, #32
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}
 80079a0:	200197b0 	.word	0x200197b0

080079a4 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b084      	sub	sp, #16
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	60f8      	str	r0, [r7, #12]
 80079ac:	60b9      	str	r1, [r7, #8]
 80079ae:	607a      	str	r2, [r7, #4]
 80079b0:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 80079b2:	683a      	ldr	r2, [r7, #0]
 80079b4:	6879      	ldr	r1, [r7, #4]
 80079b6:	2000      	movs	r0, #0
 80079b8:	f7ff ffce 	bl	8007958 <SEGGER_RTT_Write>
  return len;
 80079bc:	683b      	ldr	r3, [r7, #0]
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3710      	adds	r7, #16
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}
	...

080079c8 <__errno>:
 80079c8:	4b01      	ldr	r3, [pc, #4]	; (80079d0 <__errno+0x8>)
 80079ca:	6818      	ldr	r0, [r3, #0]
 80079cc:	4770      	bx	lr
 80079ce:	bf00      	nop
 80079d0:	20000028 	.word	0x20000028

080079d4 <__libc_init_array>:
 80079d4:	b570      	push	{r4, r5, r6, lr}
 80079d6:	4d0d      	ldr	r5, [pc, #52]	; (8007a0c <__libc_init_array+0x38>)
 80079d8:	4c0d      	ldr	r4, [pc, #52]	; (8007a10 <__libc_init_array+0x3c>)
 80079da:	1b64      	subs	r4, r4, r5
 80079dc:	10a4      	asrs	r4, r4, #2
 80079de:	2600      	movs	r6, #0
 80079e0:	42a6      	cmp	r6, r4
 80079e2:	d109      	bne.n	80079f8 <__libc_init_array+0x24>
 80079e4:	4d0b      	ldr	r5, [pc, #44]	; (8007a14 <__libc_init_array+0x40>)
 80079e6:	4c0c      	ldr	r4, [pc, #48]	; (8007a18 <__libc_init_array+0x44>)
 80079e8:	f001 f936 	bl	8008c58 <_init>
 80079ec:	1b64      	subs	r4, r4, r5
 80079ee:	10a4      	asrs	r4, r4, #2
 80079f0:	2600      	movs	r6, #0
 80079f2:	42a6      	cmp	r6, r4
 80079f4:	d105      	bne.n	8007a02 <__libc_init_array+0x2e>
 80079f6:	bd70      	pop	{r4, r5, r6, pc}
 80079f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80079fc:	4798      	blx	r3
 80079fe:	3601      	adds	r6, #1
 8007a00:	e7ee      	b.n	80079e0 <__libc_init_array+0xc>
 8007a02:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a06:	4798      	blx	r3
 8007a08:	3601      	adds	r6, #1
 8007a0a:	e7f2      	b.n	80079f2 <__libc_init_array+0x1e>
 8007a0c:	08009124 	.word	0x08009124
 8007a10:	08009124 	.word	0x08009124
 8007a14:	08009124 	.word	0x08009124
 8007a18:	08009128 	.word	0x08009128

08007a1c <memcpy>:
 8007a1c:	440a      	add	r2, r1
 8007a1e:	4291      	cmp	r1, r2
 8007a20:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a24:	d100      	bne.n	8007a28 <memcpy+0xc>
 8007a26:	4770      	bx	lr
 8007a28:	b510      	push	{r4, lr}
 8007a2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a32:	4291      	cmp	r1, r2
 8007a34:	d1f9      	bne.n	8007a2a <memcpy+0xe>
 8007a36:	bd10      	pop	{r4, pc}

08007a38 <memset>:
 8007a38:	4402      	add	r2, r0
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d100      	bne.n	8007a42 <memset+0xa>
 8007a40:	4770      	bx	lr
 8007a42:	f803 1b01 	strb.w	r1, [r3], #1
 8007a46:	e7f9      	b.n	8007a3c <memset+0x4>

08007a48 <iprintf>:
 8007a48:	b40f      	push	{r0, r1, r2, r3}
 8007a4a:	4b0a      	ldr	r3, [pc, #40]	; (8007a74 <iprintf+0x2c>)
 8007a4c:	b513      	push	{r0, r1, r4, lr}
 8007a4e:	681c      	ldr	r4, [r3, #0]
 8007a50:	b124      	cbz	r4, 8007a5c <iprintf+0x14>
 8007a52:	69a3      	ldr	r3, [r4, #24]
 8007a54:	b913      	cbnz	r3, 8007a5c <iprintf+0x14>
 8007a56:	4620      	mov	r0, r4
 8007a58:	f000 f886 	bl	8007b68 <__sinit>
 8007a5c:	ab05      	add	r3, sp, #20
 8007a5e:	9a04      	ldr	r2, [sp, #16]
 8007a60:	68a1      	ldr	r1, [r4, #8]
 8007a62:	9301      	str	r3, [sp, #4]
 8007a64:	4620      	mov	r0, r4
 8007a66:	f000 faff 	bl	8008068 <_vfiprintf_r>
 8007a6a:	b002      	add	sp, #8
 8007a6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a70:	b004      	add	sp, #16
 8007a72:	4770      	bx	lr
 8007a74:	20000028 	.word	0x20000028

08007a78 <siprintf>:
 8007a78:	b40e      	push	{r1, r2, r3}
 8007a7a:	b500      	push	{lr}
 8007a7c:	b09c      	sub	sp, #112	; 0x70
 8007a7e:	ab1d      	add	r3, sp, #116	; 0x74
 8007a80:	9002      	str	r0, [sp, #8]
 8007a82:	9006      	str	r0, [sp, #24]
 8007a84:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007a88:	4809      	ldr	r0, [pc, #36]	; (8007ab0 <siprintf+0x38>)
 8007a8a:	9107      	str	r1, [sp, #28]
 8007a8c:	9104      	str	r1, [sp, #16]
 8007a8e:	4909      	ldr	r1, [pc, #36]	; (8007ab4 <siprintf+0x3c>)
 8007a90:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a94:	9105      	str	r1, [sp, #20]
 8007a96:	6800      	ldr	r0, [r0, #0]
 8007a98:	9301      	str	r3, [sp, #4]
 8007a9a:	a902      	add	r1, sp, #8
 8007a9c:	f000 f9ba 	bl	8007e14 <_svfiprintf_r>
 8007aa0:	9b02      	ldr	r3, [sp, #8]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	701a      	strb	r2, [r3, #0]
 8007aa6:	b01c      	add	sp, #112	; 0x70
 8007aa8:	f85d eb04 	ldr.w	lr, [sp], #4
 8007aac:	b003      	add	sp, #12
 8007aae:	4770      	bx	lr
 8007ab0:	20000028 	.word	0x20000028
 8007ab4:	ffff0208 	.word	0xffff0208

08007ab8 <std>:
 8007ab8:	2300      	movs	r3, #0
 8007aba:	b510      	push	{r4, lr}
 8007abc:	4604      	mov	r4, r0
 8007abe:	e9c0 3300 	strd	r3, r3, [r0]
 8007ac2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007ac6:	6083      	str	r3, [r0, #8]
 8007ac8:	8181      	strh	r1, [r0, #12]
 8007aca:	6643      	str	r3, [r0, #100]	; 0x64
 8007acc:	81c2      	strh	r2, [r0, #14]
 8007ace:	6183      	str	r3, [r0, #24]
 8007ad0:	4619      	mov	r1, r3
 8007ad2:	2208      	movs	r2, #8
 8007ad4:	305c      	adds	r0, #92	; 0x5c
 8007ad6:	f7ff ffaf 	bl	8007a38 <memset>
 8007ada:	4b05      	ldr	r3, [pc, #20]	; (8007af0 <std+0x38>)
 8007adc:	6263      	str	r3, [r4, #36]	; 0x24
 8007ade:	4b05      	ldr	r3, [pc, #20]	; (8007af4 <std+0x3c>)
 8007ae0:	62a3      	str	r3, [r4, #40]	; 0x28
 8007ae2:	4b05      	ldr	r3, [pc, #20]	; (8007af8 <std+0x40>)
 8007ae4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007ae6:	4b05      	ldr	r3, [pc, #20]	; (8007afc <std+0x44>)
 8007ae8:	6224      	str	r4, [r4, #32]
 8007aea:	6323      	str	r3, [r4, #48]	; 0x30
 8007aec:	bd10      	pop	{r4, pc}
 8007aee:	bf00      	nop
 8007af0:	08008611 	.word	0x08008611
 8007af4:	08008633 	.word	0x08008633
 8007af8:	0800866b 	.word	0x0800866b
 8007afc:	0800868f 	.word	0x0800868f

08007b00 <_cleanup_r>:
 8007b00:	4901      	ldr	r1, [pc, #4]	; (8007b08 <_cleanup_r+0x8>)
 8007b02:	f000 b8af 	b.w	8007c64 <_fwalk_reent>
 8007b06:	bf00      	nop
 8007b08:	08008945 	.word	0x08008945

08007b0c <__sfmoreglue>:
 8007b0c:	b570      	push	{r4, r5, r6, lr}
 8007b0e:	1e4a      	subs	r2, r1, #1
 8007b10:	2568      	movs	r5, #104	; 0x68
 8007b12:	4355      	muls	r5, r2
 8007b14:	460e      	mov	r6, r1
 8007b16:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007b1a:	f000 f8c5 	bl	8007ca8 <_malloc_r>
 8007b1e:	4604      	mov	r4, r0
 8007b20:	b140      	cbz	r0, 8007b34 <__sfmoreglue+0x28>
 8007b22:	2100      	movs	r1, #0
 8007b24:	e9c0 1600 	strd	r1, r6, [r0]
 8007b28:	300c      	adds	r0, #12
 8007b2a:	60a0      	str	r0, [r4, #8]
 8007b2c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007b30:	f7ff ff82 	bl	8007a38 <memset>
 8007b34:	4620      	mov	r0, r4
 8007b36:	bd70      	pop	{r4, r5, r6, pc}

08007b38 <__sfp_lock_acquire>:
 8007b38:	4801      	ldr	r0, [pc, #4]	; (8007b40 <__sfp_lock_acquire+0x8>)
 8007b3a:	f000 b8b3 	b.w	8007ca4 <__retarget_lock_acquire_recursive>
 8007b3e:	bf00      	nop
 8007b40:	20019860 	.word	0x20019860

08007b44 <__sfp_lock_release>:
 8007b44:	4801      	ldr	r0, [pc, #4]	; (8007b4c <__sfp_lock_release+0x8>)
 8007b46:	f000 b8ae 	b.w	8007ca6 <__retarget_lock_release_recursive>
 8007b4a:	bf00      	nop
 8007b4c:	20019860 	.word	0x20019860

08007b50 <__sinit_lock_acquire>:
 8007b50:	4801      	ldr	r0, [pc, #4]	; (8007b58 <__sinit_lock_acquire+0x8>)
 8007b52:	f000 b8a7 	b.w	8007ca4 <__retarget_lock_acquire_recursive>
 8007b56:	bf00      	nop
 8007b58:	2001985b 	.word	0x2001985b

08007b5c <__sinit_lock_release>:
 8007b5c:	4801      	ldr	r0, [pc, #4]	; (8007b64 <__sinit_lock_release+0x8>)
 8007b5e:	f000 b8a2 	b.w	8007ca6 <__retarget_lock_release_recursive>
 8007b62:	bf00      	nop
 8007b64:	2001985b 	.word	0x2001985b

08007b68 <__sinit>:
 8007b68:	b510      	push	{r4, lr}
 8007b6a:	4604      	mov	r4, r0
 8007b6c:	f7ff fff0 	bl	8007b50 <__sinit_lock_acquire>
 8007b70:	69a3      	ldr	r3, [r4, #24]
 8007b72:	b11b      	cbz	r3, 8007b7c <__sinit+0x14>
 8007b74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b78:	f7ff bff0 	b.w	8007b5c <__sinit_lock_release>
 8007b7c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007b80:	6523      	str	r3, [r4, #80]	; 0x50
 8007b82:	4b13      	ldr	r3, [pc, #76]	; (8007bd0 <__sinit+0x68>)
 8007b84:	4a13      	ldr	r2, [pc, #76]	; (8007bd4 <__sinit+0x6c>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	62a2      	str	r2, [r4, #40]	; 0x28
 8007b8a:	42a3      	cmp	r3, r4
 8007b8c:	bf04      	itt	eq
 8007b8e:	2301      	moveq	r3, #1
 8007b90:	61a3      	streq	r3, [r4, #24]
 8007b92:	4620      	mov	r0, r4
 8007b94:	f000 f820 	bl	8007bd8 <__sfp>
 8007b98:	6060      	str	r0, [r4, #4]
 8007b9a:	4620      	mov	r0, r4
 8007b9c:	f000 f81c 	bl	8007bd8 <__sfp>
 8007ba0:	60a0      	str	r0, [r4, #8]
 8007ba2:	4620      	mov	r0, r4
 8007ba4:	f000 f818 	bl	8007bd8 <__sfp>
 8007ba8:	2200      	movs	r2, #0
 8007baa:	60e0      	str	r0, [r4, #12]
 8007bac:	2104      	movs	r1, #4
 8007bae:	6860      	ldr	r0, [r4, #4]
 8007bb0:	f7ff ff82 	bl	8007ab8 <std>
 8007bb4:	68a0      	ldr	r0, [r4, #8]
 8007bb6:	2201      	movs	r2, #1
 8007bb8:	2109      	movs	r1, #9
 8007bba:	f7ff ff7d 	bl	8007ab8 <std>
 8007bbe:	68e0      	ldr	r0, [r4, #12]
 8007bc0:	2202      	movs	r2, #2
 8007bc2:	2112      	movs	r1, #18
 8007bc4:	f7ff ff78 	bl	8007ab8 <std>
 8007bc8:	2301      	movs	r3, #1
 8007bca:	61a3      	str	r3, [r4, #24]
 8007bcc:	e7d2      	b.n	8007b74 <__sinit+0xc>
 8007bce:	bf00      	nop
 8007bd0:	08009084 	.word	0x08009084
 8007bd4:	08007b01 	.word	0x08007b01

08007bd8 <__sfp>:
 8007bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bda:	4607      	mov	r7, r0
 8007bdc:	f7ff ffac 	bl	8007b38 <__sfp_lock_acquire>
 8007be0:	4b1e      	ldr	r3, [pc, #120]	; (8007c5c <__sfp+0x84>)
 8007be2:	681e      	ldr	r6, [r3, #0]
 8007be4:	69b3      	ldr	r3, [r6, #24]
 8007be6:	b913      	cbnz	r3, 8007bee <__sfp+0x16>
 8007be8:	4630      	mov	r0, r6
 8007bea:	f7ff ffbd 	bl	8007b68 <__sinit>
 8007bee:	3648      	adds	r6, #72	; 0x48
 8007bf0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007bf4:	3b01      	subs	r3, #1
 8007bf6:	d503      	bpl.n	8007c00 <__sfp+0x28>
 8007bf8:	6833      	ldr	r3, [r6, #0]
 8007bfa:	b30b      	cbz	r3, 8007c40 <__sfp+0x68>
 8007bfc:	6836      	ldr	r6, [r6, #0]
 8007bfe:	e7f7      	b.n	8007bf0 <__sfp+0x18>
 8007c00:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007c04:	b9d5      	cbnz	r5, 8007c3c <__sfp+0x64>
 8007c06:	4b16      	ldr	r3, [pc, #88]	; (8007c60 <__sfp+0x88>)
 8007c08:	60e3      	str	r3, [r4, #12]
 8007c0a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007c0e:	6665      	str	r5, [r4, #100]	; 0x64
 8007c10:	f000 f847 	bl	8007ca2 <__retarget_lock_init_recursive>
 8007c14:	f7ff ff96 	bl	8007b44 <__sfp_lock_release>
 8007c18:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007c1c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007c20:	6025      	str	r5, [r4, #0]
 8007c22:	61a5      	str	r5, [r4, #24]
 8007c24:	2208      	movs	r2, #8
 8007c26:	4629      	mov	r1, r5
 8007c28:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007c2c:	f7ff ff04 	bl	8007a38 <memset>
 8007c30:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007c34:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007c38:	4620      	mov	r0, r4
 8007c3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c3c:	3468      	adds	r4, #104	; 0x68
 8007c3e:	e7d9      	b.n	8007bf4 <__sfp+0x1c>
 8007c40:	2104      	movs	r1, #4
 8007c42:	4638      	mov	r0, r7
 8007c44:	f7ff ff62 	bl	8007b0c <__sfmoreglue>
 8007c48:	4604      	mov	r4, r0
 8007c4a:	6030      	str	r0, [r6, #0]
 8007c4c:	2800      	cmp	r0, #0
 8007c4e:	d1d5      	bne.n	8007bfc <__sfp+0x24>
 8007c50:	f7ff ff78 	bl	8007b44 <__sfp_lock_release>
 8007c54:	230c      	movs	r3, #12
 8007c56:	603b      	str	r3, [r7, #0]
 8007c58:	e7ee      	b.n	8007c38 <__sfp+0x60>
 8007c5a:	bf00      	nop
 8007c5c:	08009084 	.word	0x08009084
 8007c60:	ffff0001 	.word	0xffff0001

08007c64 <_fwalk_reent>:
 8007c64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c68:	4606      	mov	r6, r0
 8007c6a:	4688      	mov	r8, r1
 8007c6c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007c70:	2700      	movs	r7, #0
 8007c72:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007c76:	f1b9 0901 	subs.w	r9, r9, #1
 8007c7a:	d505      	bpl.n	8007c88 <_fwalk_reent+0x24>
 8007c7c:	6824      	ldr	r4, [r4, #0]
 8007c7e:	2c00      	cmp	r4, #0
 8007c80:	d1f7      	bne.n	8007c72 <_fwalk_reent+0xe>
 8007c82:	4638      	mov	r0, r7
 8007c84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c88:	89ab      	ldrh	r3, [r5, #12]
 8007c8a:	2b01      	cmp	r3, #1
 8007c8c:	d907      	bls.n	8007c9e <_fwalk_reent+0x3a>
 8007c8e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007c92:	3301      	adds	r3, #1
 8007c94:	d003      	beq.n	8007c9e <_fwalk_reent+0x3a>
 8007c96:	4629      	mov	r1, r5
 8007c98:	4630      	mov	r0, r6
 8007c9a:	47c0      	blx	r8
 8007c9c:	4307      	orrs	r7, r0
 8007c9e:	3568      	adds	r5, #104	; 0x68
 8007ca0:	e7e9      	b.n	8007c76 <_fwalk_reent+0x12>

08007ca2 <__retarget_lock_init_recursive>:
 8007ca2:	4770      	bx	lr

08007ca4 <__retarget_lock_acquire_recursive>:
 8007ca4:	4770      	bx	lr

08007ca6 <__retarget_lock_release_recursive>:
 8007ca6:	4770      	bx	lr

08007ca8 <_malloc_r>:
 8007ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007caa:	1ccd      	adds	r5, r1, #3
 8007cac:	f025 0503 	bic.w	r5, r5, #3
 8007cb0:	3508      	adds	r5, #8
 8007cb2:	2d0c      	cmp	r5, #12
 8007cb4:	bf38      	it	cc
 8007cb6:	250c      	movcc	r5, #12
 8007cb8:	2d00      	cmp	r5, #0
 8007cba:	4606      	mov	r6, r0
 8007cbc:	db01      	blt.n	8007cc2 <_malloc_r+0x1a>
 8007cbe:	42a9      	cmp	r1, r5
 8007cc0:	d903      	bls.n	8007cca <_malloc_r+0x22>
 8007cc2:	230c      	movs	r3, #12
 8007cc4:	6033      	str	r3, [r6, #0]
 8007cc6:	2000      	movs	r0, #0
 8007cc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007cca:	f000 ff07 	bl	8008adc <__malloc_lock>
 8007cce:	4921      	ldr	r1, [pc, #132]	; (8007d54 <_malloc_r+0xac>)
 8007cd0:	680a      	ldr	r2, [r1, #0]
 8007cd2:	4614      	mov	r4, r2
 8007cd4:	b99c      	cbnz	r4, 8007cfe <_malloc_r+0x56>
 8007cd6:	4f20      	ldr	r7, [pc, #128]	; (8007d58 <_malloc_r+0xb0>)
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	b923      	cbnz	r3, 8007ce6 <_malloc_r+0x3e>
 8007cdc:	4621      	mov	r1, r4
 8007cde:	4630      	mov	r0, r6
 8007ce0:	f000 fc86 	bl	80085f0 <_sbrk_r>
 8007ce4:	6038      	str	r0, [r7, #0]
 8007ce6:	4629      	mov	r1, r5
 8007ce8:	4630      	mov	r0, r6
 8007cea:	f000 fc81 	bl	80085f0 <_sbrk_r>
 8007cee:	1c43      	adds	r3, r0, #1
 8007cf0:	d123      	bne.n	8007d3a <_malloc_r+0x92>
 8007cf2:	230c      	movs	r3, #12
 8007cf4:	6033      	str	r3, [r6, #0]
 8007cf6:	4630      	mov	r0, r6
 8007cf8:	f000 fef6 	bl	8008ae8 <__malloc_unlock>
 8007cfc:	e7e3      	b.n	8007cc6 <_malloc_r+0x1e>
 8007cfe:	6823      	ldr	r3, [r4, #0]
 8007d00:	1b5b      	subs	r3, r3, r5
 8007d02:	d417      	bmi.n	8007d34 <_malloc_r+0x8c>
 8007d04:	2b0b      	cmp	r3, #11
 8007d06:	d903      	bls.n	8007d10 <_malloc_r+0x68>
 8007d08:	6023      	str	r3, [r4, #0]
 8007d0a:	441c      	add	r4, r3
 8007d0c:	6025      	str	r5, [r4, #0]
 8007d0e:	e004      	b.n	8007d1a <_malloc_r+0x72>
 8007d10:	6863      	ldr	r3, [r4, #4]
 8007d12:	42a2      	cmp	r2, r4
 8007d14:	bf0c      	ite	eq
 8007d16:	600b      	streq	r3, [r1, #0]
 8007d18:	6053      	strne	r3, [r2, #4]
 8007d1a:	4630      	mov	r0, r6
 8007d1c:	f000 fee4 	bl	8008ae8 <__malloc_unlock>
 8007d20:	f104 000b 	add.w	r0, r4, #11
 8007d24:	1d23      	adds	r3, r4, #4
 8007d26:	f020 0007 	bic.w	r0, r0, #7
 8007d2a:	1ac2      	subs	r2, r0, r3
 8007d2c:	d0cc      	beq.n	8007cc8 <_malloc_r+0x20>
 8007d2e:	1a1b      	subs	r3, r3, r0
 8007d30:	50a3      	str	r3, [r4, r2]
 8007d32:	e7c9      	b.n	8007cc8 <_malloc_r+0x20>
 8007d34:	4622      	mov	r2, r4
 8007d36:	6864      	ldr	r4, [r4, #4]
 8007d38:	e7cc      	b.n	8007cd4 <_malloc_r+0x2c>
 8007d3a:	1cc4      	adds	r4, r0, #3
 8007d3c:	f024 0403 	bic.w	r4, r4, #3
 8007d40:	42a0      	cmp	r0, r4
 8007d42:	d0e3      	beq.n	8007d0c <_malloc_r+0x64>
 8007d44:	1a21      	subs	r1, r4, r0
 8007d46:	4630      	mov	r0, r6
 8007d48:	f000 fc52 	bl	80085f0 <_sbrk_r>
 8007d4c:	3001      	adds	r0, #1
 8007d4e:	d1dd      	bne.n	8007d0c <_malloc_r+0x64>
 8007d50:	e7cf      	b.n	8007cf2 <_malloc_r+0x4a>
 8007d52:	bf00      	nop
 8007d54:	20019684 	.word	0x20019684
 8007d58:	20019688 	.word	0x20019688

08007d5c <__ssputs_r>:
 8007d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d60:	688e      	ldr	r6, [r1, #8]
 8007d62:	429e      	cmp	r6, r3
 8007d64:	4682      	mov	sl, r0
 8007d66:	460c      	mov	r4, r1
 8007d68:	4690      	mov	r8, r2
 8007d6a:	461f      	mov	r7, r3
 8007d6c:	d838      	bhi.n	8007de0 <__ssputs_r+0x84>
 8007d6e:	898a      	ldrh	r2, [r1, #12]
 8007d70:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007d74:	d032      	beq.n	8007ddc <__ssputs_r+0x80>
 8007d76:	6825      	ldr	r5, [r4, #0]
 8007d78:	6909      	ldr	r1, [r1, #16]
 8007d7a:	eba5 0901 	sub.w	r9, r5, r1
 8007d7e:	6965      	ldr	r5, [r4, #20]
 8007d80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007d84:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007d88:	3301      	adds	r3, #1
 8007d8a:	444b      	add	r3, r9
 8007d8c:	106d      	asrs	r5, r5, #1
 8007d8e:	429d      	cmp	r5, r3
 8007d90:	bf38      	it	cc
 8007d92:	461d      	movcc	r5, r3
 8007d94:	0553      	lsls	r3, r2, #21
 8007d96:	d531      	bpl.n	8007dfc <__ssputs_r+0xa0>
 8007d98:	4629      	mov	r1, r5
 8007d9a:	f7ff ff85 	bl	8007ca8 <_malloc_r>
 8007d9e:	4606      	mov	r6, r0
 8007da0:	b950      	cbnz	r0, 8007db8 <__ssputs_r+0x5c>
 8007da2:	230c      	movs	r3, #12
 8007da4:	f8ca 3000 	str.w	r3, [sl]
 8007da8:	89a3      	ldrh	r3, [r4, #12]
 8007daa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007dae:	81a3      	strh	r3, [r4, #12]
 8007db0:	f04f 30ff 	mov.w	r0, #4294967295
 8007db4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007db8:	6921      	ldr	r1, [r4, #16]
 8007dba:	464a      	mov	r2, r9
 8007dbc:	f7ff fe2e 	bl	8007a1c <memcpy>
 8007dc0:	89a3      	ldrh	r3, [r4, #12]
 8007dc2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007dc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dca:	81a3      	strh	r3, [r4, #12]
 8007dcc:	6126      	str	r6, [r4, #16]
 8007dce:	6165      	str	r5, [r4, #20]
 8007dd0:	444e      	add	r6, r9
 8007dd2:	eba5 0509 	sub.w	r5, r5, r9
 8007dd6:	6026      	str	r6, [r4, #0]
 8007dd8:	60a5      	str	r5, [r4, #8]
 8007dda:	463e      	mov	r6, r7
 8007ddc:	42be      	cmp	r6, r7
 8007dde:	d900      	bls.n	8007de2 <__ssputs_r+0x86>
 8007de0:	463e      	mov	r6, r7
 8007de2:	4632      	mov	r2, r6
 8007de4:	6820      	ldr	r0, [r4, #0]
 8007de6:	4641      	mov	r1, r8
 8007de8:	f000 fe5e 	bl	8008aa8 <memmove>
 8007dec:	68a3      	ldr	r3, [r4, #8]
 8007dee:	6822      	ldr	r2, [r4, #0]
 8007df0:	1b9b      	subs	r3, r3, r6
 8007df2:	4432      	add	r2, r6
 8007df4:	60a3      	str	r3, [r4, #8]
 8007df6:	6022      	str	r2, [r4, #0]
 8007df8:	2000      	movs	r0, #0
 8007dfa:	e7db      	b.n	8007db4 <__ssputs_r+0x58>
 8007dfc:	462a      	mov	r2, r5
 8007dfe:	f000 fec9 	bl	8008b94 <_realloc_r>
 8007e02:	4606      	mov	r6, r0
 8007e04:	2800      	cmp	r0, #0
 8007e06:	d1e1      	bne.n	8007dcc <__ssputs_r+0x70>
 8007e08:	6921      	ldr	r1, [r4, #16]
 8007e0a:	4650      	mov	r0, sl
 8007e0c:	f000 fe72 	bl	8008af4 <_free_r>
 8007e10:	e7c7      	b.n	8007da2 <__ssputs_r+0x46>
	...

08007e14 <_svfiprintf_r>:
 8007e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e18:	4698      	mov	r8, r3
 8007e1a:	898b      	ldrh	r3, [r1, #12]
 8007e1c:	061b      	lsls	r3, r3, #24
 8007e1e:	b09d      	sub	sp, #116	; 0x74
 8007e20:	4607      	mov	r7, r0
 8007e22:	460d      	mov	r5, r1
 8007e24:	4614      	mov	r4, r2
 8007e26:	d50e      	bpl.n	8007e46 <_svfiprintf_r+0x32>
 8007e28:	690b      	ldr	r3, [r1, #16]
 8007e2a:	b963      	cbnz	r3, 8007e46 <_svfiprintf_r+0x32>
 8007e2c:	2140      	movs	r1, #64	; 0x40
 8007e2e:	f7ff ff3b 	bl	8007ca8 <_malloc_r>
 8007e32:	6028      	str	r0, [r5, #0]
 8007e34:	6128      	str	r0, [r5, #16]
 8007e36:	b920      	cbnz	r0, 8007e42 <_svfiprintf_r+0x2e>
 8007e38:	230c      	movs	r3, #12
 8007e3a:	603b      	str	r3, [r7, #0]
 8007e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e40:	e0d1      	b.n	8007fe6 <_svfiprintf_r+0x1d2>
 8007e42:	2340      	movs	r3, #64	; 0x40
 8007e44:	616b      	str	r3, [r5, #20]
 8007e46:	2300      	movs	r3, #0
 8007e48:	9309      	str	r3, [sp, #36]	; 0x24
 8007e4a:	2320      	movs	r3, #32
 8007e4c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007e50:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e54:	2330      	movs	r3, #48	; 0x30
 8007e56:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008000 <_svfiprintf_r+0x1ec>
 8007e5a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007e5e:	f04f 0901 	mov.w	r9, #1
 8007e62:	4623      	mov	r3, r4
 8007e64:	469a      	mov	sl, r3
 8007e66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e6a:	b10a      	cbz	r2, 8007e70 <_svfiprintf_r+0x5c>
 8007e6c:	2a25      	cmp	r2, #37	; 0x25
 8007e6e:	d1f9      	bne.n	8007e64 <_svfiprintf_r+0x50>
 8007e70:	ebba 0b04 	subs.w	fp, sl, r4
 8007e74:	d00b      	beq.n	8007e8e <_svfiprintf_r+0x7a>
 8007e76:	465b      	mov	r3, fp
 8007e78:	4622      	mov	r2, r4
 8007e7a:	4629      	mov	r1, r5
 8007e7c:	4638      	mov	r0, r7
 8007e7e:	f7ff ff6d 	bl	8007d5c <__ssputs_r>
 8007e82:	3001      	adds	r0, #1
 8007e84:	f000 80aa 	beq.w	8007fdc <_svfiprintf_r+0x1c8>
 8007e88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e8a:	445a      	add	r2, fp
 8007e8c:	9209      	str	r2, [sp, #36]	; 0x24
 8007e8e:	f89a 3000 	ldrb.w	r3, [sl]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	f000 80a2 	beq.w	8007fdc <_svfiprintf_r+0x1c8>
 8007e98:	2300      	movs	r3, #0
 8007e9a:	f04f 32ff 	mov.w	r2, #4294967295
 8007e9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ea2:	f10a 0a01 	add.w	sl, sl, #1
 8007ea6:	9304      	str	r3, [sp, #16]
 8007ea8:	9307      	str	r3, [sp, #28]
 8007eaa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007eae:	931a      	str	r3, [sp, #104]	; 0x68
 8007eb0:	4654      	mov	r4, sl
 8007eb2:	2205      	movs	r2, #5
 8007eb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007eb8:	4851      	ldr	r0, [pc, #324]	; (8008000 <_svfiprintf_r+0x1ec>)
 8007eba:	f7f8 f9a1 	bl	8000200 <memchr>
 8007ebe:	9a04      	ldr	r2, [sp, #16]
 8007ec0:	b9d8      	cbnz	r0, 8007efa <_svfiprintf_r+0xe6>
 8007ec2:	06d0      	lsls	r0, r2, #27
 8007ec4:	bf44      	itt	mi
 8007ec6:	2320      	movmi	r3, #32
 8007ec8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ecc:	0711      	lsls	r1, r2, #28
 8007ece:	bf44      	itt	mi
 8007ed0:	232b      	movmi	r3, #43	; 0x2b
 8007ed2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ed6:	f89a 3000 	ldrb.w	r3, [sl]
 8007eda:	2b2a      	cmp	r3, #42	; 0x2a
 8007edc:	d015      	beq.n	8007f0a <_svfiprintf_r+0xf6>
 8007ede:	9a07      	ldr	r2, [sp, #28]
 8007ee0:	4654      	mov	r4, sl
 8007ee2:	2000      	movs	r0, #0
 8007ee4:	f04f 0c0a 	mov.w	ip, #10
 8007ee8:	4621      	mov	r1, r4
 8007eea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007eee:	3b30      	subs	r3, #48	; 0x30
 8007ef0:	2b09      	cmp	r3, #9
 8007ef2:	d94e      	bls.n	8007f92 <_svfiprintf_r+0x17e>
 8007ef4:	b1b0      	cbz	r0, 8007f24 <_svfiprintf_r+0x110>
 8007ef6:	9207      	str	r2, [sp, #28]
 8007ef8:	e014      	b.n	8007f24 <_svfiprintf_r+0x110>
 8007efa:	eba0 0308 	sub.w	r3, r0, r8
 8007efe:	fa09 f303 	lsl.w	r3, r9, r3
 8007f02:	4313      	orrs	r3, r2
 8007f04:	9304      	str	r3, [sp, #16]
 8007f06:	46a2      	mov	sl, r4
 8007f08:	e7d2      	b.n	8007eb0 <_svfiprintf_r+0x9c>
 8007f0a:	9b03      	ldr	r3, [sp, #12]
 8007f0c:	1d19      	adds	r1, r3, #4
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	9103      	str	r1, [sp, #12]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	bfbb      	ittet	lt
 8007f16:	425b      	neglt	r3, r3
 8007f18:	f042 0202 	orrlt.w	r2, r2, #2
 8007f1c:	9307      	strge	r3, [sp, #28]
 8007f1e:	9307      	strlt	r3, [sp, #28]
 8007f20:	bfb8      	it	lt
 8007f22:	9204      	strlt	r2, [sp, #16]
 8007f24:	7823      	ldrb	r3, [r4, #0]
 8007f26:	2b2e      	cmp	r3, #46	; 0x2e
 8007f28:	d10c      	bne.n	8007f44 <_svfiprintf_r+0x130>
 8007f2a:	7863      	ldrb	r3, [r4, #1]
 8007f2c:	2b2a      	cmp	r3, #42	; 0x2a
 8007f2e:	d135      	bne.n	8007f9c <_svfiprintf_r+0x188>
 8007f30:	9b03      	ldr	r3, [sp, #12]
 8007f32:	1d1a      	adds	r2, r3, #4
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	9203      	str	r2, [sp, #12]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	bfb8      	it	lt
 8007f3c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007f40:	3402      	adds	r4, #2
 8007f42:	9305      	str	r3, [sp, #20]
 8007f44:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008010 <_svfiprintf_r+0x1fc>
 8007f48:	7821      	ldrb	r1, [r4, #0]
 8007f4a:	2203      	movs	r2, #3
 8007f4c:	4650      	mov	r0, sl
 8007f4e:	f7f8 f957 	bl	8000200 <memchr>
 8007f52:	b140      	cbz	r0, 8007f66 <_svfiprintf_r+0x152>
 8007f54:	2340      	movs	r3, #64	; 0x40
 8007f56:	eba0 000a 	sub.w	r0, r0, sl
 8007f5a:	fa03 f000 	lsl.w	r0, r3, r0
 8007f5e:	9b04      	ldr	r3, [sp, #16]
 8007f60:	4303      	orrs	r3, r0
 8007f62:	3401      	adds	r4, #1
 8007f64:	9304      	str	r3, [sp, #16]
 8007f66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f6a:	4826      	ldr	r0, [pc, #152]	; (8008004 <_svfiprintf_r+0x1f0>)
 8007f6c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007f70:	2206      	movs	r2, #6
 8007f72:	f7f8 f945 	bl	8000200 <memchr>
 8007f76:	2800      	cmp	r0, #0
 8007f78:	d038      	beq.n	8007fec <_svfiprintf_r+0x1d8>
 8007f7a:	4b23      	ldr	r3, [pc, #140]	; (8008008 <_svfiprintf_r+0x1f4>)
 8007f7c:	bb1b      	cbnz	r3, 8007fc6 <_svfiprintf_r+0x1b2>
 8007f7e:	9b03      	ldr	r3, [sp, #12]
 8007f80:	3307      	adds	r3, #7
 8007f82:	f023 0307 	bic.w	r3, r3, #7
 8007f86:	3308      	adds	r3, #8
 8007f88:	9303      	str	r3, [sp, #12]
 8007f8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f8c:	4433      	add	r3, r6
 8007f8e:	9309      	str	r3, [sp, #36]	; 0x24
 8007f90:	e767      	b.n	8007e62 <_svfiprintf_r+0x4e>
 8007f92:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f96:	460c      	mov	r4, r1
 8007f98:	2001      	movs	r0, #1
 8007f9a:	e7a5      	b.n	8007ee8 <_svfiprintf_r+0xd4>
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	3401      	adds	r4, #1
 8007fa0:	9305      	str	r3, [sp, #20]
 8007fa2:	4619      	mov	r1, r3
 8007fa4:	f04f 0c0a 	mov.w	ip, #10
 8007fa8:	4620      	mov	r0, r4
 8007faa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007fae:	3a30      	subs	r2, #48	; 0x30
 8007fb0:	2a09      	cmp	r2, #9
 8007fb2:	d903      	bls.n	8007fbc <_svfiprintf_r+0x1a8>
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d0c5      	beq.n	8007f44 <_svfiprintf_r+0x130>
 8007fb8:	9105      	str	r1, [sp, #20]
 8007fba:	e7c3      	b.n	8007f44 <_svfiprintf_r+0x130>
 8007fbc:	fb0c 2101 	mla	r1, ip, r1, r2
 8007fc0:	4604      	mov	r4, r0
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	e7f0      	b.n	8007fa8 <_svfiprintf_r+0x194>
 8007fc6:	ab03      	add	r3, sp, #12
 8007fc8:	9300      	str	r3, [sp, #0]
 8007fca:	462a      	mov	r2, r5
 8007fcc:	4b0f      	ldr	r3, [pc, #60]	; (800800c <_svfiprintf_r+0x1f8>)
 8007fce:	a904      	add	r1, sp, #16
 8007fd0:	4638      	mov	r0, r7
 8007fd2:	f3af 8000 	nop.w
 8007fd6:	1c42      	adds	r2, r0, #1
 8007fd8:	4606      	mov	r6, r0
 8007fda:	d1d6      	bne.n	8007f8a <_svfiprintf_r+0x176>
 8007fdc:	89ab      	ldrh	r3, [r5, #12]
 8007fde:	065b      	lsls	r3, r3, #25
 8007fe0:	f53f af2c 	bmi.w	8007e3c <_svfiprintf_r+0x28>
 8007fe4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007fe6:	b01d      	add	sp, #116	; 0x74
 8007fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fec:	ab03      	add	r3, sp, #12
 8007fee:	9300      	str	r3, [sp, #0]
 8007ff0:	462a      	mov	r2, r5
 8007ff2:	4b06      	ldr	r3, [pc, #24]	; (800800c <_svfiprintf_r+0x1f8>)
 8007ff4:	a904      	add	r1, sp, #16
 8007ff6:	4638      	mov	r0, r7
 8007ff8:	f000 f9d4 	bl	80083a4 <_printf_i>
 8007ffc:	e7eb      	b.n	8007fd6 <_svfiprintf_r+0x1c2>
 8007ffe:	bf00      	nop
 8008000:	080090e8 	.word	0x080090e8
 8008004:	080090f2 	.word	0x080090f2
 8008008:	00000000 	.word	0x00000000
 800800c:	08007d5d 	.word	0x08007d5d
 8008010:	080090ee 	.word	0x080090ee

08008014 <__sfputc_r>:
 8008014:	6893      	ldr	r3, [r2, #8]
 8008016:	3b01      	subs	r3, #1
 8008018:	2b00      	cmp	r3, #0
 800801a:	b410      	push	{r4}
 800801c:	6093      	str	r3, [r2, #8]
 800801e:	da08      	bge.n	8008032 <__sfputc_r+0x1e>
 8008020:	6994      	ldr	r4, [r2, #24]
 8008022:	42a3      	cmp	r3, r4
 8008024:	db01      	blt.n	800802a <__sfputc_r+0x16>
 8008026:	290a      	cmp	r1, #10
 8008028:	d103      	bne.n	8008032 <__sfputc_r+0x1e>
 800802a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800802e:	f000 bb33 	b.w	8008698 <__swbuf_r>
 8008032:	6813      	ldr	r3, [r2, #0]
 8008034:	1c58      	adds	r0, r3, #1
 8008036:	6010      	str	r0, [r2, #0]
 8008038:	7019      	strb	r1, [r3, #0]
 800803a:	4608      	mov	r0, r1
 800803c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008040:	4770      	bx	lr

08008042 <__sfputs_r>:
 8008042:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008044:	4606      	mov	r6, r0
 8008046:	460f      	mov	r7, r1
 8008048:	4614      	mov	r4, r2
 800804a:	18d5      	adds	r5, r2, r3
 800804c:	42ac      	cmp	r4, r5
 800804e:	d101      	bne.n	8008054 <__sfputs_r+0x12>
 8008050:	2000      	movs	r0, #0
 8008052:	e007      	b.n	8008064 <__sfputs_r+0x22>
 8008054:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008058:	463a      	mov	r2, r7
 800805a:	4630      	mov	r0, r6
 800805c:	f7ff ffda 	bl	8008014 <__sfputc_r>
 8008060:	1c43      	adds	r3, r0, #1
 8008062:	d1f3      	bne.n	800804c <__sfputs_r+0xa>
 8008064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008068 <_vfiprintf_r>:
 8008068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800806c:	460d      	mov	r5, r1
 800806e:	b09d      	sub	sp, #116	; 0x74
 8008070:	4614      	mov	r4, r2
 8008072:	4698      	mov	r8, r3
 8008074:	4606      	mov	r6, r0
 8008076:	b118      	cbz	r0, 8008080 <_vfiprintf_r+0x18>
 8008078:	6983      	ldr	r3, [r0, #24]
 800807a:	b90b      	cbnz	r3, 8008080 <_vfiprintf_r+0x18>
 800807c:	f7ff fd74 	bl	8007b68 <__sinit>
 8008080:	4b89      	ldr	r3, [pc, #548]	; (80082a8 <_vfiprintf_r+0x240>)
 8008082:	429d      	cmp	r5, r3
 8008084:	d11b      	bne.n	80080be <_vfiprintf_r+0x56>
 8008086:	6875      	ldr	r5, [r6, #4]
 8008088:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800808a:	07d9      	lsls	r1, r3, #31
 800808c:	d405      	bmi.n	800809a <_vfiprintf_r+0x32>
 800808e:	89ab      	ldrh	r3, [r5, #12]
 8008090:	059a      	lsls	r2, r3, #22
 8008092:	d402      	bmi.n	800809a <_vfiprintf_r+0x32>
 8008094:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008096:	f7ff fe05 	bl	8007ca4 <__retarget_lock_acquire_recursive>
 800809a:	89ab      	ldrh	r3, [r5, #12]
 800809c:	071b      	lsls	r3, r3, #28
 800809e:	d501      	bpl.n	80080a4 <_vfiprintf_r+0x3c>
 80080a0:	692b      	ldr	r3, [r5, #16]
 80080a2:	b9eb      	cbnz	r3, 80080e0 <_vfiprintf_r+0x78>
 80080a4:	4629      	mov	r1, r5
 80080a6:	4630      	mov	r0, r6
 80080a8:	f000 fb48 	bl	800873c <__swsetup_r>
 80080ac:	b1c0      	cbz	r0, 80080e0 <_vfiprintf_r+0x78>
 80080ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80080b0:	07dc      	lsls	r4, r3, #31
 80080b2:	d50e      	bpl.n	80080d2 <_vfiprintf_r+0x6a>
 80080b4:	f04f 30ff 	mov.w	r0, #4294967295
 80080b8:	b01d      	add	sp, #116	; 0x74
 80080ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080be:	4b7b      	ldr	r3, [pc, #492]	; (80082ac <_vfiprintf_r+0x244>)
 80080c0:	429d      	cmp	r5, r3
 80080c2:	d101      	bne.n	80080c8 <_vfiprintf_r+0x60>
 80080c4:	68b5      	ldr	r5, [r6, #8]
 80080c6:	e7df      	b.n	8008088 <_vfiprintf_r+0x20>
 80080c8:	4b79      	ldr	r3, [pc, #484]	; (80082b0 <_vfiprintf_r+0x248>)
 80080ca:	429d      	cmp	r5, r3
 80080cc:	bf08      	it	eq
 80080ce:	68f5      	ldreq	r5, [r6, #12]
 80080d0:	e7da      	b.n	8008088 <_vfiprintf_r+0x20>
 80080d2:	89ab      	ldrh	r3, [r5, #12]
 80080d4:	0598      	lsls	r0, r3, #22
 80080d6:	d4ed      	bmi.n	80080b4 <_vfiprintf_r+0x4c>
 80080d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80080da:	f7ff fde4 	bl	8007ca6 <__retarget_lock_release_recursive>
 80080de:	e7e9      	b.n	80080b4 <_vfiprintf_r+0x4c>
 80080e0:	2300      	movs	r3, #0
 80080e2:	9309      	str	r3, [sp, #36]	; 0x24
 80080e4:	2320      	movs	r3, #32
 80080e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80080ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80080ee:	2330      	movs	r3, #48	; 0x30
 80080f0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80082b4 <_vfiprintf_r+0x24c>
 80080f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80080f8:	f04f 0901 	mov.w	r9, #1
 80080fc:	4623      	mov	r3, r4
 80080fe:	469a      	mov	sl, r3
 8008100:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008104:	b10a      	cbz	r2, 800810a <_vfiprintf_r+0xa2>
 8008106:	2a25      	cmp	r2, #37	; 0x25
 8008108:	d1f9      	bne.n	80080fe <_vfiprintf_r+0x96>
 800810a:	ebba 0b04 	subs.w	fp, sl, r4
 800810e:	d00b      	beq.n	8008128 <_vfiprintf_r+0xc0>
 8008110:	465b      	mov	r3, fp
 8008112:	4622      	mov	r2, r4
 8008114:	4629      	mov	r1, r5
 8008116:	4630      	mov	r0, r6
 8008118:	f7ff ff93 	bl	8008042 <__sfputs_r>
 800811c:	3001      	adds	r0, #1
 800811e:	f000 80aa 	beq.w	8008276 <_vfiprintf_r+0x20e>
 8008122:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008124:	445a      	add	r2, fp
 8008126:	9209      	str	r2, [sp, #36]	; 0x24
 8008128:	f89a 3000 	ldrb.w	r3, [sl]
 800812c:	2b00      	cmp	r3, #0
 800812e:	f000 80a2 	beq.w	8008276 <_vfiprintf_r+0x20e>
 8008132:	2300      	movs	r3, #0
 8008134:	f04f 32ff 	mov.w	r2, #4294967295
 8008138:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800813c:	f10a 0a01 	add.w	sl, sl, #1
 8008140:	9304      	str	r3, [sp, #16]
 8008142:	9307      	str	r3, [sp, #28]
 8008144:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008148:	931a      	str	r3, [sp, #104]	; 0x68
 800814a:	4654      	mov	r4, sl
 800814c:	2205      	movs	r2, #5
 800814e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008152:	4858      	ldr	r0, [pc, #352]	; (80082b4 <_vfiprintf_r+0x24c>)
 8008154:	f7f8 f854 	bl	8000200 <memchr>
 8008158:	9a04      	ldr	r2, [sp, #16]
 800815a:	b9d8      	cbnz	r0, 8008194 <_vfiprintf_r+0x12c>
 800815c:	06d1      	lsls	r1, r2, #27
 800815e:	bf44      	itt	mi
 8008160:	2320      	movmi	r3, #32
 8008162:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008166:	0713      	lsls	r3, r2, #28
 8008168:	bf44      	itt	mi
 800816a:	232b      	movmi	r3, #43	; 0x2b
 800816c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008170:	f89a 3000 	ldrb.w	r3, [sl]
 8008174:	2b2a      	cmp	r3, #42	; 0x2a
 8008176:	d015      	beq.n	80081a4 <_vfiprintf_r+0x13c>
 8008178:	9a07      	ldr	r2, [sp, #28]
 800817a:	4654      	mov	r4, sl
 800817c:	2000      	movs	r0, #0
 800817e:	f04f 0c0a 	mov.w	ip, #10
 8008182:	4621      	mov	r1, r4
 8008184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008188:	3b30      	subs	r3, #48	; 0x30
 800818a:	2b09      	cmp	r3, #9
 800818c:	d94e      	bls.n	800822c <_vfiprintf_r+0x1c4>
 800818e:	b1b0      	cbz	r0, 80081be <_vfiprintf_r+0x156>
 8008190:	9207      	str	r2, [sp, #28]
 8008192:	e014      	b.n	80081be <_vfiprintf_r+0x156>
 8008194:	eba0 0308 	sub.w	r3, r0, r8
 8008198:	fa09 f303 	lsl.w	r3, r9, r3
 800819c:	4313      	orrs	r3, r2
 800819e:	9304      	str	r3, [sp, #16]
 80081a0:	46a2      	mov	sl, r4
 80081a2:	e7d2      	b.n	800814a <_vfiprintf_r+0xe2>
 80081a4:	9b03      	ldr	r3, [sp, #12]
 80081a6:	1d19      	adds	r1, r3, #4
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	9103      	str	r1, [sp, #12]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	bfbb      	ittet	lt
 80081b0:	425b      	neglt	r3, r3
 80081b2:	f042 0202 	orrlt.w	r2, r2, #2
 80081b6:	9307      	strge	r3, [sp, #28]
 80081b8:	9307      	strlt	r3, [sp, #28]
 80081ba:	bfb8      	it	lt
 80081bc:	9204      	strlt	r2, [sp, #16]
 80081be:	7823      	ldrb	r3, [r4, #0]
 80081c0:	2b2e      	cmp	r3, #46	; 0x2e
 80081c2:	d10c      	bne.n	80081de <_vfiprintf_r+0x176>
 80081c4:	7863      	ldrb	r3, [r4, #1]
 80081c6:	2b2a      	cmp	r3, #42	; 0x2a
 80081c8:	d135      	bne.n	8008236 <_vfiprintf_r+0x1ce>
 80081ca:	9b03      	ldr	r3, [sp, #12]
 80081cc:	1d1a      	adds	r2, r3, #4
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	9203      	str	r2, [sp, #12]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	bfb8      	it	lt
 80081d6:	f04f 33ff 	movlt.w	r3, #4294967295
 80081da:	3402      	adds	r4, #2
 80081dc:	9305      	str	r3, [sp, #20]
 80081de:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80082c4 <_vfiprintf_r+0x25c>
 80081e2:	7821      	ldrb	r1, [r4, #0]
 80081e4:	2203      	movs	r2, #3
 80081e6:	4650      	mov	r0, sl
 80081e8:	f7f8 f80a 	bl	8000200 <memchr>
 80081ec:	b140      	cbz	r0, 8008200 <_vfiprintf_r+0x198>
 80081ee:	2340      	movs	r3, #64	; 0x40
 80081f0:	eba0 000a 	sub.w	r0, r0, sl
 80081f4:	fa03 f000 	lsl.w	r0, r3, r0
 80081f8:	9b04      	ldr	r3, [sp, #16]
 80081fa:	4303      	orrs	r3, r0
 80081fc:	3401      	adds	r4, #1
 80081fe:	9304      	str	r3, [sp, #16]
 8008200:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008204:	482c      	ldr	r0, [pc, #176]	; (80082b8 <_vfiprintf_r+0x250>)
 8008206:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800820a:	2206      	movs	r2, #6
 800820c:	f7f7 fff8 	bl	8000200 <memchr>
 8008210:	2800      	cmp	r0, #0
 8008212:	d03f      	beq.n	8008294 <_vfiprintf_r+0x22c>
 8008214:	4b29      	ldr	r3, [pc, #164]	; (80082bc <_vfiprintf_r+0x254>)
 8008216:	bb1b      	cbnz	r3, 8008260 <_vfiprintf_r+0x1f8>
 8008218:	9b03      	ldr	r3, [sp, #12]
 800821a:	3307      	adds	r3, #7
 800821c:	f023 0307 	bic.w	r3, r3, #7
 8008220:	3308      	adds	r3, #8
 8008222:	9303      	str	r3, [sp, #12]
 8008224:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008226:	443b      	add	r3, r7
 8008228:	9309      	str	r3, [sp, #36]	; 0x24
 800822a:	e767      	b.n	80080fc <_vfiprintf_r+0x94>
 800822c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008230:	460c      	mov	r4, r1
 8008232:	2001      	movs	r0, #1
 8008234:	e7a5      	b.n	8008182 <_vfiprintf_r+0x11a>
 8008236:	2300      	movs	r3, #0
 8008238:	3401      	adds	r4, #1
 800823a:	9305      	str	r3, [sp, #20]
 800823c:	4619      	mov	r1, r3
 800823e:	f04f 0c0a 	mov.w	ip, #10
 8008242:	4620      	mov	r0, r4
 8008244:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008248:	3a30      	subs	r2, #48	; 0x30
 800824a:	2a09      	cmp	r2, #9
 800824c:	d903      	bls.n	8008256 <_vfiprintf_r+0x1ee>
 800824e:	2b00      	cmp	r3, #0
 8008250:	d0c5      	beq.n	80081de <_vfiprintf_r+0x176>
 8008252:	9105      	str	r1, [sp, #20]
 8008254:	e7c3      	b.n	80081de <_vfiprintf_r+0x176>
 8008256:	fb0c 2101 	mla	r1, ip, r1, r2
 800825a:	4604      	mov	r4, r0
 800825c:	2301      	movs	r3, #1
 800825e:	e7f0      	b.n	8008242 <_vfiprintf_r+0x1da>
 8008260:	ab03      	add	r3, sp, #12
 8008262:	9300      	str	r3, [sp, #0]
 8008264:	462a      	mov	r2, r5
 8008266:	4b16      	ldr	r3, [pc, #88]	; (80082c0 <_vfiprintf_r+0x258>)
 8008268:	a904      	add	r1, sp, #16
 800826a:	4630      	mov	r0, r6
 800826c:	f3af 8000 	nop.w
 8008270:	4607      	mov	r7, r0
 8008272:	1c78      	adds	r0, r7, #1
 8008274:	d1d6      	bne.n	8008224 <_vfiprintf_r+0x1bc>
 8008276:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008278:	07d9      	lsls	r1, r3, #31
 800827a:	d405      	bmi.n	8008288 <_vfiprintf_r+0x220>
 800827c:	89ab      	ldrh	r3, [r5, #12]
 800827e:	059a      	lsls	r2, r3, #22
 8008280:	d402      	bmi.n	8008288 <_vfiprintf_r+0x220>
 8008282:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008284:	f7ff fd0f 	bl	8007ca6 <__retarget_lock_release_recursive>
 8008288:	89ab      	ldrh	r3, [r5, #12]
 800828a:	065b      	lsls	r3, r3, #25
 800828c:	f53f af12 	bmi.w	80080b4 <_vfiprintf_r+0x4c>
 8008290:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008292:	e711      	b.n	80080b8 <_vfiprintf_r+0x50>
 8008294:	ab03      	add	r3, sp, #12
 8008296:	9300      	str	r3, [sp, #0]
 8008298:	462a      	mov	r2, r5
 800829a:	4b09      	ldr	r3, [pc, #36]	; (80082c0 <_vfiprintf_r+0x258>)
 800829c:	a904      	add	r1, sp, #16
 800829e:	4630      	mov	r0, r6
 80082a0:	f000 f880 	bl	80083a4 <_printf_i>
 80082a4:	e7e4      	b.n	8008270 <_vfiprintf_r+0x208>
 80082a6:	bf00      	nop
 80082a8:	080090a8 	.word	0x080090a8
 80082ac:	080090c8 	.word	0x080090c8
 80082b0:	08009088 	.word	0x08009088
 80082b4:	080090e8 	.word	0x080090e8
 80082b8:	080090f2 	.word	0x080090f2
 80082bc:	00000000 	.word	0x00000000
 80082c0:	08008043 	.word	0x08008043
 80082c4:	080090ee 	.word	0x080090ee

080082c8 <_printf_common>:
 80082c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082cc:	4616      	mov	r6, r2
 80082ce:	4699      	mov	r9, r3
 80082d0:	688a      	ldr	r2, [r1, #8]
 80082d2:	690b      	ldr	r3, [r1, #16]
 80082d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80082d8:	4293      	cmp	r3, r2
 80082da:	bfb8      	it	lt
 80082dc:	4613      	movlt	r3, r2
 80082de:	6033      	str	r3, [r6, #0]
 80082e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80082e4:	4607      	mov	r7, r0
 80082e6:	460c      	mov	r4, r1
 80082e8:	b10a      	cbz	r2, 80082ee <_printf_common+0x26>
 80082ea:	3301      	adds	r3, #1
 80082ec:	6033      	str	r3, [r6, #0]
 80082ee:	6823      	ldr	r3, [r4, #0]
 80082f0:	0699      	lsls	r1, r3, #26
 80082f2:	bf42      	ittt	mi
 80082f4:	6833      	ldrmi	r3, [r6, #0]
 80082f6:	3302      	addmi	r3, #2
 80082f8:	6033      	strmi	r3, [r6, #0]
 80082fa:	6825      	ldr	r5, [r4, #0]
 80082fc:	f015 0506 	ands.w	r5, r5, #6
 8008300:	d106      	bne.n	8008310 <_printf_common+0x48>
 8008302:	f104 0a19 	add.w	sl, r4, #25
 8008306:	68e3      	ldr	r3, [r4, #12]
 8008308:	6832      	ldr	r2, [r6, #0]
 800830a:	1a9b      	subs	r3, r3, r2
 800830c:	42ab      	cmp	r3, r5
 800830e:	dc26      	bgt.n	800835e <_printf_common+0x96>
 8008310:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008314:	1e13      	subs	r3, r2, #0
 8008316:	6822      	ldr	r2, [r4, #0]
 8008318:	bf18      	it	ne
 800831a:	2301      	movne	r3, #1
 800831c:	0692      	lsls	r2, r2, #26
 800831e:	d42b      	bmi.n	8008378 <_printf_common+0xb0>
 8008320:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008324:	4649      	mov	r1, r9
 8008326:	4638      	mov	r0, r7
 8008328:	47c0      	blx	r8
 800832a:	3001      	adds	r0, #1
 800832c:	d01e      	beq.n	800836c <_printf_common+0xa4>
 800832e:	6823      	ldr	r3, [r4, #0]
 8008330:	68e5      	ldr	r5, [r4, #12]
 8008332:	6832      	ldr	r2, [r6, #0]
 8008334:	f003 0306 	and.w	r3, r3, #6
 8008338:	2b04      	cmp	r3, #4
 800833a:	bf08      	it	eq
 800833c:	1aad      	subeq	r5, r5, r2
 800833e:	68a3      	ldr	r3, [r4, #8]
 8008340:	6922      	ldr	r2, [r4, #16]
 8008342:	bf0c      	ite	eq
 8008344:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008348:	2500      	movne	r5, #0
 800834a:	4293      	cmp	r3, r2
 800834c:	bfc4      	itt	gt
 800834e:	1a9b      	subgt	r3, r3, r2
 8008350:	18ed      	addgt	r5, r5, r3
 8008352:	2600      	movs	r6, #0
 8008354:	341a      	adds	r4, #26
 8008356:	42b5      	cmp	r5, r6
 8008358:	d11a      	bne.n	8008390 <_printf_common+0xc8>
 800835a:	2000      	movs	r0, #0
 800835c:	e008      	b.n	8008370 <_printf_common+0xa8>
 800835e:	2301      	movs	r3, #1
 8008360:	4652      	mov	r2, sl
 8008362:	4649      	mov	r1, r9
 8008364:	4638      	mov	r0, r7
 8008366:	47c0      	blx	r8
 8008368:	3001      	adds	r0, #1
 800836a:	d103      	bne.n	8008374 <_printf_common+0xac>
 800836c:	f04f 30ff 	mov.w	r0, #4294967295
 8008370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008374:	3501      	adds	r5, #1
 8008376:	e7c6      	b.n	8008306 <_printf_common+0x3e>
 8008378:	18e1      	adds	r1, r4, r3
 800837a:	1c5a      	adds	r2, r3, #1
 800837c:	2030      	movs	r0, #48	; 0x30
 800837e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008382:	4422      	add	r2, r4
 8008384:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008388:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800838c:	3302      	adds	r3, #2
 800838e:	e7c7      	b.n	8008320 <_printf_common+0x58>
 8008390:	2301      	movs	r3, #1
 8008392:	4622      	mov	r2, r4
 8008394:	4649      	mov	r1, r9
 8008396:	4638      	mov	r0, r7
 8008398:	47c0      	blx	r8
 800839a:	3001      	adds	r0, #1
 800839c:	d0e6      	beq.n	800836c <_printf_common+0xa4>
 800839e:	3601      	adds	r6, #1
 80083a0:	e7d9      	b.n	8008356 <_printf_common+0x8e>
	...

080083a4 <_printf_i>:
 80083a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80083a8:	460c      	mov	r4, r1
 80083aa:	4691      	mov	r9, r2
 80083ac:	7e27      	ldrb	r7, [r4, #24]
 80083ae:	990c      	ldr	r1, [sp, #48]	; 0x30
 80083b0:	2f78      	cmp	r7, #120	; 0x78
 80083b2:	4680      	mov	r8, r0
 80083b4:	469a      	mov	sl, r3
 80083b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80083ba:	d807      	bhi.n	80083cc <_printf_i+0x28>
 80083bc:	2f62      	cmp	r7, #98	; 0x62
 80083be:	d80a      	bhi.n	80083d6 <_printf_i+0x32>
 80083c0:	2f00      	cmp	r7, #0
 80083c2:	f000 80d8 	beq.w	8008576 <_printf_i+0x1d2>
 80083c6:	2f58      	cmp	r7, #88	; 0x58
 80083c8:	f000 80a3 	beq.w	8008512 <_printf_i+0x16e>
 80083cc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80083d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80083d4:	e03a      	b.n	800844c <_printf_i+0xa8>
 80083d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80083da:	2b15      	cmp	r3, #21
 80083dc:	d8f6      	bhi.n	80083cc <_printf_i+0x28>
 80083de:	a001      	add	r0, pc, #4	; (adr r0, 80083e4 <_printf_i+0x40>)
 80083e0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80083e4:	0800843d 	.word	0x0800843d
 80083e8:	08008451 	.word	0x08008451
 80083ec:	080083cd 	.word	0x080083cd
 80083f0:	080083cd 	.word	0x080083cd
 80083f4:	080083cd 	.word	0x080083cd
 80083f8:	080083cd 	.word	0x080083cd
 80083fc:	08008451 	.word	0x08008451
 8008400:	080083cd 	.word	0x080083cd
 8008404:	080083cd 	.word	0x080083cd
 8008408:	080083cd 	.word	0x080083cd
 800840c:	080083cd 	.word	0x080083cd
 8008410:	0800855d 	.word	0x0800855d
 8008414:	08008481 	.word	0x08008481
 8008418:	0800853f 	.word	0x0800853f
 800841c:	080083cd 	.word	0x080083cd
 8008420:	080083cd 	.word	0x080083cd
 8008424:	0800857f 	.word	0x0800857f
 8008428:	080083cd 	.word	0x080083cd
 800842c:	08008481 	.word	0x08008481
 8008430:	080083cd 	.word	0x080083cd
 8008434:	080083cd 	.word	0x080083cd
 8008438:	08008547 	.word	0x08008547
 800843c:	680b      	ldr	r3, [r1, #0]
 800843e:	1d1a      	adds	r2, r3, #4
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	600a      	str	r2, [r1, #0]
 8008444:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008448:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800844c:	2301      	movs	r3, #1
 800844e:	e0a3      	b.n	8008598 <_printf_i+0x1f4>
 8008450:	6825      	ldr	r5, [r4, #0]
 8008452:	6808      	ldr	r0, [r1, #0]
 8008454:	062e      	lsls	r6, r5, #24
 8008456:	f100 0304 	add.w	r3, r0, #4
 800845a:	d50a      	bpl.n	8008472 <_printf_i+0xce>
 800845c:	6805      	ldr	r5, [r0, #0]
 800845e:	600b      	str	r3, [r1, #0]
 8008460:	2d00      	cmp	r5, #0
 8008462:	da03      	bge.n	800846c <_printf_i+0xc8>
 8008464:	232d      	movs	r3, #45	; 0x2d
 8008466:	426d      	negs	r5, r5
 8008468:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800846c:	485e      	ldr	r0, [pc, #376]	; (80085e8 <_printf_i+0x244>)
 800846e:	230a      	movs	r3, #10
 8008470:	e019      	b.n	80084a6 <_printf_i+0x102>
 8008472:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008476:	6805      	ldr	r5, [r0, #0]
 8008478:	600b      	str	r3, [r1, #0]
 800847a:	bf18      	it	ne
 800847c:	b22d      	sxthne	r5, r5
 800847e:	e7ef      	b.n	8008460 <_printf_i+0xbc>
 8008480:	680b      	ldr	r3, [r1, #0]
 8008482:	6825      	ldr	r5, [r4, #0]
 8008484:	1d18      	adds	r0, r3, #4
 8008486:	6008      	str	r0, [r1, #0]
 8008488:	0628      	lsls	r0, r5, #24
 800848a:	d501      	bpl.n	8008490 <_printf_i+0xec>
 800848c:	681d      	ldr	r5, [r3, #0]
 800848e:	e002      	b.n	8008496 <_printf_i+0xf2>
 8008490:	0669      	lsls	r1, r5, #25
 8008492:	d5fb      	bpl.n	800848c <_printf_i+0xe8>
 8008494:	881d      	ldrh	r5, [r3, #0]
 8008496:	4854      	ldr	r0, [pc, #336]	; (80085e8 <_printf_i+0x244>)
 8008498:	2f6f      	cmp	r7, #111	; 0x6f
 800849a:	bf0c      	ite	eq
 800849c:	2308      	moveq	r3, #8
 800849e:	230a      	movne	r3, #10
 80084a0:	2100      	movs	r1, #0
 80084a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80084a6:	6866      	ldr	r6, [r4, #4]
 80084a8:	60a6      	str	r6, [r4, #8]
 80084aa:	2e00      	cmp	r6, #0
 80084ac:	bfa2      	ittt	ge
 80084ae:	6821      	ldrge	r1, [r4, #0]
 80084b0:	f021 0104 	bicge.w	r1, r1, #4
 80084b4:	6021      	strge	r1, [r4, #0]
 80084b6:	b90d      	cbnz	r5, 80084bc <_printf_i+0x118>
 80084b8:	2e00      	cmp	r6, #0
 80084ba:	d04d      	beq.n	8008558 <_printf_i+0x1b4>
 80084bc:	4616      	mov	r6, r2
 80084be:	fbb5 f1f3 	udiv	r1, r5, r3
 80084c2:	fb03 5711 	mls	r7, r3, r1, r5
 80084c6:	5dc7      	ldrb	r7, [r0, r7]
 80084c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80084cc:	462f      	mov	r7, r5
 80084ce:	42bb      	cmp	r3, r7
 80084d0:	460d      	mov	r5, r1
 80084d2:	d9f4      	bls.n	80084be <_printf_i+0x11a>
 80084d4:	2b08      	cmp	r3, #8
 80084d6:	d10b      	bne.n	80084f0 <_printf_i+0x14c>
 80084d8:	6823      	ldr	r3, [r4, #0]
 80084da:	07df      	lsls	r7, r3, #31
 80084dc:	d508      	bpl.n	80084f0 <_printf_i+0x14c>
 80084de:	6923      	ldr	r3, [r4, #16]
 80084e0:	6861      	ldr	r1, [r4, #4]
 80084e2:	4299      	cmp	r1, r3
 80084e4:	bfde      	ittt	le
 80084e6:	2330      	movle	r3, #48	; 0x30
 80084e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80084ec:	f106 36ff 	addle.w	r6, r6, #4294967295
 80084f0:	1b92      	subs	r2, r2, r6
 80084f2:	6122      	str	r2, [r4, #16]
 80084f4:	f8cd a000 	str.w	sl, [sp]
 80084f8:	464b      	mov	r3, r9
 80084fa:	aa03      	add	r2, sp, #12
 80084fc:	4621      	mov	r1, r4
 80084fe:	4640      	mov	r0, r8
 8008500:	f7ff fee2 	bl	80082c8 <_printf_common>
 8008504:	3001      	adds	r0, #1
 8008506:	d14c      	bne.n	80085a2 <_printf_i+0x1fe>
 8008508:	f04f 30ff 	mov.w	r0, #4294967295
 800850c:	b004      	add	sp, #16
 800850e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008512:	4835      	ldr	r0, [pc, #212]	; (80085e8 <_printf_i+0x244>)
 8008514:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008518:	6823      	ldr	r3, [r4, #0]
 800851a:	680e      	ldr	r6, [r1, #0]
 800851c:	061f      	lsls	r7, r3, #24
 800851e:	f856 5b04 	ldr.w	r5, [r6], #4
 8008522:	600e      	str	r6, [r1, #0]
 8008524:	d514      	bpl.n	8008550 <_printf_i+0x1ac>
 8008526:	07d9      	lsls	r1, r3, #31
 8008528:	bf44      	itt	mi
 800852a:	f043 0320 	orrmi.w	r3, r3, #32
 800852e:	6023      	strmi	r3, [r4, #0]
 8008530:	b91d      	cbnz	r5, 800853a <_printf_i+0x196>
 8008532:	6823      	ldr	r3, [r4, #0]
 8008534:	f023 0320 	bic.w	r3, r3, #32
 8008538:	6023      	str	r3, [r4, #0]
 800853a:	2310      	movs	r3, #16
 800853c:	e7b0      	b.n	80084a0 <_printf_i+0xfc>
 800853e:	6823      	ldr	r3, [r4, #0]
 8008540:	f043 0320 	orr.w	r3, r3, #32
 8008544:	6023      	str	r3, [r4, #0]
 8008546:	2378      	movs	r3, #120	; 0x78
 8008548:	4828      	ldr	r0, [pc, #160]	; (80085ec <_printf_i+0x248>)
 800854a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800854e:	e7e3      	b.n	8008518 <_printf_i+0x174>
 8008550:	065e      	lsls	r6, r3, #25
 8008552:	bf48      	it	mi
 8008554:	b2ad      	uxthmi	r5, r5
 8008556:	e7e6      	b.n	8008526 <_printf_i+0x182>
 8008558:	4616      	mov	r6, r2
 800855a:	e7bb      	b.n	80084d4 <_printf_i+0x130>
 800855c:	680b      	ldr	r3, [r1, #0]
 800855e:	6826      	ldr	r6, [r4, #0]
 8008560:	6960      	ldr	r0, [r4, #20]
 8008562:	1d1d      	adds	r5, r3, #4
 8008564:	600d      	str	r5, [r1, #0]
 8008566:	0635      	lsls	r5, r6, #24
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	d501      	bpl.n	8008570 <_printf_i+0x1cc>
 800856c:	6018      	str	r0, [r3, #0]
 800856e:	e002      	b.n	8008576 <_printf_i+0x1d2>
 8008570:	0671      	lsls	r1, r6, #25
 8008572:	d5fb      	bpl.n	800856c <_printf_i+0x1c8>
 8008574:	8018      	strh	r0, [r3, #0]
 8008576:	2300      	movs	r3, #0
 8008578:	6123      	str	r3, [r4, #16]
 800857a:	4616      	mov	r6, r2
 800857c:	e7ba      	b.n	80084f4 <_printf_i+0x150>
 800857e:	680b      	ldr	r3, [r1, #0]
 8008580:	1d1a      	adds	r2, r3, #4
 8008582:	600a      	str	r2, [r1, #0]
 8008584:	681e      	ldr	r6, [r3, #0]
 8008586:	6862      	ldr	r2, [r4, #4]
 8008588:	2100      	movs	r1, #0
 800858a:	4630      	mov	r0, r6
 800858c:	f7f7 fe38 	bl	8000200 <memchr>
 8008590:	b108      	cbz	r0, 8008596 <_printf_i+0x1f2>
 8008592:	1b80      	subs	r0, r0, r6
 8008594:	6060      	str	r0, [r4, #4]
 8008596:	6863      	ldr	r3, [r4, #4]
 8008598:	6123      	str	r3, [r4, #16]
 800859a:	2300      	movs	r3, #0
 800859c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085a0:	e7a8      	b.n	80084f4 <_printf_i+0x150>
 80085a2:	6923      	ldr	r3, [r4, #16]
 80085a4:	4632      	mov	r2, r6
 80085a6:	4649      	mov	r1, r9
 80085a8:	4640      	mov	r0, r8
 80085aa:	47d0      	blx	sl
 80085ac:	3001      	adds	r0, #1
 80085ae:	d0ab      	beq.n	8008508 <_printf_i+0x164>
 80085b0:	6823      	ldr	r3, [r4, #0]
 80085b2:	079b      	lsls	r3, r3, #30
 80085b4:	d413      	bmi.n	80085de <_printf_i+0x23a>
 80085b6:	68e0      	ldr	r0, [r4, #12]
 80085b8:	9b03      	ldr	r3, [sp, #12]
 80085ba:	4298      	cmp	r0, r3
 80085bc:	bfb8      	it	lt
 80085be:	4618      	movlt	r0, r3
 80085c0:	e7a4      	b.n	800850c <_printf_i+0x168>
 80085c2:	2301      	movs	r3, #1
 80085c4:	4632      	mov	r2, r6
 80085c6:	4649      	mov	r1, r9
 80085c8:	4640      	mov	r0, r8
 80085ca:	47d0      	blx	sl
 80085cc:	3001      	adds	r0, #1
 80085ce:	d09b      	beq.n	8008508 <_printf_i+0x164>
 80085d0:	3501      	adds	r5, #1
 80085d2:	68e3      	ldr	r3, [r4, #12]
 80085d4:	9903      	ldr	r1, [sp, #12]
 80085d6:	1a5b      	subs	r3, r3, r1
 80085d8:	42ab      	cmp	r3, r5
 80085da:	dcf2      	bgt.n	80085c2 <_printf_i+0x21e>
 80085dc:	e7eb      	b.n	80085b6 <_printf_i+0x212>
 80085de:	2500      	movs	r5, #0
 80085e0:	f104 0619 	add.w	r6, r4, #25
 80085e4:	e7f5      	b.n	80085d2 <_printf_i+0x22e>
 80085e6:	bf00      	nop
 80085e8:	080090f9 	.word	0x080090f9
 80085ec:	0800910a 	.word	0x0800910a

080085f0 <_sbrk_r>:
 80085f0:	b538      	push	{r3, r4, r5, lr}
 80085f2:	4d06      	ldr	r5, [pc, #24]	; (800860c <_sbrk_r+0x1c>)
 80085f4:	2300      	movs	r3, #0
 80085f6:	4604      	mov	r4, r0
 80085f8:	4608      	mov	r0, r1
 80085fa:	602b      	str	r3, [r5, #0]
 80085fc:	f7f8 ff5c 	bl	80014b8 <_sbrk>
 8008600:	1c43      	adds	r3, r0, #1
 8008602:	d102      	bne.n	800860a <_sbrk_r+0x1a>
 8008604:	682b      	ldr	r3, [r5, #0]
 8008606:	b103      	cbz	r3, 800860a <_sbrk_r+0x1a>
 8008608:	6023      	str	r3, [r4, #0]
 800860a:	bd38      	pop	{r3, r4, r5, pc}
 800860c:	20019864 	.word	0x20019864

08008610 <__sread>:
 8008610:	b510      	push	{r4, lr}
 8008612:	460c      	mov	r4, r1
 8008614:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008618:	f000 fae2 	bl	8008be0 <_read_r>
 800861c:	2800      	cmp	r0, #0
 800861e:	bfab      	itete	ge
 8008620:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008622:	89a3      	ldrhlt	r3, [r4, #12]
 8008624:	181b      	addge	r3, r3, r0
 8008626:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800862a:	bfac      	ite	ge
 800862c:	6563      	strge	r3, [r4, #84]	; 0x54
 800862e:	81a3      	strhlt	r3, [r4, #12]
 8008630:	bd10      	pop	{r4, pc}

08008632 <__swrite>:
 8008632:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008636:	461f      	mov	r7, r3
 8008638:	898b      	ldrh	r3, [r1, #12]
 800863a:	05db      	lsls	r3, r3, #23
 800863c:	4605      	mov	r5, r0
 800863e:	460c      	mov	r4, r1
 8008640:	4616      	mov	r6, r2
 8008642:	d505      	bpl.n	8008650 <__swrite+0x1e>
 8008644:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008648:	2302      	movs	r3, #2
 800864a:	2200      	movs	r2, #0
 800864c:	f000 f9b6 	bl	80089bc <_lseek_r>
 8008650:	89a3      	ldrh	r3, [r4, #12]
 8008652:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008656:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800865a:	81a3      	strh	r3, [r4, #12]
 800865c:	4632      	mov	r2, r6
 800865e:	463b      	mov	r3, r7
 8008660:	4628      	mov	r0, r5
 8008662:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008666:	f7ff b99d 	b.w	80079a4 <_write_r>

0800866a <__sseek>:
 800866a:	b510      	push	{r4, lr}
 800866c:	460c      	mov	r4, r1
 800866e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008672:	f000 f9a3 	bl	80089bc <_lseek_r>
 8008676:	1c43      	adds	r3, r0, #1
 8008678:	89a3      	ldrh	r3, [r4, #12]
 800867a:	bf15      	itete	ne
 800867c:	6560      	strne	r0, [r4, #84]	; 0x54
 800867e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008682:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008686:	81a3      	strheq	r3, [r4, #12]
 8008688:	bf18      	it	ne
 800868a:	81a3      	strhne	r3, [r4, #12]
 800868c:	bd10      	pop	{r4, pc}

0800868e <__sclose>:
 800868e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008692:	f000 b8c1 	b.w	8008818 <_close_r>
	...

08008698 <__swbuf_r>:
 8008698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800869a:	460e      	mov	r6, r1
 800869c:	4614      	mov	r4, r2
 800869e:	4605      	mov	r5, r0
 80086a0:	b118      	cbz	r0, 80086aa <__swbuf_r+0x12>
 80086a2:	6983      	ldr	r3, [r0, #24]
 80086a4:	b90b      	cbnz	r3, 80086aa <__swbuf_r+0x12>
 80086a6:	f7ff fa5f 	bl	8007b68 <__sinit>
 80086aa:	4b21      	ldr	r3, [pc, #132]	; (8008730 <__swbuf_r+0x98>)
 80086ac:	429c      	cmp	r4, r3
 80086ae:	d12b      	bne.n	8008708 <__swbuf_r+0x70>
 80086b0:	686c      	ldr	r4, [r5, #4]
 80086b2:	69a3      	ldr	r3, [r4, #24]
 80086b4:	60a3      	str	r3, [r4, #8]
 80086b6:	89a3      	ldrh	r3, [r4, #12]
 80086b8:	071a      	lsls	r2, r3, #28
 80086ba:	d52f      	bpl.n	800871c <__swbuf_r+0x84>
 80086bc:	6923      	ldr	r3, [r4, #16]
 80086be:	b36b      	cbz	r3, 800871c <__swbuf_r+0x84>
 80086c0:	6923      	ldr	r3, [r4, #16]
 80086c2:	6820      	ldr	r0, [r4, #0]
 80086c4:	1ac0      	subs	r0, r0, r3
 80086c6:	6963      	ldr	r3, [r4, #20]
 80086c8:	b2f6      	uxtb	r6, r6
 80086ca:	4283      	cmp	r3, r0
 80086cc:	4637      	mov	r7, r6
 80086ce:	dc04      	bgt.n	80086da <__swbuf_r+0x42>
 80086d0:	4621      	mov	r1, r4
 80086d2:	4628      	mov	r0, r5
 80086d4:	f000 f936 	bl	8008944 <_fflush_r>
 80086d8:	bb30      	cbnz	r0, 8008728 <__swbuf_r+0x90>
 80086da:	68a3      	ldr	r3, [r4, #8]
 80086dc:	3b01      	subs	r3, #1
 80086de:	60a3      	str	r3, [r4, #8]
 80086e0:	6823      	ldr	r3, [r4, #0]
 80086e2:	1c5a      	adds	r2, r3, #1
 80086e4:	6022      	str	r2, [r4, #0]
 80086e6:	701e      	strb	r6, [r3, #0]
 80086e8:	6963      	ldr	r3, [r4, #20]
 80086ea:	3001      	adds	r0, #1
 80086ec:	4283      	cmp	r3, r0
 80086ee:	d004      	beq.n	80086fa <__swbuf_r+0x62>
 80086f0:	89a3      	ldrh	r3, [r4, #12]
 80086f2:	07db      	lsls	r3, r3, #31
 80086f4:	d506      	bpl.n	8008704 <__swbuf_r+0x6c>
 80086f6:	2e0a      	cmp	r6, #10
 80086f8:	d104      	bne.n	8008704 <__swbuf_r+0x6c>
 80086fa:	4621      	mov	r1, r4
 80086fc:	4628      	mov	r0, r5
 80086fe:	f000 f921 	bl	8008944 <_fflush_r>
 8008702:	b988      	cbnz	r0, 8008728 <__swbuf_r+0x90>
 8008704:	4638      	mov	r0, r7
 8008706:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008708:	4b0a      	ldr	r3, [pc, #40]	; (8008734 <__swbuf_r+0x9c>)
 800870a:	429c      	cmp	r4, r3
 800870c:	d101      	bne.n	8008712 <__swbuf_r+0x7a>
 800870e:	68ac      	ldr	r4, [r5, #8]
 8008710:	e7cf      	b.n	80086b2 <__swbuf_r+0x1a>
 8008712:	4b09      	ldr	r3, [pc, #36]	; (8008738 <__swbuf_r+0xa0>)
 8008714:	429c      	cmp	r4, r3
 8008716:	bf08      	it	eq
 8008718:	68ec      	ldreq	r4, [r5, #12]
 800871a:	e7ca      	b.n	80086b2 <__swbuf_r+0x1a>
 800871c:	4621      	mov	r1, r4
 800871e:	4628      	mov	r0, r5
 8008720:	f000 f80c 	bl	800873c <__swsetup_r>
 8008724:	2800      	cmp	r0, #0
 8008726:	d0cb      	beq.n	80086c0 <__swbuf_r+0x28>
 8008728:	f04f 37ff 	mov.w	r7, #4294967295
 800872c:	e7ea      	b.n	8008704 <__swbuf_r+0x6c>
 800872e:	bf00      	nop
 8008730:	080090a8 	.word	0x080090a8
 8008734:	080090c8 	.word	0x080090c8
 8008738:	08009088 	.word	0x08009088

0800873c <__swsetup_r>:
 800873c:	4b32      	ldr	r3, [pc, #200]	; (8008808 <__swsetup_r+0xcc>)
 800873e:	b570      	push	{r4, r5, r6, lr}
 8008740:	681d      	ldr	r5, [r3, #0]
 8008742:	4606      	mov	r6, r0
 8008744:	460c      	mov	r4, r1
 8008746:	b125      	cbz	r5, 8008752 <__swsetup_r+0x16>
 8008748:	69ab      	ldr	r3, [r5, #24]
 800874a:	b913      	cbnz	r3, 8008752 <__swsetup_r+0x16>
 800874c:	4628      	mov	r0, r5
 800874e:	f7ff fa0b 	bl	8007b68 <__sinit>
 8008752:	4b2e      	ldr	r3, [pc, #184]	; (800880c <__swsetup_r+0xd0>)
 8008754:	429c      	cmp	r4, r3
 8008756:	d10f      	bne.n	8008778 <__swsetup_r+0x3c>
 8008758:	686c      	ldr	r4, [r5, #4]
 800875a:	89a3      	ldrh	r3, [r4, #12]
 800875c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008760:	0719      	lsls	r1, r3, #28
 8008762:	d42c      	bmi.n	80087be <__swsetup_r+0x82>
 8008764:	06dd      	lsls	r5, r3, #27
 8008766:	d411      	bmi.n	800878c <__swsetup_r+0x50>
 8008768:	2309      	movs	r3, #9
 800876a:	6033      	str	r3, [r6, #0]
 800876c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008770:	81a3      	strh	r3, [r4, #12]
 8008772:	f04f 30ff 	mov.w	r0, #4294967295
 8008776:	e03e      	b.n	80087f6 <__swsetup_r+0xba>
 8008778:	4b25      	ldr	r3, [pc, #148]	; (8008810 <__swsetup_r+0xd4>)
 800877a:	429c      	cmp	r4, r3
 800877c:	d101      	bne.n	8008782 <__swsetup_r+0x46>
 800877e:	68ac      	ldr	r4, [r5, #8]
 8008780:	e7eb      	b.n	800875a <__swsetup_r+0x1e>
 8008782:	4b24      	ldr	r3, [pc, #144]	; (8008814 <__swsetup_r+0xd8>)
 8008784:	429c      	cmp	r4, r3
 8008786:	bf08      	it	eq
 8008788:	68ec      	ldreq	r4, [r5, #12]
 800878a:	e7e6      	b.n	800875a <__swsetup_r+0x1e>
 800878c:	0758      	lsls	r0, r3, #29
 800878e:	d512      	bpl.n	80087b6 <__swsetup_r+0x7a>
 8008790:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008792:	b141      	cbz	r1, 80087a6 <__swsetup_r+0x6a>
 8008794:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008798:	4299      	cmp	r1, r3
 800879a:	d002      	beq.n	80087a2 <__swsetup_r+0x66>
 800879c:	4630      	mov	r0, r6
 800879e:	f000 f9a9 	bl	8008af4 <_free_r>
 80087a2:	2300      	movs	r3, #0
 80087a4:	6363      	str	r3, [r4, #52]	; 0x34
 80087a6:	89a3      	ldrh	r3, [r4, #12]
 80087a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80087ac:	81a3      	strh	r3, [r4, #12]
 80087ae:	2300      	movs	r3, #0
 80087b0:	6063      	str	r3, [r4, #4]
 80087b2:	6923      	ldr	r3, [r4, #16]
 80087b4:	6023      	str	r3, [r4, #0]
 80087b6:	89a3      	ldrh	r3, [r4, #12]
 80087b8:	f043 0308 	orr.w	r3, r3, #8
 80087bc:	81a3      	strh	r3, [r4, #12]
 80087be:	6923      	ldr	r3, [r4, #16]
 80087c0:	b94b      	cbnz	r3, 80087d6 <__swsetup_r+0x9a>
 80087c2:	89a3      	ldrh	r3, [r4, #12]
 80087c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80087c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087cc:	d003      	beq.n	80087d6 <__swsetup_r+0x9a>
 80087ce:	4621      	mov	r1, r4
 80087d0:	4630      	mov	r0, r6
 80087d2:	f000 f929 	bl	8008a28 <__smakebuf_r>
 80087d6:	89a0      	ldrh	r0, [r4, #12]
 80087d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80087dc:	f010 0301 	ands.w	r3, r0, #1
 80087e0:	d00a      	beq.n	80087f8 <__swsetup_r+0xbc>
 80087e2:	2300      	movs	r3, #0
 80087e4:	60a3      	str	r3, [r4, #8]
 80087e6:	6963      	ldr	r3, [r4, #20]
 80087e8:	425b      	negs	r3, r3
 80087ea:	61a3      	str	r3, [r4, #24]
 80087ec:	6923      	ldr	r3, [r4, #16]
 80087ee:	b943      	cbnz	r3, 8008802 <__swsetup_r+0xc6>
 80087f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80087f4:	d1ba      	bne.n	800876c <__swsetup_r+0x30>
 80087f6:	bd70      	pop	{r4, r5, r6, pc}
 80087f8:	0781      	lsls	r1, r0, #30
 80087fa:	bf58      	it	pl
 80087fc:	6963      	ldrpl	r3, [r4, #20]
 80087fe:	60a3      	str	r3, [r4, #8]
 8008800:	e7f4      	b.n	80087ec <__swsetup_r+0xb0>
 8008802:	2000      	movs	r0, #0
 8008804:	e7f7      	b.n	80087f6 <__swsetup_r+0xba>
 8008806:	bf00      	nop
 8008808:	20000028 	.word	0x20000028
 800880c:	080090a8 	.word	0x080090a8
 8008810:	080090c8 	.word	0x080090c8
 8008814:	08009088 	.word	0x08009088

08008818 <_close_r>:
 8008818:	b538      	push	{r3, r4, r5, lr}
 800881a:	4d06      	ldr	r5, [pc, #24]	; (8008834 <_close_r+0x1c>)
 800881c:	2300      	movs	r3, #0
 800881e:	4604      	mov	r4, r0
 8008820:	4608      	mov	r0, r1
 8008822:	602b      	str	r3, [r5, #0]
 8008824:	f7f8 fe13 	bl	800144e <_close>
 8008828:	1c43      	adds	r3, r0, #1
 800882a:	d102      	bne.n	8008832 <_close_r+0x1a>
 800882c:	682b      	ldr	r3, [r5, #0]
 800882e:	b103      	cbz	r3, 8008832 <_close_r+0x1a>
 8008830:	6023      	str	r3, [r4, #0]
 8008832:	bd38      	pop	{r3, r4, r5, pc}
 8008834:	20019864 	.word	0x20019864

08008838 <__sflush_r>:
 8008838:	898a      	ldrh	r2, [r1, #12]
 800883a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800883e:	4605      	mov	r5, r0
 8008840:	0710      	lsls	r0, r2, #28
 8008842:	460c      	mov	r4, r1
 8008844:	d458      	bmi.n	80088f8 <__sflush_r+0xc0>
 8008846:	684b      	ldr	r3, [r1, #4]
 8008848:	2b00      	cmp	r3, #0
 800884a:	dc05      	bgt.n	8008858 <__sflush_r+0x20>
 800884c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800884e:	2b00      	cmp	r3, #0
 8008850:	dc02      	bgt.n	8008858 <__sflush_r+0x20>
 8008852:	2000      	movs	r0, #0
 8008854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008858:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800885a:	2e00      	cmp	r6, #0
 800885c:	d0f9      	beq.n	8008852 <__sflush_r+0x1a>
 800885e:	2300      	movs	r3, #0
 8008860:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008864:	682f      	ldr	r7, [r5, #0]
 8008866:	602b      	str	r3, [r5, #0]
 8008868:	d032      	beq.n	80088d0 <__sflush_r+0x98>
 800886a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800886c:	89a3      	ldrh	r3, [r4, #12]
 800886e:	075a      	lsls	r2, r3, #29
 8008870:	d505      	bpl.n	800887e <__sflush_r+0x46>
 8008872:	6863      	ldr	r3, [r4, #4]
 8008874:	1ac0      	subs	r0, r0, r3
 8008876:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008878:	b10b      	cbz	r3, 800887e <__sflush_r+0x46>
 800887a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800887c:	1ac0      	subs	r0, r0, r3
 800887e:	2300      	movs	r3, #0
 8008880:	4602      	mov	r2, r0
 8008882:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008884:	6a21      	ldr	r1, [r4, #32]
 8008886:	4628      	mov	r0, r5
 8008888:	47b0      	blx	r6
 800888a:	1c43      	adds	r3, r0, #1
 800888c:	89a3      	ldrh	r3, [r4, #12]
 800888e:	d106      	bne.n	800889e <__sflush_r+0x66>
 8008890:	6829      	ldr	r1, [r5, #0]
 8008892:	291d      	cmp	r1, #29
 8008894:	d82c      	bhi.n	80088f0 <__sflush_r+0xb8>
 8008896:	4a2a      	ldr	r2, [pc, #168]	; (8008940 <__sflush_r+0x108>)
 8008898:	40ca      	lsrs	r2, r1
 800889a:	07d6      	lsls	r6, r2, #31
 800889c:	d528      	bpl.n	80088f0 <__sflush_r+0xb8>
 800889e:	2200      	movs	r2, #0
 80088a0:	6062      	str	r2, [r4, #4]
 80088a2:	04d9      	lsls	r1, r3, #19
 80088a4:	6922      	ldr	r2, [r4, #16]
 80088a6:	6022      	str	r2, [r4, #0]
 80088a8:	d504      	bpl.n	80088b4 <__sflush_r+0x7c>
 80088aa:	1c42      	adds	r2, r0, #1
 80088ac:	d101      	bne.n	80088b2 <__sflush_r+0x7a>
 80088ae:	682b      	ldr	r3, [r5, #0]
 80088b0:	b903      	cbnz	r3, 80088b4 <__sflush_r+0x7c>
 80088b2:	6560      	str	r0, [r4, #84]	; 0x54
 80088b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80088b6:	602f      	str	r7, [r5, #0]
 80088b8:	2900      	cmp	r1, #0
 80088ba:	d0ca      	beq.n	8008852 <__sflush_r+0x1a>
 80088bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80088c0:	4299      	cmp	r1, r3
 80088c2:	d002      	beq.n	80088ca <__sflush_r+0x92>
 80088c4:	4628      	mov	r0, r5
 80088c6:	f000 f915 	bl	8008af4 <_free_r>
 80088ca:	2000      	movs	r0, #0
 80088cc:	6360      	str	r0, [r4, #52]	; 0x34
 80088ce:	e7c1      	b.n	8008854 <__sflush_r+0x1c>
 80088d0:	6a21      	ldr	r1, [r4, #32]
 80088d2:	2301      	movs	r3, #1
 80088d4:	4628      	mov	r0, r5
 80088d6:	47b0      	blx	r6
 80088d8:	1c41      	adds	r1, r0, #1
 80088da:	d1c7      	bne.n	800886c <__sflush_r+0x34>
 80088dc:	682b      	ldr	r3, [r5, #0]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d0c4      	beq.n	800886c <__sflush_r+0x34>
 80088e2:	2b1d      	cmp	r3, #29
 80088e4:	d001      	beq.n	80088ea <__sflush_r+0xb2>
 80088e6:	2b16      	cmp	r3, #22
 80088e8:	d101      	bne.n	80088ee <__sflush_r+0xb6>
 80088ea:	602f      	str	r7, [r5, #0]
 80088ec:	e7b1      	b.n	8008852 <__sflush_r+0x1a>
 80088ee:	89a3      	ldrh	r3, [r4, #12]
 80088f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088f4:	81a3      	strh	r3, [r4, #12]
 80088f6:	e7ad      	b.n	8008854 <__sflush_r+0x1c>
 80088f8:	690f      	ldr	r7, [r1, #16]
 80088fa:	2f00      	cmp	r7, #0
 80088fc:	d0a9      	beq.n	8008852 <__sflush_r+0x1a>
 80088fe:	0793      	lsls	r3, r2, #30
 8008900:	680e      	ldr	r6, [r1, #0]
 8008902:	bf08      	it	eq
 8008904:	694b      	ldreq	r3, [r1, #20]
 8008906:	600f      	str	r7, [r1, #0]
 8008908:	bf18      	it	ne
 800890a:	2300      	movne	r3, #0
 800890c:	eba6 0807 	sub.w	r8, r6, r7
 8008910:	608b      	str	r3, [r1, #8]
 8008912:	f1b8 0f00 	cmp.w	r8, #0
 8008916:	dd9c      	ble.n	8008852 <__sflush_r+0x1a>
 8008918:	6a21      	ldr	r1, [r4, #32]
 800891a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800891c:	4643      	mov	r3, r8
 800891e:	463a      	mov	r2, r7
 8008920:	4628      	mov	r0, r5
 8008922:	47b0      	blx	r6
 8008924:	2800      	cmp	r0, #0
 8008926:	dc06      	bgt.n	8008936 <__sflush_r+0xfe>
 8008928:	89a3      	ldrh	r3, [r4, #12]
 800892a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800892e:	81a3      	strh	r3, [r4, #12]
 8008930:	f04f 30ff 	mov.w	r0, #4294967295
 8008934:	e78e      	b.n	8008854 <__sflush_r+0x1c>
 8008936:	4407      	add	r7, r0
 8008938:	eba8 0800 	sub.w	r8, r8, r0
 800893c:	e7e9      	b.n	8008912 <__sflush_r+0xda>
 800893e:	bf00      	nop
 8008940:	20400001 	.word	0x20400001

08008944 <_fflush_r>:
 8008944:	b538      	push	{r3, r4, r5, lr}
 8008946:	690b      	ldr	r3, [r1, #16]
 8008948:	4605      	mov	r5, r0
 800894a:	460c      	mov	r4, r1
 800894c:	b913      	cbnz	r3, 8008954 <_fflush_r+0x10>
 800894e:	2500      	movs	r5, #0
 8008950:	4628      	mov	r0, r5
 8008952:	bd38      	pop	{r3, r4, r5, pc}
 8008954:	b118      	cbz	r0, 800895e <_fflush_r+0x1a>
 8008956:	6983      	ldr	r3, [r0, #24]
 8008958:	b90b      	cbnz	r3, 800895e <_fflush_r+0x1a>
 800895a:	f7ff f905 	bl	8007b68 <__sinit>
 800895e:	4b14      	ldr	r3, [pc, #80]	; (80089b0 <_fflush_r+0x6c>)
 8008960:	429c      	cmp	r4, r3
 8008962:	d11b      	bne.n	800899c <_fflush_r+0x58>
 8008964:	686c      	ldr	r4, [r5, #4]
 8008966:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d0ef      	beq.n	800894e <_fflush_r+0xa>
 800896e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008970:	07d0      	lsls	r0, r2, #31
 8008972:	d404      	bmi.n	800897e <_fflush_r+0x3a>
 8008974:	0599      	lsls	r1, r3, #22
 8008976:	d402      	bmi.n	800897e <_fflush_r+0x3a>
 8008978:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800897a:	f7ff f993 	bl	8007ca4 <__retarget_lock_acquire_recursive>
 800897e:	4628      	mov	r0, r5
 8008980:	4621      	mov	r1, r4
 8008982:	f7ff ff59 	bl	8008838 <__sflush_r>
 8008986:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008988:	07da      	lsls	r2, r3, #31
 800898a:	4605      	mov	r5, r0
 800898c:	d4e0      	bmi.n	8008950 <_fflush_r+0xc>
 800898e:	89a3      	ldrh	r3, [r4, #12]
 8008990:	059b      	lsls	r3, r3, #22
 8008992:	d4dd      	bmi.n	8008950 <_fflush_r+0xc>
 8008994:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008996:	f7ff f986 	bl	8007ca6 <__retarget_lock_release_recursive>
 800899a:	e7d9      	b.n	8008950 <_fflush_r+0xc>
 800899c:	4b05      	ldr	r3, [pc, #20]	; (80089b4 <_fflush_r+0x70>)
 800899e:	429c      	cmp	r4, r3
 80089a0:	d101      	bne.n	80089a6 <_fflush_r+0x62>
 80089a2:	68ac      	ldr	r4, [r5, #8]
 80089a4:	e7df      	b.n	8008966 <_fflush_r+0x22>
 80089a6:	4b04      	ldr	r3, [pc, #16]	; (80089b8 <_fflush_r+0x74>)
 80089a8:	429c      	cmp	r4, r3
 80089aa:	bf08      	it	eq
 80089ac:	68ec      	ldreq	r4, [r5, #12]
 80089ae:	e7da      	b.n	8008966 <_fflush_r+0x22>
 80089b0:	080090a8 	.word	0x080090a8
 80089b4:	080090c8 	.word	0x080090c8
 80089b8:	08009088 	.word	0x08009088

080089bc <_lseek_r>:
 80089bc:	b538      	push	{r3, r4, r5, lr}
 80089be:	4d07      	ldr	r5, [pc, #28]	; (80089dc <_lseek_r+0x20>)
 80089c0:	4604      	mov	r4, r0
 80089c2:	4608      	mov	r0, r1
 80089c4:	4611      	mov	r1, r2
 80089c6:	2200      	movs	r2, #0
 80089c8:	602a      	str	r2, [r5, #0]
 80089ca:	461a      	mov	r2, r3
 80089cc:	f7f8 fd66 	bl	800149c <_lseek>
 80089d0:	1c43      	adds	r3, r0, #1
 80089d2:	d102      	bne.n	80089da <_lseek_r+0x1e>
 80089d4:	682b      	ldr	r3, [r5, #0]
 80089d6:	b103      	cbz	r3, 80089da <_lseek_r+0x1e>
 80089d8:	6023      	str	r3, [r4, #0]
 80089da:	bd38      	pop	{r3, r4, r5, pc}
 80089dc:	20019864 	.word	0x20019864

080089e0 <__swhatbuf_r>:
 80089e0:	b570      	push	{r4, r5, r6, lr}
 80089e2:	460e      	mov	r6, r1
 80089e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089e8:	2900      	cmp	r1, #0
 80089ea:	b096      	sub	sp, #88	; 0x58
 80089ec:	4614      	mov	r4, r2
 80089ee:	461d      	mov	r5, r3
 80089f0:	da07      	bge.n	8008a02 <__swhatbuf_r+0x22>
 80089f2:	2300      	movs	r3, #0
 80089f4:	602b      	str	r3, [r5, #0]
 80089f6:	89b3      	ldrh	r3, [r6, #12]
 80089f8:	061a      	lsls	r2, r3, #24
 80089fa:	d410      	bmi.n	8008a1e <__swhatbuf_r+0x3e>
 80089fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a00:	e00e      	b.n	8008a20 <__swhatbuf_r+0x40>
 8008a02:	466a      	mov	r2, sp
 8008a04:	f000 f8fe 	bl	8008c04 <_fstat_r>
 8008a08:	2800      	cmp	r0, #0
 8008a0a:	dbf2      	blt.n	80089f2 <__swhatbuf_r+0x12>
 8008a0c:	9a01      	ldr	r2, [sp, #4]
 8008a0e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008a12:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008a16:	425a      	negs	r2, r3
 8008a18:	415a      	adcs	r2, r3
 8008a1a:	602a      	str	r2, [r5, #0]
 8008a1c:	e7ee      	b.n	80089fc <__swhatbuf_r+0x1c>
 8008a1e:	2340      	movs	r3, #64	; 0x40
 8008a20:	2000      	movs	r0, #0
 8008a22:	6023      	str	r3, [r4, #0]
 8008a24:	b016      	add	sp, #88	; 0x58
 8008a26:	bd70      	pop	{r4, r5, r6, pc}

08008a28 <__smakebuf_r>:
 8008a28:	898b      	ldrh	r3, [r1, #12]
 8008a2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008a2c:	079d      	lsls	r5, r3, #30
 8008a2e:	4606      	mov	r6, r0
 8008a30:	460c      	mov	r4, r1
 8008a32:	d507      	bpl.n	8008a44 <__smakebuf_r+0x1c>
 8008a34:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008a38:	6023      	str	r3, [r4, #0]
 8008a3a:	6123      	str	r3, [r4, #16]
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	6163      	str	r3, [r4, #20]
 8008a40:	b002      	add	sp, #8
 8008a42:	bd70      	pop	{r4, r5, r6, pc}
 8008a44:	ab01      	add	r3, sp, #4
 8008a46:	466a      	mov	r2, sp
 8008a48:	f7ff ffca 	bl	80089e0 <__swhatbuf_r>
 8008a4c:	9900      	ldr	r1, [sp, #0]
 8008a4e:	4605      	mov	r5, r0
 8008a50:	4630      	mov	r0, r6
 8008a52:	f7ff f929 	bl	8007ca8 <_malloc_r>
 8008a56:	b948      	cbnz	r0, 8008a6c <__smakebuf_r+0x44>
 8008a58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a5c:	059a      	lsls	r2, r3, #22
 8008a5e:	d4ef      	bmi.n	8008a40 <__smakebuf_r+0x18>
 8008a60:	f023 0303 	bic.w	r3, r3, #3
 8008a64:	f043 0302 	orr.w	r3, r3, #2
 8008a68:	81a3      	strh	r3, [r4, #12]
 8008a6a:	e7e3      	b.n	8008a34 <__smakebuf_r+0xc>
 8008a6c:	4b0d      	ldr	r3, [pc, #52]	; (8008aa4 <__smakebuf_r+0x7c>)
 8008a6e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008a70:	89a3      	ldrh	r3, [r4, #12]
 8008a72:	6020      	str	r0, [r4, #0]
 8008a74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a78:	81a3      	strh	r3, [r4, #12]
 8008a7a:	9b00      	ldr	r3, [sp, #0]
 8008a7c:	6163      	str	r3, [r4, #20]
 8008a7e:	9b01      	ldr	r3, [sp, #4]
 8008a80:	6120      	str	r0, [r4, #16]
 8008a82:	b15b      	cbz	r3, 8008a9c <__smakebuf_r+0x74>
 8008a84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a88:	4630      	mov	r0, r6
 8008a8a:	f000 f8cd 	bl	8008c28 <_isatty_r>
 8008a8e:	b128      	cbz	r0, 8008a9c <__smakebuf_r+0x74>
 8008a90:	89a3      	ldrh	r3, [r4, #12]
 8008a92:	f023 0303 	bic.w	r3, r3, #3
 8008a96:	f043 0301 	orr.w	r3, r3, #1
 8008a9a:	81a3      	strh	r3, [r4, #12]
 8008a9c:	89a0      	ldrh	r0, [r4, #12]
 8008a9e:	4305      	orrs	r5, r0
 8008aa0:	81a5      	strh	r5, [r4, #12]
 8008aa2:	e7cd      	b.n	8008a40 <__smakebuf_r+0x18>
 8008aa4:	08007b01 	.word	0x08007b01

08008aa8 <memmove>:
 8008aa8:	4288      	cmp	r0, r1
 8008aaa:	b510      	push	{r4, lr}
 8008aac:	eb01 0402 	add.w	r4, r1, r2
 8008ab0:	d902      	bls.n	8008ab8 <memmove+0x10>
 8008ab2:	4284      	cmp	r4, r0
 8008ab4:	4623      	mov	r3, r4
 8008ab6:	d807      	bhi.n	8008ac8 <memmove+0x20>
 8008ab8:	1e43      	subs	r3, r0, #1
 8008aba:	42a1      	cmp	r1, r4
 8008abc:	d008      	beq.n	8008ad0 <memmove+0x28>
 8008abe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008ac2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008ac6:	e7f8      	b.n	8008aba <memmove+0x12>
 8008ac8:	4402      	add	r2, r0
 8008aca:	4601      	mov	r1, r0
 8008acc:	428a      	cmp	r2, r1
 8008ace:	d100      	bne.n	8008ad2 <memmove+0x2a>
 8008ad0:	bd10      	pop	{r4, pc}
 8008ad2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008ad6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008ada:	e7f7      	b.n	8008acc <memmove+0x24>

08008adc <__malloc_lock>:
 8008adc:	4801      	ldr	r0, [pc, #4]	; (8008ae4 <__malloc_lock+0x8>)
 8008ade:	f7ff b8e1 	b.w	8007ca4 <__retarget_lock_acquire_recursive>
 8008ae2:	bf00      	nop
 8008ae4:	2001985c 	.word	0x2001985c

08008ae8 <__malloc_unlock>:
 8008ae8:	4801      	ldr	r0, [pc, #4]	; (8008af0 <__malloc_unlock+0x8>)
 8008aea:	f7ff b8dc 	b.w	8007ca6 <__retarget_lock_release_recursive>
 8008aee:	bf00      	nop
 8008af0:	2001985c 	.word	0x2001985c

08008af4 <_free_r>:
 8008af4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008af6:	2900      	cmp	r1, #0
 8008af8:	d048      	beq.n	8008b8c <_free_r+0x98>
 8008afa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008afe:	9001      	str	r0, [sp, #4]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	f1a1 0404 	sub.w	r4, r1, #4
 8008b06:	bfb8      	it	lt
 8008b08:	18e4      	addlt	r4, r4, r3
 8008b0a:	f7ff ffe7 	bl	8008adc <__malloc_lock>
 8008b0e:	4a20      	ldr	r2, [pc, #128]	; (8008b90 <_free_r+0x9c>)
 8008b10:	9801      	ldr	r0, [sp, #4]
 8008b12:	6813      	ldr	r3, [r2, #0]
 8008b14:	4615      	mov	r5, r2
 8008b16:	b933      	cbnz	r3, 8008b26 <_free_r+0x32>
 8008b18:	6063      	str	r3, [r4, #4]
 8008b1a:	6014      	str	r4, [r2, #0]
 8008b1c:	b003      	add	sp, #12
 8008b1e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008b22:	f7ff bfe1 	b.w	8008ae8 <__malloc_unlock>
 8008b26:	42a3      	cmp	r3, r4
 8008b28:	d90b      	bls.n	8008b42 <_free_r+0x4e>
 8008b2a:	6821      	ldr	r1, [r4, #0]
 8008b2c:	1862      	adds	r2, r4, r1
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	bf04      	itt	eq
 8008b32:	681a      	ldreq	r2, [r3, #0]
 8008b34:	685b      	ldreq	r3, [r3, #4]
 8008b36:	6063      	str	r3, [r4, #4]
 8008b38:	bf04      	itt	eq
 8008b3a:	1852      	addeq	r2, r2, r1
 8008b3c:	6022      	streq	r2, [r4, #0]
 8008b3e:	602c      	str	r4, [r5, #0]
 8008b40:	e7ec      	b.n	8008b1c <_free_r+0x28>
 8008b42:	461a      	mov	r2, r3
 8008b44:	685b      	ldr	r3, [r3, #4]
 8008b46:	b10b      	cbz	r3, 8008b4c <_free_r+0x58>
 8008b48:	42a3      	cmp	r3, r4
 8008b4a:	d9fa      	bls.n	8008b42 <_free_r+0x4e>
 8008b4c:	6811      	ldr	r1, [r2, #0]
 8008b4e:	1855      	adds	r5, r2, r1
 8008b50:	42a5      	cmp	r5, r4
 8008b52:	d10b      	bne.n	8008b6c <_free_r+0x78>
 8008b54:	6824      	ldr	r4, [r4, #0]
 8008b56:	4421      	add	r1, r4
 8008b58:	1854      	adds	r4, r2, r1
 8008b5a:	42a3      	cmp	r3, r4
 8008b5c:	6011      	str	r1, [r2, #0]
 8008b5e:	d1dd      	bne.n	8008b1c <_free_r+0x28>
 8008b60:	681c      	ldr	r4, [r3, #0]
 8008b62:	685b      	ldr	r3, [r3, #4]
 8008b64:	6053      	str	r3, [r2, #4]
 8008b66:	4421      	add	r1, r4
 8008b68:	6011      	str	r1, [r2, #0]
 8008b6a:	e7d7      	b.n	8008b1c <_free_r+0x28>
 8008b6c:	d902      	bls.n	8008b74 <_free_r+0x80>
 8008b6e:	230c      	movs	r3, #12
 8008b70:	6003      	str	r3, [r0, #0]
 8008b72:	e7d3      	b.n	8008b1c <_free_r+0x28>
 8008b74:	6825      	ldr	r5, [r4, #0]
 8008b76:	1961      	adds	r1, r4, r5
 8008b78:	428b      	cmp	r3, r1
 8008b7a:	bf04      	itt	eq
 8008b7c:	6819      	ldreq	r1, [r3, #0]
 8008b7e:	685b      	ldreq	r3, [r3, #4]
 8008b80:	6063      	str	r3, [r4, #4]
 8008b82:	bf04      	itt	eq
 8008b84:	1949      	addeq	r1, r1, r5
 8008b86:	6021      	streq	r1, [r4, #0]
 8008b88:	6054      	str	r4, [r2, #4]
 8008b8a:	e7c7      	b.n	8008b1c <_free_r+0x28>
 8008b8c:	b003      	add	sp, #12
 8008b8e:	bd30      	pop	{r4, r5, pc}
 8008b90:	20019684 	.word	0x20019684

08008b94 <_realloc_r>:
 8008b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b96:	4607      	mov	r7, r0
 8008b98:	4614      	mov	r4, r2
 8008b9a:	460e      	mov	r6, r1
 8008b9c:	b921      	cbnz	r1, 8008ba8 <_realloc_r+0x14>
 8008b9e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008ba2:	4611      	mov	r1, r2
 8008ba4:	f7ff b880 	b.w	8007ca8 <_malloc_r>
 8008ba8:	b922      	cbnz	r2, 8008bb4 <_realloc_r+0x20>
 8008baa:	f7ff ffa3 	bl	8008af4 <_free_r>
 8008bae:	4625      	mov	r5, r4
 8008bb0:	4628      	mov	r0, r5
 8008bb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bb4:	f000 f848 	bl	8008c48 <_malloc_usable_size_r>
 8008bb8:	42a0      	cmp	r0, r4
 8008bba:	d20f      	bcs.n	8008bdc <_realloc_r+0x48>
 8008bbc:	4621      	mov	r1, r4
 8008bbe:	4638      	mov	r0, r7
 8008bc0:	f7ff f872 	bl	8007ca8 <_malloc_r>
 8008bc4:	4605      	mov	r5, r0
 8008bc6:	2800      	cmp	r0, #0
 8008bc8:	d0f2      	beq.n	8008bb0 <_realloc_r+0x1c>
 8008bca:	4631      	mov	r1, r6
 8008bcc:	4622      	mov	r2, r4
 8008bce:	f7fe ff25 	bl	8007a1c <memcpy>
 8008bd2:	4631      	mov	r1, r6
 8008bd4:	4638      	mov	r0, r7
 8008bd6:	f7ff ff8d 	bl	8008af4 <_free_r>
 8008bda:	e7e9      	b.n	8008bb0 <_realloc_r+0x1c>
 8008bdc:	4635      	mov	r5, r6
 8008bde:	e7e7      	b.n	8008bb0 <_realloc_r+0x1c>

08008be0 <_read_r>:
 8008be0:	b538      	push	{r3, r4, r5, lr}
 8008be2:	4d07      	ldr	r5, [pc, #28]	; (8008c00 <_read_r+0x20>)
 8008be4:	4604      	mov	r4, r0
 8008be6:	4608      	mov	r0, r1
 8008be8:	4611      	mov	r1, r2
 8008bea:	2200      	movs	r2, #0
 8008bec:	602a      	str	r2, [r5, #0]
 8008bee:	461a      	mov	r2, r3
 8008bf0:	f7f8 fc10 	bl	8001414 <_read>
 8008bf4:	1c43      	adds	r3, r0, #1
 8008bf6:	d102      	bne.n	8008bfe <_read_r+0x1e>
 8008bf8:	682b      	ldr	r3, [r5, #0]
 8008bfa:	b103      	cbz	r3, 8008bfe <_read_r+0x1e>
 8008bfc:	6023      	str	r3, [r4, #0]
 8008bfe:	bd38      	pop	{r3, r4, r5, pc}
 8008c00:	20019864 	.word	0x20019864

08008c04 <_fstat_r>:
 8008c04:	b538      	push	{r3, r4, r5, lr}
 8008c06:	4d07      	ldr	r5, [pc, #28]	; (8008c24 <_fstat_r+0x20>)
 8008c08:	2300      	movs	r3, #0
 8008c0a:	4604      	mov	r4, r0
 8008c0c:	4608      	mov	r0, r1
 8008c0e:	4611      	mov	r1, r2
 8008c10:	602b      	str	r3, [r5, #0]
 8008c12:	f7f8 fc28 	bl	8001466 <_fstat>
 8008c16:	1c43      	adds	r3, r0, #1
 8008c18:	d102      	bne.n	8008c20 <_fstat_r+0x1c>
 8008c1a:	682b      	ldr	r3, [r5, #0]
 8008c1c:	b103      	cbz	r3, 8008c20 <_fstat_r+0x1c>
 8008c1e:	6023      	str	r3, [r4, #0]
 8008c20:	bd38      	pop	{r3, r4, r5, pc}
 8008c22:	bf00      	nop
 8008c24:	20019864 	.word	0x20019864

08008c28 <_isatty_r>:
 8008c28:	b538      	push	{r3, r4, r5, lr}
 8008c2a:	4d06      	ldr	r5, [pc, #24]	; (8008c44 <_isatty_r+0x1c>)
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	4604      	mov	r4, r0
 8008c30:	4608      	mov	r0, r1
 8008c32:	602b      	str	r3, [r5, #0]
 8008c34:	f7f8 fc27 	bl	8001486 <_isatty>
 8008c38:	1c43      	adds	r3, r0, #1
 8008c3a:	d102      	bne.n	8008c42 <_isatty_r+0x1a>
 8008c3c:	682b      	ldr	r3, [r5, #0]
 8008c3e:	b103      	cbz	r3, 8008c42 <_isatty_r+0x1a>
 8008c40:	6023      	str	r3, [r4, #0]
 8008c42:	bd38      	pop	{r3, r4, r5, pc}
 8008c44:	20019864 	.word	0x20019864

08008c48 <_malloc_usable_size_r>:
 8008c48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c4c:	1f18      	subs	r0, r3, #4
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	bfbc      	itt	lt
 8008c52:	580b      	ldrlt	r3, [r1, r0]
 8008c54:	18c0      	addlt	r0, r0, r3
 8008c56:	4770      	bx	lr

08008c58 <_init>:
 8008c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c5a:	bf00      	nop
 8008c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c5e:	bc08      	pop	{r3}
 8008c60:	469e      	mov	lr, r3
 8008c62:	4770      	bx	lr

08008c64 <_fini>:
 8008c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c66:	bf00      	nop
 8008c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c6a:	bc08      	pop	{r3}
 8008c6c:	469e      	mov	lr, r3
 8008c6e:	4770      	bx	lr
